!function(e){function t(r){if(n[r])return n[r].exports;var o=n[r]={exports:{},id:r,loaded:!1};return e[r].call(o.exports,o,o.exports,t),o.loaded=!0,o.exports}var n={};return t.m=e,t.c=n,t.p="",t(0)}([function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}var o=n(1);r(o)},function(e,t,n){(function(t,n){/*!
	 * Vue.js v2.1.10
	 * (c) 2014-2017 Evan You
	 * Released under the MIT License.
	 */
"use strict";function r(e){return null==e?"":"object"==typeof e?JSON.stringify(e,null,2):String(e)}function o(e){var t=parseFloat(e);return isNaN(t)?e:t}function i(e,t){for(var n=Object.create(null),r=e.split(","),o=0;o<r.length;o++)n[r[o]]=!0;return t?function(e){return n[e.toLowerCase()]}:function(e){return n[e]}}function a(e,t){if(e.length){var n=e.indexOf(t);if(n>-1)return e.splice(n,1)}}function s(e,t){return yo.call(e,t)}function c(e){return"string"==typeof e||"number"==typeof e}function u(e){var t=Object.create(null);return function(n){var r=t[n];return r||(t[n]=e(n))}}function l(e,t){function n(n){var r=arguments.length;return r?r>1?e.apply(t,arguments):e.call(t,n):e.call(t)}return n._length=e.length,n}function d(e,t){t=t||0;for(var n=e.length-t,r=new Array(n);n--;)r[n]=e[n+t];return r}function f(e,t){for(var n in t)e[n]=t[n];return e}function p(e){return null!==e&&"object"==typeof e}function v(e){return $o.call(e)===xo}function h(e){for(var t={},n=0;n<e.length;n++)e[n]&&f(t,e[n]);return t}function m(){}function g(e){return e.reduce(function(e,t){return e.concat(t.staticKeys||[])},[]).join(",")}function y(e,t){var n=p(e),r=p(t);return n&&r?JSON.stringify(e)===JSON.stringify(t):!n&&!r&&String(e)===String(t)}function _(e,t){for(var n=0;n<e.length;n++)if(y(e[n],t))return n;return-1}function b(e){var t=(e+"").charCodeAt(0);return 36===t||95===t}function w(e,t,n,r){Object.defineProperty(e,t,{value:n,enumerable:!!r,writable:!0,configurable:!0})}function E(e){if(!Ao.test(e)){var t=e.split(".");return function(e){for(var n=0;n<t.length;n++){if(!e)return;e=e[t[n]]}return e}}}function N(e){return/native code/.test(e.toString())}function $(e){Jo.target&&Ko.push(Jo.target),Jo.target=e}function x(){Jo.target=Ko.pop()}function O(e,t){e.__proto__=t}function k(e,t,n){for(var r=0,o=n.length;r<o;r++){var i=n[r];w(e,i,t[i])}}function C(e,t){if(p(e)){var n;return s(e,"__ob__")&&e.__ob__ instanceof Qo?n=e.__ob__:Go.shouldConvert&&!Lo()&&(Array.isArray(e)||v(e))&&Object.isExtensible(e)&&!e._isVue&&(n=new Qo(e)),t&&n&&n.vmCount++,n}}function A(e,n,r,o){var i=new Jo,a=Object.getOwnPropertyDescriptor(e,n);if(!a||a.configurable!==!1){var s=a&&a.get,c=a&&a.set,u=C(r);Object.defineProperty(e,n,{enumerable:!0,configurable:!0,get:function(){var t=s?s.call(e):r;return Jo.target&&(i.depend(),u&&u.dep.depend(),Array.isArray(t)&&S(t)),t},set:function(n){var a=s?s.call(e):r;n===a||n!==n&&a!==a||("production"!==t.env.NODE_ENV&&o&&o(),c?c.call(e,n):r=n,u=C(n),i.notify())}})}}function D(e,n,r){if(Array.isArray(e))return e.length=Math.max(e.length,n),e.splice(n,1,r),r;if(s(e,n))return void(e[n]=r);var o=e.__ob__;return e._isVue||o&&o.vmCount?void("production"!==t.env.NODE_ENV&&Ho("Avoid adding reactive properties to a Vue instance or its root $data at runtime - declare it upfront in the data option.")):o?(A(o.value,n,r),o.dep.notify(),r):void(e[n]=r)}function T(e,n){var r=e.__ob__;return e._isVue||r&&r.vmCount?void("production"!==t.env.NODE_ENV&&Ho("Avoid deleting properties on a Vue instance or its root $data - just set it to null.")):void(s(e,n)&&(delete e[n],r&&r.dep.notify()))}function S(e){for(var t=void 0,n=0,r=e.length;n<r;n++)t=e[n],t&&t.__ob__&&t.__ob__.dep.depend(),Array.isArray(t)&&S(t)}function V(e,t){if(!t)return e;for(var n,r,o,i=Object.keys(t),a=0;a<i.length;a++)n=i[a],r=e[n],o=t[n],s(e,n)?v(r)&&v(o)&&V(r,o):D(e,n,o);return e}function I(e,t){return t?e?e.concat(t):Array.isArray(t)?t:[t]:e}function j(e,t){var n=Object.create(e||null);return t?f(n,t):n}function M(e){for(var t in e.components){var n=t.toLowerCase();(go(n)||Co.isReservedTag(n))&&Ho("Do not use built-in or reserved HTML elements as component id: "+t)}}function P(e){var n=e.props;if(n){var r,o,i,a={};if(Array.isArray(n))for(r=n.length;r--;)o=n[r],"string"==typeof o?(i=bo(o),a[i]={type:null}):"production"!==t.env.NODE_ENV&&Ho("props must be strings when using array syntax.");else if(v(n))for(var s in n)o=n[s],i=bo(s),a[i]=v(o)?o:{type:o};e.props=a}}function L(e){var t=e.directives;if(t)for(var n in t){var r=t[n];"function"==typeof r&&(t[n]={bind:r,update:r})}}function R(e,n,r){function o(t){var o=Xo[t]||ti;d[t]=o(e[t],n[t],r,t)}"production"!==t.env.NODE_ENV&&M(n),P(n),L(n);var i=n.extends;if(i&&(e="function"==typeof i?R(e,i.options,r):R(e,i,r)),n.mixins)for(var a=0,c=n.mixins.length;a<c;a++){var u=n.mixins[a];u.prototype instanceof Ke&&(u=u.options),e=R(e,u,r)}var l,d={};for(l in e)o(l);for(l in n)s(e,l)||o(l);return d}function F(e,n,r,o){if("string"==typeof r){var i=e[n];if(s(i,r))return i[r];var a=bo(r);if(s(i,a))return i[a];var c=wo(a);if(s(i,c))return i[c];var u=i[r]||i[a]||i[c];return"production"!==t.env.NODE_ENV&&o&&!u&&Ho("Failed to resolve "+n.slice(0,-1)+": "+r,e),u}}function U(e,n,r,o){var i=n[e],a=!s(r,e),c=r[e];if(J(Boolean,i.type)&&(a&&!s(i,"default")?c=!1:J(String,i.type)||""!==c&&c!==No(e)||(c=!0)),void 0===c){c=H(o,i,e);var u=Go.shouldConvert;Go.shouldConvert=!0,C(c),Go.shouldConvert=u}return"production"!==t.env.NODE_ENV&&B(i,e,c,o,a),c}function H(e,n,r){if(s(n,"default")){var o=n.default;return p(o)&&"production"!==t.env.NODE_ENV&&Ho('Invalid default value for prop "'+r+'": Props with type Object/Array must use a factory function to return the default value.',e),e&&e.$options.propsData&&void 0===e.$options.propsData[r]&&void 0!==e[r]?e[r]:"function"==typeof o&&n.type!==Function?o.call(e):o}}function B(e,t,n,r,o){if(e.required&&o)return void Ho('Missing required prop: "'+t+'"',r);if(null!=n||e.required){var i=e.type,a=!i||i===!0,s=[];if(i){Array.isArray(i)||(i=[i]);for(var c=0;c<i.length&&!a;c++){var u=z(n,i[c]);s.push(u.expectedType||""),a=u.valid}}if(!a)return void Ho('Invalid prop: type check failed for prop "'+t+'". Expected '+s.map(wo).join(", ")+", got "+Object.prototype.toString.call(n).slice(8,-1)+".",r);var l=e.validator;l&&(l(n)||Ho('Invalid prop: custom validator check failed for prop "'+t+'".',r))}}function z(e,t){var n,r=q(t);return n="String"===r?typeof e==(r="string"):"Number"===r?typeof e==(r="number"):"Boolean"===r?typeof e==(r="boolean"):"Function"===r?typeof e==(r="function"):"Object"===r?v(e):"Array"===r?Array.isArray(e):e instanceof t,{valid:n,expectedType:r}}function q(e){var t=e&&e.toString().match(/^\s*function (\w+)/);return t&&t[1]}function J(e,t){if(!Array.isArray(t))return q(t)===q(e);for(var n=0,r=t.length;n<r;n++)if(q(t[n])===q(e))return!0;return!1}function K(e){return new ui(void 0,void 0,void 0,String(e))}function Z(e){var t=new ui(e.tag,e.data,e.children,e.text,e.elm,e.context,e.componentOptions);return t.ns=e.ns,t.isStatic=e.isStatic,t.key=e.key,t.isCloned=!0,t}function W(e){for(var t=new Array(e.length),n=0;n<e.length;n++)t[n]=Z(e[n]);return t}function Y(e,n,r,o,i){if(e){var a=r.$options._base;if(p(e)&&(e=a.extend(e)),"function"!=typeof e)return void("production"!==t.env.NODE_ENV&&Ho("Invalid Component definition: "+String(e),r));if(!e.cid)if(e.resolved)e=e.resolved;else if(e=re(e,a,function(){r.$forceUpdate()}),!e)return;Je(e),n=n||{};var s=oe(n,e);if(e.options.functional)return G(e,s,n,r,o);var c=n.on;n.on=n.nativeOn,e.options.abstract&&(n={}),ae(n);var u=e.options.name||i,l=new ui("vue-component-"+e.cid+(u?"-"+u:""),n,void 0,void 0,void 0,r,{Ctor:e,propsData:s,listeners:c,tag:i,children:o});return l}}function G(e,t,n,r,o){var i={},a=e.options.props;if(a)for(var s in a)i[s]=U(s,a,t);var c=Object.create(r),u=function(e,t,n,r){return he(c,e,t,n,r,!0)},l=e.options.render.call(null,u,{props:i,data:n,parent:r,children:o,slots:function(){return be(o,r)}});return l instanceof ui&&(l.functionalContext=r,n.slot&&((l.data||(l.data={})).slot=n.slot)),l}function Q(e,t,n,r){var o=e.componentOptions,i={_isComponent:!0,parent:t,propsData:o.propsData,_componentTag:o.tag,_parentVnode:e,_parentListeners:o.listeners,_renderChildren:o.children,_parentElm:n||null,_refElm:r||null},a=e.data.inlineTemplate;return a&&(i.render=a.render,i.staticRenderFns=a.staticRenderFns),new o.Ctor(i)}function X(e,t,n,r){if(!e.componentInstance||e.componentInstance._isDestroyed){var o=e.componentInstance=Q(e,yi,n,r);o.$mount(t?e.elm:void 0,t)}else if(e.data.keepAlive){var i=e;ee(i,i)}}function ee(e,t){var n=t.componentOptions,r=t.componentInstance=e.componentInstance;r._updateFromParent(n.propsData,n.listeners,t,n.children)}function te(e){e.componentInstance._isMounted||(e.componentInstance._isMounted=!0,Ce(e.componentInstance,"mounted")),e.data.keepAlive&&(e.componentInstance._inactive=!1,Ce(e.componentInstance,"activated"))}function ne(e){e.componentInstance._isDestroyed||(e.data.keepAlive?(e.componentInstance._inactive=!0,Ce(e.componentInstance,"deactivated")):e.componentInstance.$destroy())}function re(e,n,r){if(!e.requested){e.requested=!0;var o=e.pendingCallbacks=[r],i=!0,a=function(t){if(p(t)&&(t=n.extend(t)),e.resolved=t,!i)for(var r=0,a=o.length;r<a;r++)o[r](t)},s=function(n){"production"!==t.env.NODE_ENV&&Ho("Failed to resolve async component: "+String(e)+(n?"\nReason: "+n:""))},c=e(a,s);return c&&"function"==typeof c.then&&!e.resolved&&c.then(a,s),i=!1,e.resolved}e.pendingCallbacks.push(r)}function oe(e,t){var n=t.options.props;if(n){var r={},o=e.attrs,i=e.props,a=e.domProps;if(o||i||a)for(var s in n){var c=No(s);ie(r,i,s,c,!0)||ie(r,o,s,c)||ie(r,a,s,c)}return r}}function ie(e,t,n,r,o){if(t){if(s(t,n))return e[n]=t[n],o||delete t[n],!0;if(s(t,r))return e[n]=t[r],o||delete t[r],!0}return!1}function ae(e){e.hook||(e.hook={});for(var t=0;t<vi.length;t++){var n=vi[t],r=e.hook[n],o=pi[n];e.hook[n]=r?se(o,r):o}}function se(e,t){return function(n,r,o,i){e(n,r,o,i),t(n,r,o,i)}}function ce(e,t,n,r){r+=t;var o=e.__injected||(e.__injected={});if(!o[r]){o[r]=!0;var i=e[t];i?e[t]=function(){i.apply(this,arguments),n.apply(this,arguments)}:e[t]=n}}function ue(e){var t={fn:e,invoker:function(){var e=arguments,n=t.fn;if(Array.isArray(n))for(var r=0;r<n.length;r++)n[r].apply(null,e);else n.apply(null,arguments)}};return t}function le(e,n,r,o,i){var a,s,c,u;for(a in e)s=e[a],c=n[a],u=hi(a),s?c?s!==c&&(c.fn=s,e[a]=c):(s.invoker||(s=e[a]=ue(s)),r(u.name,s.invoker,u.once,u.capture)):"production"!==t.env.NODE_ENV&&Ho('Invalid handler for event "'+u.name+'": got '+String(s),i);for(a in n)e[a]||(u=hi(a),o(u.name,n[a].invoker,u.capture))}function de(e){for(var t=0;t<e.length;t++)if(Array.isArray(e[t]))return Array.prototype.concat.apply([],e);return e}function fe(e){return c(e)?[K(e)]:Array.isArray(e)?pe(e):void 0}function pe(e,t){var n,r,o,i=[];for(n=0;n<e.length;n++)r=e[n],null!=r&&"boolean"!=typeof r&&(o=i[i.length-1],Array.isArray(r)?i.push.apply(i,pe(r,(t||"")+"_"+n)):c(r)?o&&o.text?o.text+=String(r):""!==r&&i.push(K(r)):r.text&&o&&o.text?i[i.length-1]=K(o.text+r.text):(r.tag&&null==r.key&&null!=t&&(r.key="__vlist"+t+"_"+n+"__"),i.push(r)));return i}function ve(e){return e&&e.filter(function(e){return e&&e.componentOptions})[0]}function he(e,t,n,r,o,i){return(Array.isArray(n)||c(n))&&(o=r,r=n,n=void 0),i&&(o=gi),me(e,t,n,r,o)}function me(e,n,r,o,i){if(r&&r.__ob__)return"production"!==t.env.NODE_ENV&&Ho("Avoid using observed data object as vnode data: "+JSON.stringify(r)+"\nAlways create fresh vnode data objects in each render!",e),fi();if(!n)return fi();Array.isArray(o)&&"function"==typeof o[0]&&(r=r||{},r.scopedSlots={default:o[0]},o.length=0),i===gi?o=fe(o):i===mi&&(o=de(o));var a,s;if("string"==typeof n){var c;s=Co.getTagNamespace(n),a=Co.isReservedTag(n)?new ui(Co.parsePlatformTagName(n),r,o,void 0,void 0,e):(c=F(e.$options,"components",n))?Y(c,r,e,o,n):new ui(n,r,o,void 0,void 0,e)}else a=Y(n,r,e,o);return a?(s&&ge(a,s),a):fi()}function ge(e,t){if(e.ns=t,"foreignObject"!==e.tag&&e.children)for(var n=0,r=e.children.length;n<r;n++){var o=e.children[n];o.tag&&!o.ns&&ge(o,t)}}function ye(e){e.$vnode=null,e._vnode=null,e._staticTrees=null;var t=e.$options._parentVnode,n=t&&t.context;e.$slots=be(e.$options._renderChildren,n),e.$scopedSlots={},e._c=function(t,n,r,o){return he(e,t,n,r,o,!1)},e.$createElement=function(t,n,r,o){return he(e,t,n,r,o,!0)}}function _e(e){function n(e,t,n){if(Array.isArray(e))for(var r=0;r<e.length;r++)e[r]&&"string"!=typeof e[r]&&i(e[r],t+"_"+r,n);else i(e,t,n)}function i(e,t,n){e.isStatic=!0,e.key=t,e.isOnce=n}e.prototype.$nextTick=function(e){return Fo(e,this)},e.prototype._render=function(){var e=this,n=e.$options,r=n.render,o=n.staticRenderFns,i=n._parentVnode;if(e._isMounted)for(var a in e.$slots)e.$slots[a]=W(e.$slots[a]);i&&i.data.scopedSlots&&(e.$scopedSlots=i.data.scopedSlots),o&&!e._staticTrees&&(e._staticTrees=[]),e.$vnode=i;var s;try{s=r.call(e._renderProxy,e.$createElement)}catch(n){if(!Co.errorHandler)throw"production"!==t.env.NODE_ENV&&Ho("Error when rendering "+Uo(e)+":"),n;Co.errorHandler.call(null,n,e),s=e._vnode}return s instanceof ui||("production"!==t.env.NODE_ENV&&Array.isArray(s)&&Ho("Multiple root nodes returned from render function. Render function should return a single root node.",e),s=fi()),s.parent=i,s},e.prototype._s=r,e.prototype._v=K,e.prototype._n=o,e.prototype._e=fi,e.prototype._q=y,e.prototype._i=_,e.prototype._m=function(e,t){var r=this._staticTrees[e];return r&&!t?Array.isArray(r)?W(r):Z(r):(r=this._staticTrees[e]=this.$options.staticRenderFns[e].call(this._renderProxy),n(r,"__static__"+e,!1),r)},e.prototype._o=function(e,t,r){return n(e,"__once__"+t+(r?"_"+r:""),!0),e},e.prototype._f=function(e){return F(this.$options,"filters",e,!0)||ko},e.prototype._l=function(e,t){var n,r,o,i,a;if(Array.isArray(e)||"string"==typeof e)for(n=new Array(e.length),r=0,o=e.length;r<o;r++)n[r]=t(e[r],r);else if("number"==typeof e)for(n=new Array(e),r=0;r<e;r++)n[r]=t(r+1,r);else if(p(e))for(i=Object.keys(e),n=new Array(i.length),r=0,o=i.length;r<o;r++)a=i[r],n[r]=t(e[a],a,r);return n},e.prototype._t=function(e,n,r,o){var i=this.$scopedSlots[e];if(i)return r=r||{},o&&f(r,o),i(r)||n;var a=this.$slots[e];return a&&"production"!==t.env.NODE_ENV&&(a._rendered&&Ho('Duplicate presence of slot "'+e+'" found in the same render tree - this will likely cause render errors.',this),a._rendered=!0),a||n},e.prototype._b=function(e,n,r,o){if(r)if(p(r)){Array.isArray(r)&&(r=h(r));for(var i in r)if("class"===i||"style"===i)e[i]=r[i];else{var a=e.attrs&&e.attrs.type,s=o||Co.mustUseProp(n,a,i)?e.domProps||(e.domProps={}):e.attrs||(e.attrs={});s[i]=r[i]}}else"production"!==t.env.NODE_ENV&&Ho("v-bind without argument expects an Object or Array value",this);return e},e.prototype._k=function(e,t,n){var r=Co.keyCodes[t]||n;return Array.isArray(r)?r.indexOf(e)===-1:r!==e}}function be(e,t){var n={};if(!e)return n;for(var r,o,i=[],a=0,s=e.length;a<s;a++)if(o=e[a],(o.context===t||o.functionalContext===t)&&o.data&&(r=o.data.slot)){var c=n[r]||(n[r]=[]);"template"===o.tag?c.push.apply(c,o.children):c.push(o)}else i.push(o);return i.length&&(1!==i.length||" "!==i[0].text&&!i[0].isComment)&&(n.default=i),n}function we(e){e._events=Object.create(null),e._hasHookEvent=!1;var t=e.$options._parentListeners;t&&$e(e,t)}function Ee(e,t,n){n?di.$once(e,t):di.$on(e,t)}function Ne(e,t){di.$off(e,t)}function $e(e,t,n){di=e,le(t,n||{},Ee,Ne,e)}function xe(e){var t=/^hook:/;e.prototype.$on=function(e,n){var r=this;return(r._events[e]||(r._events[e]=[])).push(n),t.test(e)&&(r._hasHookEvent=!0),r},e.prototype.$once=function(e,t){function n(){r.$off(e,n),t.apply(r,arguments)}var r=this;return n.fn=t,r.$on(e,n),r},e.prototype.$off=function(e,t){var n=this;if(!arguments.length)return n._events=Object.create(null),n;var r=n._events[e];if(!r)return n;if(1===arguments.length)return n._events[e]=null,n;for(var o,i=r.length;i--;)if(o=r[i],o===t||o.fn===t){r.splice(i,1);break}return n},e.prototype.$emit=function(e){var t=this,n=t._events[e];if(n){n=n.length>1?d(n):n;for(var r=d(arguments,1),o=0,i=n.length;o<i;o++)n[o].apply(t,r)}return t}}function Oe(e){var t=e.$options,n=t.parent;if(n&&!t.abstract){for(;n.$options.abstract&&n.$parent;)n=n.$parent;n.$children.push(e)}e.$parent=n,e.$root=n?n.$root:e,e.$children=[],e.$refs={},e._watcher=null,e._inactive=!1,e._isMounted=!1,e._isDestroyed=!1,e._isBeingDestroyed=!1}function ke(e){e.prototype._mount=function(e,n){var r=this;return r.$el=e,r.$options.render||(r.$options.render=fi,"production"!==t.env.NODE_ENV&&(r.$options.template&&"#"!==r.$options.template.charAt(0)?Ho("You are using the runtime-only build of Vue where the template option is not available. Either pre-compile the templates into render functions, or use the compiler-included build.",r):Ho("Failed to mount component: template or render function not defined.",r))),Ce(r,"beforeMount"),r._watcher=new Oi(r,function(){r._update(r._render(),n)},m),n=!1,null==r.$vnode&&(r._isMounted=!0,Ce(r,"mounted")),r},e.prototype._update=function(e,t){var n=this;n._isMounted&&Ce(n,"beforeUpdate");var r=n.$el,o=n._vnode,i=yi;yi=n,n._vnode=e,o?n.$el=n.__patch__(o,e):n.$el=n.__patch__(n.$el,e,t,!1,n.$options._parentElm,n.$options._refElm),yi=i,r&&(r.__vue__=null),n.$el&&(n.$el.__vue__=n),n.$vnode&&n.$parent&&n.$vnode===n.$parent._vnode&&(n.$parent.$el=n.$el)},e.prototype._updateFromParent=function(e,n,r,o){var i=this,a=!(!i.$options._renderChildren&&!o);if(i.$options._parentVnode=r,i.$vnode=r,i._vnode&&(i._vnode.parent=r),i.$options._renderChildren=o,e&&i.$options.props){Go.shouldConvert=!1,"production"!==t.env.NODE_ENV&&(Go.isSettingProps=!0);for(var s=i.$options._propKeys||[],c=0;c<s.length;c++){var u=s[c];i[u]=U(u,i.$options.props,e,i)}Go.shouldConvert=!0,"production"!==t.env.NODE_ENV&&(Go.isSettingProps=!1),i.$options.propsData=e}if(n){var l=i.$options._parentListeners;i.$options._parentListeners=n,$e(i,n,l)}a&&(i.$slots=be(o,r.context),i.$forceUpdate())},e.prototype.$forceUpdate=function(){var e=this;e._watcher&&e._watcher.update()},e.prototype.$destroy=function(){var e=this;if(!e._isBeingDestroyed){Ce(e,"beforeDestroy"),e._isBeingDestroyed=!0;var t=e.$parent;!t||t._isBeingDestroyed||e.$options.abstract||a(t.$children,e),e._watcher&&e._watcher.teardown();for(var n=e._watchers.length;n--;)e._watchers[n].teardown();e._data.__ob__&&e._data.__ob__.vmCount--,e._isDestroyed=!0,Ce(e,"destroyed"),e.$off(),e.$el&&(e.$el.__vue__=null),e.__patch__(e._vnode,null)}}}function Ce(e,t){var n=e.$options[t];if(n)for(var r=0,o=n.length;r<o;r++)n[r].call(e);e._hasHookEvent&&e.$emit("hook:"+t)}function Ae(){_i.length=0,bi={},"production"!==t.env.NODE_ENV&&(wi={}),Ei=Ni=!1}function De(){Ni=!0;var e,n,r;for(_i.sort(function(e,t){return e.id-t.id}),$i=0;$i<_i.length;$i++)if(e=_i[$i],n=e.id,bi[n]=null,e.run(),"production"!==t.env.NODE_ENV&&null!=bi[n]&&(wi[n]=(wi[n]||0)+1,wi[n]>Co._maxUpdateCount)){Ho("You may have an infinite update loop "+(e.user?'in watcher with expression "'+e.expression+'"':"in a component render function."),e.vm);break}for($i=_i.length;$i--;)e=_i[$i],r=e.vm,r._watcher===e&&r._isMounted&&Ce(r,"updated");Ro&&Co.devtools&&Ro.emit("flush"),Ae()}function Te(e){var t=e.id;if(null==bi[t]){if(bi[t]=!0,Ni){for(var n=_i.length-1;n>=0&&_i[n].id>e.id;)n--;_i.splice(Math.max(n,$i)+1,0,e)}else _i.push(e);Ei||(Ei=!0,Fo(De))}}function Se(e){ki.clear(),Ve(e,ki)}function Ve(e,t){var n,r,o=Array.isArray(e);if((o||p(e))&&Object.isExtensible(e)){if(e.__ob__){var i=e.__ob__.dep.id;if(t.has(i))return;t.add(i)}if(o)for(n=e.length;n--;)Ve(e[n],t);else for(r=Object.keys(e),n=r.length;n--;)Ve(e[r[n]],t)}}function Ie(e){e._watchers=[];var t=e.$options;t.props&&je(e,t.props),t.methods&&Re(e,t.methods),t.data?Me(e):C(e._data={},!0),t.computed&&Pe(e,t.computed),t.watch&&Fe(e,t.watch)}function je(e,n){var r=e.$options.propsData||{},o=e.$options._propKeys=Object.keys(n),i=!e.$parent;Go.shouldConvert=i;for(var a=function(i){var a=o[i];"production"!==t.env.NODE_ENV?(Ci[a]&&Ho('"'+a+'" is a reserved attribute and cannot be used as component prop.',e),A(e,a,U(a,n,r,e),function(){e.$parent&&!Go.isSettingProps&&Ho("Avoid mutating a prop directly since the value will be overwritten whenever the parent component re-renders. Instead, use a data or computed property based on the prop's value. Prop being mutated: \""+a+'"',e)})):A(e,a,U(a,n,r,e))},s=0;s<o.length;s++)a(s);Go.shouldConvert=!0}function Me(e){var n=e.$options.data;n=e._data="function"==typeof n?n.call(e):n||{},v(n)||(n={},"production"!==t.env.NODE_ENV&&Ho("data functions should return an object:\nhttps://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function",e));for(var r=Object.keys(n),o=e.$options.props,i=r.length;i--;)o&&s(o,r[i])?"production"!==t.env.NODE_ENV&&Ho('The data property "'+r[i]+'" is already declared as a prop. Use prop default value instead.',e):Be(e,r[i]);C(n,!0)}function Pe(e,n){for(var r in n){"production"!==t.env.NODE_ENV&&r in e&&Ho('existing instance property "'+r+'" will be overwritten by a computed property with the same name.',e);var o=n[r];"function"==typeof o?(Ai.get=Le(o,e),Ai.set=m):(Ai.get=o.get?o.cache!==!1?Le(o.get,e):l(o.get,e):m,Ai.set=o.set?l(o.set,e):m),Object.defineProperty(e,r,Ai)}}function Le(e,t){var n=new Oi(t,e,m,{lazy:!0});return function(){return n.dirty&&n.evaluate(),Jo.target&&n.depend(),n.value}}function Re(e,n){for(var r in n)e[r]=null==n[r]?m:l(n[r],e),"production"!==t.env.NODE_ENV&&null==n[r]&&Ho('method "'+r+'" has an undefined value in the component definition. Did you reference the function correctly?',e)}function Fe(e,t){for(var n in t){var r=t[n];if(Array.isArray(r))for(var o=0;o<r.length;o++)Ue(e,n,r[o]);else Ue(e,n,r)}}function Ue(e,t,n){var r;v(n)&&(r=n,n=n.handler),"string"==typeof n&&(n=e[n]),e.$watch(t,n,r)}function He(e){var n={};n.get=function(){return this._data},"production"!==t.env.NODE_ENV&&(n.set=function(e){Ho("Avoid replacing instance root $data. Use nested data properties instead.",this)}),Object.defineProperty(e.prototype,"$data",n),e.prototype.$set=D,e.prototype.$delete=T,e.prototype.$watch=function(e,t,n){var r=this;n=n||{},n.user=!0;var o=new Oi(r,e,t,n);return n.immediate&&t.call(r,o.value),function(){o.teardown()}}}function Be(e,t){b(t)||Object.defineProperty(e,t,{configurable:!0,enumerable:!0,get:function(){return e._data[t]},set:function(n){e._data[t]=n}})}function ze(e){e.prototype._init=function(e){var n=this;n._uid=Di++,n._isVue=!0,e&&e._isComponent?qe(n,e):n.$options=R(Je(n.constructor),e||{},n),"production"!==t.env.NODE_ENV?ei(n):n._renderProxy=n,n._self=n,Oe(n),we(n),ye(n),Ce(n,"beforeCreate"),Ie(n),Ce(n,"created"),n.$options.el&&n.$mount(n.$options.el)}}function qe(e,t){var n=e.$options=Object.create(e.constructor.options);n.parent=t.parent,n.propsData=t.propsData,n._parentVnode=t._parentVnode,n._parentListeners=t._parentListeners,n._renderChildren=t._renderChildren,n._componentTag=t._componentTag,n._parentElm=t._parentElm,n._refElm=t._refElm,t.render&&(n.render=t.render,n.staticRenderFns=t.staticRenderFns)}function Je(e){var t=e.options;if(e.super){var n=e.super.options,r=e.superOptions,o=e.extendOptions;n!==r&&(e.superOptions=n,o.render=t.render,o.staticRenderFns=t.staticRenderFns,o._scopeId=t._scopeId,t=e.options=R(n,o),t.name&&(t.components[t.name]=e))}return t}function Ke(e){"production"===t.env.NODE_ENV||this instanceof Ke||Ho("Vue is a constructor and should be called with the `new` keyword"),this._init(e)}function Ze(e){e.use=function(e){if(!e.installed){var t=d(arguments,1);return t.unshift(this),"function"==typeof e.install?e.install.apply(e,t):e.apply(null,t),e.installed=!0,this}}}function We(e){e.mixin=function(e){this.options=R(this.options,e)}}function Ye(e){e.cid=0;var n=1;e.extend=function(e){e=e||{};var r=this,o=r.cid,i=e._Ctor||(e._Ctor={});if(i[o])return i[o];var a=e.name||r.options.name;"production"!==t.env.NODE_ENV&&(/^[a-zA-Z][\w-]*$/.test(a)||Ho('Invalid component name: "'+a+'". Component names can only contain alphanumeric characters and the hyphen, and must start with a letter.'));var s=function(e){this._init(e)};return s.prototype=Object.create(r.prototype),s.prototype.constructor=s,s.cid=n++,s.options=R(r.options,e),s.super=r,s.extend=r.extend,s.mixin=r.mixin,s.use=r.use,Co._assetTypes.forEach(function(e){s[e]=r[e]}),a&&(s.options.components[a]=s),s.superOptions=r.options,s.extendOptions=e,i[o]=s,s}}function Ge(e){Co._assetTypes.forEach(function(n){e[n]=function(e,r){return r?("production"!==t.env.NODE_ENV&&"component"===n&&Co.isReservedTag(e)&&Ho("Do not use built-in or reserved HTML elements as component id: "+e),"component"===n&&v(r)&&(r.name=r.name||e,r=this.options._base.extend(r)),"directive"===n&&"function"==typeof r&&(r={bind:r,update:r}),this.options[n+"s"][e]=r,r):this.options[n+"s"][e]}})}function Qe(e){return e&&(e.Ctor.options.name||e.tag)}function Xe(e,t){return"string"==typeof e?e.split(",").indexOf(t)>-1:e.test(t)}function et(e,t){for(var n in e){var r=e[n];if(r){var o=Qe(r.componentOptions);o&&!t(o)&&(tt(r),e[n]=null)}}}function tt(e){e&&(e.componentInstance._inactive||Ce(e.componentInstance,"deactivated"),e.componentInstance.$destroy())}function nt(e){var n={};n.get=function(){return Co},"production"!==t.env.NODE_ENV&&(n.set=function(){Ho("Do not replace the Vue.config object, set individual fields instead.")}),Object.defineProperty(e,"config",n),e.util=ni,e.set=D,e.delete=T,e.nextTick=Fo,e.options=Object.create(null),Co._assetTypes.forEach(function(t){e.options[t+"s"]=Object.create(null)}),e.options._base=e,f(e.options.components,Vi),Ze(e),We(e),Ye(e),Ge(e)}function rt(e){for(var t=e.data,n=e,r=e;r.componentInstance;)r=r.componentInstance._vnode,r.data&&(t=ot(r.data,t));for(;n=n.parent;)n.data&&(t=ot(t,n.data));return it(t)}function ot(e,t){return{staticClass:at(e.staticClass,t.staticClass),class:e.class?[e.class,t.class]:t.class}}function it(e){var t=e.class,n=e.staticClass;return n||t?at(n,st(t)):""}function at(e,t){return e?t?e+" "+t:e:t||""}function st(e){var t="";if(!e)return t;if("string"==typeof e)return e;if(Array.isArray(e)){for(var n,r=0,o=e.length;r<o;r++)e[r]&&(n=st(e[r]))&&(t+=n+" ");return t.slice(0,-1)}if(p(e)){for(var i in e)e[i]&&(t+=i+" ");return t.slice(0,-1)}return t}function ct(e){return Ji(e)?"svg":"math"===e?"math":void 0}function ut(e){if(!To)return!0;if(Zi(e))return!1;if(e=e.toLowerCase(),null!=Wi[e])return Wi[e];var t=document.createElement(e);return e.indexOf("-")>-1?Wi[e]=t.constructor===window.HTMLUnknownElement||t.constructor===window.HTMLElement:Wi[e]=/HTMLUnknownElement/.test(t.toString())}function lt(e){if("string"==typeof e){var n=e;if(e=document.querySelector(e),!e)return"production"!==t.env.NODE_ENV&&Ho("Cannot find element: "+n),document.createElement("div")}return e}function dt(e,t){var n=document.createElement(e);return"select"!==e?n:(t.data&&t.data.attrs&&"multiple"in t.data.attrs&&n.setAttribute("multiple","multiple"),n)}function ft(e,t){return document.createElementNS(zi[e],t)}function pt(e){return document.createTextNode(e)}function vt(e){return document.createComment(e)}function ht(e,t,n){e.insertBefore(t,n)}function mt(e,t){e.removeChild(t)}function gt(e,t){e.appendChild(t)}function yt(e){return e.parentNode}function _t(e){return e.nextSibling}function bt(e){return e.tagName}function wt(e,t){e.textContent=t}function Et(e,t,n){e.setAttribute(t,n)}function Nt(e,t){var n=e.data.ref;if(n){var r=e.context,o=e.componentInstance||e.elm,i=r.$refs;t?Array.isArray(i[n])?a(i[n],o):i[n]===o&&(i[n]=void 0):e.data.refInFor?Array.isArray(i[n])&&i[n].indexOf(o)<0?i[n].push(o):i[n]=[o]:i[n]=o}}function $t(e){return null==e}function xt(e){return null!=e}function Ot(e,t){return e.key===t.key&&e.tag===t.tag&&e.isComment===t.isComment&&!e.data==!t.data}function kt(e,t,n){var r,o,i={};for(r=t;r<=n;++r)o=e[r].key,xt(o)&&(i[o]=r);return i}function Ct(e){function n(e){return new ui(A.tagName(e).toLowerCase(),{},[],void 0,e)}function r(e,t){function n(){0===--n.listeners&&o(e)}return n.listeners=t,n}function o(e){var t=A.parentNode(e);t&&A.removeChild(t,e)}function a(e,n,r,o,i){if(e.isRootInsert=!i,!s(e,n,r,o)){var a=e.data,c=e.children,u=e.tag;xt(u)?("production"!==t.env.NODE_ENV&&(a&&a.pre&&D++,D||e.ns||Co.ignoredElements.length&&Co.ignoredElements.indexOf(u)>-1||!Co.isUnknownElement(u)||Ho("Unknown custom element: <"+u+'> - did you register the component correctly? For recursive components, make sure to provide the "name" option.',e.context)),e.elm=e.ns?A.createElementNS(e.ns,u):A.createElement(u,e),h(e),f(e,c,n),xt(a)&&v(e,n),d(r,e.elm,o),"production"!==t.env.NODE_ENV&&a&&a.pre&&D--):e.isComment?(e.elm=A.createComment(e.text),d(r,e.elm,o)):(e.elm=A.createTextNode(e.text),d(r,e.elm,o))}}function s(e,t,n,r){var o=e.data;if(xt(o)){var i=xt(e.componentInstance)&&o.keepAlive;if(xt(o=o.hook)&&xt(o=o.init)&&o(e,!1,n,r),xt(e.componentInstance))return u(e,t),i&&l(e,t,n,r),!0}}function u(e,t){e.data.pendingInsert&&t.push.apply(t,e.data.pendingInsert),e.elm=e.componentInstance.$el,p(e)?(v(e,t),h(e)):(Nt(e),t.push(e))}function l(e,t,n,r){for(var o,i=e;i.componentInstance;)if(i=i.componentInstance._vnode,xt(o=i.data)&&xt(o=o.transition)){for(o=0;o<k.activate.length;++o)k.activate[o](Qi,i);t.push(i);break}d(n,e.elm,r)}function d(e,t,n){e&&(n?A.insertBefore(e,t,n):A.appendChild(e,t))}function f(e,t,n){if(Array.isArray(t))for(var r=0;r<t.length;++r)a(t[r],n,e.elm,null,!0);else c(e.text)&&A.appendChild(e.elm,A.createTextNode(e.text))}function p(e){for(;e.componentInstance;)e=e.componentInstance._vnode;return xt(e.tag)}function v(e,t){for(var n=0;n<k.create.length;++n)k.create[n](Qi,e);x=e.data.hook,xt(x)&&(x.create&&x.create(Qi,e),x.insert&&t.push(e))}function h(e){var t;xt(t=e.context)&&xt(t=t.$options._scopeId)&&A.setAttribute(e.elm,t,""),xt(t=yi)&&t!==e.context&&xt(t=t.$options._scopeId)&&A.setAttribute(e.elm,t,"")}function m(e,t,n,r,o,i){for(;r<=o;++r)a(n[r],i,e,t)}function g(e){var t,n,r=e.data;if(xt(r))for(xt(t=r.hook)&&xt(t=t.destroy)&&t(e),t=0;t<k.destroy.length;++t)k.destroy[t](e);if(xt(t=e.children))for(n=0;n<e.children.length;++n)g(e.children[n])}function y(e,t,n,r){for(;n<=r;++n){var i=t[n];xt(i)&&(xt(i.tag)?(_(i),g(i)):o(i.elm))}}function _(e,t){if(t||xt(e.data)){var n=k.remove.length+1;for(t?t.listeners+=n:t=r(e.elm,n),xt(x=e.componentInstance)&&xt(x=x._vnode)&&xt(x.data)&&_(x,t),x=0;x<k.remove.length;++x)k.remove[x](e,t);xt(x=e.data.hook)&&xt(x=x.remove)?x(e,t):t()}else o(e.elm)}function b(e,n,r,o,i){for(var s,c,u,l,d=0,f=0,p=n.length-1,v=n[0],h=n[p],g=r.length-1,_=r[0],b=r[g],E=!i;d<=p&&f<=g;)$t(v)?v=n[++d]:$t(h)?h=n[--p]:Ot(v,_)?(w(v,_,o),v=n[++d],_=r[++f]):Ot(h,b)?(w(h,b,o),h=n[--p],b=r[--g]):Ot(v,b)?(w(v,b,o),E&&A.insertBefore(e,v.elm,A.nextSibling(h.elm)),v=n[++d],b=r[--g]):Ot(h,_)?(w(h,_,o),E&&A.insertBefore(e,h.elm,v.elm),h=n[--p],_=r[++f]):($t(s)&&(s=kt(n,d,p)),c=xt(_.key)?s[_.key]:null,$t(c)?(a(_,o,e,v.elm),_=r[++f]):(u=n[c],"production"===t.env.NODE_ENV||u||Ho("It seems there are duplicate keys that is causing an update error. Make sure each v-for item has a unique key."),Ot(u,_)?(w(u,_,o),n[c]=void 0,E&&A.insertBefore(e,_.elm,v.elm),_=r[++f]):(a(_,o,e,v.elm),_=r[++f])));d>p?(l=$t(r[g+1])?null:r[g+1].elm,m(e,l,r,f,g,o)):f>g&&y(e,n,d,p)}function w(e,t,n,r){if(e!==t){if(t.isStatic&&e.isStatic&&t.key===e.key&&(t.isCloned||t.isOnce))return t.elm=e.elm,void(t.componentInstance=e.componentInstance);var o,i=t.data,a=xt(i);a&&xt(o=i.hook)&&xt(o=o.prepatch)&&o(e,t);var s=t.elm=e.elm,c=e.children,u=t.children;if(a&&p(t)){for(o=0;o<k.update.length;++o)k.update[o](e,t);xt(o=i.hook)&&xt(o=o.update)&&o(e,t)}$t(t.text)?xt(c)&&xt(u)?c!==u&&b(s,c,u,n,r):xt(u)?(xt(e.text)&&A.setTextContent(s,""),m(s,null,u,0,u.length-1,n)):xt(c)?y(s,c,0,c.length-1):xt(e.text)&&A.setTextContent(s,""):e.text!==t.text&&A.setTextContent(s,t.text),a&&xt(o=i.hook)&&xt(o=o.postpatch)&&o(e,t)}}function E(e,t,n){if(n&&e.parent)e.parent.data.pendingInsert=t;else for(var r=0;r<t.length;++r)t[r].data.hook.insert(t[r])}function N(e,n,r){if("production"!==t.env.NODE_ENV&&!$(e,n))return!1;n.elm=e;var o=n.tag,i=n.data,a=n.children;if(xt(i)&&(xt(x=i.hook)&&xt(x=x.init)&&x(n,!0),xt(x=n.componentInstance)))return u(n,r),!0;if(xt(o)){if(xt(a))if(e.hasChildNodes()){for(var s=!0,c=e.firstChild,l=0;l<a.length;l++){if(!c||!N(c,a[l],r)){s=!1;break}c=c.nextSibling}if(!s||c)return"production"===t.env.NODE_ENV||"undefined"==typeof console||T||(T=!0,console.warn("Parent: ",e),console.warn("Mismatching childNodes vs. VNodes: ",e.childNodes,a)),
!1}else f(n,a,r);if(xt(i))for(var d in i)if(!S(d)){v(n,r);break}}else e.data!==n.text&&(e.data=n.text);return!0}function $(e,t){return t.tag?0===t.tag.indexOf("vue-component")||t.tag.toLowerCase()===(e.tagName&&e.tagName.toLowerCase()):e.nodeType===(t.isComment?8:3)}var x,O,k={},C=e.modules,A=e.nodeOps;for(x=0;x<Xi.length;++x)for(k[Xi[x]]=[],O=0;O<C.length;++O)void 0!==C[O][Xi[x]]&&k[Xi[x]].push(C[O][Xi[x]]);var D=0,T=!1,S=i("attrs,style,class,staticClass,staticStyle,key");return function(e,r,o,i,s,c){if(!r)return void(e&&g(e));var u=!1,l=[];if(e){var d=xt(e.nodeType);if(!d&&Ot(e,r))w(e,r,l,i);else{if(d){if(1===e.nodeType&&e.hasAttribute("server-rendered")&&(e.removeAttribute("server-rendered"),o=!0),o){if(N(e,r,l))return E(r,l,!0),e;"production"!==t.env.NODE_ENV&&Ho("The client-side rendered virtual DOM tree is not matching server-rendered content. This is likely caused by incorrect HTML markup, for example nesting block-level elements inside <p>, or missing <tbody>. Bailing hydration and performing full client-side render.")}e=n(e)}var f=e.elm,v=A.parentNode(f);if(a(r,l,f._leaveCb?null:v,A.nextSibling(f)),r.parent){for(var h=r.parent;h;)h.elm=r.elm,h=h.parent;if(p(r))for(var m=0;m<k.create.length;++m)k.create[m](Qi,r.parent)}null!==v?y(v,[e],0,0):xt(e.tag)&&g(e)}}else u=!0,a(r,l,s,c);return E(r,l,u),r.elm}}function At(e,t){(e.data.directives||t.data.directives)&&Dt(e,t)}function Dt(e,t){var n,r,o,i=e===Qi,a=t===Qi,s=Tt(e.data.directives,e.context),c=Tt(t.data.directives,t.context),u=[],l=[];for(n in c)r=s[n],o=c[n],r?(o.oldValue=r.value,Vt(o,"update",t,e),o.def&&o.def.componentUpdated&&l.push(o)):(Vt(o,"bind",t,e),o.def&&o.def.inserted&&u.push(o));if(u.length){var d=function(){for(var n=0;n<u.length;n++)Vt(u[n],"inserted",t,e)};i?ce(t.data.hook||(t.data.hook={}),"insert",d,"dir-insert"):d()}if(l.length&&ce(t.data.hook||(t.data.hook={}),"postpatch",function(){for(var n=0;n<l.length;n++)Vt(l[n],"componentUpdated",t,e)},"dir-postpatch"),!i)for(n in s)c[n]||Vt(s[n],"unbind",e,e,a)}function Tt(e,t){var n=Object.create(null);if(!e)return n;var r,o;for(r=0;r<e.length;r++)o=e[r],o.modifiers||(o.modifiers=ta),n[St(o)]=o,o.def=F(t.$options,"directives",o.name,!0);return n}function St(e){return e.rawName||e.name+"."+Object.keys(e.modifiers||{}).join(".")}function Vt(e,t,n,r,o){var i=e.def&&e.def[t];i&&i(n.elm,e,n,r,o)}function It(e,t){if(e.data.attrs||t.data.attrs){var n,r,o,i=t.elm,a=e.data.attrs||{},s=t.data.attrs||{};s.__ob__&&(s=t.data.attrs=f({},s));for(n in s)r=s[n],o=a[n],o!==r&&jt(i,n,r);Io&&s.value!==a.value&&jt(i,"value",s.value);for(n in a)null==s[n]&&(Ui(n)?i.removeAttributeNS(Fi,Hi(n)):Li(n)||i.removeAttribute(n))}}function jt(e,t,n){Ri(t)?Bi(n)?e.removeAttribute(t):e.setAttribute(t,t):Li(t)?e.setAttribute(t,Bi(n)||"false"===n?"false":"true"):Ui(t)?Bi(n)?e.removeAttributeNS(Fi,Hi(t)):e.setAttributeNS(Fi,t,n):Bi(n)?e.removeAttribute(t):e.setAttribute(t,n)}function Mt(e,t){var n=t.elm,r=t.data,o=e.data;if(r.staticClass||r.class||o&&(o.staticClass||o.class)){var i=rt(t),a=n._transitionClasses;a&&(i=at(i,st(a))),i!==n._prevClass&&(n.setAttribute("class",i),n._prevClass=i)}}function Pt(e,t,n,r){if(n){var o=t,i=Ii;t=function(n){Lt(e,t,r,i),1===arguments.length?o(n):o.apply(null,arguments)}}Ii.addEventListener(e,t,r)}function Lt(e,t,n,r){(r||Ii).removeEventListener(e,t,n)}function Rt(e,t){if(e.data.on||t.data.on){var n=t.data.on||{},r=e.data.on||{};Ii=t.elm,le(n,r,Pt,Lt,t.context)}}function Ft(e,t){if(e.data.domProps||t.data.domProps){var n,r,o=t.elm,i=e.data.domProps||{},a=t.data.domProps||{};a.__ob__&&(a=t.data.domProps=f({},a));for(n in i)null==a[n]&&(o[n]="");for(n in a)if(r=a[n],"textContent"!==n&&"innerHTML"!==n||(t.children&&(t.children.length=0),r!==i[n]))if("value"===n){o._value=r;var s=null==r?"":String(r);Ut(o,t,s)&&(o.value=s)}else o[n]=r}}function Ut(e,t,n){return!e.composing&&("option"===t.tag||Ht(e,n)||Bt(t,n))}function Ht(e,t){return document.activeElement!==e&&e.value!==t}function Bt(e,t){var n=e.elm.value,r=e.elm._vModifiers;return r&&r.number||"number"===e.elm.type?o(n)!==o(t):r&&r.trim?n.trim()!==t.trim():n!==t}function zt(e){var t=qt(e.style);return e.staticStyle?f(e.staticStyle,t):t}function qt(e){return Array.isArray(e)?h(e):"string"==typeof e?sa(e):e}function Jt(e,t){var n,r={};if(t)for(var o=e;o.componentInstance;)o=o.componentInstance._vnode,o.data&&(n=zt(o.data))&&f(r,n);(n=zt(e.data))&&f(r,n);for(var i=e;i=i.parent;)i.data&&(n=zt(i.data))&&f(r,n);return r}function Kt(e,t){var n=t.data,r=e.data;if(n.staticStyle||n.style||r.staticStyle||r.style){var o,i,a=t.elm,s=e.data.staticStyle,c=e.data.style||{},u=s||c,l=qt(t.data.style)||{};t.data.style=l.__ob__?f({},l):l;var d=Jt(t,!0);for(i in u)null==d[i]&&la(a,i,"");for(i in d)o=d[i],o!==u[i]&&la(a,i,null==o?"":o)}}function Zt(e,t){if(t&&t.trim())if(e.classList)t.indexOf(" ")>-1?t.split(/\s+/).forEach(function(t){return e.classList.add(t)}):e.classList.add(t);else{var n=" "+e.getAttribute("class")+" ";n.indexOf(" "+t+" ")<0&&e.setAttribute("class",(n+t).trim())}}function Wt(e,t){if(t&&t.trim())if(e.classList)t.indexOf(" ")>-1?t.split(/\s+/).forEach(function(t){return e.classList.remove(t)}):e.classList.remove(t);else{for(var n=" "+e.getAttribute("class")+" ",r=" "+t+" ";n.indexOf(r)>=0;)n=n.replace(r," ");e.setAttribute("class",n.trim())}}function Yt(e){wa(function(){wa(e)})}function Gt(e,t){(e._transitionClasses||(e._transitionClasses=[])).push(t),Zt(e,t)}function Qt(e,t){e._transitionClasses&&a(e._transitionClasses,t),Wt(e,t)}function Xt(e,t,n){var r=en(e,t),o=r.type,i=r.timeout,a=r.propCount;if(!o)return n();var s=o===ha?ya:ba,c=0,u=function(){e.removeEventListener(s,l),n()},l=function(t){t.target===e&&++c>=a&&u()};setTimeout(function(){c<a&&u()},i+1),e.addEventListener(s,l)}function en(e,t){var n,r=window.getComputedStyle(e),o=r[ga+"Delay"].split(", "),i=r[ga+"Duration"].split(", "),a=tn(o,i),s=r[_a+"Delay"].split(", "),c=r[_a+"Duration"].split(", "),u=tn(s,c),l=0,d=0;t===ha?a>0&&(n=ha,l=a,d=i.length):t===ma?u>0&&(n=ma,l=u,d=c.length):(l=Math.max(a,u),n=l>0?a>u?ha:ma:null,d=n?n===ha?i.length:c.length:0);var f=n===ha&&Ea.test(r[ga+"Property"]);return{type:n,timeout:l,propCount:d,hasTransform:f}}function tn(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max.apply(null,t.map(function(t,n){return nn(t)+nn(e[n])}))}function nn(e){return 1e3*Number(e.slice(0,-1))}function rn(e,t){var n=e.elm;n._leaveCb&&(n._leaveCb.cancelled=!0,n._leaveCb());var r=an(e.data.transition);if(r&&!n._enterCb&&1===n.nodeType){for(var o=r.css,i=r.type,a=r.enterClass,s=r.enterToClass,c=r.enterActiveClass,u=r.appearClass,l=r.appearToClass,d=r.appearActiveClass,f=r.beforeEnter,p=r.enter,v=r.afterEnter,h=r.enterCancelled,m=r.beforeAppear,g=r.appear,y=r.afterAppear,_=r.appearCancelled,b=yi,w=yi.$vnode;w&&w.parent;)w=w.parent,b=w.context;var E=!b._isMounted||!e.isRootInsert;if(!E||g||""===g){var N=E?u:a,$=E?d:c,x=E?l:s,O=E?m||f:f,k=E&&"function"==typeof g?g:p,C=E?y||v:v,A=E?_||h:h,D=o!==!1&&!Io,T=k&&(k._length||k.length)>1,S=n._enterCb=sn(function(){D&&(Qt(n,x),Qt(n,$)),S.cancelled?(D&&Qt(n,N),A&&A(n)):C&&C(n),n._enterCb=null});e.data.show||ce(e.data.hook||(e.data.hook={}),"insert",function(){var t=n.parentNode,r=t&&t._pending&&t._pending[e.key];r&&r.tag===e.tag&&r.elm._leaveCb&&r.elm._leaveCb(),k&&k(n,S)},"transition-insert"),O&&O(n),D&&(Gt(n,N),Gt(n,$),Yt(function(){Gt(n,x),Qt(n,N),S.cancelled||T||Xt(n,i,S)})),e.data.show&&(t&&t(),k&&k(n,S)),D||T||S()}}}function on(e,t){function n(){g.cancelled||(e.data.show||((r.parentNode._pending||(r.parentNode._pending={}))[e.key]=e),l&&l(r),h&&(Gt(r,s),Gt(r,u),Yt(function(){Gt(r,c),Qt(r,s),g.cancelled||m||Xt(r,a,g)})),d&&d(r,g),h||m||g())}var r=e.elm;r._enterCb&&(r._enterCb.cancelled=!0,r._enterCb());var o=an(e.data.transition);if(!o)return t();if(!r._leaveCb&&1===r.nodeType){var i=o.css,a=o.type,s=o.leaveClass,c=o.leaveToClass,u=o.leaveActiveClass,l=o.beforeLeave,d=o.leave,f=o.afterLeave,p=o.leaveCancelled,v=o.delayLeave,h=i!==!1&&!Io,m=d&&(d._length||d.length)>1,g=r._leaveCb=sn(function(){r.parentNode&&r.parentNode._pending&&(r.parentNode._pending[e.key]=null),h&&(Qt(r,c),Qt(r,u)),g.cancelled?(h&&Qt(r,s),p&&p(r)):(t(),f&&f(r)),r._leaveCb=null});v?v(n):n()}}function an(e){if(e){if("object"==typeof e){var t={};return e.css!==!1&&f(t,Na(e.name||"v")),f(t,e),t}return"string"==typeof e?Na(e):void 0}}function sn(e){var t=!1;return function(){t||(t=!0,e())}}function cn(e,t){t.data.show||rn(t)}function un(e,n,r){var o=n.value,i=e.multiple;if(i&&!Array.isArray(o))return void("production"!==t.env.NODE_ENV&&Ho('<select multiple v-model="'+n.expression+'"> expects an Array value for its binding, but got '+Object.prototype.toString.call(o).slice(8,-1),r));for(var a,s,c=0,u=e.options.length;c<u;c++)if(s=e.options[c],i)a=_(o,dn(s))>-1,s.selected!==a&&(s.selected=a);else if(y(dn(s),o))return void(e.selectedIndex!==c&&(e.selectedIndex=c));i||(e.selectedIndex=-1)}function ln(e,t){for(var n=0,r=t.length;n<r;n++)if(y(dn(t[n]),e))return!1;return!0}function dn(e){return"_value"in e?e._value:e.value}function fn(e){e.target.composing=!0}function pn(e){e.target.composing=!1,vn(e.target,"input")}function vn(e,t){var n=document.createEvent("HTMLEvents");n.initEvent(t,!0,!0),e.dispatchEvent(n)}function hn(e){return!e.componentInstance||e.data&&e.data.transition?e:hn(e.componentInstance._vnode)}function mn(e){var t=e&&e.componentOptions;return t&&t.Ctor.options.abstract?mn(ve(t.children)):e}function gn(e){var t={},n=e.$options;for(var r in n.propsData)t[r]=e[r];var o=n._parentListeners;for(var i in o)t[bo(i)]=o[i].fn;return t}function yn(e,t){return/\d-keep-alive$/.test(t.tag)?e("keep-alive"):null}function _n(e){for(;e=e.parent;)if(e.data.transition)return!0}function bn(e,t){return t.key===e.key&&t.tag===e.tag}function wn(e){e.elm._moveCb&&e.elm._moveCb(),e.elm._enterCb&&e.elm._enterCb()}function En(e){e.data.newPos=e.elm.getBoundingClientRect()}function Nn(e){var t=e.data.pos,n=e.data.newPos,r=t.left-n.left,o=t.top-n.top;if(r||o){e.data.moved=!0;var i=e.elm.style;i.transform=i.WebkitTransform="translate("+r+"px,"+o+"px)",i.transitionDuration="0s"}}function $n(e,t){var n=document.createElement("div");return n.innerHTML='<div a="'+e+'">',n.innerHTML.indexOf(t)>0}function xn(e){return Pa=Pa||document.createElement("div"),Pa.innerHTML=e,Pa.textContent}function On(e,t){return t&&(e=e.replace(Ds,"\n")),e.replace(Cs,"<").replace(As,">").replace(Ts,"&").replace(Ss,'"')}function kn(e,t){function n(t){d+=t,e=e.substring(t)}function r(){var t=e.match(Za);if(t){var r={tagName:t[1],attrs:[],start:d};n(t[0].length);for(var o,i;!(o=e.match(Wa))&&(i=e.match(qa));)n(i[0].length),r.attrs.push(i);if(o)return r.unarySlash=o[1],n(o[0].length),r.end=d,r}}function o(e){var n=e.tagName,r=e.unarySlash;u&&("p"===s&&Ua(n)&&i(s),Fa(n)&&s===n&&i(n));for(var o=l(n)||"html"===n&&"head"===s||!!r,a=e.attrs.length,d=new Array(a),f=0;f<a;f++){var p=e.attrs[f];es&&p[0].indexOf('""')===-1&&(""===p[3]&&delete p[3],""===p[4]&&delete p[4],""===p[5]&&delete p[5]);var v=p[3]||p[4]||p[5]||"";d[f]={name:p[1],value:On(v,t.shouldDecodeNewlines)}}o||(c.push({tag:n,lowerCasedTag:n.toLowerCase(),attrs:d}),s=n,r=""),t.start&&t.start(n,d,o,e.start,e.end)}function i(e,n,r){var o,i;if(null==n&&(n=d),null==r&&(r=d),e&&(i=e.toLowerCase()),e)for(o=c.length-1;o>=0&&c[o].lowerCasedTag!==i;o--);else o=0;if(o>=0){for(var a=c.length-1;a>=o;a--)t.end&&t.end(c[a].tag,n,r);c.length=o,s=o&&c[o-1].tag}else"br"===i?t.start&&t.start(e,[],!0,n,r):"p"===i&&(t.start&&t.start(e,[],!1,n,r),t.end&&t.end(e,n,r))}for(var a,s,c=[],u=t.expectHTML,l=t.isUnaryTag||Oo,d=0;e;){if(a=e,s&&Os(s)){var f=s.toLowerCase(),p=ks[f]||(ks[f]=new RegExp("([\\s\\S]*?)(</"+f+"[^>]*>)","i")),v=0,h=e.replace(p,function(e,n,r){return v=r.length,"script"!==f&&"style"!==f&&"noscript"!==f&&(n=n.replace(/<!--([\s\S]*?)-->/g,"$1").replace(/<!\[CDATA\[([\s\S]*?)]]>/g,"$1")),t.chars&&t.chars(n),""});d+=e.length-h.length,e=h,i(f,d-v,d)}else{var m=e.indexOf("<");if(0===m){if(Qa.test(e)){var g=e.indexOf("-->");if(g>=0){n(g+3);continue}}if(Xa.test(e)){var y=e.indexOf("]>");if(y>=0){n(y+2);continue}}var _=e.match(Ga);if(_){n(_[0].length);continue}var b=e.match(Ya);if(b){var w=d;n(b[0].length),i(b[1],w,d);continue}var E=r();if(E){o(E);continue}}var N=void 0,$=void 0,x=void 0;if(m>0){for($=e.slice(m);!(Ya.test($)||Za.test($)||Qa.test($)||Xa.test($)||(x=$.indexOf("<",1),x<0));)m+=x,$=e.slice(m);N=e.substring(0,m),n(m)}m<0&&(N=e,e=""),t.chars&&N&&t.chars(N)}if(e===a&&t.chars){t.chars(e);break}}i()}function Cn(e){function t(){(a||(a=[])).push(e.slice(v,o).trim()),v=o+1}var n,r,o,i,a,s=!1,c=!1,u=!1,l=!1,d=0,f=0,p=0,v=0;for(o=0;o<e.length;o++)if(r=n,n=e.charCodeAt(o),s)39===n&&92!==r&&(s=!1);else if(c)34===n&&92!==r&&(c=!1);else if(u)96===n&&92!==r&&(u=!1);else if(l)47===n&&92!==r&&(l=!1);else if(124!==n||124===e.charCodeAt(o+1)||124===e.charCodeAt(o-1)||d||f||p){switch(n){case 34:c=!0;break;case 39:s=!0;break;case 96:u=!0;break;case 40:p++;break;case 41:p--;break;case 91:f++;break;case 93:f--;break;case 123:d++;break;case 125:d--}if(47===n){for(var h=o-1,m=void 0;h>=0&&(m=e.charAt(h)," "===m);h--);m&&/[\w$]/.test(m)||(l=!0)}}else void 0===i?(v=o+1,i=e.slice(0,o).trim()):t();if(void 0===i?i=e.slice(0,o).trim():0!==v&&t(),a)for(o=0;o<a.length;o++)i=An(i,a[o]);return i}function An(e,t){var n=t.indexOf("(");if(n<0)return'_f("'+t+'")('+e+")";var r=t.slice(0,n),o=t.slice(n+1);return'_f("'+r+'")('+e+","+o}function Dn(e,t){var n=t?js(t):Vs;if(n.test(e)){for(var r,o,i=[],a=n.lastIndex=0;r=n.exec(e);){o=r.index,o>a&&i.push(JSON.stringify(e.slice(a,o)));var s=Cn(r[1].trim());i.push("_s("+s+")"),a=o+r[0].length}return a<e.length&&i.push(JSON.stringify(e.slice(a))),i.join("+")}}function Tn(e){console.error("[Vue parser]: "+e)}function Sn(e,t){return e?e.map(function(e){return e[t]}).filter(function(e){return e}):[]}function Vn(e,t,n){(e.props||(e.props=[])).push({name:t,value:n})}function In(e,t,n){(e.attrs||(e.attrs=[])).push({name:t,value:n})}function jn(e,t,n,r,o,i){(e.directives||(e.directives=[])).push({name:t,rawName:n,value:r,arg:o,modifiers:i})}function Mn(e,t,n,r,o){r&&r.capture&&(delete r.capture,t="!"+t),r&&r.once&&(delete r.once,t="~"+t);var i;r&&r.native?(delete r.native,i=e.nativeEvents||(e.nativeEvents={})):i=e.events||(e.events={});var a={value:n,modifiers:r},s=i[t];Array.isArray(s)?o?s.unshift(a):s.push(a):s?i[t]=o?[a,s]:[s,a]:i[t]=a}function Pn(e,t,n){var r=Ln(e,":"+t)||Ln(e,"v-bind:"+t);if(null!=r)return Cn(r);if(n!==!1){var o=Ln(e,t);if(null!=o)return JSON.stringify(o)}}function Ln(e,t){var n;if(null!=(n=e.attrsMap[t]))for(var r=e.attrsList,o=0,i=r.length;o<i;o++)if(r[o].name===t){r.splice(o,1);break}return n}function Rn(e){if(ns=e,ts=ns.length,os=is=as=0,e.indexOf("[")<0||e.lastIndexOf("]")<ts-1)return{exp:e,idx:null};for(;!Un();)rs=Fn(),Hn(rs)?zn(rs):91===rs&&Bn(rs);return{exp:e.substring(0,is),idx:e.substring(is+1,as)}}function Fn(){return ns.charCodeAt(++os)}function Un(){return os>=ts}function Hn(e){return 34===e||39===e}function Bn(e){var t=1;for(is=os;!Un();)if(e=Fn(),Hn(e))zn(e);else if(91===e&&t++,93===e&&t--,0===t){as=os;break}}function zn(e){for(var t=e;!Un()&&(e=Fn(),e!==t););}function qn(e,n){ss=n.warn||Tn,cs=n.getTagNamespace||Oo,us=n.mustUseProp||Oo,ls=n.isPreTag||Oo,ds=Sn(n.modules,"preTransformNode"),fs=Sn(n.modules,"transformNode"),ps=Sn(n.modules,"postTransformNode"),vs=n.delimiters;var r,o,i=[],a=n.preserveWhitespace!==!1,s=!1,c=!1,u=!1;return kn(e,{expectHTML:n.expectHTML,isUnaryTag:n.isUnaryTag,shouldDecodeNewlines:n.shouldDecodeNewlines,start:function(a,l,d){function f(n){"production"===t.env.NODE_ENV||u||("slot"!==n.tag&&"template"!==n.tag||(u=!0,ss("Cannot use <"+n.tag+"> as component root element because it may contain multiple nodes:\n"+e)),n.attrsMap.hasOwnProperty("v-for")&&(u=!0,ss("Cannot use v-for on stateful component root element because it renders multiple elements:\n"+e)))}var p=o&&o.ns||cs(a);Vo&&"svg"===p&&(l=ur(l));var v={type:1,tag:a,attrsList:l,attrsMap:sr(l),parent:o,children:[]};p&&(v.ns=p),cr(v)&&!Lo()&&(v.forbidden=!0,"production"!==t.env.NODE_ENV&&ss("Templates should only be responsible for mapping the state to the UI. Avoid placing tags with side-effects in your templates, such as <"+a+">, as they will not be parsed."));for(var h=0;h<ds.length;h++)ds[h](v,n);if(s||(Jn(v),v.pre&&(s=!0)),ls(v.tag)&&(c=!0),s)Kn(v);else{Yn(v),Gn(v),tr(v),Zn(v),v.plain=!v.key&&!l.length,Wn(v),nr(v),rr(v);for(var m=0;m<fs.length;m++)fs[m](v,n);or(v)}if(r?i.length||(r.if&&(v.elseif||v.else)?(f(v),er(r,{exp:v.elseif,block:v})):"production"===t.env.NODE_ENV||u||(u=!0,ss("Component template should contain exactly one root element:\n\n"+e+"\n\nIf you are using v-if on multiple elements, use v-else-if to chain them instead."))):(r=v,f(r)),o&&!v.forbidden)if(v.elseif||v.else)Qn(v,o);else if(v.slotScope){o.plain=!1;var g=v.slotTarget||"default";(o.scopedSlots||(o.scopedSlots={}))[g]=v}else o.children.push(v),v.parent=o;d||(o=v,i.push(v));for(var y=0;y<ps.length;y++)ps[y](v,n)},end:function(){var e=i[i.length-1],t=e.children[e.children.length-1];t&&3===t.type&&" "===t.text&&e.children.pop(),i.length-=1,o=i[i.length-1],e.pre&&(s=!1),ls(e.tag)&&(c=!1)},chars:function(n){if(!o)return void("production"===t.env.NODE_ENV||u||n!==e||(u=!0,ss("Component template requires a root element, rather than just text:\n\n"+e)));if(!Vo||"textarea"!==o.tag||o.attrsMap.placeholder!==n){var r=o.children;if(n=c||n.trim()?Bs(n):a&&r.length?" ":""){var i;!s&&" "!==n&&(i=Dn(n,vs))?r.push({type:2,expression:i,text:n}):" "===n&&" "===r[r.length-1].text||o.children.push({type:3,text:n})}}}}),r}function Jn(e){null!=Ln(e,"v-pre")&&(e.pre=!0)}function Kn(e){var t=e.attrsList.length;if(t)for(var n=e.attrs=new Array(t),r=0;r<t;r++)n[r]={name:e.attrsList[r].name,value:JSON.stringify(e.attrsList[r].value)};else e.pre||(e.plain=!0)}function Zn(e){var n=Pn(e,"key");n&&("production"!==t.env.NODE_ENV&&"template"===e.tag&&ss("<template> cannot be keyed. Place the key on real elements instead."),e.key=n)}function Wn(e){var t=Pn(e,"ref");t&&(e.ref=t,e.refInFor=ir(e))}function Yn(e){var n;if(n=Ln(e,"v-for")){var r=n.match(Ps);if(!r)return void("production"!==t.env.NODE_ENV&&ss("Invalid v-for expression: "+n));e.for=r[2].trim();var o=r[1].trim(),i=o.match(Ls);i?(e.alias=i[1].trim(),e.iterator1=i[2].trim(),i[3]&&(e.iterator2=i[3].trim())):e.alias=o}}function Gn(e){var t=Ln(e,"v-if");if(t)e.if=t,er(e,{exp:t,block:e});else{null!=Ln(e,"v-else")&&(e.else=!0);var n=Ln(e,"v-else-if");n&&(e.elseif=n)}}function Qn(e,n){var r=Xn(n.children);r&&r.if?er(r,{exp:e.elseif,block:e}):"production"!==t.env.NODE_ENV&&ss("v-"+(e.elseif?'else-if="'+e.elseif+'"':"else")+" used on element <"+e.tag+"> without corresponding v-if.")}function Xn(e){for(var n=e.length;n--;){if(1===e[n].type)return e[n];"production"!==t.env.NODE_ENV&&" "!==e[n].text&&ss('text "'+e[n].text.trim()+'" between v-if and v-else(-if) will be ignored.'),e.pop()}}function er(e,t){e.ifConditions||(e.ifConditions=[]),e.ifConditions.push(t)}function tr(e){var t=Ln(e,"v-once");null!=t&&(e.once=!0)}function nr(e){if("slot"===e.tag)e.slotName=Pn(e,"name"),"production"!==t.env.NODE_ENV&&e.key&&ss("`key` does not work on <slot> because slots are abstract outlets and can possibly expand into multiple elements. Use the key on a wrapping element instead.");else{var n=Pn(e,"slot");n&&(e.slotTarget='""'===n?'"default"':n),"template"===e.tag&&(e.slotScope=Ln(e,"scope"))}}function rr(e){var t;(t=Pn(e,"is"))&&(e.component=t),null!=Ln(e,"inline-template")&&(e.inlineTemplate=!0)}function or(e){var n,r,o,i,a,s,c,u,l=e.attrsList;for(n=0,r=l.length;n<r;n++)if(o=i=l[n].name,a=l[n].value,Ms.test(o))if(e.hasBindings=!0,c=ar(o),c&&(o=o.replace(Hs,"")),Rs.test(o))o=o.replace(Rs,""),a=Cn(a),u=!1,c&&(c.prop&&(u=!0,o=bo(o),"innerHtml"===o&&(o="innerHTML")),c.camel&&(o=bo(o))),u||us(e.tag,e.attrsMap.type,o)?Vn(e,o,a):In(e,o,a);else if(Fs.test(o))o=o.replace(Fs,""),Mn(e,o,a,c);else{o=o.replace(Ms,"");var d=o.match(Us);d&&(s=d[1])&&(o=o.slice(0,-(s.length+1))),jn(e,o,i,a,s,c),"production"!==t.env.NODE_ENV&&"model"===o&&lr(e,a)}else{if("production"!==t.env.NODE_ENV){var f=Dn(a,vs);f&&ss(o+'="'+a+'": Interpolation inside attributes has been removed. Use v-bind or the colon shorthand instead. For example, instead of <div id="{{ val }}">, use <div :id="val">.')}In(e,o,JSON.stringify(a))}}function ir(e){for(var t=e;t;){if(void 0!==t.for)return!0;t=t.parent}return!1}function ar(e){var t=e.match(Hs);if(t){var n={};return t.forEach(function(e){n[e.slice(1)]=!0}),n}}function sr(e){for(var n={},r=0,o=e.length;r<o;r++)"production"!==t.env.NODE_ENV&&n[e[r].name]&&!Vo&&ss("duplicate attribute: "+e[r].name),n[e[r].name]=e[r].value;return n}function cr(e){return"style"===e.tag||"script"===e.tag&&(!e.attrsMap.type||"text/javascript"===e.attrsMap.type)}function ur(e){for(var t=[],n=0;n<e.length;n++){var r=e[n];zs.test(r.name)||(r.name=r.name.replace(qs,""),t.push(r))}return t}function lr(e,t){for(var n=e;n;)n.for&&n.alias===t&&ss("<"+e.tag+' v-model="'+t+'">: You are binding v-model directly to a v-for iteration alias. This will not be able to modify the v-for source array because writing to the alias is like modifying a function local variable. Consider using an array of objects and use v-model on an object property instead.'),n=n.parent}function dr(e,t){e&&(hs=Js(t.staticKeys||""),ms=t.isReservedTag||Oo,pr(e),vr(e,!1))}function fr(e){return i("type,tag,attrsList,attrsMap,plain,parent,children,attrs"+(e?","+e:""))}function pr(e){if(e.static=mr(e),1===e.type){if(!ms(e.tag)&&"slot"!==e.tag&&null==e.attrsMap["inline-template"])return;for(var t=0,n=e.children.length;t<n;t++){var r=e.children[t];pr(r),r.static||(e.static=!1)}}}function vr(e,t){if(1===e.type){if((e.static||e.once)&&(e.staticInFor=t),e.static&&e.children.length&&(1!==e.children.length||3!==e.children[0].type))return void(e.staticRoot=!0);if(e.staticRoot=!1,e.children)for(var n=0,r=e.children.length;n<r;n++)vr(e.children[n],t||!!e.for);e.ifConditions&&hr(e.ifConditions,t)}}function hr(e,t){for(var n=1,r=e.length;n<r;n++)vr(e[n].block,t)}function mr(e){return 2!==e.type&&(3===e.type||!(!e.pre&&(e.hasBindings||e.if||e.for||go(e.tag)||!ms(e.tag)||gr(e)||!Object.keys(e).every(hs))))}function gr(e){for(;e.parent;){if(e=e.parent,"template"!==e.tag)return!1;if(e.for)return!0}return!1}function yr(e,t){var n=t?"nativeOn:{":"on:{";for(var r in e)n+='"'+r+'":'+_r(r,e[r])+",";return n.slice(0,-1)+"}"}function _r(e,t){if(t){if(Array.isArray(t))return"["+t.map(function(t){return _r(e,t)}).join(",")+"]";if(t.modifiers){var n="",r=[];for(var o in t.modifiers)Ys[o]?n+=Ys[o]:r.push(o);r.length&&(n=br(r)+n);var i=Zs.test(t.value)?t.value+"($event)":t.value;return"function($event){"+n+i+"}"}return Ks.test(t.value)||Zs.test(t.value)?t.value:"function($event){"+t.value+"}"}return"function(){}"}function br(e){return"if("+e.map(wr).join("&&")+")return;"}function wr(e){var t=parseInt(e,10);if(t)return"$event.keyCode!=="+t;var n=Ws[e];return"_k($event.keyCode,"+JSON.stringify(e)+(n?","+JSON.stringify(n):"")+")"}function Er(e,t){e.wrapData=function(n){return"_b("+n+",'"+e.tag+"',"+t.value+(t.modifiers&&t.modifiers.prop?",true":"")+")"}}function Nr(e,t){var n=Es,r=Es=[],o=Ns;Ns=0,$s=t,gs=t.warn||Tn,ys=Sn(t.modules,"transformCode"),_s=Sn(t.modules,"genData"),bs=t.directives||{},ws=t.isReservedTag||Oo;var i=e?$r(e):'_c("div")';return Es=n,Ns=o,{render:"with(this){return "+i+"}",staticRenderFns:r}}function $r(e){if(e.staticRoot&&!e.staticProcessed)return xr(e);if(e.once&&!e.onceProcessed)return Or(e);if(e.for&&!e.forProcessed)return Ar(e);if(e.if&&!e.ifProcessed)return kr(e);if("template"!==e.tag||e.slotTarget){if("slot"===e.tag)return Ur(e);var t;if(e.component)t=Hr(e.component,e);else{var n=e.plain?void 0:Dr(e),r=e.inlineTemplate?null:jr(e,!0);t="_c('"+e.tag+"'"+(n?","+n:"")+(r?","+r:"")+")"}for(var o=0;o<ys.length;o++)t=ys[o](e,t);return t}return jr(e)||"void 0"}function xr(e){return e.staticProcessed=!0,Es.push("with(this){return "+$r(e)+"}"),"_m("+(Es.length-1)+(e.staticInFor?",true":"")+")"}function Or(e){if(e.onceProcessed=!0,e.if&&!e.ifProcessed)return kr(e);if(e.staticInFor){for(var n="",r=e.parent;r;){if(r.for){n=r.key;break}r=r.parent}return n?"_o("+$r(e)+","+Ns++ +(n?","+n:"")+")":("production"!==t.env.NODE_ENV&&gs("v-once can only be used inside v-for that is keyed. "),$r(e))}return xr(e)}function kr(e){return e.ifProcessed=!0,Cr(e.ifConditions.slice())}function Cr(e){function t(e){return e.once?Or(e):$r(e)}if(!e.length)return"_e()";var n=e.shift();return n.exp?"("+n.exp+")?"+t(n.block)+":"+Cr(e):""+t(n.block)}function Ar(e){var t=e.for,n=e.alias,r=e.iterator1?","+e.iterator1:"",o=e.iterator2?","+e.iterator2:"";return e.forProcessed=!0,"_l(("+t+"),function("+n+r+o+"){return "+$r(e)+"})"}function Dr(e){var t="{",n=Tr(e);n&&(t+=n+","),e.key&&(t+="key:"+e.key+","),e.ref&&(t+="ref:"+e.ref+","),e.refInFor&&(t+="refInFor:true,"),e.pre&&(t+="pre:true,"),e.component&&(t+='tag:"'+e.tag+'",');for(var r=0;r<_s.length;r++)t+=_s[r](e);if(e.attrs&&(t+="attrs:{"+Br(e.attrs)+"},"),e.props&&(t+="domProps:{"+Br(e.props)+"},"),e.events&&(t+=yr(e.events)+","),e.nativeEvents&&(t+=yr(e.nativeEvents,!0)+","),e.slotTarget&&(t+="slot:"+e.slotTarget+","),e.scopedSlots&&(t+=Vr(e.scopedSlots)+","),e.inlineTemplate){var o=Sr(e);o&&(t+=o+",")}return t=t.replace(/,$/,"")+"}",e.wrapData&&(t=e.wrapData(t)),t}function Tr(e){var t=e.directives;if(t){var n,r,o,i,a="directives:[",s=!1;for(n=0,r=t.length;n<r;n++){o=t[n],i=!0;var c=bs[o.name]||Gs[o.name];c&&(i=!!c(e,o,gs)),i&&(s=!0,a+='{name:"'+o.name+'",rawName:"'+o.rawName+'"'+(o.value?",value:("+o.value+"),expression:"+JSON.stringify(o.value):"")+(o.arg?',arg:"'+o.arg+'"':"")+(o.modifiers?",modifiers:"+JSON.stringify(o.modifiers):"")+"},")}return s?a.slice(0,-1)+"]":void 0}}function Sr(e){var n=e.children[0];if("production"!==t.env.NODE_ENV&&(e.children.length>1||1!==n.type)&&gs("Inline-template components must have exactly one child element."),1===n.type){var r=Nr(n,$s);return"inlineTemplate:{render:function(){"+r.render+"},staticRenderFns:["+r.staticRenderFns.map(function(e){return"function(){"+e+"}"}).join(",")+"]}"}}function Vr(e){return"scopedSlots:{"+Object.keys(e).map(function(t){return Ir(t,e[t])}).join(",")+"}"}function Ir(e,t){return e+":function("+String(t.attrsMap.scope)+"){return "+("template"===t.tag?jr(t)||"void 0":$r(t))+"}"}function jr(e,t){var n=e.children;if(n.length){var r=n[0];if(1===n.length&&r.for&&"template"!==r.tag&&"slot"!==r.tag)return $r(r);var o=Mr(n);return"["+n.map(Rr).join(",")+"]"+(t&&o?","+o:"")}}function Mr(e){for(var t=0,n=0;n<e.length;n++){var r=e[n];if(1===r.type){if(Pr(r)||r.ifConditions&&r.ifConditions.some(function(e){return Pr(e.block)})){t=2;break}(Lr(r)||r.ifConditions&&r.ifConditions.some(function(e){return Lr(e.block)}))&&(t=1)}}return t}function Pr(e){return void 0!==e.for||"template"===e.tag||"slot"===e.tag}function Lr(e){return!ws(e.tag)}function Rr(e){return 1===e.type?$r(e):Fr(e)}function Fr(e){return"_v("+(2===e.type?e.expression:zr(JSON.stringify(e.text)))+")"}function Ur(e){var t=e.slotName||'"default"',n=jr(e),r="_t("+t+(n?","+n:""),o=e.attrs&&"{"+e.attrs.map(function(e){return bo(e.name)+":"+e.value}).join(",")+"}",i=e.attrsMap["v-bind"];return!o&&!i||n||(r+=",null"),o&&(r+=","+o),i&&(r+=(o?"":",null")+","+i),r+")"}function Hr(e,t){var n=t.inlineTemplate?null:jr(t,!0);return"_c("+e+","+Dr(t)+(n?","+n:"")+")"}function Br(e){for(var t="",n=0;n<e.length;n++){var r=e[n];t+='"'+r.name+'":'+zr(r.value)+","}return t.slice(0,-1)}function zr(e){return e.replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029")}function qr(e,t){var n=qn(e.trim(),t);dr(n,t);var r=Nr(n,t);return{ast:n,render:r.render,staticRenderFns:r.staticRenderFns}}function Jr(e){var t=[];return e&&Kr(e,t),t}function Kr(e,t){if(1===e.type){for(var n in e.attrsMap)if(Ms.test(n)){var r=e.attrsMap[n];r&&("v-for"===n?Zr(e,'v-for="'+r+'"',t):Yr(r,n+'="'+r+'"',t))}if(e.children)for(var o=0;o<e.children.length;o++)Kr(e.children[o],t)}else 2===e.type&&Yr(e.expression,e.text,t)}function Zr(e,t,n){Yr(e.for||"",t,n),Wr(e.alias,"v-for alias",t,n),Wr(e.iterator1,"v-for iterator",t,n),Wr(e.iterator2,"v-for iterator",t,n)}function Wr(e,t,n,r){"string"!=typeof e||Xs.test(e)||r.push("- invalid "+t+' "'+e+'" in expression: '+n)}function Yr(e,t,n){try{new Function("return "+e)}catch(o){var r=e.replace(ec,"").match(Qs);r?n.push('- avoid using JavaScript keyword as property name: "'+r[0]+'" in expression '+t):n.push("- invalid expression: "+t)}}function Gr(e,n){var r=n.warn||Tn,o=Ln(e,"class");if("production"!==t.env.NODE_ENV&&o){var i=Dn(o,n.delimiters);i&&r('class="'+o+'": Interpolation inside attributes has been removed. Use v-bind or the colon shorthand instead. For example, instead of <div class="{{ val }}">, use <div :class="val">.')}o&&(e.staticClass=JSON.stringify(o));var a=Pn(e,"class",!1);a&&(e.classBinding=a)}function Qr(e){var t="";return e.staticClass&&(t+="staticClass:"+e.staticClass+","),e.classBinding&&(t+="class:"+e.classBinding+","),t}function Xr(e,n){var r=n.warn||Tn,o=Ln(e,"style");if(o){if("production"!==t.env.NODE_ENV){var i=Dn(o,n.delimiters);i&&r('style="'+o+'": Interpolation inside attributes has been removed. Use v-bind or the colon shorthand instead. For example, instead of <div style="{{ val }}">, use <div :style="val">.')}e.staticStyle=JSON.stringify(sa(o))}var a=Pn(e,"style",!1);a&&(e.styleBinding=a)}function eo(e){var t="";return e.staticStyle&&(t+="staticStyle:"+e.staticStyle+","),e.styleBinding&&(t+="style:("+e.styleBinding+"),"),t}function to(e,n,r){xs=r;var o=n.value,i=n.modifiers,a=e.tag,s=e.attrsMap.type;if("production"!==t.env.NODE_ENV){var c=e.attrsMap["v-bind:type"]||e.attrsMap[":type"];"input"===a&&c&&xs('<input :type="'+c+'" v-model="'+o+'">:\nv-model does not support dynamic input types. Use v-if branches instead.')}return"select"===a?io(e,o,i):"input"===a&&"checkbox"===s?no(e,o,i):"input"===a&&"radio"===s?ro(e,o,i):oo(e,o,i),!0}function no(e,n,r){"production"!==t.env.NODE_ENV&&null!=e.attrsMap.checked&&xs("<"+e.tag+' v-model="'+n+"\" checked>:\ninline checked attributes will be ignored when using v-model. Declare initial values in the component's data option instead.");var o=r&&r.number,i=Pn(e,"value")||"null",a=Pn(e,"true-value")||"true",s=Pn(e,"false-value")||"false";Vn(e,"checked","Array.isArray("+n+")?_i("+n+","+i+")>-1"+("true"===a?":("+n+")":":_q("+n+","+a+")")),Mn(e,"click","var $$a="+n+",$$el=$event.target,$$c=$$el.checked?("+a+"):("+s+");if(Array.isArray($$a)){var $$v="+(o?"_n("+i+")":i)+",$$i=_i($$a,$$v);if($$c){$$i<0&&("+n+"=$$a.concat($$v))}else{$$i>-1&&("+n+"=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}}else{"+n+"=$$c}",null,!0)}function ro(e,n,r){"production"!==t.env.NODE_ENV&&null!=e.attrsMap.checked&&xs("<"+e.tag+' v-model="'+n+"\" checked>:\ninline checked attributes will be ignored when using v-model. Declare initial values in the component's data option instead.");var o=r&&r.number,i=Pn(e,"value")||"null";i=o?"_n("+i+")":i,Vn(e,"checked","_q("+n+","+i+")"),Mn(e,"click",so(n,i),null,!0)}function oo(e,n,r){"production"!==t.env.NODE_ENV&&("input"===e.tag&&e.attrsMap.value&&xs("<"+e.tag+' v-model="'+n+'" value="'+e.attrsMap.value+"\">:\ninline value attributes will be ignored when using v-model. Declare initial values in the component's data option instead."),"textarea"===e.tag&&e.children.length&&xs('<textarea v-model="'+n+"\">:\ninline content inside <textarea> will be ignored when using v-model. Declare initial values in the component's data option instead."));var o=e.attrsMap.type,i=r||{},a=i.lazy,s=i.number,c=i.trim,u=a||Vo&&"range"===o?"change":"input",l=!a&&"range"!==o,d="input"===e.tag||"textarea"===e.tag,f=d?"$event.target.value"+(c?".trim()":""):c?"(typeof $event === 'string' ? $event.trim() : $event)":"$event";f=s||"number"===o?"_n("+f+")":f;var p=so(n,f);d&&l&&(p="if($event.target.composing)return;"+p),"production"!==t.env.NODE_ENV&&"file"===o&&xs("<"+e.tag+' v-model="'+n+'" type="file">:\nFile inputs are read only. Use a v-on:change listener instead.'),
Vn(e,"value",d?"_s("+n+")":"("+n+")"),Mn(e,u,p,null,!0),(c||s||"number"===o)&&Mn(e,"blur","$forceUpdate()")}function io(e,n,r){"production"!==t.env.NODE_ENV&&e.children.some(ao);var o=r&&r.number,i='Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return '+(o?"_n(val)":"val")+"})"+(null==e.attrsMap.multiple?"[0]":""),a=so(n,i);Mn(e,"change",a,null,!0)}function ao(e){return 1===e.type&&"option"===e.tag&&null!=e.attrsMap.selected&&(xs('<select v-model="'+e.parent.attrsMap["v-model"]+"\">:\ninline selected attributes on <option> will be ignored when using v-model. Declare initial values in the component's data option instead."),!0)}function so(e,t){var n=Rn(e);return null===n.idx?e+"="+t:"var $$exp = "+n.exp+", $$idx = "+n.idx+";if (!Array.isArray($$exp)){"+e+"="+t+"}else{$$exp.splice($$idx, 1, "+t+")}"}function co(e,t){t.value&&Vn(e,"textContent","_s("+t.value+")")}function uo(e,t){t.value&&Vn(e,"innerHTML","_s("+t.value+")")}function lo(e,t){return t=t?f(f({},ac),t):ac,qr(e,t)}function fo(e,n,r){var o=n&&n.warn||Ho;if("production"!==t.env.NODE_ENV)try{new Function("return 1")}catch(e){e.toString().match(/unsafe-eval|CSP/)&&o("It seems you are using the standalone build of Vue.js in an environment with Content Security Policy that prohibits unsafe-eval. The template compiler cannot work in this environment. Consider relaxing the policy to allow unsafe-eval or pre-compiling your templates into render functions.")}var i=n&&n.delimiters?String(n.delimiters)+e:e;if(ic[i])return ic[i];var a={},s=lo(e,n);a.render=po(s.render);var c=s.staticRenderFns.length;a.staticRenderFns=new Array(c);for(var u=0;u<c;u++)a.staticRenderFns[u]=po(s.staticRenderFns[u]);return"production"!==t.env.NODE_ENV&&(a.render===m||a.staticRenderFns.some(function(e){return e===m}))&&o("failed to compile template:\n\n"+e+"\n\n"+Jr(s.ast).join("\n")+"\n\n",r),ic[i]=a}function po(e){try{return new Function(e)}catch(e){return m}}function vo(e){if(e.outerHTML)return e.outerHTML;var t=document.createElement("div");return t.appendChild(e.cloneNode(!0)),t.innerHTML}var ho,mo,go=i("slot,component",!0),yo=Object.prototype.hasOwnProperty,_o=/-(\w)/g,bo=u(function(e){return e.replace(_o,function(e,t){return t?t.toUpperCase():""})}),wo=u(function(e){return e.charAt(0).toUpperCase()+e.slice(1)}),Eo=/([^-])([A-Z])/g,No=u(function(e){return e.replace(Eo,"$1-$2").replace(Eo,"$1-$2").toLowerCase()}),$o=Object.prototype.toString,xo="[object Object]",Oo=function(){return!1},ko=function(e){return e},Co={optionMergeStrategies:Object.create(null),silent:!1,devtools:"production"!==t.env.NODE_ENV,errorHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:Oo,isUnknownElement:Oo,getTagNamespace:m,parsePlatformTagName:ko,mustUseProp:Oo,_assetTypes:["component","directive","filter"],_lifecycleHooks:["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated"],_maxUpdateCount:100},Ao=/[^\w.$]/,Do="__proto__"in{},To="undefined"!=typeof window,So=To&&window.navigator.userAgent.toLowerCase(),Vo=So&&/msie|trident/.test(So),Io=So&&So.indexOf("msie 9.0")>0,jo=So&&So.indexOf("edge/")>0,Mo=So&&So.indexOf("android")>0,Po=So&&/iphone|ipad|ipod|ios/.test(So),Lo=function(){return void 0===ho&&(ho=!To&&"undefined"!=typeof n&&"server"===n.process.env.VUE_ENV),ho},Ro=To&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__,Fo=function(){function e(){r=!1;var e=n.slice(0);n.length=0;for(var t=0;t<e.length;t++)e[t]()}var t,n=[],r=!1;if("undefined"!=typeof Promise&&N(Promise)){var o=Promise.resolve(),i=function(e){console.error(e)};t=function(){o.then(e).catch(i),Po&&setTimeout(m)}}else if("undefined"==typeof MutationObserver||!N(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())t=function(){setTimeout(e,0)};else{var a=1,s=new MutationObserver(e),c=document.createTextNode(String(a));s.observe(c,{characterData:!0}),t=function(){a=(a+1)%2,c.data=String(a)}}return function(e,o){var i;if(n.push(function(){e&&e.call(o),i&&i(o)}),r||(r=!0,t()),!e&&"undefined"!=typeof Promise)return new Promise(function(e){i=e})}}();mo="undefined"!=typeof Set&&N(Set)?Set:function(){function e(){this.set=Object.create(null)}return e.prototype.has=function(e){return this.set[e]===!0},e.prototype.add=function(e){this.set[e]=!0},e.prototype.clear=function(){this.set=Object.create(null)},e}();var Uo,Ho=m;if("production"!==t.env.NODE_ENV){var Bo="undefined"!=typeof console;Ho=function(e,t){Bo&&!Co.silent&&console.error("[Vue warn]: "+e+" "+(t?zo(Uo(t)):""))},Uo=function(e){if(e.$root===e)return"root instance";var t=e._isVue?e.$options.name||e.$options._componentTag:e.name;return(t?"component <"+t+">":"anonymous component")+(e._isVue&&e.$options.__file?" at "+e.$options.__file:"")};var zo=function(e){return"anonymous component"===e&&(e+=' - use the "name" option for better debugging messages.'),"\n(found in "+e+")"}}var qo=0,Jo=function(){this.id=qo++,this.subs=[]};Jo.prototype.addSub=function(e){this.subs.push(e)},Jo.prototype.removeSub=function(e){a(this.subs,e)},Jo.prototype.depend=function(){Jo.target&&Jo.target.addDep(this)},Jo.prototype.notify=function(){for(var e=this.subs.slice(),t=0,n=e.length;t<n;t++)e[t].update()},Jo.target=null;var Ko=[],Zo=Array.prototype,Wo=Object.create(Zo);["push","pop","shift","unshift","splice","sort","reverse"].forEach(function(e){var t=Zo[e];w(Wo,e,function(){for(var n=arguments,r=arguments.length,o=new Array(r);r--;)o[r]=n[r];var i,a=t.apply(this,o),s=this.__ob__;switch(e){case"push":i=o;break;case"unshift":i=o;break;case"splice":i=o.slice(2)}return i&&s.observeArray(i),s.dep.notify(),a})});var Yo=Object.getOwnPropertyNames(Wo),Go={shouldConvert:!0,isSettingProps:!1},Qo=function(e){if(this.value=e,this.dep=new Jo,this.vmCount=0,w(e,"__ob__",this),Array.isArray(e)){var t=Do?O:k;t(e,Wo,Yo),this.observeArray(e)}else this.walk(e)};Qo.prototype.walk=function(e){for(var t=Object.keys(e),n=0;n<t.length;n++)A(e,t[n],e[t[n]])},Qo.prototype.observeArray=function(e){for(var t=0,n=e.length;t<n;t++)C(e[t])};var Xo=Co.optionMergeStrategies;"production"!==t.env.NODE_ENV&&(Xo.el=Xo.propsData=function(e,t,n,r){return n||Ho('option "'+r+'" can only be used during instance creation with the `new` keyword.'),ti(e,t)}),Xo.data=function(e,n,r){return r?e||n?function(){var t="function"==typeof n?n.call(r):n,o="function"==typeof e?e.call(r):void 0;return t?V(t,o):o}:void 0:n?"function"!=typeof n?("production"!==t.env.NODE_ENV&&Ho('The "data" option should be a function that returns a per-instance value in component definitions.',r),e):e?function(){return V(n.call(this),e.call(this))}:n:e},Co._lifecycleHooks.forEach(function(e){Xo[e]=I}),Co._assetTypes.forEach(function(e){Xo[e+"s"]=j}),Xo.watch=function(e,t){if(!t)return e;if(!e)return t;var n={};f(n,e);for(var r in t){var o=n[r],i=t[r];o&&!Array.isArray(o)&&(o=[o]),n[r]=o?o.concat(i):[i]}return n},Xo.props=Xo.methods=Xo.computed=function(e,t){if(!t)return e;if(!e)return t;var n=Object.create(null);return f(n,e),f(n,t),n};var ei,ti=function(e,t){return void 0===t?e:t},ni=Object.freeze({defineReactive:A,_toString:r,toNumber:o,makeMap:i,isBuiltInTag:go,remove:a,hasOwn:s,isPrimitive:c,cached:u,camelize:bo,capitalize:wo,hyphenate:No,bind:l,toArray:d,extend:f,isObject:p,isPlainObject:v,toObject:h,noop:m,no:Oo,identity:ko,genStaticKeys:g,looseEqual:y,looseIndexOf:_,isReserved:b,def:w,parsePath:E,hasProto:Do,inBrowser:To,UA:So,isIE:Vo,isIE9:Io,isEdge:jo,isAndroid:Mo,isIOS:Po,isServerRendering:Lo,devtools:Ro,nextTick:Fo,get _Set(){return mo},mergeOptions:R,resolveAsset:F,get warn(){return Ho},get formatComponentName(){return Uo},validateProp:U});if("production"!==t.env.NODE_ENV){var ri=i("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,require"),oi=function(e,t){Ho('Property or method "'+t+'" is not defined on the instance but referenced during render. Make sure to declare reactive data properties in the data option.',e)},ii="undefined"!=typeof Proxy&&Proxy.toString().match(/native code/);if(ii){var ai=i("stop,prevent,self,ctrl,shift,alt,meta");Co.keyCodes=new Proxy(Co.keyCodes,{set:function(e,t,n){return ai(t)?(Ho("Avoid overwriting built-in modifier in config.keyCodes: ."+t),!1):(e[t]=n,!0)}})}var si={has:function e(t,n){var e=n in t,r=ri(n)||"_"===n.charAt(0);return e||r||oi(t,n),e||!r}},ci={get:function(e,t){return"string"!=typeof t||t in e||oi(e,t),e[t]}};ei=function(e){if(ii){var t=e.$options,n=t.render&&t.render._withStripped?ci:si;e._renderProxy=new Proxy(e,n)}else e._renderProxy=e}}var ui=function(e,t,n,r,o,i,a){this.tag=e,this.data=t,this.children=n,this.text=r,this.elm=o,this.ns=void 0,this.context=i,this.functionalContext=void 0,this.key=t&&t.key,this.componentOptions=a,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1},li={child:{}};li.child.get=function(){return this.componentInstance},Object.defineProperties(ui.prototype,li);var di,fi=function(){var e=new ui;return e.text="",e.isComment=!0,e},pi={init:X,prepatch:ee,insert:te,destroy:ne},vi=Object.keys(pi),hi=u(function(e){var t="~"===e.charAt(0);e=t?e.slice(1):e;var n="!"===e.charAt(0);return e=n?e.slice(1):e,{name:e,once:t,capture:n}}),mi=1,gi=2,yi=null,_i=[],bi={},wi={},Ei=!1,Ni=!1,$i=0,xi=0,Oi=function(e,n,r,o){this.vm=e,e._watchers.push(this),o?(this.deep=!!o.deep,this.user=!!o.user,this.lazy=!!o.lazy,this.sync=!!o.sync):this.deep=this.user=this.lazy=this.sync=!1,this.cb=r,this.id=++xi,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new mo,this.newDepIds=new mo,this.expression="production"!==t.env.NODE_ENV?n.toString():"","function"==typeof n?this.getter=n:(this.getter=E(n),this.getter||(this.getter=function(){},"production"!==t.env.NODE_ENV&&Ho('Failed watching path: "'+n+'" Watcher only accepts simple dot-delimited paths. For full control, use a function instead.',e))),this.value=this.lazy?void 0:this.get()};Oi.prototype.get=function(){$(this);var e=this.getter.call(this.vm,this.vm);return this.deep&&Se(e),x(),this.cleanupDeps(),e},Oi.prototype.addDep=function(e){var t=e.id;this.newDepIds.has(t)||(this.newDepIds.add(t),this.newDeps.push(e),this.depIds.has(t)||e.addSub(this))},Oi.prototype.cleanupDeps=function(){for(var e=this,t=this.deps.length;t--;){var n=e.deps[t];e.newDepIds.has(n.id)||n.removeSub(e)}var r=this.depIds;this.depIds=this.newDepIds,this.newDepIds=r,this.newDepIds.clear(),r=this.deps,this.deps=this.newDeps,this.newDeps=r,this.newDeps.length=0},Oi.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():Te(this)},Oi.prototype.run=function(){if(this.active){var e=this.get();if(e!==this.value||p(e)||this.deep){var n=this.value;if(this.value=e,this.user)try{this.cb.call(this.vm,e,n)}catch(e){if(!Co.errorHandler)throw"production"!==t.env.NODE_ENV&&Ho('Error in watcher "'+this.expression+'"',this.vm),e;Co.errorHandler.call(null,e,this.vm)}else this.cb.call(this.vm,e,n)}}},Oi.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},Oi.prototype.depend=function(){for(var e=this,t=this.deps.length;t--;)e.deps[t].depend()},Oi.prototype.teardown=function(){var e=this;if(this.active){this.vm._isBeingDestroyed||a(this.vm._watchers,this);for(var t=this.deps.length;t--;)e.deps[t].removeSub(e);this.active=!1}};var ki=new mo,Ci={key:1,ref:1,slot:1},Ai={enumerable:!0,configurable:!0,get:m,set:m},Di=0;ze(Ke),He(Ke),xe(Ke),ke(Ke),_e(Ke);var Ti=[String,RegExp],Si={name:"keep-alive",abstract:!0,props:{include:Ti,exclude:Ti},created:function(){this.cache=Object.create(null)},destroyed:function(){var e=this;for(var t in this.cache)tt(e.cache[t])},watch:{include:function(e){et(this.cache,function(t){return Xe(e,t)})},exclude:function(e){et(this.cache,function(t){return!Xe(e,t)})}},render:function(){var e=ve(this.$slots.default),t=e&&e.componentOptions;if(t){var n=Qe(t);if(n&&(this.include&&!Xe(this.include,n)||this.exclude&&Xe(this.exclude,n)))return e;var r=null==e.key?t.Ctor.cid+(t.tag?"::"+t.tag:""):e.key;this.cache[r]?e.componentInstance=this.cache[r].componentInstance:this.cache[r]=e,e.data.keepAlive=!0}return e}},Vi={KeepAlive:Si};nt(Ke),Object.defineProperty(Ke.prototype,"$isServer",{get:Lo}),Ke.version="2.1.10";var Ii,ji,Mi=i("input,textarea,option,select"),Pi=function(e,t,n){return"value"===n&&Mi(e)&&"button"!==t||"selected"===n&&"option"===e||"checked"===n&&"input"===e||"muted"===n&&"video"===e},Li=i("contenteditable,draggable,spellcheck"),Ri=i("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,translate,truespeed,typemustmatch,visible"),Fi="http://www.w3.org/1999/xlink",Ui=function(e){return":"===e.charAt(5)&&"xlink"===e.slice(0,5)},Hi=function(e){return Ui(e)?e.slice(6,e.length):""},Bi=function(e){return null==e||e===!1},zi={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},qi=i("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template"),Ji=i("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),Ki=function(e){return"pre"===e},Zi=function(e){return qi(e)||Ji(e)},Wi=Object.create(null),Yi=Object.freeze({createElement:dt,createElementNS:ft,createTextNode:pt,createComment:vt,insertBefore:ht,removeChild:mt,appendChild:gt,parentNode:yt,nextSibling:_t,tagName:bt,setTextContent:wt,setAttribute:Et}),Gi={create:function(e,t){Nt(t)},update:function(e,t){e.data.ref!==t.data.ref&&(Nt(e,!0),Nt(t))},destroy:function(e){Nt(e,!0)}},Qi=new ui("",{},[]),Xi=["create","activate","update","remove","destroy"],ea={create:At,update:At,destroy:function(e){At(e,Qi)}},ta=Object.create(null),na=[Gi,ea],ra={create:It,update:It},oa={create:Mt,update:Mt},ia={create:Rt,update:Rt},aa={create:Ft,update:Ft},sa=u(function(e){var t={},n=/;(?![^(]*\))/g,r=/:(.+)/;return e.split(n).forEach(function(e){if(e){var n=e.split(r);n.length>1&&(t[n[0].trim()]=n[1].trim())}}),t}),ca=/^--/,ua=/\s*!important$/,la=function(e,t,n){ca.test(t)?e.style.setProperty(t,n):ua.test(n)?e.style.setProperty(t,n.replace(ua,""),"important"):e.style[fa(t)]=n},da=["Webkit","Moz","ms"],fa=u(function(e){if(ji=ji||document.createElement("div"),e=bo(e),"filter"!==e&&e in ji.style)return e;for(var t=e.charAt(0).toUpperCase()+e.slice(1),n=0;n<da.length;n++){var r=da[n]+t;if(r in ji.style)return r}}),pa={create:Kt,update:Kt},va=To&&!Io,ha="transition",ma="animation",ga="transition",ya="transitionend",_a="animation",ba="animationend";va&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(ga="WebkitTransition",ya="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(_a="WebkitAnimation",ba="webkitAnimationEnd"));var wa=To&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout,Ea=/\b(transform|all)(,|$)/,Na=u(function(e){return{enterClass:e+"-enter",leaveClass:e+"-leave",appearClass:e+"-enter",enterToClass:e+"-enter-to",leaveToClass:e+"-leave-to",appearToClass:e+"-enter-to",enterActiveClass:e+"-enter-active",leaveActiveClass:e+"-leave-active",appearActiveClass:e+"-enter-active"}}),$a=To?{create:cn,activate:cn,remove:function(e,t){e.data.show?t():on(e,t)}}:{},xa=[ra,oa,ia,aa,pa,$a],Oa=xa.concat(na),ka=Ct({nodeOps:Yi,modules:Oa}),Ca=/^input|select|textarea|vue-component-[0-9]+(-[0-9a-zA-Z_-]*)?$/;Io&&document.addEventListener("selectionchange",function(){var e=document.activeElement;e&&e.vmodel&&vn(e,"input")});var Aa={inserted:function(e,n,r){if("production"!==t.env.NODE_ENV&&(Ca.test(r.tag)||Ho("v-model is not supported on element type: <"+r.tag+">. If you are working with contenteditable, it's recommended to wrap a library dedicated for that purpose inside a custom component.",r.context)),"select"===r.tag){var o=function(){un(e,n,r.context)};o(),(Vo||jo)&&setTimeout(o,0)}else"textarea"!==r.tag&&"text"!==e.type||(e._vModifiers=n.modifiers,n.modifiers.lazy||(Mo||(e.addEventListener("compositionstart",fn),e.addEventListener("compositionend",pn)),Io&&(e.vmodel=!0)))},componentUpdated:function(e,t,n){if("select"===n.tag){un(e,t,n.context);var r=e.multiple?t.value.some(function(t){return ln(t,e.options)}):t.value!==t.oldValue&&ln(t.value,e.options);r&&vn(e,"change")}}},Da={bind:function(e,t,n){var r=t.value;n=hn(n);var o=n.data&&n.data.transition,i=e.__vOriginalDisplay="none"===e.style.display?"":e.style.display;r&&o&&!Io?(n.data.show=!0,rn(n,function(){e.style.display=i})):e.style.display=r?i:"none"},update:function(e,t,n){var r=t.value,o=t.oldValue;if(r!==o){n=hn(n);var i=n.data&&n.data.transition;i&&!Io?(n.data.show=!0,r?rn(n,function(){e.style.display=e.__vOriginalDisplay}):on(n,function(){e.style.display="none"})):e.style.display=r?e.__vOriginalDisplay:"none"}},unbind:function(e,t,n,r,o){o||(e.style.display=e.__vOriginalDisplay)}},Ta={model:Aa,show:Da},Sa={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String},Va={name:"transition",props:Sa,abstract:!0,render:function(e){var n=this,r=this.$slots.default;if(r&&(r=r.filter(function(e){return e.tag}),r.length)){"production"!==t.env.NODE_ENV&&r.length>1&&Ho("<transition> can only be used on a single element. Use <transition-group> for lists.",this.$parent);var o=this.mode;"production"!==t.env.NODE_ENV&&o&&"in-out"!==o&&"out-in"!==o&&Ho("invalid <transition> mode: "+o,this.$parent);var i=r[0];if(_n(this.$vnode))return i;var a=mn(i);if(!a)return i;if(this._leaving)return yn(e,i);var s="__transition-"+this._uid+"-",u=a.key=null==a.key?s+a.tag:c(a.key)?0===String(a.key).indexOf(s)?a.key:s+a.key:a.key,l=(a.data||(a.data={})).transition=gn(this),d=this._vnode,p=mn(d);if(a.data.directives&&a.data.directives.some(function(e){return"show"===e.name})&&(a.data.show=!0),p&&p.data&&!bn(a,p)){var v=p&&(p.data.transition=f({},l));if("out-in"===o)return this._leaving=!0,ce(v,"afterLeave",function(){n._leaving=!1,n.$forceUpdate()},u),yn(e,i);if("in-out"===o){var h,m=function(){h()};ce(l,"afterEnter",m,u),ce(l,"enterCancelled",m,u),ce(v,"delayLeave",function(e){h=e},u)}}return i}}},Ia=f({tag:String,moveClass:String},Sa);delete Ia.mode;var ja={props:Ia,render:function(e){for(var n=this.tag||this.$vnode.data.tag||"span",r=Object.create(null),o=this.prevChildren=this.children,i=this.$slots.default||[],a=this.children=[],s=gn(this),c=0;c<i.length;c++){var u=i[c];if(u.tag)if(null!=u.key&&0!==String(u.key).indexOf("__vlist"))a.push(u),r[u.key]=u,(u.data||(u.data={})).transition=s;else if("production"!==t.env.NODE_ENV){var l=u.componentOptions,d=l?l.Ctor.options.name||l.tag:u.tag;Ho("<transition-group> children must be keyed: <"+d+">")}}if(o){for(var f=[],p=[],v=0;v<o.length;v++){var h=o[v];h.data.transition=s,h.data.pos=h.elm.getBoundingClientRect(),r[h.key]?f.push(h):p.push(h)}this.kept=e(n,null,f),this.removed=p}return e(n,null,a)},beforeUpdate:function(){this.__patch__(this._vnode,this.kept,!1,!0),this._vnode=this.kept},updated:function(){var e=this.prevChildren,t=this.moveClass||(this.name||"v")+"-move";if(e.length&&this.hasMove(e[0].elm,t)){e.forEach(wn),e.forEach(En),e.forEach(Nn);document.body.offsetHeight;e.forEach(function(e){if(e.data.moved){var n=e.elm,r=n.style;Gt(n,t),r.transform=r.WebkitTransform=r.transitionDuration="",n.addEventListener(ya,n._moveCb=function e(r){r&&!/transform$/.test(r.propertyName)||(n.removeEventListener(ya,e),n._moveCb=null,Qt(n,t))})}})}},methods:{hasMove:function(e,t){if(!va)return!1;if(null!=this._hasMove)return this._hasMove;Gt(e,t);var n=en(e);return Qt(e,t),this._hasMove=n.hasTransform}}},Ma={Transition:Va,TransitionGroup:ja};Ke.config.isUnknownElement=ut,Ke.config.isReservedTag=Zi,Ke.config.getTagNamespace=ct,Ke.config.mustUseProp=Pi,f(Ke.options.directives,Ta),f(Ke.options.components,Ma),Ke.prototype.__patch__=To?ka:m,Ke.prototype.$mount=function(e,t){return e=e&&To?lt(e):void 0,this._mount(e,t)},"production"!==t.env.NODE_ENV&&To&&"undefined"!=typeof console&&console[console.info?"info":"log"]("You are running Vue in development mode.\nMake sure to turn on production mode when deploying for production.\nSee more tips at https://vuejs.org/guide/deployment.html"),setTimeout(function(){Co.devtools&&(Ro?Ro.emit("init",Ke):"production"!==t.env.NODE_ENV&&To&&!jo&&/Chrome\/\d+/.test(window.navigator.userAgent)&&console[console.info?"info":"log"]("Download the Vue Devtools extension for a better development experience:\nhttps://github.com/vuejs/vue-devtools"))},0);var Pa,La=!!To&&$n("\n","&#10;"),Ra=i("area,base,br,col,embed,frame,hr,img,input,isindex,keygen,link,meta,param,source,track,wbr",!0),Fa=i("colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source",!0),Ua=i("address,article,aside,base,blockquote,body,caption,col,colgroup,dd,details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,title,tr,track",!0),Ha=/([^\s"'<>\/=]+)/,Ba=/(?:=)/,za=[/"([^"]*)"+/.source,/'([^']*)'+/.source,/([^\s"'=<>`]+)/.source],qa=new RegExp("^\\s*"+Ha.source+"(?:\\s*("+Ba.source+")\\s*(?:"+za.join("|")+"))?"),Ja="[a-zA-Z_][\\w\\-\\.]*",Ka="((?:"+Ja+"\\:)?"+Ja+")",Za=new RegExp("^<"+Ka),Wa=/^\s*(\/?)>/,Ya=new RegExp("^<\\/"+Ka+"[^>]*>"),Ga=/^<!DOCTYPE [^>]+>/i,Qa=/^<!--/,Xa=/^<!\[/,es=!1;"x".replace(/x(.)?/g,function(e,t){es=""===t});var ts,ns,rs,os,is,as,ss,cs,us,ls,ds,fs,ps,vs,hs,ms,gs,ys,_s,bs,ws,Es,Ns,$s,xs,Os=i("script,style",!0),ks={},Cs=/&lt;/g,As=/&gt;/g,Ds=/&#10;/g,Ts=/&amp;/g,Ss=/&quot;/g,Vs=/\{\{((?:.|\n)+?)\}\}/g,Is=/[-.*+?^${}()|[\]\/\\]/g,js=u(function(e){var t=e[0].replace(Is,"\\$&"),n=e[1].replace(Is,"\\$&");return new RegExp(t+"((?:.|\\n)+?)"+n,"g")}),Ms=/^v-|^@|^:/,Ps=/(.*?)\s+(?:in|of)\s+(.*)/,Ls=/\((\{[^}]*\}|[^,]*),([^,]*)(?:,([^,]*))?\)/,Rs=/^:|^v-bind:/,Fs=/^@|^v-on:/,Us=/:(.*)$/,Hs=/\.[^.]+/g,Bs=u(xn),zs=/^xmlns:NS\d+/,qs=/^NS\d+:/,Js=u(fr),Ks=/^\s*([\w$_]+|\([^)]*?\))\s*=>|^function\s*\(/,Zs=/^\s*[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['.*?']|\[".*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*\s*$/,Ws={esc:27,tab:9,enter:13,space:32,up:38,left:37,right:39,down:40,delete:[8,46]},Ys={stop:"$event.stopPropagation();",prevent:"$event.preventDefault();",self:"if($event.target !== $event.currentTarget)return;",ctrl:"if(!$event.ctrlKey)return;",shift:"if(!$event.shiftKey)return;",alt:"if(!$event.altKey)return;",meta:"if(!$event.metaKey)return;"},Gs={bind:Er,cloak:m},Qs=new RegExp("\\b"+"do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,super,throw,while,yield,delete,export,import,return,switch,default,extends,finally,continue,debugger,function,arguments".split(",").join("\\b|\\b")+"\\b"),Xs=/[A-Za-z_$][\w$]*/,ec=/'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`/g,tc={staticKeys:["staticClass"],transformNode:Gr,genData:Qr},nc={staticKeys:["staticStyle"],transformNode:Xr,genData:eo},rc=[tc,nc],oc={model:to,text:co,html:uo},ic=Object.create(null),ac={expectHTML:!0,modules:rc,staticKeys:g(rc),directives:oc,isReservedTag:Zi,isUnaryTag:Ra,mustUseProp:Pi,getTagNamespace:ct,isPreTag:Ki},sc=u(function(e){var t=lt(e);return t&&t.innerHTML}),cc=Ke.prototype.$mount;Ke.prototype.$mount=function(e,n){if(e=e&&lt(e),e===document.body||e===document.documentElement)return"production"!==t.env.NODE_ENV&&Ho("Do not mount Vue to <html> or <body> - mount to normal elements instead."),this;var r=this.$options;if(!r.render){var o=r.template;if(o)if("string"==typeof o)"#"===o.charAt(0)&&(o=sc(o),"production"===t.env.NODE_ENV||o||Ho("Template element not found or is empty: "+r.template,this));else{if(!o.nodeType)return"production"!==t.env.NODE_ENV&&Ho("invalid template option:"+o,this),this;o=o.innerHTML}else e&&(o=vo(e));if(o){var i=fo(o,{warn:Ho,shouldDecodeNewlines:La,delimiters:r.delimiters},this),a=i.render,s=i.staticRenderFns;r.render=a,r.staticRenderFns=s}}return cc.call(this,e,n)},Ke.compile=fo,e.exports=Ke}).call(t,n(2),function(){return this}())},function(e,t){function n(){throw new Error("setTimeout has not been defined")}function r(){throw new Error("clearTimeout has not been defined")}function o(e){if(l===setTimeout)return setTimeout(e,0);if((l===n||!l)&&setTimeout)return l=setTimeout,setTimeout(e,0);try{return l(e,0)}catch(t){try{return l.call(null,e,0)}catch(t){return l.call(this,e,0)}}}function i(e){if(d===clearTimeout)return clearTimeout(e);if((d===r||!d)&&clearTimeout)return d=clearTimeout,clearTimeout(e);try{return d(e)}catch(t){try{return d.call(null,e)}catch(t){return d.call(this,e)}}}function a(){h&&p&&(h=!1,p.length?v=p.concat(v):m=-1,v.length&&s())}function s(){if(!h){var e=o(a);h=!0;for(var t=v.length;t;){for(p=v,v=[];++m<t;)p&&p[m].run();m=-1,t=v.length}p=null,h=!1,i(e)}}function c(e,t){this.fun=e,this.array=t}function u(){}var l,d,f=e.exports={};!function(){try{l="function"==typeof setTimeout?setTimeout:n}catch(e){l=n}try{d="function"==typeof clearTimeout?clearTimeout:r}catch(e){d=r}}();var p,v=[],h=!1,m=-1;f.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];v.push(new c(e,t)),1!==v.length||h||o(s)},c.prototype.run=function(){this.fun.apply(null,this.array)},f.title="browser",f.browser=!0,f.env={},f.argv=[],f.version="",f.versions={},f.on=u,f.addListener=u,f.once=u,f.off=u,f.removeListener=u,f.removeAllListeners=u,f.emit=u,f.binding=function(e){throw new Error("process.binding is not supported")},f.cwd=function(){return"/"},f.chdir=function(e){throw new Error("process.chdir is not supported")},f.umask=function(){return 0}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vbXktY29tLmpzIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCBiYjIwYzVkODA2ZWFjMDMxZWRmOSIsIndlYnBhY2s6Ly8vLi9qcy9sYXlvdXQuanMiLCJ3ZWJwYWNrOi8vLy4vfi92dWUvZGlzdC92dWUuY29tbW9uLmpzIiwid2VicGFjazovLy8uL34vcHJvY2Vzcy9icm93c2VyLmpzIl0sIm5hbWVzIjpbIm1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJpbnN0YWxsZWRNb2R1bGVzIiwiZXhwb3J0cyIsIm1vZHVsZSIsImlkIiwibG9hZGVkIiwiY2FsbCIsIm0iLCJjIiwicCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIl92dWUiLCJwcm9jZXNzIiwiZ2xvYmFsIiwiX3RvU3RyaW5nIiwidmFsIiwiSlNPTiIsInN0cmluZ2lmeSIsIlN0cmluZyIsInRvTnVtYmVyIiwibiIsInBhcnNlRmxvYXQiLCJpc05hTiIsIm1ha2VNYXAiLCJzdHIiLCJleHBlY3RzTG93ZXJDYXNlIiwibWFwIiwiT2JqZWN0IiwiY3JlYXRlIiwibGlzdCIsInNwbGl0IiwiaSIsImxlbmd0aCIsInRvTG93ZXJDYXNlIiwicmVtb3ZlJDEiLCJhcnIiLCJpdGVtIiwiaW5kZXgiLCJpbmRleE9mIiwic3BsaWNlIiwiaGFzT3duIiwia2V5IiwiaGFzT3duUHJvcGVydHkiLCJpc1ByaW1pdGl2ZSIsInZhbHVlIiwiY2FjaGVkIiwiZm4iLCJjYWNoZSIsImhpdCIsImJpbmQkMSIsImN0eCIsImJvdW5kRm4iLCJhIiwibCIsImFyZ3VtZW50cyIsImFwcGx5IiwiX2xlbmd0aCIsInRvQXJyYXkiLCJzdGFydCIsInJldCIsIkFycmF5IiwiZXh0ZW5kIiwidG8iLCJfZnJvbSIsImlzT2JqZWN0IiwiaXNQbGFpbk9iamVjdCIsInRvU3RyaW5nIiwiT0JKRUNUX1NUUklORyIsInRvT2JqZWN0IiwicmVzIiwibm9vcCIsImdlblN0YXRpY0tleXMiLCJyZWR1Y2UiLCJrZXlzIiwiY29uY2F0Iiwic3RhdGljS2V5cyIsImpvaW4iLCJsb29zZUVxdWFsIiwiYiIsImlzT2JqZWN0QSIsImlzT2JqZWN0QiIsImxvb3NlSW5kZXhPZiIsImlzUmVzZXJ2ZWQiLCJjaGFyQ29kZUF0IiwiZGVmIiwiZW51bWVyYWJsZSIsImRlZmluZVByb3BlcnR5Iiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJwYXJzZVBhdGgiLCJwYXRoIiwiYmFpbFJFIiwidGVzdCIsInNlZ21lbnRzIiwiaXNOYXRpdmUiLCJDdG9yIiwicHVzaFRhcmdldCIsIl90YXJnZXQiLCJEZXAiLCJ0YXJnZXQiLCJ0YXJnZXRTdGFjayIsInB1c2giLCJwb3BUYXJnZXQiLCJwb3AiLCJwcm90b0F1Z21lbnQiLCJzcmMiLCJfX3Byb3RvX18iLCJjb3B5QXVnbWVudCIsIm9ic2VydmUiLCJhc1Jvb3REYXRhIiwib2IiLCJfX29iX18iLCJPYnNlcnZlciIsIm9ic2VydmVyU3RhdGUiLCJzaG91bGRDb252ZXJ0IiwiaXNTZXJ2ZXJSZW5kZXJpbmciLCJpc0FycmF5IiwiaXNFeHRlbnNpYmxlIiwiX2lzVnVlIiwidm1Db3VudCIsImRlZmluZVJlYWN0aXZlJCQxIiwiY3VzdG9tU2V0dGVyIiwiZGVwIiwicHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXR0ZXIiLCJnZXQiLCJzZXR0ZXIiLCJzZXQiLCJjaGlsZE9iIiwiZGVwZW5kIiwiZGVwZW5kQXJyYXkiLCJuZXdWYWwiLCJlbnYiLCJOT0RFX0VOViIsIm5vdGlmeSIsInNldCQxIiwiTWF0aCIsIm1heCIsIndhcm4iLCJkZWwiLCJlIiwibWVyZ2VEYXRhIiwiZnJvbSIsInRvVmFsIiwiZnJvbVZhbCIsIm1lcmdlSG9vayIsInBhcmVudFZhbCIsImNoaWxkVmFsIiwibWVyZ2VBc3NldHMiLCJjaGVja0NvbXBvbmVudHMiLCJvcHRpb25zIiwiY29tcG9uZW50cyIsImxvd2VyIiwiaXNCdWlsdEluVGFnIiwiY29uZmlnIiwiaXNSZXNlcnZlZFRhZyIsIm5vcm1hbGl6ZVByb3BzIiwicHJvcHMiLCJuYW1lIiwiY2FtZWxpemUiLCJ0eXBlIiwibm9ybWFsaXplRGlyZWN0aXZlcyIsImRpcnMiLCJkaXJlY3RpdmVzIiwiYmluZCIsInVwZGF0ZSIsIm1lcmdlT3B0aW9ucyIsInBhcmVudCIsImNoaWxkIiwidm0iLCJtZXJnZUZpZWxkIiwic3RyYXQiLCJzdHJhdHMiLCJkZWZhdWx0U3RyYXQiLCJleHRlbmRzRnJvbSIsImV4dGVuZHMiLCJtaXhpbnMiLCJtaXhpbiIsInByb3RvdHlwZSIsIlZ1ZSQzIiwicmVzb2x2ZUFzc2V0Iiwid2Fybk1pc3NpbmciLCJhc3NldHMiLCJjYW1lbGl6ZWRJZCIsIlBhc2NhbENhc2VJZCIsImNhcGl0YWxpemUiLCJzbGljZSIsInZhbGlkYXRlUHJvcCIsInByb3BPcHRpb25zIiwicHJvcHNEYXRhIiwicHJvcCIsImFic2VudCIsImlzVHlwZSIsIkJvb2xlYW4iLCJoeXBoZW5hdGUiLCJ1bmRlZmluZWQiLCJnZXRQcm9wRGVmYXVsdFZhbHVlIiwicHJldlNob3VsZENvbnZlcnQiLCJhc3NlcnRQcm9wIiwiJG9wdGlvbnMiLCJGdW5jdGlvbiIsInJlcXVpcmVkIiwidmFsaWQiLCJleHBlY3RlZFR5cGVzIiwiYXNzZXJ0ZWRUeXBlIiwiYXNzZXJ0VHlwZSIsImV4cGVjdGVkVHlwZSIsInZhbGlkYXRvciIsImdldFR5cGUiLCJtYXRjaCIsImxlbiIsImNyZWF0ZVRleHRWTm9kZSIsIlZOb2RlIiwiY2xvbmVWTm9kZSIsInZub2RlIiwiY2xvbmVkIiwidGFnIiwiZGF0YSIsImNoaWxkcmVuIiwidGV4dCIsImVsbSIsImNvbnRleHQiLCJjb21wb25lbnRPcHRpb25zIiwibnMiLCJpc1N0YXRpYyIsImlzQ2xvbmVkIiwiY2xvbmVWTm9kZXMiLCJ2bm9kZXMiLCJjcmVhdGVDb21wb25lbnQiLCJiYXNlQ3RvciIsIl9iYXNlIiwiY2lkIiwicmVzb2x2ZWQiLCJyZXNvbHZlQXN5bmNDb21wb25lbnQiLCIkZm9yY2VVcGRhdGUiLCJyZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zIiwiZXh0cmFjdFByb3BzIiwiZnVuY3Rpb25hbCIsImNyZWF0ZUZ1bmN0aW9uYWxDb21wb25lbnQiLCJsaXN0ZW5lcnMiLCJvbiIsIm5hdGl2ZU9uIiwiYWJzdHJhY3QiLCJtZXJnZUhvb2tzIiwiX2NvbnRleHQiLCJoIiwiZCIsImNyZWF0ZUVsZW1lbnQiLCJyZW5kZXIiLCJzbG90cyIsInJlc29sdmVTbG90cyIsImZ1bmN0aW9uYWxDb250ZXh0Iiwic2xvdCIsImNyZWF0ZUNvbXBvbmVudEluc3RhbmNlRm9yVm5vZGUiLCJwYXJlbnRFbG0iLCJyZWZFbG0iLCJ2bm9kZUNvbXBvbmVudE9wdGlvbnMiLCJfaXNDb21wb25lbnQiLCJfY29tcG9uZW50VGFnIiwiX3BhcmVudFZub2RlIiwiX3BhcmVudExpc3RlbmVycyIsIl9yZW5kZXJDaGlsZHJlbiIsIl9wYXJlbnRFbG0iLCJfcmVmRWxtIiwiaW5saW5lVGVtcGxhdGUiLCJzdGF0aWNSZW5kZXJGbnMiLCJpbml0IiwiaHlkcmF0aW5nIiwiY29tcG9uZW50SW5zdGFuY2UiLCJfaXNEZXN0cm95ZWQiLCJhY3RpdmVJbnN0YW5jZSIsIiRtb3VudCIsImtlZXBBbGl2ZSIsIm1vdW50ZWROb2RlIiwicHJlcGF0Y2giLCJvbGRWbm9kZSIsIl91cGRhdGVGcm9tUGFyZW50IiwiaW5zZXJ0IiwiX2lzTW91bnRlZCIsImNhbGxIb29rIiwiX2luYWN0aXZlIiwiZGVzdHJveSQxIiwiJGRlc3Ryb3kiLCJmYWN0b3J5IiwiY2IiLCJyZXF1ZXN0ZWQiLCJjYnMiLCJwZW5kaW5nQ2FsbGJhY2tzIiwic3luYyIsInJlc29sdmUiLCJyZWplY3QiLCJyZWFzb24iLCJ0aGVuIiwiYXR0cnMiLCJkb21Qcm9wcyIsImFsdEtleSIsImNoZWNrUHJvcCIsImhhc2giLCJwcmVzZXJ2ZSIsImhvb2siLCJob29rc1RvTWVyZ2UiLCJmcm9tUGFyZW50Iiwib3VycyIsImhvb2tzIiwibWVyZ2VIb29rJDEiLCJvbmUiLCJ0d28iLCJtZXJnZVZOb2RlSG9vayIsImhvb2tLZXkiLCJpbmplY3RlZEhhc2giLCJfX2luamVjdGVkIiwib2xkSG9vayIsInRoaXMiLCJjcmVhdGVFdmVudEhhbmRsZSIsImhhbmRsZSIsImludm9rZXIiLCJhcmd1bWVudHMkMSIsInVwZGF0ZUxpc3RlbmVycyIsIm9sZE9uIiwiYWRkIiwicmVtb3ZlJCQxIiwiY3VyIiwib2xkIiwiZXZlbnQiLCJub3JtYWxpemVFdmVudCIsIm9uY2UiLCJjYXB0dXJlIiwic2ltcGxlTm9ybWFsaXplQ2hpbGRyZW4iLCJub3JtYWxpemVDaGlsZHJlbiIsIm5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4iLCJuZXN0ZWRJbmRleCIsImxhc3QiLCJnZXRGaXJzdENvbXBvbmVudENoaWxkIiwiZmlsdGVyIiwibm9ybWFsaXphdGlvblR5cGUiLCJhbHdheXNOb3JtYWxpemUiLCJBTFdBWVNfTk9STUFMSVpFIiwiX2NyZWF0ZUVsZW1lbnQiLCJjcmVhdGVFbXB0eVZOb2RlIiwic2NvcGVkU2xvdHMiLCJTSU1QTEVfTk9STUFMSVpFIiwiZ2V0VGFnTmFtZXNwYWNlIiwicGFyc2VQbGF0Zm9ybVRhZ05hbWUiLCJhcHBseU5TIiwiaW5pdFJlbmRlciIsIiR2bm9kZSIsIl92bm9kZSIsIl9zdGF0aWNUcmVlcyIsInBhcmVudFZub2RlIiwicmVuZGVyQ29udGV4dCIsIiRzbG90cyIsIiRzY29wZWRTbG90cyIsIl9jIiwiJGNyZWF0ZUVsZW1lbnQiLCJyZW5kZXJNaXhpbiIsIlZ1ZSIsIm1hcmtTdGF0aWMiLCJ0cmVlIiwiaXNPbmNlIiwibWFya1N0YXRpY05vZGUiLCJub2RlIiwiJG5leHRUaWNrIiwibmV4dFRpY2siLCJfcmVuZGVyIiwicmVmIiwiX3JlbmRlclByb3h5IiwiZXJyb3JIYW5kbGVyIiwiZm9ybWF0Q29tcG9uZW50TmFtZSIsIl9zIiwiX3YiLCJfbiIsIl9lIiwiX3EiLCJfaSIsIl9tIiwiaXNJbkZvciIsIl9vIiwiX2YiLCJpZGVudGl0eSIsIl9sIiwiX3QiLCJmYWxsYmFjayIsImJpbmRPYmplY3QiLCJzY29wZWRTbG90Rm4iLCJzbG90Tm9kZXMiLCJfcmVuZGVyZWQiLCJfYiIsImFzUHJvcCIsIm11c3RVc2VQcm9wIiwiX2siLCJldmVudEtleUNvZGUiLCJidWlsdEluQWxpYXMiLCJrZXlDb2RlcyIsImRlZmF1bHRTbG90IiwiaXNDb21tZW50IiwiaW5pdEV2ZW50cyIsIl9ldmVudHMiLCJfaGFzSG9va0V2ZW50IiwidXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzIiwiYWRkJDEiLCIkb25jZSIsIiRvbiIsInJlbW92ZSQyIiwiJG9mZiIsIm9sZExpc3RlbmVycyIsImV2ZW50c01peGluIiwiaG9va1JFIiwiJGVtaXQiLCJhcmdzIiwiaW5pdExpZmVjeWNsZSIsIiRwYXJlbnQiLCIkY2hpbGRyZW4iLCIkcm9vdCIsIiRyZWZzIiwiX3dhdGNoZXIiLCJfaXNCZWluZ0Rlc3Ryb3llZCIsImxpZmVjeWNsZU1peGluIiwiX21vdW50IiwiZWwiLCIkZWwiLCJ0ZW1wbGF0ZSIsImNoYXJBdCIsIldhdGNoZXIiLCJfdXBkYXRlIiwicHJldkVsIiwicHJldlZub2RlIiwicHJldkFjdGl2ZUluc3RhbmNlIiwiX19wYXRjaF9fIiwiX192dWVfXyIsInJlbmRlckNoaWxkcmVuIiwiaGFzQ2hpbGRyZW4iLCJpc1NldHRpbmdQcm9wcyIsInByb3BLZXlzIiwiX3Byb3BLZXlzIiwidGVhcmRvd24iLCJfd2F0Y2hlcnMiLCJfZGF0YSIsImhhbmRsZXJzIiwiaiIsInJlc2V0U2NoZWR1bGVyU3RhdGUiLCJxdWV1ZSIsImhhcyQxIiwiY2lyY3VsYXIiLCJ3YWl0aW5nIiwiZmx1c2hpbmciLCJmbHVzaFNjaGVkdWxlclF1ZXVlIiwid2F0Y2hlciIsInNvcnQiLCJydW4iLCJfbWF4VXBkYXRlQ291bnQiLCJ1c2VyIiwiZGV2dG9vbHMiLCJlbWl0IiwicXVldWVXYXRjaGVyIiwidHJhdmVyc2UiLCJzZWVuT2JqZWN0cyIsImNsZWFyIiwiX3RyYXZlcnNlIiwic2VlbiIsImlzQSIsImRlcElkIiwiaGFzIiwiaW5pdFN0YXRlIiwib3B0cyIsImluaXRQcm9wcyIsIm1ldGhvZHMiLCJpbml0TWV0aG9kcyIsImluaXREYXRhIiwiY29tcHV0ZWQiLCJpbml0Q29tcHV0ZWQiLCJ3YXRjaCIsImluaXRXYXRjaCIsImlzUm9vdCIsImxvb3AiLCJpc1Jlc2VydmVkUHJvcCIsInByb3h5IiwidXNlckRlZiIsImNvbXB1dGVkU2hhcmVkRGVmaW5pdGlvbiIsIm1ha2VDb21wdXRlZEdldHRlciIsIm93bmVyIiwibGF6eSIsImRpcnR5IiwiZXZhbHVhdGUiLCJoYW5kbGVyIiwiY3JlYXRlV2F0Y2hlciIsIiR3YXRjaCIsInN0YXRlTWl4aW4iLCJkYXRhRGVmIiwibmV3RGF0YSIsIiRzZXQiLCIkZGVsZXRlIiwiZXhwT3JGbiIsImltbWVkaWF0ZSIsImluaXRNaXhpbiIsIl9pbml0IiwiX3VpZCIsInVpZCIsImluaXRJbnRlcm5hbENvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwiaW5pdFByb3h5IiwiX3NlbGYiLCJzdXBlciIsInN1cGVyT3B0aW9ucyIsImNhY2hlZFN1cGVyT3B0aW9ucyIsImV4dGVuZE9wdGlvbnMiLCJfc2NvcGVJZCIsImluaXRVc2UiLCJ1c2UiLCJwbHVnaW4iLCJpbnN0YWxsZWQiLCJ1bnNoaWZ0IiwiaW5zdGFsbCIsImluaXRNaXhpbiQxIiwiaW5pdEV4dGVuZCIsIlN1cGVyIiwiU3VwZXJJZCIsImNhY2hlZEN0b3JzIiwiX0N0b3IiLCJTdWIiLCJfYXNzZXRUeXBlcyIsImZvckVhY2giLCJpbml0QXNzZXRSZWdpc3RlcnMiLCJkZWZpbml0aW9uIiwiZ2V0Q29tcG9uZW50TmFtZSIsIm1hdGNoZXMiLCJwYXR0ZXJuIiwicHJ1bmVDYWNoZSIsImNhY2hlZE5vZGUiLCJwcnVuZUNhY2hlRW50cnkiLCJpbml0R2xvYmFsQVBJIiwiY29uZmlnRGVmIiwidXRpbCIsImRlbGV0ZSIsImJ1aWx0SW5Db21wb25lbnRzIiwiZ2VuQ2xhc3NGb3JWbm9kZSIsInBhcmVudE5vZGUiLCJjaGlsZE5vZGUiLCJtZXJnZUNsYXNzRGF0YSIsImdlbkNsYXNzRnJvbURhdGEiLCJzdGF0aWNDbGFzcyIsImNsYXNzIiwiZHluYW1pY0NsYXNzIiwic3RyaW5naWZ5Q2xhc3MiLCJzdHJpbmdpZmllZCIsImlzU1ZHIiwiaXNVbmtub3duRWxlbWVudCIsImluQnJvd3NlciIsInVua25vd25FbGVtZW50Q2FjaGUiLCJkb2N1bWVudCIsIndpbmRvdyIsIkhUTUxVbmtub3duRWxlbWVudCIsIkhUTUxFbGVtZW50IiwicXVlcnkiLCJzZWxlY3RvciIsInF1ZXJ5U2VsZWN0b3IiLCJjcmVhdGVFbGVtZW50JDEiLCJ0YWdOYW1lIiwic2V0QXR0cmlidXRlIiwiY3JlYXRlRWxlbWVudE5TIiwibmFtZXNwYWNlIiwibmFtZXNwYWNlTWFwIiwiY3JlYXRlVGV4dE5vZGUiLCJjcmVhdGVDb21tZW50IiwiaW5zZXJ0QmVmb3JlIiwibmV3Tm9kZSIsInJlZmVyZW5jZU5vZGUiLCJyZW1vdmVDaGlsZCIsImFwcGVuZENoaWxkIiwibmV4dFNpYmxpbmciLCJzZXRUZXh0Q29udGVudCIsInRleHRDb250ZW50IiwicmVnaXN0ZXJSZWYiLCJpc1JlbW92YWwiLCJyZWZzIiwicmVmSW5Gb3IiLCJpc1VuZGVmIiwicyIsImlzRGVmIiwic2FtZVZub2RlIiwidm5vZGUxIiwidm5vZGUyIiwiY3JlYXRlS2V5VG9PbGRJZHgiLCJiZWdpbklkeCIsImVuZElkeCIsImNyZWF0ZVBhdGNoRnVuY3Rpb24iLCJiYWNrZW5kIiwiZW1wdHlOb2RlQXQiLCJub2RlT3BzIiwiY3JlYXRlUm1DYiIsImNoaWxkRWxtIiwicmVtb3ZlTm9kZSIsImNyZWF0ZUVsbSIsImluc2VydGVkVm5vZGVRdWV1ZSIsIm5lc3RlZCIsImlzUm9vdEluc2VydCIsInByZSIsImluUHJlIiwiaWdub3JlZEVsZW1lbnRzIiwic2V0U2NvcGUiLCJjcmVhdGVDaGlsZHJlbiIsImludm9rZUNyZWF0ZUhvb2tzIiwiaXNSZWFjdGl2YXRlZCIsImluaXRDb21wb25lbnQiLCJyZWFjdGl2YXRlQ29tcG9uZW50IiwicGVuZGluZ0luc2VydCIsImlzUGF0Y2hhYmxlIiwiaW5uZXJOb2RlIiwidHJhbnNpdGlvbiIsImFjdGl2YXRlIiwiZW1wdHlOb2RlIiwiaSQxIiwiYWRkVm5vZGVzIiwic3RhcnRJZHgiLCJpbnZva2VEZXN0cm95SG9vayIsImRlc3Ryb3kiLCJyZW1vdmVWbm9kZXMiLCJjaCIsInJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2siLCJybSIsInJlbW92ZSIsInVwZGF0ZUNoaWxkcmVuIiwib2xkQ2giLCJuZXdDaCIsInJlbW92ZU9ubHkiLCJvbGRLZXlUb0lkeCIsImlkeEluT2xkIiwiZWxtVG9Nb3ZlIiwib2xkU3RhcnRJZHgiLCJuZXdTdGFydElkeCIsIm9sZEVuZElkeCIsIm9sZFN0YXJ0Vm5vZGUiLCJvbGRFbmRWbm9kZSIsIm5ld0VuZElkeCIsIm5ld1N0YXJ0Vm5vZGUiLCJuZXdFbmRWbm9kZSIsImNhbk1vdmUiLCJwYXRjaFZub2RlIiwiaGFzRGF0YSIsInBvc3RwYXRjaCIsImludm9rZUluc2VydEhvb2siLCJpbml0aWFsIiwiaHlkcmF0ZSIsImFzc2VydE5vZGVNYXRjaCIsImhhc0NoaWxkTm9kZXMiLCJjaGlsZHJlbk1hdGNoIiwiZmlyc3RDaGlsZCIsImNvbnNvbGUiLCJiYWlsZWQiLCJjaGlsZE5vZGVzIiwiaXNSZW5kZXJlZE1vZHVsZSIsIm5vZGVUeXBlIiwiaG9va3MkMSIsImlzSW5pdGlhbFBhdGNoIiwiaXNSZWFsRWxlbWVudCIsImhhc0F0dHJpYnV0ZSIsInJlbW92ZUF0dHJpYnV0ZSIsIm9sZEVsbSIsInBhcmVudEVsbSQxIiwiX2xlYXZlQ2IiLCJhbmNlc3RvciIsInVwZGF0ZURpcmVjdGl2ZXMiLCJvbGREaXIiLCJkaXIiLCJpc0NyZWF0ZSIsImlzRGVzdHJveSIsIm9sZERpcnMiLCJub3JtYWxpemVEaXJlY3RpdmVzJDEiLCJuZXdEaXJzIiwiZGlyc1dpdGhJbnNlcnQiLCJkaXJzV2l0aFBvc3RwYXRjaCIsIm9sZFZhbHVlIiwiY2FsbEhvb2skMSIsImNvbXBvbmVudFVwZGF0ZWQiLCJpbnNlcnRlZCIsImNhbGxJbnNlcnQiLCJtb2RpZmllcnMiLCJlbXB0eU1vZGlmaWVycyIsImdldFJhd0Rpck5hbWUiLCJyYXdOYW1lIiwidXBkYXRlQXR0cnMiLCJvbGRBdHRycyIsInNldEF0dHIiLCJpc0lFOSIsImlzWGxpbmsiLCJyZW1vdmVBdHRyaWJ1dGVOUyIsInhsaW5rTlMiLCJnZXRYbGlua1Byb3AiLCJpc0VudW1lcmF0ZWRBdHRyIiwiaXNCb29sZWFuQXR0ciIsImlzRmFsc3lBdHRyVmFsdWUiLCJzZXRBdHRyaWJ1dGVOUyIsInVwZGF0ZUNsYXNzIiwib2xkRGF0YSIsImNscyIsInRyYW5zaXRpb25DbGFzcyIsIl90cmFuc2l0aW9uQ2xhc3NlcyIsIl9wcmV2Q2xhc3MiLCJhZGQkMiIsIm9sZEhhbmRsZXIiLCJ0YXJnZXQkMSIsImV2IiwicmVtb3ZlJDMiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInVwZGF0ZURPTUxpc3RlbmVycyIsInVwZGF0ZURPTVByb3BzIiwib2xkUHJvcHMiLCJfdmFsdWUiLCJzdHJDdXIiLCJzaG91bGRVcGRhdGVWYWx1ZSIsImNoZWNrVmFsIiwiY29tcG9zaW5nIiwiaXNEaXJ0eSIsImlzSW5wdXRDaGFuZ2VkIiwiYWN0aXZlRWxlbWVudCIsIl92TW9kaWZpZXJzIiwibnVtYmVyIiwidHJpbSIsIm5vcm1hbGl6ZVN0eWxlRGF0YSIsInN0eWxlIiwibm9ybWFsaXplU3R5bGVCaW5kaW5nIiwic3RhdGljU3R5bGUiLCJiaW5kaW5nU3R5bGUiLCJwYXJzZVN0eWxlVGV4dCIsImdldFN0eWxlIiwiY2hlY2tDaGlsZCIsInN0eWxlRGF0YSIsInVwZGF0ZVN0eWxlIiwib2xkU3RhdGljU3R5bGUiLCJvbGRTdHlsZUJpbmRpbmciLCJvbGRTdHlsZSIsIm5ld1N0eWxlIiwic2V0UHJvcCIsImFkZENsYXNzIiwiY2xhc3NMaXN0IiwiZ2V0QXR0cmlidXRlIiwicmVtb3ZlQ2xhc3MiLCJ0YXIiLCJyZXBsYWNlIiwibmV4dEZyYW1lIiwicmFmIiwiYWRkVHJhbnNpdGlvbkNsYXNzIiwicmVtb3ZlVHJhbnNpdGlvbkNsYXNzIiwid2hlblRyYW5zaXRpb25FbmRzIiwiZ2V0VHJhbnNpdGlvbkluZm8iLCJ0aW1lb3V0IiwicHJvcENvdW50IiwiVFJBTlNJVElPTiIsInRyYW5zaXRpb25FbmRFdmVudCIsImFuaW1hdGlvbkVuZEV2ZW50IiwiZW5kZWQiLCJlbmQiLCJvbkVuZCIsInNldFRpbWVvdXQiLCJzdHlsZXMiLCJnZXRDb21wdXRlZFN0eWxlIiwidHJhbnNpdGlvbmVEZWxheXMiLCJ0cmFuc2l0aW9uUHJvcCIsInRyYW5zaXRpb25EdXJhdGlvbnMiLCJ0cmFuc2l0aW9uVGltZW91dCIsImdldFRpbWVvdXQiLCJhbmltYXRpb25EZWxheXMiLCJhbmltYXRpb25Qcm9wIiwiYW5pbWF0aW9uRHVyYXRpb25zIiwiYW5pbWF0aW9uVGltZW91dCIsIkFOSU1BVElPTiIsImhhc1RyYW5zZm9ybSIsInRyYW5zZm9ybVJFIiwiZGVsYXlzIiwiZHVyYXRpb25zIiwidG9NcyIsIk51bWJlciIsImVudGVyIiwidG9nZ2xlRGlzcGxheSIsImNhbmNlbGxlZCIsInJlc29sdmVUcmFuc2l0aW9uIiwiX2VudGVyQ2IiLCJjc3MiLCJlbnRlckNsYXNzIiwiZW50ZXJUb0NsYXNzIiwiZW50ZXJBY3RpdmVDbGFzcyIsImFwcGVhckNsYXNzIiwiYXBwZWFyVG9DbGFzcyIsImFwcGVhckFjdGl2ZUNsYXNzIiwiYmVmb3JlRW50ZXIiLCJhZnRlckVudGVyIiwiZW50ZXJDYW5jZWxsZWQiLCJiZWZvcmVBcHBlYXIiLCJhcHBlYXIiLCJhZnRlckFwcGVhciIsImFwcGVhckNhbmNlbGxlZCIsInRyYW5zaXRpb25Ob2RlIiwiaXNBcHBlYXIiLCJzdGFydENsYXNzIiwiYWN0aXZlQ2xhc3MiLCJ0b0NsYXNzIiwiYmVmb3JlRW50ZXJIb29rIiwiZW50ZXJIb29rIiwiYWZ0ZXJFbnRlckhvb2siLCJlbnRlckNhbmNlbGxlZEhvb2siLCJleHBlY3RzQ1NTIiwidXNlcldhbnRzQ29udHJvbCIsInNob3ciLCJwZW5kaW5nTm9kZSIsIl9wZW5kaW5nIiwibGVhdmUiLCJwZXJmb3JtTGVhdmUiLCJiZWZvcmVMZWF2ZSIsImxlYXZlQ2xhc3MiLCJsZWF2ZUFjdGl2ZUNsYXNzIiwibGVhdmVUb0NsYXNzIiwiYWZ0ZXJMZWF2ZSIsImxlYXZlQ2FuY2VsbGVkIiwiZGVsYXlMZWF2ZSIsImRlZiQkMSIsImF1dG9Dc3NUcmFuc2l0aW9uIiwiY2FsbGVkIiwiX2VudGVyIiwiXyIsInNldFNlbGVjdGVkIiwiYmluZGluZyIsImlzTXVsdGlwbGUiLCJtdWx0aXBsZSIsInNlbGVjdGVkIiwib3B0aW9uIiwiZ2V0VmFsdWUiLCJzZWxlY3RlZEluZGV4IiwiaGFzTm9NYXRjaGluZ09wdGlvbiIsIm9uQ29tcG9zaXRpb25TdGFydCIsIm9uQ29tcG9zaXRpb25FbmQiLCJ0cmlnZ2VyIiwiY3JlYXRlRXZlbnQiLCJpbml0RXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwibG9jYXRlTm9kZSIsImdldFJlYWxDaGlsZCIsImNvbXBPcHRpb25zIiwiZXh0cmFjdFRyYW5zaXRpb25EYXRhIiwiY29tcCIsImtleSQxIiwicGxhY2Vob2xkZXIiLCJyYXdDaGlsZCIsImhhc1BhcmVudFRyYW5zaXRpb24iLCJpc1NhbWVDaGlsZCIsIm9sZENoaWxkIiwiY2FsbFBlbmRpbmdDYnMiLCJfbW92ZUNiIiwicmVjb3JkUG9zaXRpb24iLCJuZXdQb3MiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJhcHBseVRyYW5zbGF0aW9uIiwib2xkUG9zIiwicG9zIiwiZHgiLCJsZWZ0IiwiZHkiLCJ0b3AiLCJtb3ZlZCIsInRyYW5zZm9ybSIsIldlYmtpdFRyYW5zZm9ybSIsInRyYW5zaXRpb25EdXJhdGlvbiIsInNob3VsZERlY29kZSIsImNvbnRlbnQiLCJlbmNvZGVkIiwiZGl2IiwiaW5uZXJIVE1MIiwiZGVjb2RlIiwiaHRtbCIsImRlY29kZXIiLCJkZWNvZGVBdHRyIiwic2hvdWxkRGVjb2RlTmV3bGluZXMiLCJubFJFIiwibHRSRSIsImd0UkUiLCJhbXBSRSIsInF1b3RlUkUiLCJwYXJzZUhUTUwiLCJhZHZhbmNlIiwic3Vic3RyaW5nIiwicGFyc2VTdGFydFRhZyIsInN0YXJ0VGFnT3BlbiIsImF0dHIiLCJzdGFydFRhZ0Nsb3NlIiwiYXR0cmlidXRlIiwidW5hcnlTbGFzaCIsImhhbmRsZVN0YXJ0VGFnIiwiZXhwZWN0SFRNTCIsImxhc3RUYWciLCJpc05vblBocmFzaW5nVGFnIiwicGFyc2VFbmRUYWciLCJjYW5CZUxlZnRPcGVuVGFnIiwidW5hcnkiLCJpc1VuYXJ5VGFnJCQxIiwiSVNfUkVHRVhfQ0FQVFVSSU5HX0JST0tFTiIsInN0YWNrIiwibG93ZXJDYXNlZFRhZyIsImxvd2VyQ2FzZWRUYWdOYW1lIiwiaXNVbmFyeVRhZyIsIm5vIiwiaXNTY3JpcHRPclN0eWxlIiwic3RhY2tlZFRhZyIsInJlU3RhY2tlZFRhZyIsInJlQ2FjaGUiLCJSZWdFeHAiLCJlbmRUYWdMZW5ndGgiLCJyZXN0IiwiYWxsIiwiZW5kVGFnIiwiY2hhcnMiLCJ0ZXh0RW5kIiwiY29tbWVudCIsImNvbW1lbnRFbmQiLCJjb25kaXRpb25hbENvbW1lbnQiLCJjb25kaXRpb25hbEVuZCIsImRvY3R5cGVNYXRjaCIsImRvY3R5cGUiLCJlbmRUYWdNYXRjaCIsImN1ckluZGV4Iiwic3RhcnRUYWdNYXRjaCIsInJlc3QkMSIsIm5leHQiLCJwYXJzZUZpbHRlcnMiLCJleHAiLCJwdXNoRmlsdGVyIiwiZmlsdGVycyIsImxhc3RGaWx0ZXJJbmRleCIsInByZXYiLCJleHByZXNzaW9uIiwiaW5TaW5nbGUiLCJpbkRvdWJsZSIsImluVGVtcGxhdGVTdHJpbmciLCJpblJlZ2V4IiwiY3VybHkiLCJzcXVhcmUiLCJwYXJlbiIsIndyYXBGaWx0ZXIiLCJwYXJzZVRleHQiLCJkZWxpbWl0ZXJzIiwidGFnUkUiLCJidWlsZFJlZ2V4IiwiZGVmYXVsdFRhZ1JFIiwidG9rZW5zIiwibGFzdEluZGV4IiwiZXhlYyIsImJhc2VXYXJuIiwibXNnIiwiZXJyb3IiLCJwbHVja01vZHVsZUZ1bmN0aW9uIiwiYWRkUHJvcCIsImFkZEF0dHIiLCJhZGREaXJlY3RpdmUiLCJhcmciLCJhZGRIYW5kbGVyIiwiaW1wb3J0YW50IiwiZXZlbnRzIiwibmF0aXZlIiwibmF0aXZlRXZlbnRzIiwibmV3SGFuZGxlciIsImdldEJpbmRpbmdBdHRyIiwiZ2V0U3RhdGljIiwiZHluYW1pY1ZhbHVlIiwiZ2V0QW5kUmVtb3ZlQXR0ciIsInN0YXRpY1ZhbHVlIiwiYXR0cnNNYXAiLCJhdHRyc0xpc3QiLCJwYXJzZU1vZGVsIiwiaW5kZXgkMSIsImV4cHJlc3Npb25Qb3MiLCJleHByZXNzaW9uRW5kUG9zIiwibGFzdEluZGV4T2YiLCJpZHgiLCJlb2YiLCJjaHIiLCJpc1N0cmluZ1N0YXJ0IiwicGFyc2VTdHJpbmciLCJwYXJzZUJyYWNrZXQiLCJpbkJyYWNrZXQiLCJzdHJpbmdRdW90ZSIsInBhcnNlIiwid2FybiQxIiwicGxhdGZvcm1HZXRUYWdOYW1lc3BhY2UiLCJwbGF0Zm9ybU11c3RVc2VQcm9wIiwicGxhdGZvcm1Jc1ByZVRhZyIsImlzUHJlVGFnIiwicHJlVHJhbnNmb3JtcyIsInRyYW5zZm9ybXMiLCJwb3N0VHJhbnNmb3JtcyIsInJvb3QiLCJjdXJyZW50UGFyZW50IiwicHJlc2VydmVXaGl0ZXNwYWNlIiwiaW5WUHJlIiwid2FybmVkIiwiY2hlY2tSb290Q29uc3RyYWludHMiLCJpc0lFIiwiZ3VhcmRJRVNWR0J1ZyIsImVsZW1lbnQiLCJtYWtlQXR0cnNNYXAiLCJpc0ZvcmJpZGRlblRhZyIsImZvcmJpZGRlbiIsInByb2Nlc3NQcmUiLCJwcm9jZXNzUmF3QXR0cnMiLCJwcm9jZXNzRm9yIiwicHJvY2Vzc0lmIiwicHJvY2Vzc09uY2UiLCJwcm9jZXNzS2V5IiwicGxhaW4iLCJwcm9jZXNzUmVmIiwicHJvY2Vzc1Nsb3QiLCJwcm9jZXNzQ29tcG9uZW50IiwicHJvY2Vzc0F0dHJzIiwiaWYiLCJlbHNlaWYiLCJlbHNlIiwiYWRkSWZDb25kaXRpb24iLCJibG9jayIsInByb2Nlc3NJZkNvbmRpdGlvbnMiLCJzbG90U2NvcGUiLCJzbG90VGFyZ2V0IiwiaSQyIiwibGFzdE5vZGUiLCJkZWNvZGVIVE1MQ2FjaGVkIiwiY2hlY2tJbkZvciIsImluTWF0Y2giLCJmb3JBbGlhc1JFIiwiZm9yIiwiYWxpYXMiLCJpdGVyYXRvck1hdGNoIiwiZm9ySXRlcmF0b3JSRSIsIml0ZXJhdG9yMSIsIml0ZXJhdG9yMiIsImZpbmRQcmV2RWxlbWVudCIsImNvbmRpdGlvbiIsImlmQ29uZGl0aW9ucyIsInNsb3ROYW1lIiwiY29tcG9uZW50IiwiaXNQcm9wIiwiZGlyUkUiLCJoYXNCaW5kaW5ncyIsInBhcnNlTW9kaWZpZXJzIiwibW9kaWZpZXJSRSIsImJpbmRSRSIsImNhbWVsIiwib25SRSIsImFyZ01hdGNoIiwiYXJnUkUiLCJjaGVja0ZvckFsaWFzTW9kZWwiLCJpZU5TQnVnIiwiaWVOU1ByZWZpeCIsIl9lbCIsIm9wdGltaXplIiwiaXNTdGF0aWNLZXkiLCJnZW5TdGF0aWNLZXlzQ2FjaGVkIiwiaXNQbGF0Zm9ybVJlc2VydmVkVGFnIiwibWFya1N0YXRpY1Jvb3RzIiwiZ2VuU3RhdGljS2V5cyQxIiwic3RhdGljIiwic3RhdGljSW5Gb3IiLCJzdGF0aWNSb290Iiwid2Fsa1Rocm91Z2hDb25kaXRpb25zQmxvY2tzIiwiY29uZGl0aW9uQmxvY2tzIiwiaXNEaXJlY3RDaGlsZE9mVGVtcGxhdGVGb3IiLCJldmVyeSIsImdlbkhhbmRsZXJzIiwiZ2VuSGFuZGxlciIsImNvZGUiLCJtb2RpZmllckNvZGUiLCJnZW5LZXlGaWx0ZXIiLCJoYW5kbGVyQ29kZSIsInNpbXBsZVBhdGhSRSIsImZuRXhwUkUiLCJnZW5GaWx0ZXJDb2RlIiwia2V5VmFsIiwicGFyc2VJbnQiLCJiaW5kJDIiLCJ3cmFwRGF0YSIsImdlbmVyYXRlIiwiYXN0IiwicHJldlN0YXRpY1JlbmRlckZucyIsImN1cnJlbnRTdGF0aWNSZW5kZXJGbnMiLCJwcmV2T25jZUNvdW50Iiwib25jZUNvdW50IiwiY3VycmVudE9wdGlvbnMiLCJ3YXJuJDIiLCJ0cmFuc2Zvcm1zJDEiLCJkYXRhR2VuRm5zIiwicGxhdGZvcm1EaXJlY3RpdmVzJDEiLCJpc1BsYXRmb3JtUmVzZXJ2ZWRUYWckMSIsImdlbkVsZW1lbnQiLCJzdGF0aWNQcm9jZXNzZWQiLCJnZW5TdGF0aWMiLCJvbmNlUHJvY2Vzc2VkIiwiZ2VuT25jZSIsImZvclByb2Nlc3NlZCIsImdlbkZvciIsImlmUHJvY2Vzc2VkIiwiZ2VuSWYiLCJnZW5TbG90IiwiZ2VuQ29tcG9uZW50IiwiZ2VuRGF0YSIsImdlbkNoaWxkcmVuIiwiZ2VuSWZDb25kaXRpb25zIiwiY29uZGl0aW9ucyIsImdlblRlcm5hcnlFeHAiLCJzaGlmdCIsImdlbkRpcmVjdGl2ZXMiLCJnZW5Qcm9wcyIsImdlblNjb3BlZFNsb3RzIiwiZ2VuSW5saW5lVGVtcGxhdGUiLCJuZWVkUnVudGltZSIsImhhc1J1bnRpbWUiLCJnZW4iLCJiYXNlRGlyZWN0aXZlcyIsImlubGluZVJlbmRlckZucyIsImdlblNjb3BlZFNsb3QiLCJzY29wZSIsImNoZWNrU2tpcCIsImVsJDEiLCJnZXROb3JtYWxpemF0aW9uVHlwZSIsImdlbk5vZGUiLCJuZWVkc05vcm1hbGl6YXRpb24iLCJzb21lIiwibWF5YmVDb21wb25lbnQiLCJnZW5UZXh0IiwidHJhbnNmb3JtU3BlY2lhbE5ld2xpbmVzIiwiYmluZCQkMSIsImNvbXBvbmVudE5hbWUiLCJjb21waWxlJDEiLCJkZXRlY3RFcnJvcnMiLCJlcnJvcnMiLCJjaGVja05vZGUiLCJjaGVja0ZvciIsImNoZWNrRXhwcmVzc2lvbiIsImNoZWNrSWRlbnRpZmllciIsImlkZW50IiwiaWRlbnRSRSIsImtleXdvcmRNYXRjaCIsInN0cmlwU3RyaW5nUkUiLCJwcm9oaWJpdGVkS2V5d29yZFJFIiwidHJhbnNmb3JtTm9kZSIsImNsYXNzQmluZGluZyIsImdlbkRhdGEkMSIsInRyYW5zZm9ybU5vZGUkMSIsInN0eWxlQmluZGluZyIsImdlbkRhdGEkMiIsIm1vZGVsJDEiLCJfd2FybiIsIndhcm4kMyIsImR5bmFtaWNUeXBlIiwiZ2VuU2VsZWN0IiwiZ2VuQ2hlY2tib3hNb2RlbCIsImdlblJhZGlvTW9kZWwiLCJnZW5EZWZhdWx0TW9kZWwiLCJjaGVja2VkIiwidmFsdWVCaW5kaW5nIiwidHJ1ZVZhbHVlQmluZGluZyIsImZhbHNlVmFsdWVCaW5kaW5nIiwiZ2VuQXNzaWdubWVudENvZGUiLCJuZWVkQ29tcG9zaXRpb25HdWFyZCIsInZhbHVlRXhwcmVzc2lvbiIsImNoZWNrT3B0aW9uV2FybmluZyIsImFzc2lnbm1lbnQiLCJtb2RlbFJzIiwiY29tcGlsZSQkMSIsImJhc2VPcHRpb25zIiwiY29tcGlsZVRvRnVuY3Rpb25zIiwiY29tcGlsZWQiLCJtYWtlRnVuY3Rpb24iLCJnZXRPdXRlckhUTUwiLCJvdXRlckhUTUwiLCJjb250YWluZXIiLCJjbG9uZU5vZGUiLCJfaXNTZXJ2ZXIiLCJfU2V0IiwiY2FtZWxpemVSRSIsInRvVXBwZXJDYXNlIiwiaHlwaGVuYXRlUkUiLCJvcHRpb25NZXJnZVN0cmF0ZWdpZXMiLCJzaWxlbnQiLCJfbGlmZWN5Y2xlSG9va3MiLCJoYXNQcm90byIsIlVBIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiaXNFZGdlIiwiaXNBbmRyb2lkIiwiaXNJT1MiLCJWVUVfRU5WIiwiX19WVUVfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsIm5leHRUaWNrSGFuZGxlciIsInBlbmRpbmciLCJjb3BpZXMiLCJjYWxsYmFja3MiLCJ0aW1lckZ1bmMiLCJQcm9taXNlIiwibG9nRXJyb3IiLCJlcnIiLCJjYXRjaCIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJjb3VudGVyIiwib2JzZXJ2ZXIiLCJ0ZXh0Tm9kZSIsImNoYXJhY3RlckRhdGEiLCJfcmVzb2x2ZSIsIlNldCIsImhhc0NvbnNvbGUiLCJmb3JtYXRMb2NhdGlvbiIsIl9fZmlsZSIsInVpZCQxIiwic3VicyIsImFkZFN1YiIsInN1YiIsInJlbW92ZVN1YiIsImFkZERlcCIsImFycmF5UHJvdG8iLCJhcnJheU1ldGhvZHMiLCJtZXRob2QiLCJvcmlnaW5hbCIsInJlc3VsdCIsIm9ic2VydmVBcnJheSIsImFycmF5S2V5cyIsImdldE93blByb3BlcnR5TmFtZXMiLCJhdWdtZW50Iiwid2FsayIsIml0ZW1zIiwiaW5zdGFuY2VEYXRhIiwiZGVmYXVsdERhdGEiLCJmcmVlemUiLCJkZWZpbmVSZWFjdGl2ZSIsImFsbG93ZWRHbG9iYWxzIiwid2Fybk5vblByZXNlbnQiLCJoYXNQcm94eSIsIlByb3h5IiwiaXNCdWlsdEluTW9kaWZpZXIiLCJoYXNIYW5kbGVyIiwiaXNBbGxvd2VkIiwiZ2V0SGFuZGxlciIsIl93aXRoU3RyaXBwZWQiLCJyYXciLCJwcm90b3R5cGVBY2Nlc3NvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwidWlkJDIiLCJkZWVwIiwiYWN0aXZlIiwiZGVwcyIsIm5ld0RlcHMiLCJkZXBJZHMiLCJuZXdEZXBJZHMiLCJjbGVhbnVwRGVwcyIsInRoaXMkMSIsInRtcCIsInBhdHRlcm5UeXBlcyIsIktlZXBBbGl2ZSIsImluY2x1ZGUiLCJleGNsdWRlIiwiY3JlYXRlZCIsImRlc3Ryb3llZCIsInZlcnNpb24iLCJ0ZXN0RWwiLCJhY2NlcHRWYWx1ZSIsInN2ZyIsIm1hdGgiLCJpc0hUTUxUYWciLCJiYXNlTW9kdWxlcyIsImtsYXNzIiwiY3NzVGV4dCIsImxpc3REZWxpbWl0ZXIiLCJwcm9wZXJ0eURlbGltaXRlciIsImNzc1ZhclJFIiwiaW1wb3J0YW50UkUiLCJzZXRQcm9wZXJ0eSIsIm5vcm1hbGl6ZSIsInByZWZpeGVzIiwidXBwZXIiLCJwcmVmaXhlZCIsImhhc1RyYW5zaXRpb24iLCJvbnRyYW5zaXRpb25lbmQiLCJvbndlYmtpdHRyYW5zaXRpb25lbmQiLCJvbmFuaW1hdGlvbmVuZCIsIm9ud2Via2l0YW5pbWF0aW9uZW5kIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwicGxhdGZvcm1Nb2R1bGVzIiwicGF0Y2gkMSIsIm1vZGVsYWJsZVRhZ1JFIiwidm1vZGVsIiwibW9kZWwiLCJuZWVkUmVzZXQiLCJ2Iiwib3JpZ2luYWxEaXNwbGF5IiwiX192T3JpZ2luYWxEaXNwbGF5IiwiZGlzcGxheSIsInVuYmluZCIsInBsYXRmb3JtRGlyZWN0aXZlcyIsInRyYW5zaXRpb25Qcm9wcyIsIm1vZGUiLCJUcmFuc2l0aW9uIiwiX2xlYXZpbmciLCJvbGRSYXdDaGlsZCIsImRlbGF5ZWRMZWF2ZSIsIm1vdmVDbGFzcyIsIlRyYW5zaXRpb25Hcm91cCIsInByZXZDaGlsZHJlbiIsInJhd0NoaWxkcmVuIiwidHJhbnNpdGlvbkRhdGEiLCJrZXB0IiwicmVtb3ZlZCIsImMkMSIsImJlZm9yZVVwZGF0ZSIsInVwZGF0ZWQiLCJoYXNNb3ZlIiwiYm9keSIsIm9mZnNldEhlaWdodCIsInByb3BlcnR5TmFtZSIsIl9oYXNNb3ZlIiwiaW5mbyIsInBsYXRmb3JtQ29tcG9uZW50cyIsInNpbmdsZUF0dHJJZGVudGlmaWVyIiwic2luZ2xlQXR0ckFzc2lnbiIsInNpbmdsZUF0dHJWYWx1ZXMiLCJzb3VyY2UiLCJuY25hbWUiLCJxbmFtZUNhcHR1cmUiLCJnIiwicmVnZXhFc2NhcGVSRSIsIm9wZW4iLCJjbG9zZSIsImVzYyIsInRhYiIsInNwYWNlIiwidXAiLCJyaWdodCIsImRvd24iLCJzdG9wIiwicHJldmVudCIsInNlbGYiLCJjdHJsIiwiYWx0IiwibWV0YSIsImNsb2FrIiwia2xhc3MkMSIsInN0eWxlJDEiLCJtb2R1bGVzJDEiLCJkaXJlY3RpdmVzJDEiLCJpZFRvVGVtcGxhdGUiLCJtb3VudCIsImRvY3VtZW50RWxlbWVudCIsImNvbXBpbGUiLCJkZWZhdWx0U2V0VGltb3V0IiwiRXJyb3IiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsImNhY2hlZFNldFRpbWVvdXQiLCJydW5DbGVhclRpbWVvdXQiLCJtYXJrZXIiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpbmluZyIsImN1cnJlbnRRdWV1ZSIsInF1ZXVlSW5kZXgiLCJkcmFpblF1ZXVlIiwiSXRlbSIsImFycmF5IiwidGl0bGUiLCJicm93c2VyIiwiYXJndiIsInZlcnNpb25zIiwiYWRkTGlzdGVuZXIiLCJvZmYiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsImN3ZCIsImNoZGlyIiwidW1hc2siXSwibWFwcGluZ3MiOiJDQUFTLFNBQVVBLEdDSW5CLFFBQUFDLEdBQUFDLEdBR0EsR0FBQUMsRUFBQUQsR0FDQSxNQUFBQyxHQUFBRCxHQUFBRSxPQUdBLElBQUFDLEdBQUFGLEVBQUFELElBQ0FFLFdBQ0FFLEdBQUFKLEVBQ0FLLFFBQUEsRUFVQSxPQU5BUCxHQUFBRSxHQUFBTSxLQUFBSCxFQUFBRCxRQUFBQyxJQUFBRCxRQUFBSCxHQUdBSSxFQUFBRSxRQUFBLEVBR0FGLEVBQUFELFFBdkJBLEdBQUFELEtBcUNBLE9BVEFGLEdBQUFRLEVBQUFULEVBR0FDLEVBQUFTLEVBQUFQLEVBR0FGLEVBQUFVLEVBQUEsR0FHQVYsRUFBQSxLRE1NLFNBQVNJLEVBQVFELEVBQVNILEdBRS9CLFlBTUEsU0FBU1csR0FBdUJDLEdBQU8sTUFBT0EsSUFBT0EsRUFBSUMsV0FBYUQsR0FBUUUsUUFBU0YsR0VwRHhGLEdBQUFHLEdBQUFmLEVBQUEsRUZrRGFXLEdBQXVCSSxJQU05QixTQUFTWCxFQUFRRCxFQUFTSCxJR3hEaEMsU0FBQWdCLEVBQUFDOzs7OztBQUtBLFlBT0EsU0FBQUMsR0FBQUMsR0FDQSxhQUFBQSxFQUNBLEdBQ0EsZ0JBQUFBLEdBQ0FDLEtBQUFDLFVBQUFGLEVBQUEsUUFDQUcsT0FBQUgsR0FPQSxRQUFBSSxHQUFBSixHQUNBLEdBQUFLLEdBQUFDLFdBQUFOLEVBQ0EsT0FBQU8sT0FBQUYsR0FBQUwsRUFBQUssRUFPQSxRQUFBRyxHQUNBQyxFQUNBQyxHQUlBLE9BRkFDLEdBQUFDLE9BQUFDLE9BQUEsTUFDQUMsRUFBQUwsRUFBQU0sTUFBQSxLQUNBQyxFQUFBLEVBQWlCQSxFQUFBRixFQUFBRyxPQUFp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KzBDLG1CQUFBcnhDLEVBQ0ExRCxFQUFBeWIsS0FBQS9YLEVBRUExRCxFQUFBeXlCLFFBQUEsU0FBQXRwQixHQUNBLFNBQUFxcUMsT0FBQSxxQ0FHQXh6QyxFQUFBZzFDLElBQUEsV0FBMkIsV0FDM0JoMUMsRUFBQWkxQyxNQUFBLFNBQUF0c0IsR0FDQSxTQUFBNnFCLE9BQUEsbUNBRUF4ekMsRUFBQWsxQyxNQUFBLFdBQTRCIiwiZmlsZSI6Im15LWNvbS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSlcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9LFxuLyoqKioqKi8gXHRcdFx0aWQ6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bG9hZGVkOiBmYWxzZVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoW1xuLyogMCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0dmFyIF92dWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXHRcblx0dmFyIF92dWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdnVlKTtcblxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKioqLyB9LFxuLyogMSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKHByb2Nlc3MsIGdsb2JhbCkgey8qIVxuXHQgKiBWdWUuanMgdjIuMS4xMFxuXHQgKiAoYykgMjAxNC0yMDE3IEV2YW4gWW91XG5cdCAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cblx0ICovXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdC8qICAqL1xuXHRcblx0LyoqXG5cdCAqIENvbnZlcnQgYSB2YWx1ZSB0byBhIHN0cmluZyB0aGF0IGlzIGFjdHVhbGx5IHJlbmRlcmVkLlxuXHQgKi9cblx0ZnVuY3Rpb24gX3RvU3RyaW5nICh2YWwpIHtcblx0ICByZXR1cm4gdmFsID09IG51bGxcblx0ICAgID8gJydcblx0ICAgIDogdHlwZW9mIHZhbCA9PT0gJ29iamVjdCdcblx0ICAgICAgPyBKU09OLnN0cmluZ2lmeSh2YWwsIG51bGwsIDIpXG5cdCAgICAgIDogU3RyaW5nKHZhbClcblx0fVxuXHRcblx0LyoqXG5cdCAqIENvbnZlcnQgYSBpbnB1dCB2YWx1ZSB0byBhIG51bWJlciBmb3IgcGVyc2lzdGVuY2UuXG5cdCAqIElmIHRoZSBjb252ZXJzaW9uIGZhaWxzLCByZXR1cm4gb3JpZ2luYWwgc3RyaW5nLlxuXHQgKi9cblx0ZnVuY3Rpb24gdG9OdW1iZXIgKHZhbCkge1xuXHQgIHZhciBuID0gcGFyc2VGbG9hdCh2YWwpO1xuXHQgIHJldHVybiBpc05hTihuKSA/IHZhbCA6IG5cblx0fVxuXHRcblx0LyoqXG5cdCAqIE1ha2UgYSBtYXAgYW5kIHJldHVybiBhIGZ1bmN0aW9uIGZvciBjaGVja2luZyBpZiBhIGtleVxuXHQgKiBpcyBpbiB0aGF0IG1hcC5cblx0ICovXG5cdGZ1bmN0aW9uIG1ha2VNYXAgKFxuXHQgIHN0cixcblx0ICBleHBlY3RzTG93ZXJDYXNlXG5cdCkge1xuXHQgIHZhciBtYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXHQgIHZhciBsaXN0ID0gc3RyLnNwbGl0KCcsJyk7XG5cdCAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG5cdCAgICBtYXBbbGlzdFtpXV0gPSB0cnVlO1xuXHQgIH1cblx0ICByZXR1cm4gZXhwZWN0c0xvd2VyQ2FzZVxuXHQgICAgPyBmdW5jdGlvbiAodmFsKSB7IHJldHVybiBtYXBbdmFsLnRvTG93ZXJDYXNlKCldOyB9XG5cdCAgICA6IGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuIG1hcFt2YWxdOyB9XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBDaGVjayBpZiBhIHRhZyBpcyBhIGJ1aWx0LWluIHRhZy5cblx0ICovXG5cdHZhciBpc0J1aWx0SW5UYWcgPSBtYWtlTWFwKCdzbG90LGNvbXBvbmVudCcsIHRydWUpO1xuXHRcblx0LyoqXG5cdCAqIFJlbW92ZSBhbiBpdGVtIGZyb20gYW4gYXJyYXlcblx0ICovXG5cdGZ1bmN0aW9uIHJlbW92ZSQxIChhcnIsIGl0ZW0pIHtcblx0ICBpZiAoYXJyLmxlbmd0aCkge1xuXHQgICAgdmFyIGluZGV4ID0gYXJyLmluZGV4T2YoaXRlbSk7XG5cdCAgICBpZiAoaW5kZXggPiAtMSkge1xuXHQgICAgICByZXR1cm4gYXJyLnNwbGljZShpbmRleCwgMSlcblx0ICAgIH1cblx0ICB9XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBDaGVjayB3aGV0aGVyIHRoZSBvYmplY3QgaGFzIHRoZSBwcm9wZXJ0eS5cblx0ICovXG5cdHZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cdGZ1bmN0aW9uIGhhc093biAob2JqLCBrZXkpIHtcblx0ICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSlcblx0fVxuXHRcblx0LyoqXG5cdCAqIENoZWNrIGlmIHZhbHVlIGlzIHByaW1pdGl2ZVxuXHQgKi9cblx0ZnVuY3Rpb24gaXNQcmltaXRpdmUgKHZhbHVlKSB7XG5cdCAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJ1xuXHR9XG5cdFxuXHQvKipcblx0ICogQ3JlYXRlIGEgY2FjaGVkIHZlcnNpb24gb2YgYSBwdXJlIGZ1bmN0aW9uLlxuXHQgKi9cblx0ZnVuY3Rpb24gY2FjaGVkIChmbikge1xuXHQgIHZhciBjYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cdCAgcmV0dXJuIChmdW5jdGlvbiBjYWNoZWRGbiAoc3RyKSB7XG5cdCAgICB2YXIgaGl0ID0gY2FjaGVbc3RyXTtcblx0ICAgIHJldHVybiBoaXQgfHwgKGNhY2hlW3N0cl0gPSBmbihzdHIpKVxuXHQgIH0pXG5cdH1cblx0XG5cdC8qKlxuXHQgKiBDYW1lbGl6ZSBhIGh5cGhlbi1kZWxpbWl0ZWQgc3RyaW5nLlxuXHQgKi9cblx0dmFyIGNhbWVsaXplUkUgPSAvLShcXHcpL2c7XG5cdHZhciBjYW1lbGl6ZSA9IGNhY2hlZChmdW5jdGlvbiAoc3RyKSB7XG5cdCAgcmV0dXJuIHN0ci5yZXBsYWNlKGNhbWVsaXplUkUsIGZ1bmN0aW9uIChfLCBjKSB7IHJldHVybiBjID8gYy50b1VwcGVyQ2FzZSgpIDogJyc7IH0pXG5cdH0pO1xuXHRcblx0LyoqXG5cdCAqIENhcGl0YWxpemUgYSBzdHJpbmcuXG5cdCAqL1xuXHR2YXIgY2FwaXRhbGl6ZSA9IGNhY2hlZChmdW5jdGlvbiAoc3RyKSB7XG5cdCAgcmV0dXJuIHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKVxuXHR9KTtcblx0XG5cdC8qKlxuXHQgKiBIeXBoZW5hdGUgYSBjYW1lbENhc2Ugc3RyaW5nLlxuXHQgKi9cblx0dmFyIGh5cGhlbmF0ZVJFID0gLyhbXi1dKShbQS1aXSkvZztcblx0dmFyIGh5cGhlbmF0ZSA9IGNhY2hlZChmdW5jdGlvbiAoc3RyKSB7XG5cdCAgcmV0dXJuIHN0clxuXHQgICAgLnJlcGxhY2UoaHlwaGVuYXRlUkUsICckMS0kMicpXG5cdCAgICAucmVwbGFjZShoeXBoZW5hdGVSRSwgJyQxLSQyJylcblx0ICAgIC50b0xvd2VyQ2FzZSgpXG5cdH0pO1xuXHRcblx0LyoqXG5cdCAqIFNpbXBsZSBiaW5kLCBmYXN0ZXIgdGhhbiBuYXRpdmVcblx0ICovXG5cdGZ1bmN0aW9uIGJpbmQkMSAoZm4sIGN0eCkge1xuXHQgIGZ1bmN0aW9uIGJvdW5kRm4gKGEpIHtcblx0ICAgIHZhciBsID0gYXJndW1lbnRzLmxlbmd0aDtcblx0ICAgIHJldHVybiBsXG5cdCAgICAgID8gbCA+IDFcblx0ICAgICAgICA/IGZuLmFwcGx5KGN0eCwgYXJndW1lbnRzKVxuXHQgICAgICAgIDogZm4uY2FsbChjdHgsIGEpXG5cdCAgICAgIDogZm4uY2FsbChjdHgpXG5cdCAgfVxuXHQgIC8vIHJlY29yZCBvcmlnaW5hbCBmbiBsZW5ndGhcblx0ICBib3VuZEZuLl9sZW5ndGggPSBmbi5sZW5ndGg7XG5cdCAgcmV0dXJuIGJvdW5kRm5cblx0fVxuXHRcblx0LyoqXG5cdCAqIENvbnZlcnQgYW4gQXJyYXktbGlrZSBvYmplY3QgdG8gYSByZWFsIEFycmF5LlxuXHQgKi9cblx0ZnVuY3Rpb24gdG9BcnJheSAobGlzdCwgc3RhcnQpIHtcblx0ICBzdGFydCA9IHN0YXJ0IHx8IDA7XG5cdCAgdmFyIGkgPSBsaXN0Lmxlbmd0aCAtIHN0YXJ0O1xuXHQgIHZhciByZXQgPSBuZXcgQXJyYXkoaSk7XG5cdCAgd2hpbGUgKGktLSkge1xuXHQgICAgcmV0W2ldID0gbGlzdFtpICsgc3RhcnRdO1xuXHQgIH1cblx0ICByZXR1cm4gcmV0XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBNaXggcHJvcGVydGllcyBpbnRvIHRhcmdldCBvYmplY3QuXG5cdCAqL1xuXHRmdW5jdGlvbiBleHRlbmQgKHRvLCBfZnJvbSkge1xuXHQgIGZvciAodmFyIGtleSBpbiBfZnJvbSkge1xuXHQgICAgdG9ba2V5XSA9IF9mcm9tW2tleV07XG5cdCAgfVxuXHQgIHJldHVybiB0b1xuXHR9XG5cdFxuXHQvKipcblx0ICogUXVpY2sgb2JqZWN0IGNoZWNrIC0gdGhpcyBpcyBwcmltYXJpbHkgdXNlZCB0byB0ZWxsXG5cdCAqIE9iamVjdHMgZnJvbSBwcmltaXRpdmUgdmFsdWVzIHdoZW4gd2Uga25vdyB0aGUgdmFsdWVcblx0ICogaXMgYSBKU09OLWNvbXBsaWFudCB0eXBlLlxuXHQgKi9cblx0ZnVuY3Rpb24gaXNPYmplY3QgKG9iaikge1xuXHQgIHJldHVybiBvYmogIT09IG51bGwgJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCdcblx0fVxuXHRcblx0LyoqXG5cdCAqIFN0cmljdCBvYmplY3QgdHlwZSBjaGVjay4gT25seSByZXR1cm5zIHRydWVcblx0ICogZm9yIHBsYWluIEphdmFTY3JpcHQgb2JqZWN0cy5cblx0ICovXG5cdHZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cdHZhciBPQkpFQ1RfU1RSSU5HID0gJ1tvYmplY3QgT2JqZWN0XSc7XG5cdGZ1bmN0aW9uIGlzUGxhaW5PYmplY3QgKG9iaikge1xuXHQgIHJldHVybiB0b1N0cmluZy5jYWxsKG9iaikgPT09IE9CSkVDVF9TVFJJTkdcblx0fVxuXHRcblx0LyoqXG5cdCAqIE1lcmdlIGFuIEFycmF5IG9mIE9iamVjdHMgaW50byBhIHNpbmdsZSBPYmplY3QuXG5cdCAqL1xuXHRmdW5jdGlvbiB0b09iamVjdCAoYXJyKSB7XG5cdCAgdmFyIHJlcyA9IHt9O1xuXHQgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG5cdCAgICBpZiAoYXJyW2ldKSB7XG5cdCAgICAgIGV4dGVuZChyZXMsIGFycltpXSk7XG5cdCAgICB9XG5cdCAgfVxuXHQgIHJldHVybiByZXNcblx0fVxuXHRcblx0LyoqXG5cdCAqIFBlcmZvcm0gbm8gb3BlcmF0aW9uLlxuXHQgKi9cblx0ZnVuY3Rpb24gbm9vcCAoKSB7fVxuXHRcblx0LyoqXG5cdCAqIEFsd2F5cyByZXR1cm4gZmFsc2UuXG5cdCAqL1xuXHR2YXIgbm8gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBmYWxzZTsgfTtcblx0XG5cdC8qKlxuXHQgKiBSZXR1cm4gc2FtZSB2YWx1ZVxuXHQgKi9cblx0dmFyIGlkZW50aXR5ID0gZnVuY3Rpb24gKF8pIHsgcmV0dXJuIF87IH07XG5cdFxuXHQvKipcblx0ICogR2VuZXJhdGUgYSBzdGF0aWMga2V5cyBzdHJpbmcgZnJvbSBjb21waWxlciBtb2R1bGVzLlxuXHQgKi9cblx0ZnVuY3Rpb24gZ2VuU3RhdGljS2V5cyAobW9kdWxlcykge1xuXHQgIHJldHVybiBtb2R1bGVzLnJlZHVjZShmdW5jdGlvbiAoa2V5cywgbSkge1xuXHQgICAgcmV0dXJuIGtleXMuY29uY2F0KG0uc3RhdGljS2V5cyB8fCBbXSlcblx0ICB9LCBbXSkuam9pbignLCcpXG5cdH1cblx0XG5cdC8qKlxuXHQgKiBDaGVjayBpZiB0d28gdmFsdWVzIGFyZSBsb29zZWx5IGVxdWFsIC0gdGhhdCBpcyxcblx0ICogaWYgdGhleSBhcmUgcGxhaW4gb2JqZWN0cywgZG8gdGhleSBoYXZlIHRoZSBzYW1lIHNoYXBlP1xuXHQgKi9cblx0ZnVuY3Rpb24gbG9vc2VFcXVhbCAoYSwgYikge1xuXHQgIHZhciBpc09iamVjdEEgPSBpc09iamVjdChhKTtcblx0ICB2YXIgaXNPYmplY3RCID0gaXNPYmplY3QoYik7XG5cdCAgaWYgKGlzT2JqZWN0QSAmJiBpc09iamVjdEIpIHtcblx0ICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShhKSA9PT0gSlNPTi5zdHJpbmdpZnkoYilcblx0ICB9IGVsc2UgaWYgKCFpc09iamVjdEEgJiYgIWlzT2JqZWN0Qikge1xuXHQgICAgcmV0dXJuIFN0cmluZyhhKSA9PT0gU3RyaW5nKGIpXG5cdCAgfSBlbHNlIHtcblx0ICAgIHJldHVybiBmYWxzZVxuXHQgIH1cblx0fVxuXHRcblx0ZnVuY3Rpb24gbG9vc2VJbmRleE9mIChhcnIsIHZhbCkge1xuXHQgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG5cdCAgICBpZiAobG9vc2VFcXVhbChhcnJbaV0sIHZhbCkpIHsgcmV0dXJuIGkgfVxuXHQgIH1cblx0ICByZXR1cm4gLTFcblx0fVxuXHRcblx0LyogICovXG5cdFxuXHR2YXIgY29uZmlnID0ge1xuXHQgIC8qKlxuXHQgICAqIE9wdGlvbiBtZXJnZSBzdHJhdGVnaWVzICh1c2VkIGluIGNvcmUvdXRpbC9vcHRpb25zKVxuXHQgICAqL1xuXHQgIG9wdGlvbk1lcmdlU3RyYXRlZ2llczogT2JqZWN0LmNyZWF0ZShudWxsKSxcblx0XG5cdCAgLyoqXG5cdCAgICogV2hldGhlciB0byBzdXBwcmVzcyB3YXJuaW5ncy5cblx0ICAgKi9cblx0ICBzaWxlbnQ6IGZhbHNlLFxuXHRcblx0ICAvKipcblx0ICAgKiBXaGV0aGVyIHRvIGVuYWJsZSBkZXZ0b29sc1xuXHQgICAqL1xuXHQgIGRldnRvb2xzOiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nLFxuXHRcblx0ICAvKipcblx0ICAgKiBFcnJvciBoYW5kbGVyIGZvciB3YXRjaGVyIGVycm9yc1xuXHQgICAqL1xuXHQgIGVycm9ySGFuZGxlcjogbnVsbCxcblx0XG5cdCAgLyoqXG5cdCAgICogSWdub3JlIGNlcnRhaW4gY3VzdG9tIGVsZW1lbnRzXG5cdCAgICovXG5cdCAgaWdub3JlZEVsZW1lbnRzOiBbXSxcblx0XG5cdCAgLyoqXG5cdCAgICogQ3VzdG9tIHVzZXIga2V5IGFsaWFzZXMgZm9yIHYtb25cblx0ICAgKi9cblx0ICBrZXlDb2RlczogT2JqZWN0LmNyZWF0ZShudWxsKSxcblx0XG5cdCAgLyoqXG5cdCAgICogQ2hlY2sgaWYgYSB0YWcgaXMgcmVzZXJ2ZWQgc28gdGhhdCBpdCBjYW5ub3QgYmUgcmVnaXN0ZXJlZCBhcyBhXG5cdCAgICogY29tcG9uZW50LiBUaGlzIGlzIHBsYXRmb3JtLWRlcGVuZGVudCBhbmQgbWF5IGJlIG92ZXJ3cml0dGVuLlxuXHQgICAqL1xuXHQgIGlzUmVzZXJ2ZWRUYWc6IG5vLFxuXHRcblx0ICAvKipcblx0ICAgKiBDaGVjayBpZiBhIHRhZyBpcyBhbiB1bmtub3duIGVsZW1lbnQuXG5cdCAgICogUGxhdGZvcm0tZGVwZW5kZW50LlxuXHQgICAqL1xuXHQgIGlzVW5rbm93bkVsZW1lbnQ6IG5vLFxuXHRcblx0ICAvKipcblx0ICAgKiBHZXQgdGhlIG5hbWVzcGFjZSBvZiBhbiBlbGVtZW50XG5cdCAgICovXG5cdCAgZ2V0VGFnTmFtZXNwYWNlOiBub29wLFxuXHRcblx0ICAvKipcblx0ICAgKiBQYXJzZSB0aGUgcmVhbCB0YWcgbmFtZSBmb3IgdGhlIHNwZWNpZmljIHBsYXRmb3JtLlxuXHQgICAqL1xuXHQgIHBhcnNlUGxhdGZvcm1UYWdOYW1lOiBpZGVudGl0eSxcblx0XG5cdCAgLyoqXG5cdCAgICogQ2hlY2sgaWYgYW4gYXR0cmlidXRlIG11c3QgYmUgYm91bmQgdXNpbmcgcHJvcGVydHksIGUuZy4gdmFsdWVcblx0ICAgKiBQbGF0Zm9ybS1kZXBlbmRlbnQuXG5cdCAgICovXG5cdCAgbXVzdFVzZVByb3A6IG5vLFxuXHRcblx0ICAvKipcblx0ICAgKiBMaXN0IG9mIGFzc2V0IHR5cGVzIHRoYXQgYSBjb21wb25lbnQgY2FuIG93bi5cblx0ICAgKi9cblx0ICBfYXNzZXRUeXBlczogW1xuXHQgICAgJ2NvbXBvbmVudCcsXG5cdCAgICAnZGlyZWN0aXZlJyxcblx0ICAgICdmaWx0ZXInXG5cdCAgXSxcblx0XG5cdCAgLyoqXG5cdCAgICogTGlzdCBvZiBsaWZlY3ljbGUgaG9va3MuXG5cdCAgICovXG5cdCAgX2xpZmVjeWNsZUhvb2tzOiBbXG5cdCAgICAnYmVmb3JlQ3JlYXRlJyxcblx0ICAgICdjcmVhdGVkJyxcblx0ICAgICdiZWZvcmVNb3VudCcsXG5cdCAgICAnbW91bnRlZCcsXG5cdCAgICAnYmVmb3JlVXBkYXRlJyxcblx0ICAgICd1cGRhdGVkJyxcblx0ICAgICdiZWZvcmVEZXN0cm95Jyxcblx0ICAgICdkZXN0cm95ZWQnLFxuXHQgICAgJ2FjdGl2YXRlZCcsXG5cdCAgICAnZGVhY3RpdmF0ZWQnXG5cdCAgXSxcblx0XG5cdCAgLyoqXG5cdCAgICogTWF4IGNpcmN1bGFyIHVwZGF0ZXMgYWxsb3dlZCBpbiBhIHNjaGVkdWxlciBmbHVzaCBjeWNsZS5cblx0ICAgKi9cblx0ICBfbWF4VXBkYXRlQ291bnQ6IDEwMFxuXHR9O1xuXHRcblx0LyogICovXG5cdFxuXHQvKipcblx0ICogQ2hlY2sgaWYgYSBzdHJpbmcgc3RhcnRzIHdpdGggJCBvciBfXG5cdCAqL1xuXHRmdW5jdGlvbiBpc1Jlc2VydmVkIChzdHIpIHtcblx0ICB2YXIgYyA9IChzdHIgKyAnJykuY2hhckNvZGVBdCgwKTtcblx0ICByZXR1cm4gYyA9PT0gMHgyNCB8fCBjID09PSAweDVGXG5cdH1cblx0XG5cdC8qKlxuXHQgKiBEZWZpbmUgYSBwcm9wZXJ0eS5cblx0ICovXG5cdGZ1bmN0aW9uIGRlZiAob2JqLCBrZXksIHZhbCwgZW51bWVyYWJsZSkge1xuXHQgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuXHQgICAgdmFsdWU6IHZhbCxcblx0ICAgIGVudW1lcmFibGU6ICEhZW51bWVyYWJsZSxcblx0ICAgIHdyaXRhYmxlOiB0cnVlLFxuXHQgICAgY29uZmlndXJhYmxlOiB0cnVlXG5cdCAgfSk7XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBQYXJzZSBzaW1wbGUgcGF0aC5cblx0ICovXG5cdHZhciBiYWlsUkUgPSAvW15cXHcuJF0vO1xuXHRmdW5jdGlvbiBwYXJzZVBhdGggKHBhdGgpIHtcblx0ICBpZiAoYmFpbFJFLnRlc3QocGF0aCkpIHtcblx0ICAgIHJldHVyblxuXHQgIH0gZWxzZSB7XG5cdCAgICB2YXIgc2VnbWVudHMgPSBwYXRoLnNwbGl0KCcuJyk7XG5cdCAgICByZXR1cm4gZnVuY3Rpb24gKG9iaikge1xuXHQgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlZ21lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgaWYgKCFvYmopIHsgcmV0dXJuIH1cblx0ICAgICAgICBvYmogPSBvYmpbc2VnbWVudHNbaV1dO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBvYmpcblx0ICAgIH1cblx0ICB9XG5cdH1cblx0XG5cdC8qICAqL1xuXHQvKiBnbG9iYWxzIE11dGF0aW9uT2JzZXJ2ZXIgKi9cblx0XG5cdC8vIGNhbiB3ZSB1c2UgX19wcm90b19fP1xuXHR2YXIgaGFzUHJvdG8gPSAnX19wcm90b19fJyBpbiB7fTtcblx0XG5cdC8vIEJyb3dzZXIgZW52aXJvbm1lbnQgc25pZmZpbmdcblx0dmFyIGluQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xuXHR2YXIgVUEgPSBpbkJyb3dzZXIgJiYgd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTtcblx0dmFyIGlzSUUgPSBVQSAmJiAvbXNpZXx0cmlkZW50Ly50ZXN0KFVBKTtcblx0dmFyIGlzSUU5ID0gVUEgJiYgVUEuaW5kZXhPZignbXNpZSA5LjAnKSA+IDA7XG5cdHZhciBpc0VkZ2UgPSBVQSAmJiBVQS5pbmRleE9mKCdlZGdlLycpID4gMDtcblx0dmFyIGlzQW5kcm9pZCA9IFVBICYmIFVBLmluZGV4T2YoJ2FuZHJvaWQnKSA+IDA7XG5cdHZhciBpc0lPUyA9IFVBICYmIC9pcGhvbmV8aXBhZHxpcG9kfGlvcy8udGVzdChVQSk7XG5cdFxuXHQvLyB0aGlzIG5lZWRzIHRvIGJlIGxhenktZXZhbGVkIGJlY2F1c2UgdnVlIG1heSBiZSByZXF1aXJlZCBiZWZvcmVcblx0Ly8gdnVlLXNlcnZlci1yZW5kZXJlciBjYW4gc2V0IFZVRV9FTlZcblx0dmFyIF9pc1NlcnZlcjtcblx0dmFyIGlzU2VydmVyUmVuZGVyaW5nID0gZnVuY3Rpb24gKCkge1xuXHQgIGlmIChfaXNTZXJ2ZXIgPT09IHVuZGVmaW5lZCkge1xuXHQgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG5cdCAgICBpZiAoIWluQnJvd3NlciAmJiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuXHQgICAgICAvLyBkZXRlY3QgcHJlc2VuY2Ugb2YgdnVlLXNlcnZlci1yZW5kZXJlciBhbmQgYXZvaWRcblx0ICAgICAgLy8gV2VicGFjayBzaGltbWluZyB0aGUgcHJvY2Vzc1xuXHQgICAgICBfaXNTZXJ2ZXIgPSBnbG9iYWxbJ3Byb2Nlc3MnXS5lbnYuVlVFX0VOViA9PT0gJ3NlcnZlcic7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICBfaXNTZXJ2ZXIgPSBmYWxzZTtcblx0ICAgIH1cblx0ICB9XG5cdCAgcmV0dXJuIF9pc1NlcnZlclxuXHR9O1xuXHRcblx0Ly8gZGV0ZWN0IGRldnRvb2xzXG5cdHZhciBkZXZ0b29scyA9IGluQnJvd3NlciAmJiB3aW5kb3cuX19WVUVfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztcblx0XG5cdC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5cdGZ1bmN0aW9uIGlzTmF0aXZlIChDdG9yKSB7XG5cdCAgcmV0dXJuIC9uYXRpdmUgY29kZS8udGVzdChDdG9yLnRvU3RyaW5nKCkpXG5cdH1cblx0XG5cdC8qKlxuXHQgKiBEZWZlciBhIHRhc2sgdG8gZXhlY3V0ZSBpdCBhc3luY2hyb25vdXNseS5cblx0ICovXG5cdHZhciBuZXh0VGljayA9IChmdW5jdGlvbiAoKSB7XG5cdCAgdmFyIGNhbGxiYWNrcyA9IFtdO1xuXHQgIHZhciBwZW5kaW5nID0gZmFsc2U7XG5cdCAgdmFyIHRpbWVyRnVuYztcblx0XG5cdCAgZnVuY3Rpb24gbmV4dFRpY2tIYW5kbGVyICgpIHtcblx0ICAgIHBlbmRpbmcgPSBmYWxzZTtcblx0ICAgIHZhciBjb3BpZXMgPSBjYWxsYmFja3Muc2xpY2UoMCk7XG5cdCAgICBjYWxsYmFja3MubGVuZ3RoID0gMDtcblx0ICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29waWVzLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgIGNvcGllc1tpXSgpO1xuXHQgICAgfVxuXHQgIH1cblx0XG5cdCAgLy8gdGhlIG5leHRUaWNrIGJlaGF2aW9yIGxldmVyYWdlcyB0aGUgbWljcm90YXNrIHF1ZXVlLCB3aGljaCBjYW4gYmUgYWNjZXNzZWRcblx0ICAvLyB2aWEgZWl0aGVyIG5hdGl2ZSBQcm9taXNlLnRoZW4gb3IgTXV0YXRpb25PYnNlcnZlci5cblx0ICAvLyBNdXRhdGlvbk9ic2VydmVyIGhhcyB3aWRlciBzdXBwb3J0LCBob3dldmVyIGl0IGlzIHNlcmlvdXNseSBidWdnZWQgaW5cblx0ICAvLyBVSVdlYlZpZXcgaW4gaU9TID49IDkuMy4zIHdoZW4gdHJpZ2dlcmVkIGluIHRvdWNoIGV2ZW50IGhhbmRsZXJzLiBJdFxuXHQgIC8vIGNvbXBsZXRlbHkgc3RvcHMgd29ya2luZyBhZnRlciB0cmlnZ2VyaW5nIGEgZmV3IHRpbWVzLi4uIHNvLCBpZiBuYXRpdmVcblx0ICAvLyBQcm9taXNlIGlzIGF2YWlsYWJsZSwgd2Ugd2lsbCB1c2UgaXQ6XG5cdCAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG5cdCAgaWYgKHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShQcm9taXNlKSkge1xuXHQgICAgdmFyIHAgPSBQcm9taXNlLnJlc29sdmUoKTtcblx0ICAgIHZhciBsb2dFcnJvciA9IGZ1bmN0aW9uIChlcnIpIHsgY29uc29sZS5lcnJvcihlcnIpOyB9O1xuXHQgICAgdGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICBwLnRoZW4obmV4dFRpY2tIYW5kbGVyKS5jYXRjaChsb2dFcnJvcik7XG5cdCAgICAgIC8vIGluIHByb2JsZW1hdGljIFVJV2ViVmlld3MsIFByb21pc2UudGhlbiBkb2Vzbid0IGNvbXBsZXRlbHkgYnJlYWssIGJ1dFxuXHQgICAgICAvLyBpdCBjYW4gZ2V0IHN0dWNrIGluIGEgd2VpcmQgc3RhdGUgd2hlcmUgY2FsbGJhY2tzIGFyZSBwdXNoZWQgaW50byB0aGVcblx0ICAgICAgLy8gbWljcm90YXNrIHF1ZXVlIGJ1dCB0aGUgcXVldWUgaXNuJ3QgYmVpbmcgZmx1c2hlZCwgdW50aWwgdGhlIGJyb3dzZXJcblx0ICAgICAgLy8gbmVlZHMgdG8gZG8gc29tZSBvdGhlciB3b3JrLCBlLmcuIGhhbmRsZSBhIHRpbWVyLiBUaGVyZWZvcmUgd2UgY2FuXG5cdCAgICAgIC8vIFwiZm9yY2VcIiB0aGUgbWljcm90YXNrIHF1ZXVlIHRvIGJlIGZsdXNoZWQgYnkgYWRkaW5nIGFuIGVtcHR5IHRpbWVyLlxuXHQgICAgICBpZiAoaXNJT1MpIHsgc2V0VGltZW91dChub29wKTsgfVxuXHQgICAgfTtcblx0ICB9IGVsc2UgaWYgKHR5cGVvZiBNdXRhdGlvbk9ic2VydmVyICE9PSAndW5kZWZpbmVkJyAmJiAoXG5cdCAgICBpc05hdGl2ZShNdXRhdGlvbk9ic2VydmVyKSB8fFxuXHQgICAgLy8gUGhhbnRvbUpTIGFuZCBpT1MgNy54XG5cdCAgICBNdXRhdGlvbk9ic2VydmVyLnRvU3RyaW5nKCkgPT09ICdbb2JqZWN0IE11dGF0aW9uT2JzZXJ2ZXJDb25zdHJ1Y3Rvcl0nXG5cdCAgKSkge1xuXHQgICAgLy8gdXNlIE11dGF0aW9uT2JzZXJ2ZXIgd2hlcmUgbmF0aXZlIFByb21pc2UgaXMgbm90IGF2YWlsYWJsZSxcblx0ICAgIC8vIGUuZy4gUGhhbnRvbUpTIElFMTEsIGlPUzcsIEFuZHJvaWQgNC40XG5cdCAgICB2YXIgY291bnRlciA9IDE7XG5cdCAgICB2YXIgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihuZXh0VGlja0hhbmRsZXIpO1xuXHQgICAgdmFyIHRleHROb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoU3RyaW5nKGNvdW50ZXIpKTtcblx0ICAgIG9ic2VydmVyLm9ic2VydmUodGV4dE5vZGUsIHtcblx0ICAgICAgY2hhcmFjdGVyRGF0YTogdHJ1ZVxuXHQgICAgfSk7XG5cdCAgICB0aW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgIGNvdW50ZXIgPSAoY291bnRlciArIDEpICUgMjtcblx0ICAgICAgdGV4dE5vZGUuZGF0YSA9IFN0cmluZyhjb3VudGVyKTtcblx0ICAgIH07XG5cdCAgfSBlbHNlIHtcblx0ICAgIC8vIGZhbGxiYWNrIHRvIHNldFRpbWVvdXRcblx0ICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5cdCAgICB0aW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgIHNldFRpbWVvdXQobmV4dFRpY2tIYW5kbGVyLCAwKTtcblx0ICAgIH07XG5cdCAgfVxuXHRcblx0ICByZXR1cm4gZnVuY3Rpb24gcXVldWVOZXh0VGljayAoY2IsIGN0eCkge1xuXHQgICAgdmFyIF9yZXNvbHZlO1xuXHQgICAgY2FsbGJhY2tzLnB1c2goZnVuY3Rpb24gKCkge1xuXHQgICAgICBpZiAoY2IpIHsgY2IuY2FsbChjdHgpOyB9XG5cdCAgICAgIGlmIChfcmVzb2x2ZSkgeyBfcmVzb2x2ZShjdHgpOyB9XG5cdCAgICB9KTtcblx0ICAgIGlmICghcGVuZGluZykge1xuXHQgICAgICBwZW5kaW5nID0gdHJ1ZTtcblx0ICAgICAgdGltZXJGdW5jKCk7XG5cdCAgICB9XG5cdCAgICBpZiAoIWNiICYmIHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJykge1xuXHQgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcblx0ICAgICAgICBfcmVzb2x2ZSA9IHJlc29sdmU7XG5cdCAgICAgIH0pXG5cdCAgICB9XG5cdCAgfVxuXHR9KSgpO1xuXHRcblx0dmFyIF9TZXQ7XG5cdC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuXHRpZiAodHlwZW9mIFNldCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoU2V0KSkge1xuXHQgIC8vIHVzZSBuYXRpdmUgU2V0IHdoZW4gYXZhaWxhYmxlLlxuXHQgIF9TZXQgPSBTZXQ7XG5cdH0gZWxzZSB7XG5cdCAgLy8gYSBub24tc3RhbmRhcmQgU2V0IHBvbHlmaWxsIHRoYXQgb25seSB3b3JrcyB3aXRoIHByaW1pdGl2ZSBrZXlzLlxuXHQgIF9TZXQgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gU2V0ICgpIHtcblx0ICAgICAgdGhpcy5zZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXHQgICAgfVxuXHQgICAgU2V0LnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiBoYXMgKGtleSkge1xuXHQgICAgICByZXR1cm4gdGhpcy5zZXRba2V5XSA9PT0gdHJ1ZVxuXHQgICAgfTtcblx0ICAgIFNldC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkIChrZXkpIHtcblx0ICAgICAgdGhpcy5zZXRba2V5XSA9IHRydWU7XG5cdCAgICB9O1xuXHQgICAgU2V0LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyICgpIHtcblx0ICAgICAgdGhpcy5zZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXHQgICAgfTtcblx0XG5cdCAgICByZXR1cm4gU2V0O1xuXHQgIH0oKSk7XG5cdH1cblx0XG5cdHZhciB3YXJuID0gbm9vcDtcblx0dmFyIGZvcm1hdENvbXBvbmVudE5hbWU7XG5cdFxuXHRpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuXHQgIHZhciBoYXNDb25zb2xlID0gdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnO1xuXHRcblx0ICB3YXJuID0gZnVuY3Rpb24gKG1zZywgdm0pIHtcblx0ICAgIGlmIChoYXNDb25zb2xlICYmICghY29uZmlnLnNpbGVudCkpIHtcblx0ICAgICAgY29uc29sZS5lcnJvcihcIltWdWUgd2Fybl06IFwiICsgbXNnICsgXCIgXCIgKyAoXG5cdCAgICAgICAgdm0gPyBmb3JtYXRMb2NhdGlvbihmb3JtYXRDb21wb25lbnROYW1lKHZtKSkgOiAnJ1xuXHQgICAgICApKTtcblx0ICAgIH1cblx0ICB9O1xuXHRcblx0ICBmb3JtYXRDb21wb25lbnROYW1lID0gZnVuY3Rpb24gKHZtKSB7XG5cdCAgICBpZiAodm0uJHJvb3QgPT09IHZtKSB7XG5cdCAgICAgIHJldHVybiAncm9vdCBpbnN0YW5jZSdcblx0ICAgIH1cblx0ICAgIHZhciBuYW1lID0gdm0uX2lzVnVlXG5cdCAgICAgID8gdm0uJG9wdGlvbnMubmFtZSB8fCB2bS4kb3B0aW9ucy5fY29tcG9uZW50VGFnXG5cdCAgICAgIDogdm0ubmFtZTtcblx0ICAgIHJldHVybiAoXG5cdCAgICAgIChuYW1lID8gKFwiY29tcG9uZW50IDxcIiArIG5hbWUgKyBcIj5cIikgOiBcImFub255bW91cyBjb21wb25lbnRcIikgK1xuXHQgICAgICAodm0uX2lzVnVlICYmIHZtLiRvcHRpb25zLl9fZmlsZSA/IChcIiBhdCBcIiArICh2bS4kb3B0aW9ucy5fX2ZpbGUpKSA6ICcnKVxuXHQgICAgKVxuXHQgIH07XG5cdFxuXHQgIHZhciBmb3JtYXRMb2NhdGlvbiA9IGZ1bmN0aW9uIChzdHIpIHtcblx0ICAgIGlmIChzdHIgPT09ICdhbm9ueW1vdXMgY29tcG9uZW50Jykge1xuXHQgICAgICBzdHIgKz0gXCIgLSB1c2UgdGhlIFxcXCJuYW1lXFxcIiBvcHRpb24gZm9yIGJldHRlciBkZWJ1Z2dpbmcgbWVzc2FnZXMuXCI7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gKFwiXFxuKGZvdW5kIGluIFwiICsgc3RyICsgXCIpXCIpXG5cdCAgfTtcblx0fVxuXHRcblx0LyogICovXG5cdFxuXHRcblx0dmFyIHVpZCQxID0gMDtcblx0XG5cdC8qKlxuXHQgKiBBIGRlcCBpcyBhbiBvYnNlcnZhYmxlIHRoYXQgY2FuIGhhdmUgbXVsdGlwbGVcblx0ICogZGlyZWN0aXZlcyBzdWJzY3JpYmluZyB0byBpdC5cblx0ICovXG5cdHZhciBEZXAgPSBmdW5jdGlvbiBEZXAgKCkge1xuXHQgIHRoaXMuaWQgPSB1aWQkMSsrO1xuXHQgIHRoaXMuc3VicyA9IFtdO1xuXHR9O1xuXHRcblx0RGVwLnByb3RvdHlwZS5hZGRTdWIgPSBmdW5jdGlvbiBhZGRTdWIgKHN1Yikge1xuXHQgIHRoaXMuc3Vicy5wdXNoKHN1Yik7XG5cdH07XG5cdFxuXHREZXAucHJvdG90eXBlLnJlbW92ZVN1YiA9IGZ1bmN0aW9uIHJlbW92ZVN1YiAoc3ViKSB7XG5cdCAgcmVtb3ZlJDEodGhpcy5zdWJzLCBzdWIpO1xuXHR9O1xuXHRcblx0RGVwLnByb3RvdHlwZS5kZXBlbmQgPSBmdW5jdGlvbiBkZXBlbmQgKCkge1xuXHQgIGlmIChEZXAudGFyZ2V0KSB7XG5cdCAgICBEZXAudGFyZ2V0LmFkZERlcCh0aGlzKTtcblx0ICB9XG5cdH07XG5cdFxuXHREZXAucHJvdG90eXBlLm5vdGlmeSA9IGZ1bmN0aW9uIG5vdGlmeSAoKSB7XG5cdCAgLy8gc3RhYmxpemUgdGhlIHN1YnNjcmliZXIgbGlzdCBmaXJzdFxuXHQgIHZhciBzdWJzID0gdGhpcy5zdWJzLnNsaWNlKCk7XG5cdCAgZm9yICh2YXIgaSA9IDAsIGwgPSBzdWJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuXHQgICAgc3Vic1tpXS51cGRhdGUoKTtcblx0ICB9XG5cdH07XG5cdFxuXHQvLyB0aGUgY3VycmVudCB0YXJnZXQgd2F0Y2hlciBiZWluZyBldmFsdWF0ZWQuXG5cdC8vIHRoaXMgaXMgZ2xvYmFsbHkgdW5pcXVlIGJlY2F1c2UgdGhlcmUgY291bGQgYmUgb25seSBvbmVcblx0Ly8gd2F0Y2hlciBiZWluZyBldmFsdWF0ZWQgYXQgYW55IHRpbWUuXG5cdERlcC50YXJnZXQgPSBudWxsO1xuXHR2YXIgdGFyZ2V0U3RhY2sgPSBbXTtcblx0XG5cdGZ1bmN0aW9uIHB1c2hUYXJnZXQgKF90YXJnZXQpIHtcblx0ICBpZiAoRGVwLnRhcmdldCkgeyB0YXJnZXRTdGFjay5wdXNoKERlcC50YXJnZXQpOyB9XG5cdCAgRGVwLnRhcmdldCA9IF90YXJnZXQ7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIHBvcFRhcmdldCAoKSB7XG5cdCAgRGVwLnRhcmdldCA9IHRhcmdldFN0YWNrLnBvcCgpO1xuXHR9XG5cdFxuXHQvKlxuXHQgKiBub3QgdHlwZSBjaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBmbG93IGRvZXNuJ3QgcGxheSB3ZWxsIHdpdGhcblx0ICogZHluYW1pY2FsbHkgYWNjZXNzaW5nIG1ldGhvZHMgb24gQXJyYXkgcHJvdG90eXBlXG5cdCAqL1xuXHRcblx0dmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5cdHZhciBhcnJheU1ldGhvZHMgPSBPYmplY3QuY3JlYXRlKGFycmF5UHJvdG8pO1tcblx0ICAncHVzaCcsXG5cdCAgJ3BvcCcsXG5cdCAgJ3NoaWZ0Jyxcblx0ICAndW5zaGlmdCcsXG5cdCAgJ3NwbGljZScsXG5cdCAgJ3NvcnQnLFxuXHQgICdyZXZlcnNlJ1xuXHRdXG5cdC5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2QpIHtcblx0ICAvLyBjYWNoZSBvcmlnaW5hbCBtZXRob2Rcblx0ICB2YXIgb3JpZ2luYWwgPSBhcnJheVByb3RvW21ldGhvZF07XG5cdCAgZGVmKGFycmF5TWV0aG9kcywgbWV0aG9kLCBmdW5jdGlvbiBtdXRhdG9yICgpIHtcblx0ICAgIHZhciBhcmd1bWVudHMkMSA9IGFyZ3VtZW50cztcblx0XG5cdCAgICAvLyBhdm9pZCBsZWFraW5nIGFyZ3VtZW50czpcblx0ICAgIC8vIGh0dHA6Ly9qc3BlcmYuY29tL2Nsb3N1cmUtd2l0aC1hcmd1bWVudHNcblx0ICAgIHZhciBpID0gYXJndW1lbnRzLmxlbmd0aDtcblx0ICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGkpO1xuXHQgICAgd2hpbGUgKGktLSkge1xuXHQgICAgICBhcmdzW2ldID0gYXJndW1lbnRzJDFbaV07XG5cdCAgICB9XG5cdCAgICB2YXIgcmVzdWx0ID0gb3JpZ2luYWwuYXBwbHkodGhpcywgYXJncyk7XG5cdCAgICB2YXIgb2IgPSB0aGlzLl9fb2JfXztcblx0ICAgIHZhciBpbnNlcnRlZDtcblx0ICAgIHN3aXRjaCAobWV0aG9kKSB7XG5cdCAgICAgIGNhc2UgJ3B1c2gnOlxuXHQgICAgICAgIGluc2VydGVkID0gYXJncztcblx0ICAgICAgICBicmVha1xuXHQgICAgICBjYXNlICd1bnNoaWZ0Jzpcblx0ICAgICAgICBpbnNlcnRlZCA9IGFyZ3M7XG5cdCAgICAgICAgYnJlYWtcblx0ICAgICAgY2FzZSAnc3BsaWNlJzpcblx0ICAgICAgICBpbnNlcnRlZCA9IGFyZ3Muc2xpY2UoMik7XG5cdCAgICAgICAgYnJlYWtcblx0ICAgIH1cblx0ICAgIGlmIChpbnNlcnRlZCkgeyBvYi5vYnNlcnZlQXJyYXkoaW5zZXJ0ZWQpOyB9XG5cdCAgICAvLyBub3RpZnkgY2hhbmdlXG5cdCAgICBvYi5kZXAubm90aWZ5KCk7XG5cdCAgICByZXR1cm4gcmVzdWx0XG5cdCAgfSk7XG5cdH0pO1xuXHRcblx0LyogICovXG5cdFxuXHR2YXIgYXJyYXlLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoYXJyYXlNZXRob2RzKTtcblx0XG5cdC8qKlxuXHQgKiBCeSBkZWZhdWx0LCB3aGVuIGEgcmVhY3RpdmUgcHJvcGVydHkgaXMgc2V0LCB0aGUgbmV3IHZhbHVlIGlzXG5cdCAqIGFsc28gY29udmVydGVkIHRvIGJlY29tZSByZWFjdGl2ZS4gSG93ZXZlciB3aGVuIHBhc3NpbmcgZG93biBwcm9wcyxcblx0ICogd2UgZG9uJ3Qgd2FudCB0byBmb3JjZSBjb252ZXJzaW9uIGJlY2F1c2UgdGhlIHZhbHVlIG1heSBiZSBhIG5lc3RlZCB2YWx1ZVxuXHQgKiB1bmRlciBhIGZyb3plbiBkYXRhIHN0cnVjdHVyZS4gQ29udmVydGluZyBpdCB3b3VsZCBkZWZlYXQgdGhlIG9wdGltaXphdGlvbi5cblx0ICovXG5cdHZhciBvYnNlcnZlclN0YXRlID0ge1xuXHQgIHNob3VsZENvbnZlcnQ6IHRydWUsXG5cdCAgaXNTZXR0aW5nUHJvcHM6IGZhbHNlXG5cdH07XG5cdFxuXHQvKipcblx0ICogT2JzZXJ2ZXIgY2xhc3MgdGhhdCBhcmUgYXR0YWNoZWQgdG8gZWFjaCBvYnNlcnZlZFxuXHQgKiBvYmplY3QuIE9uY2UgYXR0YWNoZWQsIHRoZSBvYnNlcnZlciBjb252ZXJ0cyB0YXJnZXRcblx0ICogb2JqZWN0J3MgcHJvcGVydHkga2V5cyBpbnRvIGdldHRlci9zZXR0ZXJzIHRoYXRcblx0ICogY29sbGVjdCBkZXBlbmRlbmNpZXMgYW5kIGRpc3BhdGNoZXMgdXBkYXRlcy5cblx0ICovXG5cdHZhciBPYnNlcnZlciA9IGZ1bmN0aW9uIE9ic2VydmVyICh2YWx1ZSkge1xuXHQgIHRoaXMudmFsdWUgPSB2YWx1ZTtcblx0ICB0aGlzLmRlcCA9IG5ldyBEZXAoKTtcblx0ICB0aGlzLnZtQ291bnQgPSAwO1xuXHQgIGRlZih2YWx1ZSwgJ19fb2JfXycsIHRoaXMpO1xuXHQgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuXHQgICAgdmFyIGF1Z21lbnQgPSBoYXNQcm90b1xuXHQgICAgICA/IHByb3RvQXVnbWVudFxuXHQgICAgICA6IGNvcHlBdWdtZW50O1xuXHQgICAgYXVnbWVudCh2YWx1ZSwgYXJyYXlNZXRob2RzLCBhcnJheUtleXMpO1xuXHQgICAgdGhpcy5vYnNlcnZlQXJyYXkodmFsdWUpO1xuXHQgIH0gZWxzZSB7XG5cdCAgICB0aGlzLndhbGsodmFsdWUpO1xuXHQgIH1cblx0fTtcblx0XG5cdC8qKlxuXHQgKiBXYWxrIHRocm91Z2ggZWFjaCBwcm9wZXJ0eSBhbmQgY29udmVydCB0aGVtIGludG9cblx0ICogZ2V0dGVyL3NldHRlcnMuIFRoaXMgbWV0aG9kIHNob3VsZCBvbmx5IGJlIGNhbGxlZCB3aGVuXG5cdCAqIHZhbHVlIHR5cGUgaXMgT2JqZWN0LlxuXHQgKi9cblx0T2JzZXJ2ZXIucHJvdG90eXBlLndhbGsgPSBmdW5jdGlvbiB3YWxrIChvYmopIHtcblx0ICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG5cdCAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG5cdCAgICBkZWZpbmVSZWFjdGl2ZSQkMShvYmosIGtleXNbaV0sIG9ialtrZXlzW2ldXSk7XG5cdCAgfVxuXHR9O1xuXHRcblx0LyoqXG5cdCAqIE9ic2VydmUgYSBsaXN0IG9mIEFycmF5IGl0ZW1zLlxuXHQgKi9cblx0T2JzZXJ2ZXIucHJvdG90eXBlLm9ic2VydmVBcnJheSA9IGZ1bmN0aW9uIG9ic2VydmVBcnJheSAoaXRlbXMpIHtcblx0ICBmb3IgKHZhciBpID0gMCwgbCA9IGl0ZW1zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuXHQgICAgb2JzZXJ2ZShpdGVtc1tpXSk7XG5cdCAgfVxuXHR9O1xuXHRcblx0Ly8gaGVscGVyc1xuXHRcblx0LyoqXG5cdCAqIEF1Z21lbnQgYW4gdGFyZ2V0IE9iamVjdCBvciBBcnJheSBieSBpbnRlcmNlcHRpbmdcblx0ICogdGhlIHByb3RvdHlwZSBjaGFpbiB1c2luZyBfX3Byb3RvX19cblx0ICovXG5cdGZ1bmN0aW9uIHByb3RvQXVnbWVudCAodGFyZ2V0LCBzcmMpIHtcblx0ICAvKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuXHQgIHRhcmdldC5fX3Byb3RvX18gPSBzcmM7XG5cdCAgLyogZXNsaW50LWVuYWJsZSBuby1wcm90byAqL1xuXHR9XG5cdFxuXHQvKipcblx0ICogQXVnbWVudCBhbiB0YXJnZXQgT2JqZWN0IG9yIEFycmF5IGJ5IGRlZmluaW5nXG5cdCAqIGhpZGRlbiBwcm9wZXJ0aWVzLlxuXHQgKi9cblx0LyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cblx0ZnVuY3Rpb24gY29weUF1Z21lbnQgKHRhcmdldCwgc3JjLCBrZXlzKSB7XG5cdCAgZm9yICh2YXIgaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuXHQgICAgdmFyIGtleSA9IGtleXNbaV07XG5cdCAgICBkZWYodGFyZ2V0LCBrZXksIHNyY1trZXldKTtcblx0ICB9XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBBdHRlbXB0IHRvIGNyZWF0ZSBhbiBvYnNlcnZlciBpbnN0YW5jZSBmb3IgYSB2YWx1ZSxcblx0ICogcmV0dXJucyB0aGUgbmV3IG9ic2VydmVyIGlmIHN1Y2Nlc3NmdWxseSBvYnNlcnZlZCxcblx0ICogb3IgdGhlIGV4aXN0aW5nIG9ic2VydmVyIGlmIHRoZSB2YWx1ZSBhbHJlYWR5IGhhcyBvbmUuXG5cdCAqL1xuXHRmdW5jdGlvbiBvYnNlcnZlICh2YWx1ZSwgYXNSb290RGF0YSkge1xuXHQgIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG5cdCAgICByZXR1cm5cblx0ICB9XG5cdCAgdmFyIG9iO1xuXHQgIGlmIChoYXNPd24odmFsdWUsICdfX29iX18nKSAmJiB2YWx1ZS5fX29iX18gaW5zdGFuY2VvZiBPYnNlcnZlcikge1xuXHQgICAgb2IgPSB2YWx1ZS5fX29iX187XG5cdCAgfSBlbHNlIGlmIChcblx0ICAgIG9ic2VydmVyU3RhdGUuc2hvdWxkQ29udmVydCAmJlxuXHQgICAgIWlzU2VydmVyUmVuZGVyaW5nKCkgJiZcblx0ICAgIChBcnJheS5pc0FycmF5KHZhbHVlKSB8fCBpc1BsYWluT2JqZWN0KHZhbHVlKSkgJiZcblx0ICAgIE9iamVjdC5pc0V4dGVuc2libGUodmFsdWUpICYmXG5cdCAgICAhdmFsdWUuX2lzVnVlXG5cdCAgKSB7XG5cdCAgICBvYiA9IG5ldyBPYnNlcnZlcih2YWx1ZSk7XG5cdCAgfVxuXHQgIGlmIChhc1Jvb3REYXRhICYmIG9iKSB7XG5cdCAgICBvYi52bUNvdW50Kys7XG5cdCAgfVxuXHQgIHJldHVybiBvYlxuXHR9XG5cdFxuXHQvKipcblx0ICogRGVmaW5lIGEgcmVhY3RpdmUgcHJvcGVydHkgb24gYW4gT2JqZWN0LlxuXHQgKi9cblx0ZnVuY3Rpb24gZGVmaW5lUmVhY3RpdmUkJDEgKFxuXHQgIG9iaixcblx0ICBrZXksXG5cdCAgdmFsLFxuXHQgIGN1c3RvbVNldHRlclxuXHQpIHtcblx0ICB2YXIgZGVwID0gbmV3IERlcCgpO1xuXHRcblx0ICB2YXIgcHJvcGVydHkgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KTtcblx0ICBpZiAocHJvcGVydHkgJiYgcHJvcGVydHkuY29uZmlndXJhYmxlID09PSBmYWxzZSkge1xuXHQgICAgcmV0dXJuXG5cdCAgfVxuXHRcblx0ICAvLyBjYXRlciBmb3IgcHJlLWRlZmluZWQgZ2V0dGVyL3NldHRlcnNcblx0ICB2YXIgZ2V0dGVyID0gcHJvcGVydHkgJiYgcHJvcGVydHkuZ2V0O1xuXHQgIHZhciBzZXR0ZXIgPSBwcm9wZXJ0eSAmJiBwcm9wZXJ0eS5zZXQ7XG5cdFxuXHQgIHZhciBjaGlsZE9iID0gb2JzZXJ2ZSh2YWwpO1xuXHQgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuXHQgICAgZW51bWVyYWJsZTogdHJ1ZSxcblx0ICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0ICAgIGdldDogZnVuY3Rpb24gcmVhY3RpdmVHZXR0ZXIgKCkge1xuXHQgICAgICB2YXIgdmFsdWUgPSBnZXR0ZXIgPyBnZXR0ZXIuY2FsbChvYmopIDogdmFsO1xuXHQgICAgICBpZiAoRGVwLnRhcmdldCkge1xuXHQgICAgICAgIGRlcC5kZXBlbmQoKTtcblx0ICAgICAgICBpZiAoY2hpbGRPYikge1xuXHQgICAgICAgICAgY2hpbGRPYi5kZXAuZGVwZW5kKCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuXHQgICAgICAgICAgZGVwZW5kQXJyYXkodmFsdWUpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gdmFsdWVcblx0ICAgIH0sXG5cdCAgICBzZXQ6IGZ1bmN0aW9uIHJlYWN0aXZlU2V0dGVyIChuZXdWYWwpIHtcblx0ICAgICAgdmFyIHZhbHVlID0gZ2V0dGVyID8gZ2V0dGVyLmNhbGwob2JqKSA6IHZhbDtcblx0ICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tc2VsZi1jb21wYXJlICovXG5cdCAgICAgIGlmIChuZXdWYWwgPT09IHZhbHVlIHx8IChuZXdWYWwgIT09IG5ld1ZhbCAmJiB2YWx1ZSAhPT0gdmFsdWUpKSB7XG5cdCAgICAgICAgcmV0dXJuXG5cdCAgICAgIH1cblx0ICAgICAgLyogZXNsaW50LWVuYWJsZSBuby1zZWxmLWNvbXBhcmUgKi9cblx0ICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY3VzdG9tU2V0dGVyKSB7XG5cdCAgICAgICAgY3VzdG9tU2V0dGVyKCk7XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKHNldHRlcikge1xuXHQgICAgICAgIHNldHRlci5jYWxsKG9iaiwgbmV3VmFsKTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICB2YWwgPSBuZXdWYWw7XG5cdCAgICAgIH1cblx0ICAgICAgY2hpbGRPYiA9IG9ic2VydmUobmV3VmFsKTtcblx0ICAgICAgZGVwLm5vdGlmeSgpO1xuXHQgICAgfVxuXHQgIH0pO1xuXHR9XG5cdFxuXHQvKipcblx0ICogU2V0IGEgcHJvcGVydHkgb24gYW4gb2JqZWN0LiBBZGRzIHRoZSBuZXcgcHJvcGVydHkgYW5kXG5cdCAqIHRyaWdnZXJzIGNoYW5nZSBub3RpZmljYXRpb24gaWYgdGhlIHByb3BlcnR5IGRvZXNuJ3Rcblx0ICogYWxyZWFkeSBleGlzdC5cblx0ICovXG5cdGZ1bmN0aW9uIHNldCQxIChvYmosIGtleSwgdmFsKSB7XG5cdCAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuXHQgICAgb2JqLmxlbmd0aCA9IE1hdGgubWF4KG9iai5sZW5ndGgsIGtleSk7XG5cdCAgICBvYmouc3BsaWNlKGtleSwgMSwgdmFsKTtcblx0ICAgIHJldHVybiB2YWxcblx0ICB9XG5cdCAgaWYgKGhhc093bihvYmosIGtleSkpIHtcblx0ICAgIG9ialtrZXldID0gdmFsO1xuXHQgICAgcmV0dXJuXG5cdCAgfVxuXHQgIHZhciBvYiA9IG9iai5fX29iX187XG5cdCAgaWYgKG9iai5faXNWdWUgfHwgKG9iICYmIG9iLnZtQ291bnQpKSB7XG5cdCAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG5cdCAgICAgICdBdm9pZCBhZGRpbmcgcmVhY3RpdmUgcHJvcGVydGllcyB0byBhIFZ1ZSBpbnN0YW5jZSBvciBpdHMgcm9vdCAkZGF0YSAnICtcblx0ICAgICAgJ2F0IHJ1bnRpbWUgLSBkZWNsYXJlIGl0IHVwZnJvbnQgaW4gdGhlIGRhdGEgb3B0aW9uLidcblx0ICAgICk7XG5cdCAgICByZXR1cm5cblx0ICB9XG5cdCAgaWYgKCFvYikge1xuXHQgICAgb2JqW2tleV0gPSB2YWw7XG5cdCAgICByZXR1cm5cblx0ICB9XG5cdCAgZGVmaW5lUmVhY3RpdmUkJDEob2IudmFsdWUsIGtleSwgdmFsKTtcblx0ICBvYi5kZXAubm90aWZ5KCk7XG5cdCAgcmV0dXJuIHZhbFxuXHR9XG5cdFxuXHQvKipcblx0ICogRGVsZXRlIGEgcHJvcGVydHkgYW5kIHRyaWdnZXIgY2hhbmdlIGlmIG5lY2Vzc2FyeS5cblx0ICovXG5cdGZ1bmN0aW9uIGRlbCAob2JqLCBrZXkpIHtcblx0ICB2YXIgb2IgPSBvYmouX19vYl9fO1xuXHQgIGlmIChvYmouX2lzVnVlIHx8IChvYiAmJiBvYi52bUNvdW50KSkge1xuXHQgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuXHQgICAgICAnQXZvaWQgZGVsZXRpbmcgcHJvcGVydGllcyBvbiBhIFZ1ZSBpbnN0YW5jZSBvciBpdHMgcm9vdCAkZGF0YSAnICtcblx0ICAgICAgJy0ganVzdCBzZXQgaXQgdG8gbnVsbC4nXG5cdCAgICApO1xuXHQgICAgcmV0dXJuXG5cdCAgfVxuXHQgIGlmICghaGFzT3duKG9iaiwga2V5KSkge1xuXHQgICAgcmV0dXJuXG5cdCAgfVxuXHQgIGRlbGV0ZSBvYmpba2V5XTtcblx0ICBpZiAoIW9iKSB7XG5cdCAgICByZXR1cm5cblx0ICB9XG5cdCAgb2IuZGVwLm5vdGlmeSgpO1xuXHR9XG5cdFxuXHQvKipcblx0ICogQ29sbGVjdCBkZXBlbmRlbmNpZXMgb24gYXJyYXkgZWxlbWVudHMgd2hlbiB0aGUgYXJyYXkgaXMgdG91Y2hlZCwgc2luY2Vcblx0ICogd2UgY2Fubm90IGludGVyY2VwdCBhcnJheSBlbGVtZW50IGFjY2VzcyBsaWtlIHByb3BlcnR5IGdldHRlcnMuXG5cdCAqL1xuXHRmdW5jdGlvbiBkZXBlbmRBcnJheSAodmFsdWUpIHtcblx0ICBmb3IgKHZhciBlID0gKHZvaWQgMCksIGkgPSAwLCBsID0gdmFsdWUubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG5cdCAgICBlID0gdmFsdWVbaV07XG5cdCAgICBlICYmIGUuX19vYl9fICYmIGUuX19vYl9fLmRlcC5kZXBlbmQoKTtcblx0ICAgIGlmIChBcnJheS5pc0FycmF5KGUpKSB7XG5cdCAgICAgIGRlcGVuZEFycmF5KGUpO1xuXHQgICAgfVxuXHQgIH1cblx0fVxuXHRcblx0LyogICovXG5cdFxuXHQvKipcblx0ICogT3B0aW9uIG92ZXJ3cml0aW5nIHN0cmF0ZWdpZXMgYXJlIGZ1bmN0aW9ucyB0aGF0IGhhbmRsZVxuXHQgKiBob3cgdG8gbWVyZ2UgYSBwYXJlbnQgb3B0aW9uIHZhbHVlIGFuZCBhIGNoaWxkIG9wdGlvblxuXHQgKiB2YWx1ZSBpbnRvIHRoZSBmaW5hbCB2YWx1ZS5cblx0ICovXG5cdHZhciBzdHJhdHMgPSBjb25maWcub3B0aW9uTWVyZ2VTdHJhdGVnaWVzO1xuXHRcblx0LyoqXG5cdCAqIE9wdGlvbnMgd2l0aCByZXN0cmljdGlvbnNcblx0ICovXG5cdGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG5cdCAgc3RyYXRzLmVsID0gc3RyYXRzLnByb3BzRGF0YSA9IGZ1bmN0aW9uIChwYXJlbnQsIGNoaWxkLCB2bSwga2V5KSB7XG5cdCAgICBpZiAoIXZtKSB7XG5cdCAgICAgIHdhcm4oXG5cdCAgICAgICAgXCJvcHRpb24gXFxcIlwiICsga2V5ICsgXCJcXFwiIGNhbiBvbmx5IGJlIHVzZWQgZHVyaW5nIGluc3RhbmNlIFwiICtcblx0ICAgICAgICAnY3JlYXRpb24gd2l0aCB0aGUgYG5ld2Aga2V5d29yZC4nXG5cdCAgICAgICk7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gZGVmYXVsdFN0cmF0KHBhcmVudCwgY2hpbGQpXG5cdCAgfTtcblx0fVxuXHRcblx0LyoqXG5cdCAqIEhlbHBlciB0aGF0IHJlY3Vyc2l2ZWx5IG1lcmdlcyB0d28gZGF0YSBvYmplY3RzIHRvZ2V0aGVyLlxuXHQgKi9cblx0ZnVuY3Rpb24gbWVyZ2VEYXRhICh0bywgZnJvbSkge1xuXHQgIGlmICghZnJvbSkgeyByZXR1cm4gdG8gfVxuXHQgIHZhciBrZXksIHRvVmFsLCBmcm9tVmFsO1xuXHQgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZnJvbSk7XG5cdCAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG5cdCAgICBrZXkgPSBrZXlzW2ldO1xuXHQgICAgdG9WYWwgPSB0b1trZXldO1xuXHQgICAgZnJvbVZhbCA9IGZyb21ba2V5XTtcblx0ICAgIGlmICghaGFzT3duKHRvLCBrZXkpKSB7XG5cdCAgICAgIHNldCQxKHRvLCBrZXksIGZyb21WYWwpO1xuXHQgICAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHRvVmFsKSAmJiBpc1BsYWluT2JqZWN0KGZyb21WYWwpKSB7XG5cdCAgICAgIG1lcmdlRGF0YSh0b1ZhbCwgZnJvbVZhbCk7XG5cdCAgICB9XG5cdCAgfVxuXHQgIHJldHVybiB0b1xuXHR9XG5cdFxuXHQvKipcblx0ICogRGF0YVxuXHQgKi9cblx0c3RyYXRzLmRhdGEgPSBmdW5jdGlvbiAoXG5cdCAgcGFyZW50VmFsLFxuXHQgIGNoaWxkVmFsLFxuXHQgIHZtXG5cdCkge1xuXHQgIGlmICghdm0pIHtcblx0ICAgIC8vIGluIGEgVnVlLmV4dGVuZCBtZXJnZSwgYm90aCBzaG91bGQgYmUgZnVuY3Rpb25zXG5cdCAgICBpZiAoIWNoaWxkVmFsKSB7XG5cdCAgICAgIHJldHVybiBwYXJlbnRWYWxcblx0ICAgIH1cblx0ICAgIGlmICh0eXBlb2YgY2hpbGRWYWwgIT09ICdmdW5jdGlvbicpIHtcblx0ICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuXHQgICAgICAgICdUaGUgXCJkYXRhXCIgb3B0aW9uIHNob3VsZCBiZSBhIGZ1bmN0aW9uICcgK1xuXHQgICAgICAgICd0aGF0IHJldHVybnMgYSBwZXItaW5zdGFuY2UgdmFsdWUgaW4gY29tcG9uZW50ICcgK1xuXHQgICAgICAgICdkZWZpbml0aW9ucy4nLFxuXHQgICAgICAgIHZtXG5cdCAgICAgICk7XG5cdCAgICAgIHJldHVybiBwYXJlbnRWYWxcblx0ICAgIH1cblx0ICAgIGlmICghcGFyZW50VmFsKSB7XG5cdCAgICAgIHJldHVybiBjaGlsZFZhbFxuXHQgICAgfVxuXHQgICAgLy8gd2hlbiBwYXJlbnRWYWwgJiBjaGlsZFZhbCBhcmUgYm90aCBwcmVzZW50LFxuXHQgICAgLy8gd2UgbmVlZCB0byByZXR1cm4gYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlXG5cdCAgICAvLyBtZXJnZWQgcmVzdWx0IG9mIGJvdGggZnVuY3Rpb25zLi4uIG5vIG5lZWQgdG9cblx0ICAgIC8vIGNoZWNrIGlmIHBhcmVudFZhbCBpcyBhIGZ1bmN0aW9uIGhlcmUgYmVjYXVzZVxuXHQgICAgLy8gaXQgaGFzIHRvIGJlIGEgZnVuY3Rpb24gdG8gcGFzcyBwcmV2aW91cyBtZXJnZXMuXG5cdCAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VkRGF0YUZuICgpIHtcblx0ICAgICAgcmV0dXJuIG1lcmdlRGF0YShcblx0ICAgICAgICBjaGlsZFZhbC5jYWxsKHRoaXMpLFxuXHQgICAgICAgIHBhcmVudFZhbC5jYWxsKHRoaXMpXG5cdCAgICAgIClcblx0ICAgIH1cblx0ICB9IGVsc2UgaWYgKHBhcmVudFZhbCB8fCBjaGlsZFZhbCkge1xuXHQgICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlZEluc3RhbmNlRGF0YUZuICgpIHtcblx0ICAgICAgLy8gaW5zdGFuY2UgbWVyZ2Vcblx0ICAgICAgdmFyIGluc3RhbmNlRGF0YSA9IHR5cGVvZiBjaGlsZFZhbCA9PT0gJ2Z1bmN0aW9uJ1xuXHQgICAgICAgID8gY2hpbGRWYWwuY2FsbCh2bSlcblx0ICAgICAgICA6IGNoaWxkVmFsO1xuXHQgICAgICB2YXIgZGVmYXVsdERhdGEgPSB0eXBlb2YgcGFyZW50VmFsID09PSAnZnVuY3Rpb24nXG5cdCAgICAgICAgPyBwYXJlbnRWYWwuY2FsbCh2bSlcblx0ICAgICAgICA6IHVuZGVmaW5lZDtcblx0ICAgICAgaWYgKGluc3RhbmNlRGF0YSkge1xuXHQgICAgICAgIHJldHVybiBtZXJnZURhdGEoaW5zdGFuY2VEYXRhLCBkZWZhdWx0RGF0YSlcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICByZXR1cm4gZGVmYXVsdERhdGFcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH1cblx0fTtcblx0XG5cdC8qKlxuXHQgKiBIb29rcyBhbmQgcGFyYW0gYXR0cmlidXRlcyBhcmUgbWVyZ2VkIGFzIGFycmF5cy5cblx0ICovXG5cdGZ1bmN0aW9uIG1lcmdlSG9vayAoXG5cdCAgcGFyZW50VmFsLFxuXHQgIGNoaWxkVmFsXG5cdCkge1xuXHQgIHJldHVybiBjaGlsZFZhbFxuXHQgICAgPyBwYXJlbnRWYWxcblx0ICAgICAgPyBwYXJlbnRWYWwuY29uY2F0KGNoaWxkVmFsKVxuXHQgICAgICA6IEFycmF5LmlzQXJyYXkoY2hpbGRWYWwpXG5cdCAgICAgICAgPyBjaGlsZFZhbFxuXHQgICAgICAgIDogW2NoaWxkVmFsXVxuXHQgICAgOiBwYXJlbnRWYWxcblx0fVxuXHRcblx0Y29uZmlnLl9saWZlY3ljbGVIb29rcy5mb3JFYWNoKGZ1bmN0aW9uIChob29rKSB7XG5cdCAgc3RyYXRzW2hvb2tdID0gbWVyZ2VIb29rO1xuXHR9KTtcblx0XG5cdC8qKlxuXHQgKiBBc3NldHNcblx0ICpcblx0ICogV2hlbiBhIHZtIGlzIHByZXNlbnQgKGluc3RhbmNlIGNyZWF0aW9uKSwgd2UgbmVlZCB0byBkb1xuXHQgKiBhIHRocmVlLXdheSBtZXJnZSBiZXR3ZWVuIGNvbnN0cnVjdG9yIG9wdGlvbnMsIGluc3RhbmNlXG5cdCAqIG9wdGlvbnMgYW5kIHBhcmVudCBvcHRpb25zLlxuXHQgKi9cblx0ZnVuY3Rpb24gbWVyZ2VBc3NldHMgKHBhcmVudFZhbCwgY2hpbGRWYWwpIHtcblx0ICB2YXIgcmVzID0gT2JqZWN0LmNyZWF0ZShwYXJlbnRWYWwgfHwgbnVsbCk7XG5cdCAgcmV0dXJuIGNoaWxkVmFsXG5cdCAgICA/IGV4dGVuZChyZXMsIGNoaWxkVmFsKVxuXHQgICAgOiByZXNcblx0fVxuXHRcblx0Y29uZmlnLl9hc3NldFR5cGVzLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcblx0ICBzdHJhdHNbdHlwZSArICdzJ10gPSBtZXJnZUFzc2V0cztcblx0fSk7XG5cdFxuXHQvKipcblx0ICogV2F0Y2hlcnMuXG5cdCAqXG5cdCAqIFdhdGNoZXJzIGhhc2hlcyBzaG91bGQgbm90IG92ZXJ3cml0ZSBvbmVcblx0ICogYW5vdGhlciwgc28gd2UgbWVyZ2UgdGhlbSBhcyBhcnJheXMuXG5cdCAqL1xuXHRzdHJhdHMud2F0Y2ggPSBmdW5jdGlvbiAocGFyZW50VmFsLCBjaGlsZFZhbCkge1xuXHQgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuXHQgIGlmICghY2hpbGRWYWwpIHsgcmV0dXJuIHBhcmVudFZhbCB9XG5cdCAgaWYgKCFwYXJlbnRWYWwpIHsgcmV0dXJuIGNoaWxkVmFsIH1cblx0ICB2YXIgcmV0ID0ge307XG5cdCAgZXh0ZW5kKHJldCwgcGFyZW50VmFsKTtcblx0ICBmb3IgKHZhciBrZXkgaW4gY2hpbGRWYWwpIHtcblx0ICAgIHZhciBwYXJlbnQgPSByZXRba2V5XTtcblx0ICAgIHZhciBjaGlsZCA9IGNoaWxkVmFsW2tleV07XG5cdCAgICBpZiAocGFyZW50ICYmICFBcnJheS5pc0FycmF5KHBhcmVudCkpIHtcblx0ICAgICAgcGFyZW50ID0gW3BhcmVudF07XG5cdCAgICB9XG5cdCAgICByZXRba2V5XSA9IHBhcmVudFxuXHQgICAgICA/IHBhcmVudC5jb25jYXQoY2hpbGQpXG5cdCAgICAgIDogW2NoaWxkXTtcblx0ICB9XG5cdCAgcmV0dXJuIHJldFxuXHR9O1xuXHRcblx0LyoqXG5cdCAqIE90aGVyIG9iamVjdCBoYXNoZXMuXG5cdCAqL1xuXHRzdHJhdHMucHJvcHMgPVxuXHRzdHJhdHMubWV0aG9kcyA9XG5cdHN0cmF0cy5jb21wdXRlZCA9IGZ1bmN0aW9uIChwYXJlbnRWYWwsIGNoaWxkVmFsKSB7XG5cdCAgaWYgKCFjaGlsZFZhbCkgeyByZXR1cm4gcGFyZW50VmFsIH1cblx0ICBpZiAoIXBhcmVudFZhbCkgeyByZXR1cm4gY2hpbGRWYWwgfVxuXHQgIHZhciByZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXHQgIGV4dGVuZChyZXQsIHBhcmVudFZhbCk7XG5cdCAgZXh0ZW5kKHJldCwgY2hpbGRWYWwpO1xuXHQgIHJldHVybiByZXRcblx0fTtcblx0XG5cdC8qKlxuXHQgKiBEZWZhdWx0IHN0cmF0ZWd5LlxuXHQgKi9cblx0dmFyIGRlZmF1bHRTdHJhdCA9IGZ1bmN0aW9uIChwYXJlbnRWYWwsIGNoaWxkVmFsKSB7XG5cdCAgcmV0dXJuIGNoaWxkVmFsID09PSB1bmRlZmluZWRcblx0ICAgID8gcGFyZW50VmFsXG5cdCAgICA6IGNoaWxkVmFsXG5cdH07XG5cdFxuXHQvKipcblx0ICogVmFsaWRhdGUgY29tcG9uZW50IG5hbWVzXG5cdCAqL1xuXHRmdW5jdGlvbiBjaGVja0NvbXBvbmVudHMgKG9wdGlvbnMpIHtcblx0ICBmb3IgKHZhciBrZXkgaW4gb3B0aW9ucy5jb21wb25lbnRzKSB7XG5cdCAgICB2YXIgbG93ZXIgPSBrZXkudG9Mb3dlckNhc2UoKTtcblx0ICAgIGlmIChpc0J1aWx0SW5UYWcobG93ZXIpIHx8IGNvbmZpZy5pc1Jlc2VydmVkVGFnKGxvd2VyKSkge1xuXHQgICAgICB3YXJuKFxuXHQgICAgICAgICdEbyBub3QgdXNlIGJ1aWx0LWluIG9yIHJlc2VydmVkIEhUTUwgZWxlbWVudHMgYXMgY29tcG9uZW50ICcgK1xuXHQgICAgICAgICdpZDogJyArIGtleVxuXHQgICAgICApO1xuXHQgICAgfVxuXHQgIH1cblx0fVxuXHRcblx0LyoqXG5cdCAqIEVuc3VyZSBhbGwgcHJvcHMgb3B0aW9uIHN5bnRheCBhcmUgbm9ybWFsaXplZCBpbnRvIHRoZVxuXHQgKiBPYmplY3QtYmFzZWQgZm9ybWF0LlxuXHQgKi9cblx0ZnVuY3Rpb24gbm9ybWFsaXplUHJvcHMgKG9wdGlvbnMpIHtcblx0ICB2YXIgcHJvcHMgPSBvcHRpb25zLnByb3BzO1xuXHQgIGlmICghcHJvcHMpIHsgcmV0dXJuIH1cblx0ICB2YXIgcmVzID0ge307XG5cdCAgdmFyIGksIHZhbCwgbmFtZTtcblx0ICBpZiAoQXJyYXkuaXNBcnJheShwcm9wcykpIHtcblx0ICAgIGkgPSBwcm9wcy5sZW5ndGg7XG5cdCAgICB3aGlsZSAoaS0tKSB7XG5cdCAgICAgIHZhbCA9IHByb3BzW2ldO1xuXHQgICAgICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcblx0ICAgICAgICBuYW1lID0gY2FtZWxpemUodmFsKTtcblx0ICAgICAgICByZXNbbmFtZV0gPSB7IHR5cGU6IG51bGwgfTtcblx0ICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG5cdCAgICAgICAgd2FybigncHJvcHMgbXVzdCBiZSBzdHJpbmdzIHdoZW4gdXNpbmcgYXJyYXkgc3ludGF4LicpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHByb3BzKSkge1xuXHQgICAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG5cdCAgICAgIHZhbCA9IHByb3BzW2tleV07XG5cdCAgICAgIG5hbWUgPSBjYW1lbGl6ZShrZXkpO1xuXHQgICAgICByZXNbbmFtZV0gPSBpc1BsYWluT2JqZWN0KHZhbClcblx0ICAgICAgICA/IHZhbFxuXHQgICAgICAgIDogeyB0eXBlOiB2YWwgfTtcblx0ICAgIH1cblx0ICB9XG5cdCAgb3B0aW9ucy5wcm9wcyA9IHJlcztcblx0fVxuXHRcblx0LyoqXG5cdCAqIE5vcm1hbGl6ZSByYXcgZnVuY3Rpb24gZGlyZWN0aXZlcyBpbnRvIG9iamVjdCBmb3JtYXQuXG5cdCAqL1xuXHRmdW5jdGlvbiBub3JtYWxpemVEaXJlY3RpdmVzIChvcHRpb25zKSB7XG5cdCAgdmFyIGRpcnMgPSBvcHRpb25zLmRpcmVjdGl2ZXM7XG5cdCAgaWYgKGRpcnMpIHtcblx0ICAgIGZvciAodmFyIGtleSBpbiBkaXJzKSB7XG5cdCAgICAgIHZhciBkZWYgPSBkaXJzW2tleV07XG5cdCAgICAgIGlmICh0eXBlb2YgZGVmID09PSAnZnVuY3Rpb24nKSB7XG5cdCAgICAgICAgZGlyc1trZXldID0geyBiaW5kOiBkZWYsIHVwZGF0ZTogZGVmIH07XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBNZXJnZSB0d28gb3B0aW9uIG9iamVjdHMgaW50byBhIG5ldyBvbmUuXG5cdCAqIENvcmUgdXRpbGl0eSB1c2VkIGluIGJvdGggaW5zdGFudGlhdGlvbiBhbmQgaW5oZXJpdGFuY2UuXG5cdCAqL1xuXHRmdW5jdGlvbiBtZXJnZU9wdGlvbnMgKFxuXHQgIHBhcmVudCxcblx0ICBjaGlsZCxcblx0ICB2bVxuXHQpIHtcblx0ICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuXHQgICAgY2hlY2tDb21wb25lbnRzKGNoaWxkKTtcblx0ICB9XG5cdCAgbm9ybWFsaXplUHJvcHMoY2hpbGQpO1xuXHQgIG5vcm1hbGl6ZURpcmVjdGl2ZXMoY2hpbGQpO1xuXHQgIHZhciBleHRlbmRzRnJvbSA9IGNoaWxkLmV4dGVuZHM7XG5cdCAgaWYgKGV4dGVuZHNGcm9tKSB7XG5cdCAgICBwYXJlbnQgPSB0eXBlb2YgZXh0ZW5kc0Zyb20gPT09ICdmdW5jdGlvbidcblx0ICAgICAgPyBtZXJnZU9wdGlvbnMocGFyZW50LCBleHRlbmRzRnJvbS5vcHRpb25zLCB2bSlcblx0ICAgICAgOiBtZXJnZU9wdGlvbnMocGFyZW50LCBleHRlbmRzRnJvbSwgdm0pO1xuXHQgIH1cblx0ICBpZiAoY2hpbGQubWl4aW5zKSB7XG5cdCAgICBmb3IgKHZhciBpID0gMCwgbCA9IGNoaWxkLm1peGlucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0ICAgICAgdmFyIG1peGluID0gY2hpbGQubWl4aW5zW2ldO1xuXHQgICAgICBpZiAobWl4aW4ucHJvdG90eXBlIGluc3RhbmNlb2YgVnVlJDMpIHtcblx0ICAgICAgICBtaXhpbiA9IG1peGluLm9wdGlvbnM7XG5cdCAgICAgIH1cblx0ICAgICAgcGFyZW50ID0gbWVyZ2VPcHRpb25zKHBhcmVudCwgbWl4aW4sIHZtKTtcblx0ICAgIH1cblx0ICB9XG5cdCAgdmFyIG9wdGlvbnMgPSB7fTtcblx0ICB2YXIga2V5O1xuXHQgIGZvciAoa2V5IGluIHBhcmVudCkge1xuXHQgICAgbWVyZ2VGaWVsZChrZXkpO1xuXHQgIH1cblx0ICBmb3IgKGtleSBpbiBjaGlsZCkge1xuXHQgICAgaWYgKCFoYXNPd24ocGFyZW50LCBrZXkpKSB7XG5cdCAgICAgIG1lcmdlRmllbGQoa2V5KTtcblx0ICAgIH1cblx0ICB9XG5cdCAgZnVuY3Rpb24gbWVyZ2VGaWVsZCAoa2V5KSB7XG5cdCAgICB2YXIgc3RyYXQgPSBzdHJhdHNba2V5XSB8fCBkZWZhdWx0U3RyYXQ7XG5cdCAgICBvcHRpb25zW2tleV0gPSBzdHJhdChwYXJlbnRba2V5XSwgY2hpbGRba2V5XSwgdm0sIGtleSk7XG5cdCAgfVxuXHQgIHJldHVybiBvcHRpb25zXG5cdH1cblx0XG5cdC8qKlxuXHQgKiBSZXNvbHZlIGFuIGFzc2V0LlxuXHQgKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgYmVjYXVzZSBjaGlsZCBpbnN0YW5jZXMgbmVlZCBhY2Nlc3Ncblx0ICogdG8gYXNzZXRzIGRlZmluZWQgaW4gaXRzIGFuY2VzdG9yIGNoYWluLlxuXHQgKi9cblx0ZnVuY3Rpb24gcmVzb2x2ZUFzc2V0IChcblx0ICBvcHRpb25zLFxuXHQgIHR5cGUsXG5cdCAgaWQsXG5cdCAgd2Fybk1pc3Npbmdcblx0KSB7XG5cdCAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG5cdCAgaWYgKHR5cGVvZiBpZCAhPT0gJ3N0cmluZycpIHtcblx0ICAgIHJldHVyblxuXHQgIH1cblx0ICB2YXIgYXNzZXRzID0gb3B0aW9uc1t0eXBlXTtcblx0ICAvLyBjaGVjayBsb2NhbCByZWdpc3RyYXRpb24gdmFyaWF0aW9ucyBmaXJzdFxuXHQgIGlmIChoYXNPd24oYXNzZXRzLCBpZCkpIHsgcmV0dXJuIGFzc2V0c1tpZF0gfVxuXHQgIHZhciBjYW1lbGl6ZWRJZCA9IGNhbWVsaXplKGlkKTtcblx0ICBpZiAoaGFzT3duKGFzc2V0cywgY2FtZWxpemVkSWQpKSB7IHJldHVybiBhc3NldHNbY2FtZWxpemVkSWRdIH1cblx0ICB2YXIgUGFzY2FsQ2FzZUlkID0gY2FwaXRhbGl6ZShjYW1lbGl6ZWRJZCk7XG5cdCAgaWYgKGhhc093bihhc3NldHMsIFBhc2NhbENhc2VJZCkpIHsgcmV0dXJuIGFzc2V0c1tQYXNjYWxDYXNlSWRdIH1cblx0ICAvLyBmYWxsYmFjayB0byBwcm90b3R5cGUgY2hhaW5cblx0ICB2YXIgcmVzID0gYXNzZXRzW2lkXSB8fCBhc3NldHNbY2FtZWxpemVkSWRdIHx8IGFzc2V0c1tQYXNjYWxDYXNlSWRdO1xuXHQgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm5NaXNzaW5nICYmICFyZXMpIHtcblx0ICAgIHdhcm4oXG5cdCAgICAgICdGYWlsZWQgdG8gcmVzb2x2ZSAnICsgdHlwZS5zbGljZSgwLCAtMSkgKyAnOiAnICsgaWQsXG5cdCAgICAgIG9wdGlvbnNcblx0ICAgICk7XG5cdCAgfVxuXHQgIHJldHVybiByZXNcblx0fVxuXHRcblx0LyogICovXG5cdFxuXHRmdW5jdGlvbiB2YWxpZGF0ZVByb3AgKFxuXHQgIGtleSxcblx0ICBwcm9wT3B0aW9ucyxcblx0ICBwcm9wc0RhdGEsXG5cdCAgdm1cblx0KSB7XG5cdCAgdmFyIHByb3AgPSBwcm9wT3B0aW9uc1trZXldO1xuXHQgIHZhciBhYnNlbnQgPSAhaGFzT3duKHByb3BzRGF0YSwga2V5KTtcblx0ICB2YXIgdmFsdWUgPSBwcm9wc0RhdGFba2V5XTtcblx0ICAvLyBoYW5kbGUgYm9vbGVhbiBwcm9wc1xuXHQgIGlmIChpc1R5cGUoQm9vbGVhbiwgcHJvcC50eXBlKSkge1xuXHQgICAgaWYgKGFic2VudCAmJiAhaGFzT3duKHByb3AsICdkZWZhdWx0JykpIHtcblx0ICAgICAgdmFsdWUgPSBmYWxzZTtcblx0ICAgIH0gZWxzZSBpZiAoIWlzVHlwZShTdHJpbmcsIHByb3AudHlwZSkgJiYgKHZhbHVlID09PSAnJyB8fCB2YWx1ZSA9PT0gaHlwaGVuYXRlKGtleSkpKSB7XG5cdCAgICAgIHZhbHVlID0gdHJ1ZTtcblx0ICAgIH1cblx0ICB9XG5cdCAgLy8gY2hlY2sgZGVmYXVsdCB2YWx1ZVxuXHQgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG5cdCAgICB2YWx1ZSA9IGdldFByb3BEZWZhdWx0VmFsdWUodm0sIHByb3AsIGtleSk7XG5cdCAgICAvLyBzaW5jZSB0aGUgZGVmYXVsdCB2YWx1ZSBpcyBhIGZyZXNoIGNvcHksXG5cdCAgICAvLyBtYWtlIHN1cmUgdG8gb2JzZXJ2ZSBpdC5cblx0ICAgIHZhciBwcmV2U2hvdWxkQ29udmVydCA9IG9ic2VydmVyU3RhdGUuc2hvdWxkQ29udmVydDtcblx0ICAgIG9ic2VydmVyU3RhdGUuc2hvdWxkQ29udmVydCA9IHRydWU7XG5cdCAgICBvYnNlcnZlKHZhbHVlKTtcblx0ICAgIG9ic2VydmVyU3RhdGUuc2hvdWxkQ29udmVydCA9IHByZXZTaG91bGRDb252ZXJ0O1xuXHQgIH1cblx0ICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuXHQgICAgYXNzZXJ0UHJvcChwcm9wLCBrZXksIHZhbHVlLCB2bSwgYWJzZW50KTtcblx0ICB9XG5cdCAgcmV0dXJuIHZhbHVlXG5cdH1cblx0XG5cdC8qKlxuXHQgKiBHZXQgdGhlIGRlZmF1bHQgdmFsdWUgb2YgYSBwcm9wLlxuXHQgKi9cblx0ZnVuY3Rpb24gZ2V0UHJvcERlZmF1bHRWYWx1ZSAodm0sIHByb3AsIGtleSkge1xuXHQgIC8vIG5vIGRlZmF1bHQsIHJldHVybiB1bmRlZmluZWRcblx0ICBpZiAoIWhhc093bihwcm9wLCAnZGVmYXVsdCcpKSB7XG5cdCAgICByZXR1cm4gdW5kZWZpbmVkXG5cdCAgfVxuXHQgIHZhciBkZWYgPSBwcm9wLmRlZmF1bHQ7XG5cdCAgLy8gd2FybiBhZ2FpbnN0IG5vbi1mYWN0b3J5IGRlZmF1bHRzIGZvciBPYmplY3QgJiBBcnJheVxuXHQgIGlmIChpc09iamVjdChkZWYpKSB7XG5cdCAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG5cdCAgICAgICdJbnZhbGlkIGRlZmF1bHQgdmFsdWUgZm9yIHByb3AgXCInICsga2V5ICsgJ1wiOiAnICtcblx0ICAgICAgJ1Byb3BzIHdpdGggdHlwZSBPYmplY3QvQXJyYXkgbXVzdCB1c2UgYSBmYWN0b3J5IGZ1bmN0aW9uICcgK1xuXHQgICAgICAndG8gcmV0dXJuIHRoZSBkZWZhdWx0IHZhbHVlLicsXG5cdCAgICAgIHZtXG5cdCAgICApO1xuXHQgIH1cblx0ICAvLyB0aGUgcmF3IHByb3AgdmFsdWUgd2FzIGFsc28gdW5kZWZpbmVkIGZyb20gcHJldmlvdXMgcmVuZGVyLFxuXHQgIC8vIHJldHVybiBwcmV2aW91cyBkZWZhdWx0IHZhbHVlIHRvIGF2b2lkIHVubmVjZXNzYXJ5IHdhdGNoZXIgdHJpZ2dlclxuXHQgIGlmICh2bSAmJiB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgJiZcblx0ICAgIHZtLiRvcHRpb25zLnByb3BzRGF0YVtrZXldID09PSB1bmRlZmluZWQgJiZcblx0ICAgIHZtW2tleV0gIT09IHVuZGVmaW5lZCkge1xuXHQgICAgcmV0dXJuIHZtW2tleV1cblx0ICB9XG5cdCAgLy8gY2FsbCBmYWN0b3J5IGZ1bmN0aW9uIGZvciBub24tRnVuY3Rpb24gdHlwZXNcblx0ICByZXR1cm4gdHlwZW9mIGRlZiA9PT0gJ2Z1bmN0aW9uJyAmJiBwcm9wLnR5cGUgIT09IEZ1bmN0aW9uXG5cdCAgICA/IGRlZi5jYWxsKHZtKVxuXHQgICAgOiBkZWZcblx0fVxuXHRcblx0LyoqXG5cdCAqIEFzc2VydCB3aGV0aGVyIGEgcHJvcCBpcyB2YWxpZC5cblx0ICovXG5cdGZ1bmN0aW9uIGFzc2VydFByb3AgKFxuXHQgIHByb3AsXG5cdCAgbmFtZSxcblx0ICB2YWx1ZSxcblx0ICB2bSxcblx0ICBhYnNlbnRcblx0KSB7XG5cdCAgaWYgKHByb3AucmVxdWlyZWQgJiYgYWJzZW50KSB7XG5cdCAgICB3YXJuKFxuXHQgICAgICAnTWlzc2luZyByZXF1aXJlZCBwcm9wOiBcIicgKyBuYW1lICsgJ1wiJyxcblx0ICAgICAgdm1cblx0ICAgICk7XG5cdCAgICByZXR1cm5cblx0ICB9XG5cdCAgaWYgKHZhbHVlID09IG51bGwgJiYgIXByb3AucmVxdWlyZWQpIHtcblx0ICAgIHJldHVyblxuXHQgIH1cblx0ICB2YXIgdHlwZSA9IHByb3AudHlwZTtcblx0ICB2YXIgdmFsaWQgPSAhdHlwZSB8fCB0eXBlID09PSB0cnVlO1xuXHQgIHZhciBleHBlY3RlZFR5cGVzID0gW107XG5cdCAgaWYgKHR5cGUpIHtcblx0ICAgIGlmICghQXJyYXkuaXNBcnJheSh0eXBlKSkge1xuXHQgICAgICB0eXBlID0gW3R5cGVdO1xuXHQgICAgfVxuXHQgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlLmxlbmd0aCAmJiAhdmFsaWQ7IGkrKykge1xuXHQgICAgICB2YXIgYXNzZXJ0ZWRUeXBlID0gYXNzZXJ0VHlwZSh2YWx1ZSwgdHlwZVtpXSk7XG5cdCAgICAgIGV4cGVjdGVkVHlwZXMucHVzaChhc3NlcnRlZFR5cGUuZXhwZWN0ZWRUeXBlIHx8ICcnKTtcblx0ICAgICAgdmFsaWQgPSBhc3NlcnRlZFR5cGUudmFsaWQ7XG5cdCAgICB9XG5cdCAgfVxuXHQgIGlmICghdmFsaWQpIHtcblx0ICAgIHdhcm4oXG5cdCAgICAgICdJbnZhbGlkIHByb3A6IHR5cGUgY2hlY2sgZmFpbGVkIGZvciBwcm9wIFwiJyArIG5hbWUgKyAnXCIuJyArXG5cdCAgICAgICcgRXhwZWN0ZWQgJyArIGV4cGVjdGVkVHlwZXMubWFwKGNhcGl0YWxpemUpLmpvaW4oJywgJykgK1xuXHQgICAgICAnLCBnb3QgJyArIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkuc2xpY2UoOCwgLTEpICsgJy4nLFxuXHQgICAgICB2bVxuXHQgICAgKTtcblx0ICAgIHJldHVyblxuXHQgIH1cblx0ICB2YXIgdmFsaWRhdG9yID0gcHJvcC52YWxpZGF0b3I7XG5cdCAgaWYgKHZhbGlkYXRvcikge1xuXHQgICAgaWYgKCF2YWxpZGF0b3IodmFsdWUpKSB7XG5cdCAgICAgIHdhcm4oXG5cdCAgICAgICAgJ0ludmFsaWQgcHJvcDogY3VzdG9tIHZhbGlkYXRvciBjaGVjayBmYWlsZWQgZm9yIHByb3AgXCInICsgbmFtZSArICdcIi4nLFxuXHQgICAgICAgIHZtXG5cdCAgICAgICk7XG5cdCAgICB9XG5cdCAgfVxuXHR9XG5cdFxuXHQvKipcblx0ICogQXNzZXJ0IHRoZSB0eXBlIG9mIGEgdmFsdWVcblx0ICovXG5cdGZ1bmN0aW9uIGFzc2VydFR5cGUgKHZhbHVlLCB0eXBlKSB7XG5cdCAgdmFyIHZhbGlkO1xuXHQgIHZhciBleHBlY3RlZFR5cGUgPSBnZXRUeXBlKHR5cGUpO1xuXHQgIGlmIChleHBlY3RlZFR5cGUgPT09ICdTdHJpbmcnKSB7XG5cdCAgICB2YWxpZCA9IHR5cGVvZiB2YWx1ZSA9PT0gKGV4cGVjdGVkVHlwZSA9ICdzdHJpbmcnKTtcblx0ICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ051bWJlcicpIHtcblx0ICAgIHZhbGlkID0gdHlwZW9mIHZhbHVlID09PSAoZXhwZWN0ZWRUeXBlID0gJ251bWJlcicpO1xuXHQgIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSAnQm9vbGVhbicpIHtcblx0ICAgIHZhbGlkID0gdHlwZW9mIHZhbHVlID09PSAoZXhwZWN0ZWRUeXBlID0gJ2Jvb2xlYW4nKTtcblx0ICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ0Z1bmN0aW9uJykge1xuXHQgICAgdmFsaWQgPSB0eXBlb2YgdmFsdWUgPT09IChleHBlY3RlZFR5cGUgPSAnZnVuY3Rpb24nKTtcblx0ICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ09iamVjdCcpIHtcblx0ICAgIHZhbGlkID0gaXNQbGFpbk9iamVjdCh2YWx1ZSk7XG5cdCAgfSBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09ICdBcnJheScpIHtcblx0ICAgIHZhbGlkID0gQXJyYXkuaXNBcnJheSh2YWx1ZSk7XG5cdCAgfSBlbHNlIHtcblx0ICAgIHZhbGlkID0gdmFsdWUgaW5zdGFuY2VvZiB0eXBlO1xuXHQgIH1cblx0ICByZXR1cm4ge1xuXHQgICAgdmFsaWQ6IHZhbGlkLFxuXHQgICAgZXhwZWN0ZWRUeXBlOiBleHBlY3RlZFR5cGVcblx0ICB9XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBVc2UgZnVuY3Rpb24gc3RyaW5nIG5hbWUgdG8gY2hlY2sgYnVpbHQtaW4gdHlwZXMsXG5cdCAqIGJlY2F1c2UgYSBzaW1wbGUgZXF1YWxpdHkgY2hlY2sgd2lsbCBmYWlsIHdoZW4gcnVubmluZ1xuXHQgKiBhY3Jvc3MgZGlmZmVyZW50IHZtcyAvIGlmcmFtZXMuXG5cdCAqL1xuXHRmdW5jdGlvbiBnZXRUeXBlIChmbikge1xuXHQgIHZhciBtYXRjaCA9IGZuICYmIGZuLnRvU3RyaW5nKCkubWF0Y2goL15cXHMqZnVuY3Rpb24gKFxcdyspLyk7XG5cdCAgcmV0dXJuIG1hdGNoICYmIG1hdGNoWzFdXG5cdH1cblx0XG5cdGZ1bmN0aW9uIGlzVHlwZSAodHlwZSwgZm4pIHtcblx0ICBpZiAoIUFycmF5LmlzQXJyYXkoZm4pKSB7XG5cdCAgICByZXR1cm4gZ2V0VHlwZShmbikgPT09IGdldFR5cGUodHlwZSlcblx0ICB9XG5cdCAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGZuLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG5cdCAgICBpZiAoZ2V0VHlwZShmbltpXSkgPT09IGdldFR5cGUodHlwZSkpIHtcblx0ICAgICAgcmV0dXJuIHRydWVcblx0ICAgIH1cblx0ICB9XG5cdCAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cblx0ICByZXR1cm4gZmFsc2Vcblx0fVxuXHRcblx0XG5cdFxuXHR2YXIgdXRpbCA9IE9iamVjdC5mcmVlemUoe1xuXHRcdGRlZmluZVJlYWN0aXZlOiBkZWZpbmVSZWFjdGl2ZSQkMSxcblx0XHRfdG9TdHJpbmc6IF90b1N0cmluZyxcblx0XHR0b051bWJlcjogdG9OdW1iZXIsXG5cdFx0bWFrZU1hcDogbWFrZU1hcCxcblx0XHRpc0J1aWx0SW5UYWc6IGlzQnVpbHRJblRhZyxcblx0XHRyZW1vdmU6IHJlbW92ZSQxLFxuXHRcdGhhc093bjogaGFzT3duLFxuXHRcdGlzUHJpbWl0aXZlOiBpc1ByaW1pdGl2ZSxcblx0XHRjYWNoZWQ6IGNhY2hlZCxcblx0XHRjYW1lbGl6ZTogY2FtZWxpemUsXG5cdFx0Y2FwaXRhbGl6ZTogY2FwaXRhbGl6ZSxcblx0XHRoeXBoZW5hdGU6IGh5cGhlbmF0ZSxcblx0XHRiaW5kOiBiaW5kJDEsXG5cdFx0dG9BcnJheTogdG9BcnJheSxcblx0XHRleHRlbmQ6IGV4dGVuZCxcblx0XHRpc09iamVjdDogaXNPYmplY3QsXG5cdFx0aXNQbGFpbk9iamVjdDogaXNQbGFpbk9iamVjdCxcblx0XHR0b09iamVjdDogdG9PYmplY3QsXG5cdFx0bm9vcDogbm9vcCxcblx0XHRubzogbm8sXG5cdFx0aWRlbnRpdHk6IGlkZW50aXR5LFxuXHRcdGdlblN0YXRpY0tleXM6IGdlblN0YXRpY0tleXMsXG5cdFx0bG9vc2VFcXVhbDogbG9vc2VFcXVhbCxcblx0XHRsb29zZUluZGV4T2Y6IGxvb3NlSW5kZXhPZixcblx0XHRpc1Jlc2VydmVkOiBpc1Jlc2VydmVkLFxuXHRcdGRlZjogZGVmLFxuXHRcdHBhcnNlUGF0aDogcGFyc2VQYXRoLFxuXHRcdGhhc1Byb3RvOiBoYXNQcm90byxcblx0XHRpbkJyb3dzZXI6IGluQnJvd3Nlcixcblx0XHRVQTogVUEsXG5cdFx0aXNJRTogaXNJRSxcblx0XHRpc0lFOTogaXNJRTksXG5cdFx0aXNFZGdlOiBpc0VkZ2UsXG5cdFx0aXNBbmRyb2lkOiBpc0FuZHJvaWQsXG5cdFx0aXNJT1M6IGlzSU9TLFxuXHRcdGlzU2VydmVyUmVuZGVyaW5nOiBpc1NlcnZlclJlbmRlcmluZyxcblx0XHRkZXZ0b29sczogZGV2dG9vbHMsXG5cdFx0bmV4dFRpY2s6IG5leHRUaWNrLFxuXHRcdGdldCBfU2V0ICgpIHsgcmV0dXJuIF9TZXQ7IH0sXG5cdFx0bWVyZ2VPcHRpb25zOiBtZXJnZU9wdGlvbnMsXG5cdFx0cmVzb2x2ZUFzc2V0OiByZXNvbHZlQXNzZXQsXG5cdFx0Z2V0IHdhcm4gKCkgeyByZXR1cm4gd2FybjsgfSxcblx0XHRnZXQgZm9ybWF0Q29tcG9uZW50TmFtZSAoKSB7IHJldHVybiBmb3JtYXRDb21wb25lbnROYW1lOyB9LFxuXHRcdHZhbGlkYXRlUHJvcDogdmFsaWRhdGVQcm9wXG5cdH0pO1xuXHRcblx0Lyogbm90IHR5cGUgY2hlY2tpbmcgdGhpcyBmaWxlIGJlY2F1c2UgZmxvdyBkb2Vzbid0IHBsYXkgd2VsbCB3aXRoIFByb3h5ICovXG5cdFxuXHR2YXIgaW5pdFByb3h5O1xuXHRcblx0aWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcblx0ICB2YXIgYWxsb3dlZEdsb2JhbHMgPSBtYWtlTWFwKFxuXHQgICAgJ0luZmluaXR5LHVuZGVmaW5lZCxOYU4saXNGaW5pdGUsaXNOYU4sJyArXG5cdCAgICAncGFyc2VGbG9hdCxwYXJzZUludCxkZWNvZGVVUkksZGVjb2RlVVJJQ29tcG9uZW50LGVuY29kZVVSSSxlbmNvZGVVUklDb21wb25lbnQsJyArXG5cdCAgICAnTWF0aCxOdW1iZXIsRGF0ZSxBcnJheSxPYmplY3QsQm9vbGVhbixTdHJpbmcsUmVnRXhwLE1hcCxTZXQsSlNPTixJbnRsLCcgK1xuXHQgICAgJ3JlcXVpcmUnIC8vIGZvciBXZWJwYWNrL0Jyb3dzZXJpZnlcblx0ICApO1xuXHRcblx0ICB2YXIgd2Fybk5vblByZXNlbnQgPSBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHtcblx0ICAgIHdhcm4oXG5cdCAgICAgIFwiUHJvcGVydHkgb3IgbWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBpcyBub3QgZGVmaW5lZCBvbiB0aGUgaW5zdGFuY2UgYnV0IFwiICtcblx0ICAgICAgXCJyZWZlcmVuY2VkIGR1cmluZyByZW5kZXIuIE1ha2Ugc3VyZSB0byBkZWNsYXJlIHJlYWN0aXZlIGRhdGEgXCIgK1xuXHQgICAgICBcInByb3BlcnRpZXMgaW4gdGhlIGRhdGEgb3B0aW9uLlwiLFxuXHQgICAgICB0YXJnZXRcblx0ICAgICk7XG5cdCAgfTtcblx0XG5cdCAgdmFyIGhhc1Byb3h5ID1cblx0ICAgIHR5cGVvZiBQcm94eSAhPT0gJ3VuZGVmaW5lZCcgJiZcblx0ICAgIFByb3h5LnRvU3RyaW5nKCkubWF0Y2goL25hdGl2ZSBjb2RlLyk7XG5cdFxuXHQgIGlmIChoYXNQcm94eSkge1xuXHQgICAgdmFyIGlzQnVpbHRJbk1vZGlmaWVyID0gbWFrZU1hcCgnc3RvcCxwcmV2ZW50LHNlbGYsY3RybCxzaGlmdCxhbHQsbWV0YScpO1xuXHQgICAgY29uZmlnLmtleUNvZGVzID0gbmV3IFByb3h5KGNvbmZpZy5rZXlDb2Rlcywge1xuXHQgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCAodGFyZ2V0LCBrZXksIHZhbHVlKSB7XG5cdCAgICAgICAgaWYgKGlzQnVpbHRJbk1vZGlmaWVyKGtleSkpIHtcblx0ICAgICAgICAgIHdhcm4oKFwiQXZvaWQgb3ZlcndyaXRpbmcgYnVpbHQtaW4gbW9kaWZpZXIgaW4gY29uZmlnLmtleUNvZGVzOiAuXCIgKyBrZXkpKTtcblx0ICAgICAgICAgIHJldHVybiBmYWxzZVxuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICB0YXJnZXRba2V5XSA9IHZhbHVlO1xuXHQgICAgICAgICAgcmV0dXJuIHRydWVcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH0pO1xuXHQgIH1cblx0XG5cdCAgdmFyIGhhc0hhbmRsZXIgPSB7XG5cdCAgICBoYXM6IGZ1bmN0aW9uIGhhcyAodGFyZ2V0LCBrZXkpIHtcblx0ICAgICAgdmFyIGhhcyA9IGtleSBpbiB0YXJnZXQ7XG5cdCAgICAgIHZhciBpc0FsbG93ZWQgPSBhbGxvd2VkR2xvYmFscyhrZXkpIHx8IGtleS5jaGFyQXQoMCkgPT09ICdfJztcblx0ICAgICAgaWYgKCFoYXMgJiYgIWlzQWxsb3dlZCkge1xuXHQgICAgICAgIHdhcm5Ob25QcmVzZW50KHRhcmdldCwga2V5KTtcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gaGFzIHx8ICFpc0FsbG93ZWRcblx0ICAgIH1cblx0ICB9O1xuXHRcblx0ICB2YXIgZ2V0SGFuZGxlciA9IHtcblx0ICAgIGdldDogZnVuY3Rpb24gZ2V0ICh0YXJnZXQsIGtleSkge1xuXHQgICAgICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycgJiYgIShrZXkgaW4gdGFyZ2V0KSkge1xuXHQgICAgICAgIHdhcm5Ob25QcmVzZW50KHRhcmdldCwga2V5KTtcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gdGFyZ2V0W2tleV1cblx0ICAgIH1cblx0ICB9O1xuXHRcblx0ICBpbml0UHJveHkgPSBmdW5jdGlvbiBpbml0UHJveHkgKHZtKSB7XG5cdCAgICBpZiAoaGFzUHJveHkpIHtcblx0ICAgICAgLy8gZGV0ZXJtaW5lIHdoaWNoIHByb3h5IGhhbmRsZXIgdG8gdXNlXG5cdCAgICAgIHZhciBvcHRpb25zID0gdm0uJG9wdGlvbnM7XG5cdCAgICAgIHZhciBoYW5kbGVycyA9IG9wdGlvbnMucmVuZGVyICYmIG9wdGlvbnMucmVuZGVyLl93aXRoU3RyaXBwZWRcblx0ICAgICAgICA/IGdldEhhbmRsZXJcblx0ICAgICAgICA6IGhhc0hhbmRsZXI7XG5cdCAgICAgIHZtLl9yZW5kZXJQcm94eSA9IG5ldyBQcm94eSh2bSwgaGFuZGxlcnMpO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgdm0uX3JlbmRlclByb3h5ID0gdm07XG5cdCAgICB9XG5cdCAgfTtcblx0fVxuXHRcblx0LyogICovXG5cdFxuXHR2YXIgVk5vZGUgPSBmdW5jdGlvbiBWTm9kZSAoXG5cdCAgdGFnLFxuXHQgIGRhdGEsXG5cdCAgY2hpbGRyZW4sXG5cdCAgdGV4dCxcblx0ICBlbG0sXG5cdCAgY29udGV4dCxcblx0ICBjb21wb25lbnRPcHRpb25zXG5cdCkge1xuXHQgIHRoaXMudGFnID0gdGFnO1xuXHQgIHRoaXMuZGF0YSA9IGRhdGE7XG5cdCAgdGhpcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuXHQgIHRoaXMudGV4dCA9IHRleHQ7XG5cdCAgdGhpcy5lbG0gPSBlbG07XG5cdCAgdGhpcy5ucyA9IHVuZGVmaW5lZDtcblx0ICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuXHQgIHRoaXMuZnVuY3Rpb25hbENvbnRleHQgPSB1bmRlZmluZWQ7XG5cdCAgdGhpcy5rZXkgPSBkYXRhICYmIGRhdGEua2V5O1xuXHQgIHRoaXMuY29tcG9uZW50T3B0aW9ucyA9IGNvbXBvbmVudE9wdGlvbnM7XG5cdCAgdGhpcy5jb21wb25lbnRJbnN0YW5jZSA9IHVuZGVmaW5lZDtcblx0ICB0aGlzLnBhcmVudCA9IHVuZGVmaW5lZDtcblx0ICB0aGlzLnJhdyA9IGZhbHNlO1xuXHQgIHRoaXMuaXNTdGF0aWMgPSBmYWxzZTtcblx0ICB0aGlzLmlzUm9vdEluc2VydCA9IHRydWU7XG5cdCAgdGhpcy5pc0NvbW1lbnQgPSBmYWxzZTtcblx0ICB0aGlzLmlzQ2xvbmVkID0gZmFsc2U7XG5cdCAgdGhpcy5pc09uY2UgPSBmYWxzZTtcblx0fTtcblx0XG5cdHZhciBwcm90b3R5cGVBY2Nlc3NvcnMgPSB7IGNoaWxkOiB7fSB9O1xuXHRcblx0Ly8gREVQUkVDQVRFRDogYWxpYXMgZm9yIGNvbXBvbmVudEluc3RhbmNlIGZvciBiYWNrd2FyZHMgY29tcGF0LlxuXHQvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuXHRwcm90b3R5cGVBY2Nlc3NvcnMuY2hpbGQuZ2V0ID0gZnVuY3Rpb24gKCkge1xuXHQgIHJldHVybiB0aGlzLmNvbXBvbmVudEluc3RhbmNlXG5cdH07XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydGllcyggVk5vZGUucHJvdG90eXBlLCBwcm90b3R5cGVBY2Nlc3NvcnMgKTtcblx0XG5cdHZhciBjcmVhdGVFbXB0eVZOb2RlID0gZnVuY3Rpb24gKCkge1xuXHQgIHZhciBub2RlID0gbmV3IFZOb2RlKCk7XG5cdCAgbm9kZS50ZXh0ID0gJyc7XG5cdCAgbm9kZS5pc0NvbW1lbnQgPSB0cnVlO1xuXHQgIHJldHVybiBub2RlXG5cdH07XG5cdFxuXHRmdW5jdGlvbiBjcmVhdGVUZXh0Vk5vZGUgKHZhbCkge1xuXHQgIHJldHVybiBuZXcgVk5vZGUodW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgU3RyaW5nKHZhbCkpXG5cdH1cblx0XG5cdC8vIG9wdGltaXplZCBzaGFsbG93IGNsb25lXG5cdC8vIHVzZWQgZm9yIHN0YXRpYyBub2RlcyBhbmQgc2xvdCBub2RlcyBiZWNhdXNlIHRoZXkgbWF5IGJlIHJldXNlZCBhY3Jvc3Ncblx0Ly8gbXVsdGlwbGUgcmVuZGVycywgY2xvbmluZyB0aGVtIGF2b2lkcyBlcnJvcnMgd2hlbiBET00gbWFuaXB1bGF0aW9ucyByZWx5XG5cdC8vIG9uIHRoZWlyIGVsbSByZWZlcmVuY2UuXG5cdGZ1bmN0aW9uIGNsb25lVk5vZGUgKHZub2RlKSB7XG5cdCAgdmFyIGNsb25lZCA9IG5ldyBWTm9kZShcblx0ICAgIHZub2RlLnRhZyxcblx0ICAgIHZub2RlLmRhdGEsXG5cdCAgICB2bm9kZS5jaGlsZHJlbixcblx0ICAgIHZub2RlLnRleHQsXG5cdCAgICB2bm9kZS5lbG0sXG5cdCAgICB2bm9kZS5jb250ZXh0LFxuXHQgICAgdm5vZGUuY29tcG9uZW50T3B0aW9uc1xuXHQgICk7XG5cdCAgY2xvbmVkLm5zID0gdm5vZGUubnM7XG5cdCAgY2xvbmVkLmlzU3RhdGljID0gdm5vZGUuaXNTdGF0aWM7XG5cdCAgY2xvbmVkLmtleSA9IHZub2RlLmtleTtcblx0ICBjbG9uZWQuaXNDbG9uZWQgPSB0cnVlO1xuXHQgIHJldHVybiBjbG9uZWRcblx0fVxuXHRcblx0ZnVuY3Rpb24gY2xvbmVWTm9kZXMgKHZub2Rlcykge1xuXHQgIHZhciByZXMgPSBuZXcgQXJyYXkodm5vZGVzLmxlbmd0aCk7XG5cdCAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bm9kZXMubGVuZ3RoOyBpKyspIHtcblx0ICAgIHJlc1tpXSA9IGNsb25lVk5vZGUodm5vZGVzW2ldKTtcblx0ICB9XG5cdCAgcmV0dXJuIHJlc1xuXHR9XG5cdFxuXHQvKiAgKi9cblx0XG5cdHZhciBob29rcyA9IHsgaW5pdDogaW5pdCwgcHJlcGF0Y2g6IHByZXBhdGNoLCBpbnNlcnQ6IGluc2VydCwgZGVzdHJveTogZGVzdHJveSQxIH07XG5cdHZhciBob29rc1RvTWVyZ2UgPSBPYmplY3Qua2V5cyhob29rcyk7XG5cdFxuXHRmdW5jdGlvbiBjcmVhdGVDb21wb25lbnQgKFxuXHQgIEN0b3IsXG5cdCAgZGF0YSxcblx0ICBjb250ZXh0LFxuXHQgIGNoaWxkcmVuLFxuXHQgIHRhZ1xuXHQpIHtcblx0ICBpZiAoIUN0b3IpIHtcblx0ICAgIHJldHVyblxuXHQgIH1cblx0XG5cdCAgdmFyIGJhc2VDdG9yID0gY29udGV4dC4kb3B0aW9ucy5fYmFzZTtcblx0ICBpZiAoaXNPYmplY3QoQ3RvcikpIHtcblx0ICAgIEN0b3IgPSBiYXNlQ3Rvci5leHRlbmQoQ3Rvcik7XG5cdCAgfVxuXHRcblx0ICBpZiAodHlwZW9mIEN0b3IgIT09ICdmdW5jdGlvbicpIHtcblx0ICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG5cdCAgICAgIHdhcm4oKFwiSW52YWxpZCBDb21wb25lbnQgZGVmaW5pdGlvbjogXCIgKyAoU3RyaW5nKEN0b3IpKSksIGNvbnRleHQpO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuXG5cdCAgfVxuXHRcblx0ICAvLyBhc3luYyBjb21wb25lbnRcblx0ICBpZiAoIUN0b3IuY2lkKSB7XG5cdCAgICBpZiAoQ3Rvci5yZXNvbHZlZCkge1xuXHQgICAgICBDdG9yID0gQ3Rvci5yZXNvbHZlZDtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIEN0b3IgPSByZXNvbHZlQXN5bmNDb21wb25lbnQoQ3RvciwgYmFzZUN0b3IsIGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAvLyBpdCdzIG9rIHRvIHF1ZXVlIHRoaXMgb24gZXZlcnkgcmVuZGVyIGJlY2F1c2Vcblx0ICAgICAgICAvLyAkZm9yY2VVcGRhdGUgaXMgYnVmZmVyZWQgYnkgdGhlIHNjaGVkdWxlci5cblx0ICAgICAgICBjb250ZXh0LiRmb3JjZVVwZGF0ZSgpO1xuXHQgICAgICB9KTtcblx0ICAgICAgaWYgKCFDdG9yKSB7XG5cdCAgICAgICAgLy8gcmV0dXJuIG5vdGhpbmcgaWYgdGhpcyBpcyBpbmRlZWQgYW4gYXN5bmMgY29tcG9uZW50XG5cdCAgICAgICAgLy8gd2FpdCBmb3IgdGhlIGNhbGxiYWNrIHRvIHRyaWdnZXIgcGFyZW50IHVwZGF0ZS5cblx0ICAgICAgICByZXR1cm5cblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH1cblx0XG5cdCAgLy8gcmVzb2x2ZSBjb25zdHJ1Y3RvciBvcHRpb25zIGluIGNhc2UgZ2xvYmFsIG1peGlucyBhcmUgYXBwbGllZCBhZnRlclxuXHQgIC8vIGNvbXBvbmVudCBjb25zdHJ1Y3RvciBjcmVhdGlvblxuXHQgIHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMoQ3Rvcik7XG5cdFxuXHQgIGRhdGEgPSBkYXRhIHx8IHt9O1xuXHRcblx0ICAvLyBleHRyYWN0IHByb3BzXG5cdCAgdmFyIHByb3BzRGF0YSA9IGV4dHJhY3RQcm9wcyhkYXRhLCBDdG9yKTtcblx0XG5cdCAgLy8gZnVuY3Rpb25hbCBjb21wb25lbnRcblx0ICBpZiAoQ3Rvci5vcHRpb25zLmZ1bmN0aW9uYWwpIHtcblx0ICAgIHJldHVybiBjcmVhdGVGdW5jdGlvbmFsQ29tcG9uZW50KEN0b3IsIHByb3BzRGF0YSwgZGF0YSwgY29udGV4dCwgY2hpbGRyZW4pXG5cdCAgfVxuXHRcblx0ICAvLyBleHRyYWN0IGxpc3RlbmVycywgc2luY2UgdGhlc2UgbmVlZHMgdG8gYmUgdHJlYXRlZCBhc1xuXHQgIC8vIGNoaWxkIGNvbXBvbmVudCBsaXN0ZW5lcnMgaW5zdGVhZCBvZiBET00gbGlzdGVuZXJzXG5cdCAgdmFyIGxpc3RlbmVycyA9IGRhdGEub247XG5cdCAgLy8gcmVwbGFjZSB3aXRoIGxpc3RlbmVycyB3aXRoIC5uYXRpdmUgbW9kaWZpZXJcblx0ICBkYXRhLm9uID0gZGF0YS5uYXRpdmVPbjtcblx0XG5cdCAgaWYgKEN0b3Iub3B0aW9ucy5hYnN0cmFjdCkge1xuXHQgICAgLy8gYWJzdHJhY3QgY29tcG9uZW50cyBkbyBub3Qga2VlcCBhbnl0aGluZ1xuXHQgICAgLy8gb3RoZXIgdGhhbiBwcm9wcyAmIGxpc3RlbmVyc1xuXHQgICAgZGF0YSA9IHt9O1xuXHQgIH1cblx0XG5cdCAgLy8gbWVyZ2UgY29tcG9uZW50IG1hbmFnZW1lbnQgaG9va3Mgb250byB0aGUgcGxhY2Vob2xkZXIgbm9kZVxuXHQgIG1lcmdlSG9va3MoZGF0YSk7XG5cdFxuXHQgIC8vIHJldHVybiBhIHBsYWNlaG9sZGVyIHZub2RlXG5cdCAgdmFyIG5hbWUgPSBDdG9yLm9wdGlvbnMubmFtZSB8fCB0YWc7XG5cdCAgdmFyIHZub2RlID0gbmV3IFZOb2RlKFxuXHQgICAgKFwidnVlLWNvbXBvbmVudC1cIiArIChDdG9yLmNpZCkgKyAobmFtZSA/IChcIi1cIiArIG5hbWUpIDogJycpKSxcblx0ICAgIGRhdGEsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbnRleHQsXG5cdCAgICB7IEN0b3I6IEN0b3IsIHByb3BzRGF0YTogcHJvcHNEYXRhLCBsaXN0ZW5lcnM6IGxpc3RlbmVycywgdGFnOiB0YWcsIGNoaWxkcmVuOiBjaGlsZHJlbiB9XG5cdCAgKTtcblx0ICByZXR1cm4gdm5vZGVcblx0fVxuXHRcblx0ZnVuY3Rpb24gY3JlYXRlRnVuY3Rpb25hbENvbXBvbmVudCAoXG5cdCAgQ3Rvcixcblx0ICBwcm9wc0RhdGEsXG5cdCAgZGF0YSxcblx0ICBjb250ZXh0LFxuXHQgIGNoaWxkcmVuXG5cdCkge1xuXHQgIHZhciBwcm9wcyA9IHt9O1xuXHQgIHZhciBwcm9wT3B0aW9ucyA9IEN0b3Iub3B0aW9ucy5wcm9wcztcblx0ICBpZiAocHJvcE9wdGlvbnMpIHtcblx0ICAgIGZvciAodmFyIGtleSBpbiBwcm9wT3B0aW9ucykge1xuXHQgICAgICBwcm9wc1trZXldID0gdmFsaWRhdGVQcm9wKGtleSwgcHJvcE9wdGlvbnMsIHByb3BzRGF0YSk7XG5cdCAgICB9XG5cdCAgfVxuXHQgIC8vIGVuc3VyZSB0aGUgY3JlYXRlRWxlbWVudCBmdW5jdGlvbiBpbiBmdW5jdGlvbmFsIGNvbXBvbmVudHNcblx0ICAvLyBnZXRzIGEgdW5pcXVlIGNvbnRleHQgLSB0aGlzIGlzIG5lY2Vzc2FyeSBmb3IgY29ycmVjdCBuYW1lZCBzbG90IGNoZWNrXG5cdCAgdmFyIF9jb250ZXh0ID0gT2JqZWN0LmNyZWF0ZShjb250ZXh0KTtcblx0ICB2YXIgaCA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7IHJldHVybiBjcmVhdGVFbGVtZW50KF9jb250ZXh0LCBhLCBiLCBjLCBkLCB0cnVlKTsgfTtcblx0ICB2YXIgdm5vZGUgPSBDdG9yLm9wdGlvbnMucmVuZGVyLmNhbGwobnVsbCwgaCwge1xuXHQgICAgcHJvcHM6IHByb3BzLFxuXHQgICAgZGF0YTogZGF0YSxcblx0ICAgIHBhcmVudDogY29udGV4dCxcblx0ICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcblx0ICAgIHNsb3RzOiBmdW5jdGlvbiAoKSB7IHJldHVybiByZXNvbHZlU2xvdHMoY2hpbGRyZW4sIGNvbnRleHQpOyB9XG5cdCAgfSk7XG5cdCAgaWYgKHZub2RlIGluc3RhbmNlb2YgVk5vZGUpIHtcblx0ICAgIHZub2RlLmZ1bmN0aW9uYWxDb250ZXh0ID0gY29udGV4dDtcblx0ICAgIGlmIChkYXRhLnNsb3QpIHtcblx0ICAgICAgKHZub2RlLmRhdGEgfHwgKHZub2RlLmRhdGEgPSB7fSkpLnNsb3QgPSBkYXRhLnNsb3Q7XG5cdCAgICB9XG5cdCAgfVxuXHQgIHJldHVybiB2bm9kZVxuXHR9XG5cdFxuXHRmdW5jdGlvbiBjcmVhdGVDb21wb25lbnRJbnN0YW5jZUZvclZub2RlIChcblx0ICB2bm9kZSwgLy8gd2Uga25vdyBpdCdzIE1vdW50ZWRDb21wb25lbnRWTm9kZSBidXQgZmxvdyBkb2Vzbid0XG5cdCAgcGFyZW50LCAvLyBhY3RpdmVJbnN0YW5jZSBpbiBsaWZlY3ljbGUgc3RhdGVcblx0ICBwYXJlbnRFbG0sXG5cdCAgcmVmRWxtXG5cdCkge1xuXHQgIHZhciB2bm9kZUNvbXBvbmVudE9wdGlvbnMgPSB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuXHQgIHZhciBvcHRpb25zID0ge1xuXHQgICAgX2lzQ29tcG9uZW50OiB0cnVlLFxuXHQgICAgcGFyZW50OiBwYXJlbnQsXG5cdCAgICBwcm9wc0RhdGE6IHZub2RlQ29tcG9uZW50T3B0aW9ucy5wcm9wc0RhdGEsXG5cdCAgICBfY29tcG9uZW50VGFnOiB2bm9kZUNvbXBvbmVudE9wdGlvbnMudGFnLFxuXHQgICAgX3BhcmVudFZub2RlOiB2bm9kZSxcblx0ICAgIF9wYXJlbnRMaXN0ZW5lcnM6IHZub2RlQ29tcG9uZW50T3B0aW9ucy5saXN0ZW5lcnMsXG5cdCAgICBfcmVuZGVyQ2hpbGRyZW46IHZub2RlQ29tcG9uZW50T3B0aW9ucy5jaGlsZHJlbixcblx0ICAgIF9wYXJlbnRFbG06IHBhcmVudEVsbSB8fCBudWxsLFxuXHQgICAgX3JlZkVsbTogcmVmRWxtIHx8IG51bGxcblx0ICB9O1xuXHQgIC8vIGNoZWNrIGlubGluZS10ZW1wbGF0ZSByZW5kZXIgZnVuY3Rpb25zXG5cdCAgdmFyIGlubGluZVRlbXBsYXRlID0gdm5vZGUuZGF0YS5pbmxpbmVUZW1wbGF0ZTtcblx0ICBpZiAoaW5saW5lVGVtcGxhdGUpIHtcblx0ICAgIG9wdGlvbnMucmVuZGVyID0gaW5saW5lVGVtcGxhdGUucmVuZGVyO1xuXHQgICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBpbmxpbmVUZW1wbGF0ZS5zdGF0aWNSZW5kZXJGbnM7XG5cdCAgfVxuXHQgIHJldHVybiBuZXcgdm5vZGVDb21wb25lbnRPcHRpb25zLkN0b3Iob3B0aW9ucylcblx0fVxuXHRcblx0ZnVuY3Rpb24gaW5pdCAoXG5cdCAgdm5vZGUsXG5cdCAgaHlkcmF0aW5nLFxuXHQgIHBhcmVudEVsbSxcblx0ICByZWZFbG1cblx0KSB7XG5cdCAgaWYgKCF2bm9kZS5jb21wb25lbnRJbnN0YW5jZSB8fCB2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5faXNEZXN0cm95ZWQpIHtcblx0ICAgIHZhciBjaGlsZCA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gY3JlYXRlQ29tcG9uZW50SW5zdGFuY2VGb3JWbm9kZShcblx0ICAgICAgdm5vZGUsXG5cdCAgICAgIGFjdGl2ZUluc3RhbmNlLFxuXHQgICAgICBwYXJlbnRFbG0sXG5cdCAgICAgIHJlZkVsbVxuXHQgICAgKTtcblx0ICAgIGNoaWxkLiRtb3VudChoeWRyYXRpbmcgPyB2bm9kZS5lbG0gOiB1bmRlZmluZWQsIGh5ZHJhdGluZyk7XG5cdCAgfSBlbHNlIGlmICh2bm9kZS5kYXRhLmtlZXBBbGl2ZSkge1xuXHQgICAgLy8ga2VwdC1hbGl2ZSBjb21wb25lbnRzLCB0cmVhdCBhcyBhIHBhdGNoXG5cdCAgICB2YXIgbW91bnRlZE5vZGUgPSB2bm9kZTsgLy8gd29yayBhcm91bmQgZmxvd1xuXHQgICAgcHJlcGF0Y2gobW91bnRlZE5vZGUsIG1vdW50ZWROb2RlKTtcblx0ICB9XG5cdH1cblx0XG5cdGZ1bmN0aW9uIHByZXBhdGNoIChcblx0ICBvbGRWbm9kZSxcblx0ICB2bm9kZVxuXHQpIHtcblx0ICB2YXIgb3B0aW9ucyA9IHZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG5cdCAgdmFyIGNoaWxkID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBvbGRWbm9kZS5jb21wb25lbnRJbnN0YW5jZTtcblx0ICBjaGlsZC5fdXBkYXRlRnJvbVBhcmVudChcblx0ICAgIG9wdGlvbnMucHJvcHNEYXRhLCAvLyB1cGRhdGVkIHByb3BzXG5cdCAgICBvcHRpb25zLmxpc3RlbmVycywgLy8gdXBkYXRlZCBsaXN0ZW5lcnNcblx0ICAgIHZub2RlLCAvLyBuZXcgcGFyZW50IHZub2RlXG5cdCAgICBvcHRpb25zLmNoaWxkcmVuIC8vIG5ldyBjaGlsZHJlblxuXHQgICk7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGluc2VydCAodm5vZGUpIHtcblx0ICBpZiAoIXZub2RlLmNvbXBvbmVudEluc3RhbmNlLl9pc01vdW50ZWQpIHtcblx0ICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlLl9pc01vdW50ZWQgPSB0cnVlO1xuXHQgICAgY2FsbEhvb2sodm5vZGUuY29tcG9uZW50SW5zdGFuY2UsICdtb3VudGVkJyk7XG5cdCAgfVxuXHQgIGlmICh2bm9kZS5kYXRhLmtlZXBBbGl2ZSkge1xuXHQgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX2luYWN0aXZlID0gZmFsc2U7XG5cdCAgICBjYWxsSG9vayh2bm9kZS5jb21wb25lbnRJbnN0YW5jZSwgJ2FjdGl2YXRlZCcpO1xuXHQgIH1cblx0fVxuXHRcblx0ZnVuY3Rpb24gZGVzdHJveSQxICh2bm9kZSkge1xuXHQgIGlmICghdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX2lzRGVzdHJveWVkKSB7XG5cdCAgICBpZiAoIXZub2RlLmRhdGEua2VlcEFsaXZlKSB7XG5cdCAgICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlLiRkZXN0cm95KCk7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICB2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5faW5hY3RpdmUgPSB0cnVlO1xuXHQgICAgICBjYWxsSG9vayh2bm9kZS5jb21wb25lbnRJbnN0YW5jZSwgJ2RlYWN0aXZhdGVkJyk7XG5cdCAgICB9XG5cdCAgfVxuXHR9XG5cdFxuXHRmdW5jdGlvbiByZXNvbHZlQXN5bmNDb21wb25lbnQgKFxuXHQgIGZhY3RvcnksXG5cdCAgYmFzZUN0b3IsXG5cdCAgY2Jcblx0KSB7XG5cdCAgaWYgKGZhY3RvcnkucmVxdWVzdGVkKSB7XG5cdCAgICAvLyBwb29sIGNhbGxiYWNrc1xuXHQgICAgZmFjdG9yeS5wZW5kaW5nQ2FsbGJhY2tzLnB1c2goY2IpO1xuXHQgIH0gZWxzZSB7XG5cdCAgICBmYWN0b3J5LnJlcXVlc3RlZCA9IHRydWU7XG5cdCAgICB2YXIgY2JzID0gZmFjdG9yeS5wZW5kaW5nQ2FsbGJhY2tzID0gW2NiXTtcblx0ICAgIHZhciBzeW5jID0gdHJ1ZTtcblx0XG5cdCAgICB2YXIgcmVzb2x2ZSA9IGZ1bmN0aW9uIChyZXMpIHtcblx0ICAgICAgaWYgKGlzT2JqZWN0KHJlcykpIHtcblx0ICAgICAgICByZXMgPSBiYXNlQ3Rvci5leHRlbmQocmVzKTtcblx0ICAgICAgfVxuXHQgICAgICAvLyBjYWNoZSByZXNvbHZlZFxuXHQgICAgICBmYWN0b3J5LnJlc29sdmVkID0gcmVzO1xuXHQgICAgICAvLyBpbnZva2UgY2FsbGJhY2tzIG9ubHkgaWYgdGhpcyBpcyBub3QgYSBzeW5jaHJvbm91cyByZXNvbHZlXG5cdCAgICAgIC8vIChhc3luYyByZXNvbHZlcyBhcmUgc2hpbW1lZCBhcyBzeW5jaHJvbm91cyBkdXJpbmcgU1NSKVxuXHQgICAgICBpZiAoIXN5bmMpIHtcblx0ICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGNicy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0ICAgICAgICAgIGNic1tpXShyZXMpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfTtcblx0XG5cdCAgICB2YXIgcmVqZWN0ID0gZnVuY3Rpb24gKHJlYXNvbikge1xuXHQgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG5cdCAgICAgICAgXCJGYWlsZWQgdG8gcmVzb2x2ZSBhc3luYyBjb21wb25lbnQ6IFwiICsgKFN0cmluZyhmYWN0b3J5KSkgK1xuXHQgICAgICAgIChyZWFzb24gPyAoXCJcXG5SZWFzb246IFwiICsgcmVhc29uKSA6ICcnKVxuXHQgICAgICApO1xuXHQgICAgfTtcblx0XG5cdCAgICB2YXIgcmVzID0gZmFjdG9yeShyZXNvbHZlLCByZWplY3QpO1xuXHRcblx0ICAgIC8vIGhhbmRsZSBwcm9taXNlXG5cdCAgICBpZiAocmVzICYmIHR5cGVvZiByZXMudGhlbiA9PT0gJ2Z1bmN0aW9uJyAmJiAhZmFjdG9yeS5yZXNvbHZlZCkge1xuXHQgICAgICByZXMudGhlbihyZXNvbHZlLCByZWplY3QpO1xuXHQgICAgfVxuXHRcblx0ICAgIHN5bmMgPSBmYWxzZTtcblx0ICAgIC8vIHJldHVybiBpbiBjYXNlIHJlc29sdmVkIHN5bmNocm9ub3VzbHlcblx0ICAgIHJldHVybiBmYWN0b3J5LnJlc29sdmVkXG5cdCAgfVxuXHR9XG5cdFxuXHRmdW5jdGlvbiBleHRyYWN0UHJvcHMgKGRhdGEsIEN0b3IpIHtcblx0ICAvLyB3ZSBhcmUgb25seSBleHRyYWN0aW5nIHJhdyB2YWx1ZXMgaGVyZS5cblx0ICAvLyB2YWxpZGF0aW9uIGFuZCBkZWZhdWx0IHZhbHVlcyBhcmUgaGFuZGxlZCBpbiB0aGUgY2hpbGRcblx0ICAvLyBjb21wb25lbnQgaXRzZWxmLlxuXHQgIHZhciBwcm9wT3B0aW9ucyA9IEN0b3Iub3B0aW9ucy5wcm9wcztcblx0ICBpZiAoIXByb3BPcHRpb25zKSB7XG5cdCAgICByZXR1cm5cblx0ICB9XG5cdCAgdmFyIHJlcyA9IHt9O1xuXHQgIHZhciBhdHRycyA9IGRhdGEuYXR0cnM7XG5cdCAgdmFyIHByb3BzID0gZGF0YS5wcm9wcztcblx0ICB2YXIgZG9tUHJvcHMgPSBkYXRhLmRvbVByb3BzO1xuXHQgIGlmIChhdHRycyB8fCBwcm9wcyB8fCBkb21Qcm9wcykge1xuXHQgICAgZm9yICh2YXIga2V5IGluIHByb3BPcHRpb25zKSB7XG5cdCAgICAgIHZhciBhbHRLZXkgPSBoeXBoZW5hdGUoa2V5KTtcblx0ICAgICAgY2hlY2tQcm9wKHJlcywgcHJvcHMsIGtleSwgYWx0S2V5LCB0cnVlKSB8fFxuXHQgICAgICBjaGVja1Byb3AocmVzLCBhdHRycywga2V5LCBhbHRLZXkpIHx8XG5cdCAgICAgIGNoZWNrUHJvcChyZXMsIGRvbVByb3BzLCBrZXksIGFsdEtleSk7XG5cdCAgICB9XG5cdCAgfVxuXHQgIHJldHVybiByZXNcblx0fVxuXHRcblx0ZnVuY3Rpb24gY2hlY2tQcm9wIChcblx0ICByZXMsXG5cdCAgaGFzaCxcblx0ICBrZXksXG5cdCAgYWx0S2V5LFxuXHQgIHByZXNlcnZlXG5cdCkge1xuXHQgIGlmIChoYXNoKSB7XG5cdCAgICBpZiAoaGFzT3duKGhhc2gsIGtleSkpIHtcblx0ICAgICAgcmVzW2tleV0gPSBoYXNoW2tleV07XG5cdCAgICAgIGlmICghcHJlc2VydmUpIHtcblx0ICAgICAgICBkZWxldGUgaGFzaFtrZXldO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiB0cnVlXG5cdCAgICB9IGVsc2UgaWYgKGhhc093bihoYXNoLCBhbHRLZXkpKSB7XG5cdCAgICAgIHJlc1trZXldID0gaGFzaFthbHRLZXldO1xuXHQgICAgICBpZiAoIXByZXNlcnZlKSB7XG5cdCAgICAgICAgZGVsZXRlIGhhc2hbYWx0S2V5XTtcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gdHJ1ZVxuXHQgICAgfVxuXHQgIH1cblx0ICByZXR1cm4gZmFsc2Vcblx0fVxuXHRcblx0ZnVuY3Rpb24gbWVyZ2VIb29rcyAoZGF0YSkge1xuXHQgIGlmICghZGF0YS5ob29rKSB7XG5cdCAgICBkYXRhLmhvb2sgPSB7fTtcblx0ICB9XG5cdCAgZm9yICh2YXIgaSA9IDA7IGkgPCBob29rc1RvTWVyZ2UubGVuZ3RoOyBpKyspIHtcblx0ICAgIHZhciBrZXkgPSBob29rc1RvTWVyZ2VbaV07XG5cdCAgICB2YXIgZnJvbVBhcmVudCA9IGRhdGEuaG9va1trZXldO1xuXHQgICAgdmFyIG91cnMgPSBob29rc1trZXldO1xuXHQgICAgZGF0YS5ob29rW2tleV0gPSBmcm9tUGFyZW50ID8gbWVyZ2VIb29rJDEob3VycywgZnJvbVBhcmVudCkgOiBvdXJzO1xuXHQgIH1cblx0fVxuXHRcblx0ZnVuY3Rpb24gbWVyZ2VIb29rJDEgKG9uZSwgdHdvKSB7XG5cdCAgcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7XG5cdCAgICBvbmUoYSwgYiwgYywgZCk7XG5cdCAgICB0d28oYSwgYiwgYywgZCk7XG5cdCAgfVxuXHR9XG5cdFxuXHQvKiAgKi9cblx0XG5cdGZ1bmN0aW9uIG1lcmdlVk5vZGVIb29rIChkZWYsIGhvb2tLZXksIGhvb2ssIGtleSkge1xuXHQgIGtleSA9IGtleSArIGhvb2tLZXk7XG5cdCAgdmFyIGluamVjdGVkSGFzaCA9IGRlZi5fX2luamVjdGVkIHx8IChkZWYuX19pbmplY3RlZCA9IHt9KTtcblx0ICBpZiAoIWluamVjdGVkSGFzaFtrZXldKSB7XG5cdCAgICBpbmplY3RlZEhhc2hba2V5XSA9IHRydWU7XG5cdCAgICB2YXIgb2xkSG9vayA9IGRlZltob29rS2V5XTtcblx0ICAgIGlmIChvbGRIb29rKSB7XG5cdCAgICAgIGRlZltob29rS2V5XSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBvbGRIb29rLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdCAgICAgICAgaG9vay5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHQgICAgICB9O1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgZGVmW2hvb2tLZXldID0gaG9vaztcblx0ICAgIH1cblx0ICB9XG5cdH1cblx0XG5cdC8qICAqL1xuXHRcblx0dmFyIG5vcm1hbGl6ZUV2ZW50ID0gY2FjaGVkKGZ1bmN0aW9uIChuYW1lKSB7XG5cdCAgdmFyIG9uY2UgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJ34nOyAvLyBQcmVmaXhlZCBsYXN0LCBjaGVja2VkIGZpcnN0XG5cdCAgbmFtZSA9IG9uY2UgPyBuYW1lLnNsaWNlKDEpIDogbmFtZTtcblx0ICB2YXIgY2FwdHVyZSA9IG5hbWUuY2hhckF0KDApID09PSAnISc7XG5cdCAgbmFtZSA9IGNhcHR1cmUgPyBuYW1lLnNsaWNlKDEpIDogbmFtZTtcblx0ICByZXR1cm4ge1xuXHQgICAgbmFtZTogbmFtZSxcblx0ICAgIG9uY2U6IG9uY2UsXG5cdCAgICBjYXB0dXJlOiBjYXB0dXJlXG5cdCAgfVxuXHR9KTtcblx0XG5cdGZ1bmN0aW9uIGNyZWF0ZUV2ZW50SGFuZGxlIChmbikge1xuXHQgIHZhciBoYW5kbGUgPSB7XG5cdCAgICBmbjogZm4sXG5cdCAgICBpbnZva2VyOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgIHZhciBhcmd1bWVudHMkMSA9IGFyZ3VtZW50cztcblx0XG5cdCAgICAgIHZhciBmbiA9IGhhbmRsZS5mbjtcblx0ICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZm4pKSB7XG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmbi5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgZm5baV0uYXBwbHkobnVsbCwgYXJndW1lbnRzJDEpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICBmbi5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfTtcblx0ICByZXR1cm4gaGFuZGxlXG5cdH1cblx0XG5cdGZ1bmN0aW9uIHVwZGF0ZUxpc3RlbmVycyAoXG5cdCAgb24sXG5cdCAgb2xkT24sXG5cdCAgYWRkLFxuXHQgIHJlbW92ZSQkMSxcblx0ICB2bVxuXHQpIHtcblx0ICB2YXIgbmFtZSwgY3VyLCBvbGQsIGV2ZW50O1xuXHQgIGZvciAobmFtZSBpbiBvbikge1xuXHQgICAgY3VyID0gb25bbmFtZV07XG5cdCAgICBvbGQgPSBvbGRPbltuYW1lXTtcblx0ICAgIGV2ZW50ID0gbm9ybWFsaXplRXZlbnQobmFtZSk7XG5cdCAgICBpZiAoIWN1cikge1xuXHQgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG5cdCAgICAgICAgXCJJbnZhbGlkIGhhbmRsZXIgZm9yIGV2ZW50IFxcXCJcIiArIChldmVudC5uYW1lKSArIFwiXFxcIjogZ290IFwiICsgU3RyaW5nKGN1ciksXG5cdCAgICAgICAgdm1cblx0ICAgICAgKTtcblx0ICAgIH0gZWxzZSBpZiAoIW9sZCkge1xuXHQgICAgICBpZiAoIWN1ci5pbnZva2VyKSB7XG5cdCAgICAgICAgY3VyID0gb25bbmFtZV0gPSBjcmVhdGVFdmVudEhhbmRsZShjdXIpO1xuXHQgICAgICB9XG5cdCAgICAgIGFkZChldmVudC5uYW1lLCBjdXIuaW52b2tlciwgZXZlbnQub25jZSwgZXZlbnQuY2FwdHVyZSk7XG5cdCAgICB9IGVsc2UgaWYgKGN1ciAhPT0gb2xkKSB7XG5cdCAgICAgIG9sZC5mbiA9IGN1cjtcblx0ICAgICAgb25bbmFtZV0gPSBvbGQ7XG5cdCAgICB9XG5cdCAgfVxuXHQgIGZvciAobmFtZSBpbiBvbGRPbikge1xuXHQgICAgaWYgKCFvbltuYW1lXSkge1xuXHQgICAgICBldmVudCA9IG5vcm1hbGl6ZUV2ZW50KG5hbWUpO1xuXHQgICAgICByZW1vdmUkJDEoZXZlbnQubmFtZSwgb2xkT25bbmFtZV0uaW52b2tlciwgZXZlbnQuY2FwdHVyZSk7XG5cdCAgICB9XG5cdCAgfVxuXHR9XG5cdFxuXHQvKiAgKi9cblx0XG5cdC8vIFRoZSB0ZW1wbGF0ZSBjb21waWxlciBhdHRlbXB0cyB0byBtaW5pbWl6ZSB0aGUgbmVlZCBmb3Igbm9ybWFsaXphdGlvbiBieVxuXHQvLyBzdGF0aWNhbGx5IGFuYWx5emluZyB0aGUgdGVtcGxhdGUgYXQgY29tcGlsZSB0aW1lLlxuXHQvL1xuXHQvLyBGb3IgcGxhaW4gSFRNTCBtYXJrdXAsIG5vcm1hbGl6YXRpb24gY2FuIGJlIGNvbXBsZXRlbHkgc2tpcHBlZCBiZWNhdXNlIHRoZVxuXHQvLyBnZW5lcmF0ZWQgcmVuZGVyIGZ1bmN0aW9uIGlzIGd1YXJhbnRlZWQgdG8gcmV0dXJuIEFycmF5PFZOb2RlPi4gVGhlcmUgYXJlXG5cdC8vIHR3byBjYXNlcyB3aGVyZSBleHRyYSBub3JtYWxpemF0aW9uIGlzIG5lZWRlZDpcblx0XG5cdC8vIDEuIFdoZW4gdGhlIGNoaWxkcmVuIGNvbnRhaW5zIGNvbXBvbmVudHMgLSBiZWNhdXNlIGEgZnVuY3Rpb25hbCBjb21wb25lbnRcblx0Ly8gbWF5IHJldHVybiBhbiBBcnJheSBpbnN0ZWFkIG9mIGEgc2luZ2xlIHJvb3QuIEluIHRoaXMgY2FzZSwganVzdCBhIHNpbXBsZVxuXHQvLyBub21yYWxpemF0aW9uIGlzIG5lZWRlZCAtIGlmIGFueSBjaGlsZCBpcyBhbiBBcnJheSwgd2UgZmxhdHRlbiB0aGUgd2hvbGVcblx0Ly8gdGhpbmcgd2l0aCBBcnJheS5wcm90b3R5cGUuY29uY2F0LiBJdCBpcyBndWFyYW50ZWVkIHRvIGJlIG9ubHkgMS1sZXZlbCBkZWVwXG5cdC8vIGJlY2F1c2UgZnVuY3Rpb25hbCBjb21wb25lbnRzIGFscmVhZHkgbm9ybWFsaXplIHRoZWlyIG93biBjaGlsZHJlbi5cblx0ZnVuY3Rpb24gc2ltcGxlTm9ybWFsaXplQ2hpbGRyZW4gKGNoaWxkcmVuKSB7XG5cdCAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuXHQgICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW5baV0pKSB7XG5cdCAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KFtdLCBjaGlsZHJlbilcblx0ICAgIH1cblx0ICB9XG5cdCAgcmV0dXJuIGNoaWxkcmVuXG5cdH1cblx0XG5cdC8vIDIuIFdoZW4gdGhlIGNoaWxkcmVuIGNvbnRhaW5zIGNvbnN0cmN1dHMgdGhhdCBhbHdheXMgZ2VuZXJhdGVkIG5lc3RlZCBBcnJheXMsXG5cdC8vIGUuZy4gPHRlbXBsYXRlPiwgPHNsb3Q+LCB2LWZvciwgb3Igd2hlbiB0aGUgY2hpbGRyZW4gaXMgcHJvdmlkZWQgYnkgdXNlclxuXHQvLyB3aXRoIGhhbmQtd3JpdHRlbiByZW5kZXIgZnVuY3Rpb25zIC8gSlNYLiBJbiBzdWNoIGNhc2VzIGEgZnVsbCBub3JtYWxpemF0aW9uXG5cdC8vIGlzIG5lZWRlZCB0byBjYXRlciB0byBhbGwgcG9zc2libGUgdHlwZXMgb2YgY2hpbGRyZW4gdmFsdWVzLlxuXHRmdW5jdGlvbiBub3JtYWxpemVDaGlsZHJlbiAoY2hpbGRyZW4pIHtcblx0ICByZXR1cm4gaXNQcmltaXRpdmUoY2hpbGRyZW4pXG5cdCAgICA/IFtjcmVhdGVUZXh0Vk5vZGUoY2hpbGRyZW4pXVxuXHQgICAgOiBBcnJheS5pc0FycmF5KGNoaWxkcmVuKVxuXHQgICAgICA/IG5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4oY2hpbGRyZW4pXG5cdCAgICAgIDogdW5kZWZpbmVkXG5cdH1cblx0XG5cdGZ1bmN0aW9uIG5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4gKGNoaWxkcmVuLCBuZXN0ZWRJbmRleCkge1xuXHQgIHZhciByZXMgPSBbXTtcblx0ICB2YXIgaSwgYywgbGFzdDtcblx0ICBmb3IgKGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcblx0ICAgIGMgPSBjaGlsZHJlbltpXTtcblx0ICAgIGlmIChjID09IG51bGwgfHwgdHlwZW9mIGMgPT09ICdib29sZWFuJykgeyBjb250aW51ZSB9XG5cdCAgICBsYXN0ID0gcmVzW3Jlcy5sZW5ndGggLSAxXTtcblx0ICAgIC8vICBuZXN0ZWRcblx0ICAgIGlmIChBcnJheS5pc0FycmF5KGMpKSB7XG5cdCAgICAgIHJlcy5wdXNoLmFwcGx5KHJlcywgbm9ybWFsaXplQXJyYXlDaGlsZHJlbihjLCAoKG5lc3RlZEluZGV4IHx8ICcnKSArIFwiX1wiICsgaSkpKTtcblx0ICAgIH0gZWxzZSBpZiAoaXNQcmltaXRpdmUoYykpIHtcblx0ICAgICAgaWYgKGxhc3QgJiYgbGFzdC50ZXh0KSB7XG5cdCAgICAgICAgbGFzdC50ZXh0ICs9IFN0cmluZyhjKTtcblx0ICAgICAgfSBlbHNlIGlmIChjICE9PSAnJykge1xuXHQgICAgICAgIC8vIGNvbnZlcnQgcHJpbWl0aXZlIHRvIHZub2RlXG5cdCAgICAgICAgcmVzLnB1c2goY3JlYXRlVGV4dFZOb2RlKGMpKTtcblx0ICAgICAgfVxuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgaWYgKGMudGV4dCAmJiBsYXN0ICYmIGxhc3QudGV4dCkge1xuXHQgICAgICAgIHJlc1tyZXMubGVuZ3RoIC0gMV0gPSBjcmVhdGVUZXh0Vk5vZGUobGFzdC50ZXh0ICsgYy50ZXh0KTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAvLyBkZWZhdWx0IGtleSBmb3IgbmVzdGVkIGFycmF5IGNoaWxkcmVuIChsaWtlbHkgZ2VuZXJhdGVkIGJ5IHYtZm9yKVxuXHQgICAgICAgIGlmIChjLnRhZyAmJiBjLmtleSA9PSBudWxsICYmIG5lc3RlZEluZGV4ICE9IG51bGwpIHtcblx0ICAgICAgICAgIGMua2V5ID0gXCJfX3ZsaXN0XCIgKyBuZXN0ZWRJbmRleCArIFwiX1wiICsgaSArIFwiX19cIjtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmVzLnB1c2goYyk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9XG5cdCAgcmV0dXJuIHJlc1xuXHR9XG5cdFxuXHQvKiAgKi9cblx0XG5cdGZ1bmN0aW9uIGdldEZpcnN0Q29tcG9uZW50Q2hpbGQgKGNoaWxkcmVuKSB7XG5cdCAgcmV0dXJuIGNoaWxkcmVuICYmIGNoaWxkcmVuLmZpbHRlcihmdW5jdGlvbiAoYykgeyByZXR1cm4gYyAmJiBjLmNvbXBvbmVudE9wdGlvbnM7IH0pWzBdXG5cdH1cblx0XG5cdC8qICAqL1xuXHRcblx0dmFyIFNJTVBMRV9OT1JNQUxJWkUgPSAxO1xuXHR2YXIgQUxXQVlTX05PUk1BTElaRSA9IDI7XG5cdFxuXHQvLyB3cmFwcGVyIGZ1bmN0aW9uIGZvciBwcm92aWRpbmcgYSBtb3JlIGZsZXhpYmxlIGludGVyZmFjZVxuXHQvLyB3aXRob3V0IGdldHRpbmcgeWVsbGVkIGF0IGJ5IGZsb3dcblx0ZnVuY3Rpb24gY3JlYXRlRWxlbWVudCAoXG5cdCAgY29udGV4dCxcblx0ICB0YWcsXG5cdCAgZGF0YSxcblx0ICBjaGlsZHJlbixcblx0ICBub3JtYWxpemF0aW9uVHlwZSxcblx0ICBhbHdheXNOb3JtYWxpemVcblx0KSB7XG5cdCAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkgfHwgaXNQcmltaXRpdmUoZGF0YSkpIHtcblx0ICAgIG5vcm1hbGl6YXRpb25UeXBlID0gY2hpbGRyZW47XG5cdCAgICBjaGlsZHJlbiA9IGRhdGE7XG5cdCAgICBkYXRhID0gdW5kZWZpbmVkO1xuXHQgIH1cblx0ICBpZiAoYWx3YXlzTm9ybWFsaXplKSB7IG5vcm1hbGl6YXRpb25UeXBlID0gQUxXQVlTX05PUk1BTElaRTsgfVxuXHQgIHJldHVybiBfY3JlYXRlRWxlbWVudChjb250ZXh0LCB0YWcsIGRhdGEsIGNoaWxkcmVuLCBub3JtYWxpemF0aW9uVHlwZSlcblx0fVxuXHRcblx0ZnVuY3Rpb24gX2NyZWF0ZUVsZW1lbnQgKFxuXHQgIGNvbnRleHQsXG5cdCAgdGFnLFxuXHQgIGRhdGEsXG5cdCAgY2hpbGRyZW4sXG5cdCAgbm9ybWFsaXphdGlvblR5cGVcblx0KSB7XG5cdCAgaWYgKGRhdGEgJiYgZGF0YS5fX29iX18pIHtcblx0ICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2Fybihcblx0ICAgICAgXCJBdm9pZCB1c2luZyBvYnNlcnZlZCBkYXRhIG9iamVjdCBhcyB2bm9kZSBkYXRhOiBcIiArIChKU09OLnN0cmluZ2lmeShkYXRhKSkgKyBcIlxcblwiICtcblx0ICAgICAgJ0Fsd2F5cyBjcmVhdGUgZnJlc2ggdm5vZGUgZGF0YSBvYmplY3RzIGluIGVhY2ggcmVuZGVyIScsXG5cdCAgICAgIGNvbnRleHRcblx0ICAgICk7XG5cdCAgICByZXR1cm4gY3JlYXRlRW1wdHlWTm9kZSgpXG5cdCAgfVxuXHQgIGlmICghdGFnKSB7XG5cdCAgICAvLyBpbiBjYXNlIG9mIGNvbXBvbmVudCA6aXMgc2V0IHRvIGZhbHN5IHZhbHVlXG5cdCAgICByZXR1cm4gY3JlYXRlRW1wdHlWTm9kZSgpXG5cdCAgfVxuXHQgIC8vIHN1cHBvcnQgc2luZ2xlIGZ1bmN0aW9uIGNoaWxkcmVuIGFzIGRlZmF1bHQgc2NvcGVkIHNsb3Rcblx0ICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikgJiZcblx0ICAgICAgdHlwZW9mIGNoaWxkcmVuWzBdID09PSAnZnVuY3Rpb24nKSB7XG5cdCAgICBkYXRhID0gZGF0YSB8fCB7fTtcblx0ICAgIGRhdGEuc2NvcGVkU2xvdHMgPSB7IGRlZmF1bHQ6IGNoaWxkcmVuWzBdIH07XG5cdCAgICBjaGlsZHJlbi5sZW5ndGggPSAwO1xuXHQgIH1cblx0ICBpZiAobm9ybWFsaXphdGlvblR5cGUgPT09IEFMV0FZU19OT1JNQUxJWkUpIHtcblx0ICAgIGNoaWxkcmVuID0gbm9ybWFsaXplQ2hpbGRyZW4oY2hpbGRyZW4pO1xuXHQgIH0gZWxzZSBpZiAobm9ybWFsaXphdGlvblR5cGUgPT09IFNJTVBMRV9OT1JNQUxJWkUpIHtcblx0ICAgIGNoaWxkcmVuID0gc2ltcGxlTm9ybWFsaXplQ2hpbGRyZW4oY2hpbGRyZW4pO1xuXHQgIH1cblx0ICB2YXIgdm5vZGUsIG5zO1xuXHQgIGlmICh0eXBlb2YgdGFnID09PSAnc3RyaW5nJykge1xuXHQgICAgdmFyIEN0b3I7XG5cdCAgICBucyA9IGNvbmZpZy5nZXRUYWdOYW1lc3BhY2UodGFnKTtcblx0ICAgIGlmIChjb25maWcuaXNSZXNlcnZlZFRhZyh0YWcpKSB7XG5cdCAgICAgIC8vIHBsYXRmb3JtIGJ1aWx0LWluIGVsZW1lbnRzXG5cdCAgICAgIHZub2RlID0gbmV3IFZOb2RlKFxuXHQgICAgICAgIGNvbmZpZy5wYXJzZVBsYXRmb3JtVGFnTmFtZSh0YWcpLCBkYXRhLCBjaGlsZHJlbixcblx0ICAgICAgICB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGV4dFxuXHQgICAgICApO1xuXHQgICAgfSBlbHNlIGlmICgoQ3RvciA9IHJlc29sdmVBc3NldChjb250ZXh0LiRvcHRpb25zLCAnY29tcG9uZW50cycsIHRhZykpKSB7XG5cdCAgICAgIC8vIGNvbXBvbmVudFxuXHQgICAgICB2bm9kZSA9IGNyZWF0ZUNvbXBvbmVudChDdG9yLCBkYXRhLCBjb250ZXh0LCBjaGlsZHJlbiwgdGFnKTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIC8vIHVua25vd24gb3IgdW5saXN0ZWQgbmFtZXNwYWNlZCBlbGVtZW50c1xuXHQgICAgICAvLyBjaGVjayBhdCBydW50aW1lIGJlY2F1c2UgaXQgbWF5IGdldCBhc3NpZ25lZCBhIG5hbWVzcGFjZSB3aGVuIGl0c1xuXHQgICAgICAvLyBwYXJlbnQgbm9ybWFsaXplcyBjaGlsZHJlblxuXHQgICAgICB2bm9kZSA9IG5ldyBWTm9kZShcblx0ICAgICAgICB0YWcsIGRhdGEsIGNoaWxkcmVuLFxuXHQgICAgICAgIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBjb250ZXh0XG5cdCAgICAgICk7XG5cdCAgICB9XG5cdCAgfSBlbHNlIHtcblx0ICAgIC8vIGRpcmVjdCBjb21wb25lbnQgb3B0aW9ucyAvIGNvbnN0cnVjdG9yXG5cdCAgICB2bm9kZSA9IGNyZWF0ZUNvbXBvbmVudCh0YWcsIGRhdGEsIGNvbnRleHQsIGNoaWxkcmVuKTtcblx0ICB9XG5cdCAgaWYgKHZub2RlKSB7XG5cdCAgICBpZiAobnMpIHsgYXBwbHlOUyh2bm9kZSwgbnMpOyB9XG5cdCAgICByZXR1cm4gdm5vZGVcblx0ICB9IGVsc2Uge1xuXHQgICAgcmV0dXJuIGNyZWF0ZUVtcHR5Vk5vZGUoKVxuXHQgIH1cblx0fVxuXHRcblx0ZnVuY3Rpb24gYXBwbHlOUyAodm5vZGUsIG5zKSB7XG5cdCAgdm5vZGUubnMgPSBucztcblx0ICBpZiAodm5vZGUudGFnID09PSAnZm9yZWlnbk9iamVjdCcpIHtcblx0ICAgIC8vIHVzZSBkZWZhdWx0IG5hbWVzcGFjZSBpbnNpZGUgZm9yZWlnbk9iamVjdFxuXHQgICAgcmV0dXJuXG5cdCAgfVxuXHQgIGlmICh2bm9kZS5jaGlsZHJlbikge1xuXHQgICAgZm9yICh2YXIgaSA9IDAsIGwgPSB2bm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0ICAgICAgdmFyIGNoaWxkID0gdm5vZGUuY2hpbGRyZW5baV07XG5cdCAgICAgIGlmIChjaGlsZC50YWcgJiYgIWNoaWxkLm5zKSB7XG5cdCAgICAgICAgYXBwbHlOUyhjaGlsZCwgbnMpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfVxuXHR9XG5cdFxuXHQvKiAgKi9cblx0XG5cdGZ1bmN0aW9uIGluaXRSZW5kZXIgKHZtKSB7XG5cdCAgdm0uJHZub2RlID0gbnVsbDsgLy8gdGhlIHBsYWNlaG9sZGVyIG5vZGUgaW4gcGFyZW50IHRyZWVcblx0ICB2bS5fdm5vZGUgPSBudWxsOyAvLyB0aGUgcm9vdCBvZiB0aGUgY2hpbGQgdHJlZVxuXHQgIHZtLl9zdGF0aWNUcmVlcyA9IG51bGw7XG5cdCAgdmFyIHBhcmVudFZub2RlID0gdm0uJG9wdGlvbnMuX3BhcmVudFZub2RlO1xuXHQgIHZhciByZW5kZXJDb250ZXh0ID0gcGFyZW50Vm5vZGUgJiYgcGFyZW50Vm5vZGUuY29udGV4dDtcblx0ICB2bS4kc2xvdHMgPSByZXNvbHZlU2xvdHModm0uJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuLCByZW5kZXJDb250ZXh0KTtcblx0ICB2bS4kc2NvcGVkU2xvdHMgPSB7fTtcblx0ICAvLyBiaW5kIHRoZSBjcmVhdGVFbGVtZW50IGZuIHRvIHRoaXMgaW5zdGFuY2Vcblx0ICAvLyBzbyB0aGF0IHdlIGdldCBwcm9wZXIgcmVuZGVyIGNvbnRleHQgaW5zaWRlIGl0LlxuXHQgIC8vIGFyZ3Mgb3JkZXI6IHRhZywgZGF0YSwgY2hpbGRyZW4sIG5vcm1hbGl6YXRpb25UeXBlLCBhbHdheXNOb3JtYWxpemVcblx0ICAvLyBpbnRlcm5hbCB2ZXJzaW9uIGlzIHVzZWQgYnkgcmVuZGVyIGZ1bmN0aW9ucyBjb21waWxlZCBmcm9tIHRlbXBsYXRlc1xuXHQgIHZtLl9jID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHsgcmV0dXJuIGNyZWF0ZUVsZW1lbnQodm0sIGEsIGIsIGMsIGQsIGZhbHNlKTsgfTtcblx0ICAvLyBub3JtYWxpemF0aW9uIGlzIGFsd2F5cyBhcHBsaWVkIGZvciB0aGUgcHVibGljIHZlcnNpb24sIHVzZWQgaW5cblx0ICAvLyB1c2VyLXdyaXR0ZW4gcmVuZGVyIGZ1bmN0aW9ucy5cblx0ICB2bS4kY3JlYXRlRWxlbWVudCA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7IHJldHVybiBjcmVhdGVFbGVtZW50KHZtLCBhLCBiLCBjLCBkLCB0cnVlKTsgfTtcblx0fVxuXHRcblx0ZnVuY3Rpb24gcmVuZGVyTWl4aW4gKFZ1ZSkge1xuXHQgIFZ1ZS5wcm90b3R5cGUuJG5leHRUaWNrID0gZnVuY3Rpb24gKGZuKSB7XG5cdCAgICByZXR1cm4gbmV4dFRpY2soZm4sIHRoaXMpXG5cdCAgfTtcblx0XG5cdCAgVnVlLnByb3RvdHlwZS5fcmVuZGVyID0gZnVuY3Rpb24gKCkge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblx0ICAgIHZhciByZWYgPSB2bS4kb3B0aW9ucztcblx0ICAgIHZhciByZW5kZXIgPSByZWYucmVuZGVyO1xuXHQgICAgdmFyIHN0YXRpY1JlbmRlckZucyA9IHJlZi5zdGF0aWNSZW5kZXJGbnM7XG5cdCAgICB2YXIgX3BhcmVudFZub2RlID0gcmVmLl9wYXJlbnRWbm9kZTtcblx0XG5cdCAgICBpZiAodm0uX2lzTW91bnRlZCkge1xuXHQgICAgICAvLyBjbG9uZSBzbG90IG5vZGVzIG9uIHJlLXJlbmRlcnNcblx0ICAgICAgZm9yICh2YXIga2V5IGluIHZtLiRzbG90cykge1xuXHQgICAgICAgIHZtLiRzbG90c1trZXldID0gY2xvbmVWTm9kZXModm0uJHNsb3RzW2tleV0pO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdFxuXHQgICAgaWYgKF9wYXJlbnRWbm9kZSAmJiBfcGFyZW50Vm5vZGUuZGF0YS5zY29wZWRTbG90cykge1xuXHQgICAgICB2bS4kc2NvcGVkU2xvdHMgPSBfcGFyZW50Vm5vZGUuZGF0YS5zY29wZWRTbG90cztcblx0ICAgIH1cblx0XG5cdCAgICBpZiAoc3RhdGljUmVuZGVyRm5zICYmICF2bS5fc3RhdGljVHJlZXMpIHtcblx0ICAgICAgdm0uX3N0YXRpY1RyZWVzID0gW107XG5cdCAgICB9XG5cdCAgICAvLyBzZXQgcGFyZW50IHZub2RlLiB0aGlzIGFsbG93cyByZW5kZXIgZnVuY3Rpb25zIHRvIGhhdmUgYWNjZXNzXG5cdCAgICAvLyB0byB0aGUgZGF0YSBvbiB0aGUgcGxhY2Vob2xkZXIgbm9kZS5cblx0ICAgIHZtLiR2bm9kZSA9IF9wYXJlbnRWbm9kZTtcblx0ICAgIC8vIHJlbmRlciBzZWxmXG5cdCAgICB2YXIgdm5vZGU7XG5cdCAgICB0cnkge1xuXHQgICAgICB2bm9kZSA9IHJlbmRlci5jYWxsKHZtLl9yZW5kZXJQcm94eSwgdm0uJGNyZWF0ZUVsZW1lbnQpO1xuXHQgICAgfSBjYXRjaCAoZSkge1xuXHQgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuXHQgICAgICBpZiAoY29uZmlnLmVycm9ySGFuZGxlcikge1xuXHQgICAgICAgIGNvbmZpZy5lcnJvckhhbmRsZXIuY2FsbChudWxsLCBlLCB2bSk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcblx0ICAgICAgICAgIHdhcm4oKFwiRXJyb3Igd2hlbiByZW5kZXJpbmcgXCIgKyAoZm9ybWF0Q29tcG9uZW50TmFtZSh2bSkpICsgXCI6XCIpKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhyb3cgZVxuXHQgICAgICB9XG5cdCAgICAgIC8vIHJldHVybiBwcmV2aW91cyB2bm9kZSB0byBwcmV2ZW50IHJlbmRlciBlcnJvciBjYXVzaW5nIGJsYW5rIGNvbXBvbmVudFxuXHQgICAgICB2bm9kZSA9IHZtLl92bm9kZTtcblx0ICAgIH1cblx0ICAgIC8vIHJldHVybiBlbXB0eSB2bm9kZSBpbiBjYXNlIHRoZSByZW5kZXIgZnVuY3Rpb24gZXJyb3JlZCBvdXRcblx0ICAgIGlmICghKHZub2RlIGluc3RhbmNlb2YgVk5vZGUpKSB7XG5cdCAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIEFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG5cdCAgICAgICAgd2Fybihcblx0ICAgICAgICAgICdNdWx0aXBsZSByb290IG5vZGVzIHJldHVybmVkIGZyb20gcmVuZGVyIGZ1bmN0aW9uLiBSZW5kZXIgZnVuY3Rpb24gJyArXG5cdCAgICAgICAgICAnc2hvdWxkIHJldHVybiBhIHNpbmdsZSByb290IG5vZGUuJyxcblx0ICAgICAgICAgIHZtXG5cdCAgICAgICAgKTtcblx0ICAgICAgfVxuXHQgICAgICB2bm9kZSA9IGNyZWF0ZUVtcHR5Vk5vZGUoKTtcblx0ICAgIH1cblx0ICAgIC8vIHNldCBwYXJlbnRcblx0ICAgIHZub2RlLnBhcmVudCA9IF9wYXJlbnRWbm9kZTtcblx0ICAgIHJldHVybiB2bm9kZVxuXHQgIH07XG5cdFxuXHQgIC8vIHRvU3RyaW5nIGZvciBtdXN0YWNoZXNcblx0ICBWdWUucHJvdG90eXBlLl9zID0gX3RvU3RyaW5nO1xuXHQgIC8vIGNvbnZlcnQgdGV4dCB0byB2bm9kZVxuXHQgIFZ1ZS5wcm90b3R5cGUuX3YgPSBjcmVhdGVUZXh0Vk5vZGU7XG5cdCAgLy8gbnVtYmVyIGNvbnZlcnNpb25cblx0ICBWdWUucHJvdG90eXBlLl9uID0gdG9OdW1iZXI7XG5cdCAgLy8gZW1wdHkgdm5vZGVcblx0ICBWdWUucHJvdG90eXBlLl9lID0gY3JlYXRlRW1wdHlWTm9kZTtcblx0ICAvLyBsb29zZSBlcXVhbFxuXHQgIFZ1ZS5wcm90b3R5cGUuX3EgPSBsb29zZUVxdWFsO1xuXHQgIC8vIGxvb3NlIGluZGV4T2Zcblx0ICBWdWUucHJvdG90eXBlLl9pID0gbG9vc2VJbmRleE9mO1xuXHRcblx0ICAvLyByZW5kZXIgc3RhdGljIHRyZWUgYnkgaW5kZXhcblx0ICBWdWUucHJvdG90eXBlLl9tID0gZnVuY3Rpb24gcmVuZGVyU3RhdGljIChcblx0ICAgIGluZGV4LFxuXHQgICAgaXNJbkZvclxuXHQgICkge1xuXHQgICAgdmFyIHRyZWUgPSB0aGlzLl9zdGF0aWNUcmVlc1tpbmRleF07XG5cdCAgICAvLyBpZiBoYXMgYWxyZWFkeS1yZW5kZXJlZCBzdGF0aWMgdHJlZSBhbmQgbm90IGluc2lkZSB2LWZvcixcblx0ICAgIC8vIHdlIGNhbiByZXVzZSB0aGUgc2FtZSB0cmVlIGJ5IGRvaW5nIGEgc2hhbGxvdyBjbG9uZS5cblx0ICAgIGlmICh0cmVlICYmICFpc0luRm9yKSB7XG5cdCAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KHRyZWUpXG5cdCAgICAgICAgPyBjbG9uZVZOb2Rlcyh0cmVlKVxuXHQgICAgICAgIDogY2xvbmVWTm9kZSh0cmVlKVxuXHQgICAgfVxuXHQgICAgLy8gb3RoZXJ3aXNlLCByZW5kZXIgYSBmcmVzaCB0cmVlLlxuXHQgICAgdHJlZSA9IHRoaXMuX3N0YXRpY1RyZWVzW2luZGV4XSA9IHRoaXMuJG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zW2luZGV4XS5jYWxsKHRoaXMuX3JlbmRlclByb3h5KTtcblx0ICAgIG1hcmtTdGF0aWModHJlZSwgKFwiX19zdGF0aWNfX1wiICsgaW5kZXgpLCBmYWxzZSk7XG5cdCAgICByZXR1cm4gdHJlZVxuXHQgIH07XG5cdFxuXHQgIC8vIG1hcmsgbm9kZSBhcyBzdGF0aWMgKHYtb25jZSlcblx0ICBWdWUucHJvdG90eXBlLl9vID0gZnVuY3Rpb24gbWFya09uY2UgKFxuXHQgICAgdHJlZSxcblx0ICAgIGluZGV4LFxuXHQgICAga2V5XG5cdCAgKSB7XG5cdCAgICBtYXJrU3RhdGljKHRyZWUsIChcIl9fb25jZV9fXCIgKyBpbmRleCArIChrZXkgPyAoXCJfXCIgKyBrZXkpIDogXCJcIikpLCB0cnVlKTtcblx0ICAgIHJldHVybiB0cmVlXG5cdCAgfTtcblx0XG5cdCAgZnVuY3Rpb24gbWFya1N0YXRpYyAodHJlZSwga2V5LCBpc09uY2UpIHtcblx0ICAgIGlmIChBcnJheS5pc0FycmF5KHRyZWUpKSB7XG5cdCAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHJlZS5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgIGlmICh0cmVlW2ldICYmIHR5cGVvZiB0cmVlW2ldICE9PSAnc3RyaW5nJykge1xuXHQgICAgICAgICAgbWFya1N0YXRpY05vZGUodHJlZVtpXSwgKGtleSArIFwiX1wiICsgaSksIGlzT25jZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICBtYXJrU3RhdGljTm9kZSh0cmVlLCBrZXksIGlzT25jZSk7XG5cdCAgICB9XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBtYXJrU3RhdGljTm9kZSAobm9kZSwga2V5LCBpc09uY2UpIHtcblx0ICAgIG5vZGUuaXNTdGF0aWMgPSB0cnVlO1xuXHQgICAgbm9kZS5rZXkgPSBrZXk7XG5cdCAgICBub2RlLmlzT25jZSA9IGlzT25jZTtcblx0ICB9XG5cdFxuXHQgIC8vIGZpbHRlciByZXNvbHV0aW9uIGhlbHBlclxuXHQgIFZ1ZS5wcm90b3R5cGUuX2YgPSBmdW5jdGlvbiByZXNvbHZlRmlsdGVyIChpZCkge1xuXHQgICAgcmV0dXJuIHJlc29sdmVBc3NldCh0aGlzLiRvcHRpb25zLCAnZmlsdGVycycsIGlkLCB0cnVlKSB8fCBpZGVudGl0eVxuXHQgIH07XG5cdFxuXHQgIC8vIHJlbmRlciB2LWZvclxuXHQgIFZ1ZS5wcm90b3R5cGUuX2wgPSBmdW5jdGlvbiByZW5kZXJMaXN0IChcblx0ICAgIHZhbCxcblx0ICAgIHJlbmRlclxuXHQgICkge1xuXHQgICAgdmFyIHJldCwgaSwgbCwga2V5cywga2V5O1xuXHQgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSB8fCB0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuXHQgICAgICByZXQgPSBuZXcgQXJyYXkodmFsLmxlbmd0aCk7XG5cdCAgICAgIGZvciAoaSA9IDAsIGwgPSB2YWwubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG5cdCAgICAgICAgcmV0W2ldID0gcmVuZGVyKHZhbFtpXSwgaSk7XG5cdCAgICAgIH1cblx0ICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcblx0ICAgICAgcmV0ID0gbmV3IEFycmF5KHZhbCk7XG5cdCAgICAgIGZvciAoaSA9IDA7IGkgPCB2YWw7IGkrKykge1xuXHQgICAgICAgIHJldFtpXSA9IHJlbmRlcihpICsgMSwgaSk7XG5cdCAgICAgIH1cblx0ICAgIH0gZWxzZSBpZiAoaXNPYmplY3QodmFsKSkge1xuXHQgICAgICBrZXlzID0gT2JqZWN0LmtleXModmFsKTtcblx0ICAgICAgcmV0ID0gbmV3IEFycmF5KGtleXMubGVuZ3RoKTtcblx0ICAgICAgZm9yIChpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG5cdCAgICAgICAga2V5ID0ga2V5c1tpXTtcblx0ICAgICAgICByZXRbaV0gPSByZW5kZXIodmFsW2tleV0sIGtleSwgaSk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICAgIHJldHVybiByZXRcblx0ICB9O1xuXHRcblx0ICAvLyByZW5kZXJTbG90XG5cdCAgVnVlLnByb3RvdHlwZS5fdCA9IGZ1bmN0aW9uIChcblx0ICAgIG5hbWUsXG5cdCAgICBmYWxsYmFjayxcblx0ICAgIHByb3BzLFxuXHQgICAgYmluZE9iamVjdFxuXHQgICkge1xuXHQgICAgdmFyIHNjb3BlZFNsb3RGbiA9IHRoaXMuJHNjb3BlZFNsb3RzW25hbWVdO1xuXHQgICAgaWYgKHNjb3BlZFNsb3RGbikgeyAvLyBzY29wZWQgc2xvdFxuXHQgICAgICBwcm9wcyA9IHByb3BzIHx8IHt9O1xuXHQgICAgICBpZiAoYmluZE9iamVjdCkge1xuXHQgICAgICAgIGV4dGVuZChwcm9wcywgYmluZE9iamVjdCk7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIHNjb3BlZFNsb3RGbihwcm9wcykgfHwgZmFsbGJhY2tcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHZhciBzbG90Tm9kZXMgPSB0aGlzLiRzbG90c1tuYW1lXTtcblx0ICAgICAgLy8gd2FybiBkdXBsaWNhdGUgc2xvdCB1c2FnZVxuXHQgICAgICBpZiAoc2xvdE5vZGVzICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcblx0ICAgICAgICBzbG90Tm9kZXMuX3JlbmRlcmVkICYmIHdhcm4oXG5cdCAgICAgICAgICBcIkR1cGxpY2F0ZSBwcmVzZW5jZSBvZiBzbG90IFxcXCJcIiArIG5hbWUgKyBcIlxcXCIgZm91bmQgaW4gdGhlIHNhbWUgcmVuZGVyIHRyZWUgXCIgK1xuXHQgICAgICAgICAgXCItIHRoaXMgd2lsbCBsaWtlbHkgY2F1c2UgcmVuZGVyIGVycm9ycy5cIixcblx0ICAgICAgICAgIHRoaXNcblx0ICAgICAgICApO1xuXHQgICAgICAgIHNsb3ROb2Rlcy5fcmVuZGVyZWQgPSB0cnVlO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBzbG90Tm9kZXMgfHwgZmFsbGJhY2tcblx0ICAgIH1cblx0ICB9O1xuXHRcblx0ICAvLyBhcHBseSB2LWJpbmQgb2JqZWN0XG5cdCAgVnVlLnByb3RvdHlwZS5fYiA9IGZ1bmN0aW9uIGJpbmRQcm9wcyAoXG5cdCAgICBkYXRhLFxuXHQgICAgdGFnLFxuXHQgICAgdmFsdWUsXG5cdCAgICBhc1Byb3Bcblx0ICApIHtcblx0ICAgIGlmICh2YWx1ZSkge1xuXHQgICAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuXHQgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2Fybihcblx0ICAgICAgICAgICd2LWJpbmQgd2l0aG91dCBhcmd1bWVudCBleHBlY3RzIGFuIE9iamVjdCBvciBBcnJheSB2YWx1ZScsXG5cdCAgICAgICAgICB0aGlzXG5cdCAgICAgICAgKTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcblx0ICAgICAgICAgIHZhbHVlID0gdG9PYmplY3QodmFsdWUpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcblx0ICAgICAgICAgIGlmIChrZXkgPT09ICdjbGFzcycgfHwga2V5ID09PSAnc3R5bGUnKSB7XG5cdCAgICAgICAgICAgIGRhdGFba2V5XSA9IHZhbHVlW2tleV07XG5cdCAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICB2YXIgdHlwZSA9IGRhdGEuYXR0cnMgJiYgZGF0YS5hdHRycy50eXBlO1xuXHQgICAgICAgICAgICB2YXIgaGFzaCA9IGFzUHJvcCB8fCBjb25maWcubXVzdFVzZVByb3AodGFnLCB0eXBlLCBrZXkpXG5cdCAgICAgICAgICAgICAgPyBkYXRhLmRvbVByb3BzIHx8IChkYXRhLmRvbVByb3BzID0ge30pXG5cdCAgICAgICAgICAgICAgOiBkYXRhLmF0dHJzIHx8IChkYXRhLmF0dHJzID0ge30pO1xuXHQgICAgICAgICAgICBoYXNoW2tleV0gPSB2YWx1ZVtrZXldO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgcmV0dXJuIGRhdGFcblx0ICB9O1xuXHRcblx0ICAvLyBjaGVjayB2LW9uIGtleUNvZGVzXG5cdCAgVnVlLnByb3RvdHlwZS5fayA9IGZ1bmN0aW9uIGNoZWNrS2V5Q29kZXMgKFxuXHQgICAgZXZlbnRLZXlDb2RlLFxuXHQgICAga2V5LFxuXHQgICAgYnVpbHRJbkFsaWFzXG5cdCAgKSB7XG5cdCAgICB2YXIga2V5Q29kZXMgPSBjb25maWcua2V5Q29kZXNba2V5XSB8fCBidWlsdEluQWxpYXM7XG5cdCAgICBpZiAoQXJyYXkuaXNBcnJheShrZXlDb2RlcykpIHtcblx0ICAgICAgcmV0dXJuIGtleUNvZGVzLmluZGV4T2YoZXZlbnRLZXlDb2RlKSA9PT0gLTFcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHJldHVybiBrZXlDb2RlcyAhPT0gZXZlbnRLZXlDb2RlXG5cdCAgICB9XG5cdCAgfTtcblx0fVxuXHRcblx0ZnVuY3Rpb24gcmVzb2x2ZVNsb3RzIChcblx0ICBjaGlsZHJlbixcblx0ICBjb250ZXh0XG5cdCkge1xuXHQgIHZhciBzbG90cyA9IHt9O1xuXHQgIGlmICghY2hpbGRyZW4pIHtcblx0ICAgIHJldHVybiBzbG90c1xuXHQgIH1cblx0ICB2YXIgZGVmYXVsdFNsb3QgPSBbXTtcblx0ICB2YXIgbmFtZSwgY2hpbGQ7XG5cdCAgZm9yICh2YXIgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0ICAgIGNoaWxkID0gY2hpbGRyZW5baV07XG5cdCAgICAvLyBuYW1lZCBzbG90cyBzaG91bGQgb25seSBiZSByZXNwZWN0ZWQgaWYgdGhlIHZub2RlIHdhcyByZW5kZXJlZCBpbiB0aGVcblx0ICAgIC8vIHNhbWUgY29udGV4dC5cblx0ICAgIGlmICgoY2hpbGQuY29udGV4dCA9PT0gY29udGV4dCB8fCBjaGlsZC5mdW5jdGlvbmFsQ29udGV4dCA9PT0gY29udGV4dCkgJiZcblx0ICAgICAgICBjaGlsZC5kYXRhICYmIChuYW1lID0gY2hpbGQuZGF0YS5zbG90KSkge1xuXHQgICAgICB2YXIgc2xvdCA9IChzbG90c1tuYW1lXSB8fCAoc2xvdHNbbmFtZV0gPSBbXSkpO1xuXHQgICAgICBpZiAoY2hpbGQudGFnID09PSAndGVtcGxhdGUnKSB7XG5cdCAgICAgICAgc2xvdC5wdXNoLmFwcGx5KHNsb3QsIGNoaWxkLmNoaWxkcmVuKTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICBzbG90LnB1c2goY2hpbGQpO1xuXHQgICAgICB9XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICBkZWZhdWx0U2xvdC5wdXNoKGNoaWxkKTtcblx0ICAgIH1cblx0ICB9XG5cdCAgLy8gaWdub3JlIHNpbmdsZSB3aGl0ZXNwYWNlXG5cdCAgaWYgKGRlZmF1bHRTbG90Lmxlbmd0aCAmJiAhKFxuXHQgICAgZGVmYXVsdFNsb3QubGVuZ3RoID09PSAxICYmXG5cdCAgICAoZGVmYXVsdFNsb3RbMF0udGV4dCA9PT0gJyAnIHx8IGRlZmF1bHRTbG90WzBdLmlzQ29tbWVudClcblx0ICApKSB7XG5cdCAgICBzbG90cy5kZWZhdWx0ID0gZGVmYXVsdFNsb3Q7XG5cdCAgfVxuXHQgIHJldHVybiBzbG90c1xuXHR9XG5cdFxuXHQvKiAgKi9cblx0XG5cdGZ1bmN0aW9uIGluaXRFdmVudHMgKHZtKSB7XG5cdCAgdm0uX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cdCAgdm0uX2hhc0hvb2tFdmVudCA9IGZhbHNlO1xuXHQgIC8vIGluaXQgcGFyZW50IGF0dGFjaGVkIGV2ZW50c1xuXHQgIHZhciBsaXN0ZW5lcnMgPSB2bS4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzO1xuXHQgIGlmIChsaXN0ZW5lcnMpIHtcblx0ICAgIHVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyh2bSwgbGlzdGVuZXJzKTtcblx0ICB9XG5cdH1cblx0XG5cdHZhciB0YXJnZXQ7XG5cdFxuXHRmdW5jdGlvbiBhZGQkMSAoZXZlbnQsIGZuLCBvbmNlKSB7XG5cdCAgaWYgKG9uY2UpIHtcblx0ICAgIHRhcmdldC4kb25jZShldmVudCwgZm4pO1xuXHQgIH0gZWxzZSB7XG5cdCAgICB0YXJnZXQuJG9uKGV2ZW50LCBmbik7XG5cdCAgfVxuXHR9XG5cdFxuXHRmdW5jdGlvbiByZW1vdmUkMiAoZXZlbnQsIGZuKSB7XG5cdCAgdGFyZ2V0LiRvZmYoZXZlbnQsIGZuKTtcblx0fVxuXHRcblx0ZnVuY3Rpb24gdXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzIChcblx0ICB2bSxcblx0ICBsaXN0ZW5lcnMsXG5cdCAgb2xkTGlzdGVuZXJzXG5cdCkge1xuXHQgIHRhcmdldCA9IHZtO1xuXHQgIHVwZGF0ZUxpc3RlbmVycyhsaXN0ZW5lcnMsIG9sZExpc3RlbmVycyB8fCB7fSwgYWRkJDEsIHJlbW92ZSQyLCB2bSk7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGV2ZW50c01peGluIChWdWUpIHtcblx0ICB2YXIgaG9va1JFID0gL15ob29rOi87XG5cdCAgVnVlLnByb3RvdHlwZS4kb24gPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzOyh2bS5fZXZlbnRzW2V2ZW50XSB8fCAodm0uX2V2ZW50c1tldmVudF0gPSBbXSkpLnB1c2goZm4pO1xuXHQgICAgLy8gb3B0aW1pemUgaG9vazpldmVudCBjb3N0IGJ5IHVzaW5nIGEgYm9vbGVhbiBmbGFnIG1hcmtlZCBhdCByZWdpc3RyYXRpb25cblx0ICAgIC8vIGluc3RlYWQgb2YgYSBoYXNoIGxvb2t1cFxuXHQgICAgaWYgKGhvb2tSRS50ZXN0KGV2ZW50KSkge1xuXHQgICAgICB2bS5faGFzSG9va0V2ZW50ID0gdHJ1ZTtcblx0ICAgIH1cblx0ICAgIHJldHVybiB2bVxuXHQgIH07XG5cdFxuXHQgIFZ1ZS5wcm90b3R5cGUuJG9uY2UgPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXHQgICAgZnVuY3Rpb24gb24gKCkge1xuXHQgICAgICB2bS4kb2ZmKGV2ZW50LCBvbik7XG5cdCAgICAgIGZuLmFwcGx5KHZtLCBhcmd1bWVudHMpO1xuXHQgICAgfVxuXHQgICAgb24uZm4gPSBmbjtcblx0ICAgIHZtLiRvbihldmVudCwgb24pO1xuXHQgICAgcmV0dXJuIHZtXG5cdCAgfTtcblx0XG5cdCAgVnVlLnByb3RvdHlwZS4kb2ZmID0gZnVuY3Rpb24gKGV2ZW50LCBmbikge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblx0ICAgIC8vIGFsbFxuXHQgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG5cdCAgICAgIHZtLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXHQgICAgICByZXR1cm4gdm1cblx0ICAgIH1cblx0ICAgIC8vIHNwZWNpZmljIGV2ZW50XG5cdCAgICB2YXIgY2JzID0gdm0uX2V2ZW50c1tldmVudF07XG5cdCAgICBpZiAoIWNicykge1xuXHQgICAgICByZXR1cm4gdm1cblx0ICAgIH1cblx0ICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG5cdCAgICAgIHZtLl9ldmVudHNbZXZlbnRdID0gbnVsbDtcblx0ICAgICAgcmV0dXJuIHZtXG5cdCAgICB9XG5cdCAgICAvLyBzcGVjaWZpYyBoYW5kbGVyXG5cdCAgICB2YXIgY2I7XG5cdCAgICB2YXIgaSA9IGNicy5sZW5ndGg7XG5cdCAgICB3aGlsZSAoaS0tKSB7XG5cdCAgICAgIGNiID0gY2JzW2ldO1xuXHQgICAgICBpZiAoY2IgPT09IGZuIHx8IGNiLmZuID09PSBmbikge1xuXHQgICAgICAgIGNicy5zcGxpY2UoaSwgMSk7XG5cdCAgICAgICAgYnJlYWtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgcmV0dXJuIHZtXG5cdCAgfTtcblx0XG5cdCAgVnVlLnByb3RvdHlwZS4kZW1pdCA9IGZ1bmN0aW9uIChldmVudCkge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblx0ICAgIHZhciBjYnMgPSB2bS5fZXZlbnRzW2V2ZW50XTtcblx0ICAgIGlmIChjYnMpIHtcblx0ICAgICAgY2JzID0gY2JzLmxlbmd0aCA+IDEgPyB0b0FycmF5KGNicykgOiBjYnM7XG5cdCAgICAgIHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMsIDEpO1xuXHQgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGNicy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0ICAgICAgICBjYnNbaV0uYXBwbHkodm0sIGFyZ3MpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICByZXR1cm4gdm1cblx0ICB9O1xuXHR9XG5cdFxuXHQvKiAgKi9cblx0XG5cdHZhciBhY3RpdmVJbnN0YW5jZSA9IG51bGw7XG5cdFxuXHRmdW5jdGlvbiBpbml0TGlmZWN5Y2xlICh2bSkge1xuXHQgIHZhciBvcHRpb25zID0gdm0uJG9wdGlvbnM7XG5cdFxuXHQgIC8vIGxvY2F0ZSBmaXJzdCBub24tYWJzdHJhY3QgcGFyZW50XG5cdCAgdmFyIHBhcmVudCA9IG9wdGlvbnMucGFyZW50O1xuXHQgIGlmIChwYXJlbnQgJiYgIW9wdGlvbnMuYWJzdHJhY3QpIHtcblx0ICAgIHdoaWxlIChwYXJlbnQuJG9wdGlvbnMuYWJzdHJhY3QgJiYgcGFyZW50LiRwYXJlbnQpIHtcblx0ICAgICAgcGFyZW50ID0gcGFyZW50LiRwYXJlbnQ7XG5cdCAgICB9XG5cdCAgICBwYXJlbnQuJGNoaWxkcmVuLnB1c2godm0pO1xuXHQgIH1cblx0XG5cdCAgdm0uJHBhcmVudCA9IHBhcmVudDtcblx0ICB2bS4kcm9vdCA9IHBhcmVudCA/IHBhcmVudC4kcm9vdCA6IHZtO1xuXHRcblx0ICB2bS4kY2hpbGRyZW4gPSBbXTtcblx0ICB2bS4kcmVmcyA9IHt9O1xuXHRcblx0ICB2bS5fd2F0Y2hlciA9IG51bGw7XG5cdCAgdm0uX2luYWN0aXZlID0gZmFsc2U7XG5cdCAgdm0uX2lzTW91bnRlZCA9IGZhbHNlO1xuXHQgIHZtLl9pc0Rlc3Ryb3llZCA9IGZhbHNlO1xuXHQgIHZtLl9pc0JlaW5nRGVzdHJveWVkID0gZmFsc2U7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGxpZmVjeWNsZU1peGluIChWdWUpIHtcblx0ICBWdWUucHJvdG90eXBlLl9tb3VudCA9IGZ1bmN0aW9uIChcblx0ICAgIGVsLFxuXHQgICAgaHlkcmF0aW5nXG5cdCAgKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXHQgICAgdm0uJGVsID0gZWw7XG5cdCAgICBpZiAoIXZtLiRvcHRpb25zLnJlbmRlcikge1xuXHQgICAgICB2bS4kb3B0aW9ucy5yZW5kZXIgPSBjcmVhdGVFbXB0eVZOb2RlO1xuXHQgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuXHQgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuXHQgICAgICAgIGlmICh2bS4kb3B0aW9ucy50ZW1wbGF0ZSAmJiB2bS4kb3B0aW9ucy50ZW1wbGF0ZS5jaGFyQXQoMCkgIT09ICcjJykge1xuXHQgICAgICAgICAgd2Fybihcblx0ICAgICAgICAgICAgJ1lvdSBhcmUgdXNpbmcgdGhlIHJ1bnRpbWUtb25seSBidWlsZCBvZiBWdWUgd2hlcmUgdGhlIHRlbXBsYXRlICcgK1xuXHQgICAgICAgICAgICAnb3B0aW9uIGlzIG5vdCBhdmFpbGFibGUuIEVpdGhlciBwcmUtY29tcGlsZSB0aGUgdGVtcGxhdGVzIGludG8gJyArXG5cdCAgICAgICAgICAgICdyZW5kZXIgZnVuY3Rpb25zLCBvciB1c2UgdGhlIGNvbXBpbGVyLWluY2x1ZGVkIGJ1aWxkLicsXG5cdCAgICAgICAgICAgIHZtXG5cdCAgICAgICAgICApO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICB3YXJuKFxuXHQgICAgICAgICAgICAnRmFpbGVkIHRvIG1vdW50IGNvbXBvbmVudDogdGVtcGxhdGUgb3IgcmVuZGVyIGZ1bmN0aW9uIG5vdCBkZWZpbmVkLicsXG5cdCAgICAgICAgICAgIHZtXG5cdCAgICAgICAgICApO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgY2FsbEhvb2sodm0sICdiZWZvcmVNb3VudCcpO1xuXHQgICAgdm0uX3dhdGNoZXIgPSBuZXcgV2F0Y2hlcih2bSwgZnVuY3Rpb24gdXBkYXRlQ29tcG9uZW50ICgpIHtcblx0ICAgICAgdm0uX3VwZGF0ZSh2bS5fcmVuZGVyKCksIGh5ZHJhdGluZyk7XG5cdCAgICB9LCBub29wKTtcblx0ICAgIGh5ZHJhdGluZyA9IGZhbHNlO1xuXHQgICAgLy8gbWFudWFsbHkgbW91bnRlZCBpbnN0YW5jZSwgY2FsbCBtb3VudGVkIG9uIHNlbGZcblx0ICAgIC8vIG1vdW50ZWQgaXMgY2FsbGVkIGZvciByZW5kZXItY3JlYXRlZCBjaGlsZCBjb21wb25lbnRzIGluIGl0cyBpbnNlcnRlZCBob29rXG5cdCAgICBpZiAodm0uJHZub2RlID09IG51bGwpIHtcblx0ICAgICAgdm0uX2lzTW91bnRlZCA9IHRydWU7XG5cdCAgICAgIGNhbGxIb29rKHZtLCAnbW91bnRlZCcpO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIHZtXG5cdCAgfTtcblx0XG5cdCAgVnVlLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKHZub2RlLCBoeWRyYXRpbmcpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cdCAgICBpZiAodm0uX2lzTW91bnRlZCkge1xuXHQgICAgICBjYWxsSG9vayh2bSwgJ2JlZm9yZVVwZGF0ZScpO1xuXHQgICAgfVxuXHQgICAgdmFyIHByZXZFbCA9IHZtLiRlbDtcblx0ICAgIHZhciBwcmV2Vm5vZGUgPSB2bS5fdm5vZGU7XG5cdCAgICB2YXIgcHJldkFjdGl2ZUluc3RhbmNlID0gYWN0aXZlSW5zdGFuY2U7XG5cdCAgICBhY3RpdmVJbnN0YW5jZSA9IHZtO1xuXHQgICAgdm0uX3Zub2RlID0gdm5vZGU7XG5cdCAgICAvLyBWdWUucHJvdG90eXBlLl9fcGF0Y2hfXyBpcyBpbmplY3RlZCBpbiBlbnRyeSBwb2ludHNcblx0ICAgIC8vIGJhc2VkIG9uIHRoZSByZW5kZXJpbmcgYmFja2VuZCB1c2VkLlxuXHQgICAgaWYgKCFwcmV2Vm5vZGUpIHtcblx0ICAgICAgLy8gaW5pdGlhbCByZW5kZXJcblx0ICAgICAgdm0uJGVsID0gdm0uX19wYXRjaF9fKFxuXHQgICAgICAgIHZtLiRlbCwgdm5vZGUsIGh5ZHJhdGluZywgZmFsc2UgLyogcmVtb3ZlT25seSAqLyxcblx0ICAgICAgICB2bS4kb3B0aW9ucy5fcGFyZW50RWxtLFxuXHQgICAgICAgIHZtLiRvcHRpb25zLl9yZWZFbG1cblx0ICAgICAgKTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIC8vIHVwZGF0ZXNcblx0ICAgICAgdm0uJGVsID0gdm0uX19wYXRjaF9fKHByZXZWbm9kZSwgdm5vZGUpO1xuXHQgICAgfVxuXHQgICAgYWN0aXZlSW5zdGFuY2UgPSBwcmV2QWN0aXZlSW5zdGFuY2U7XG5cdCAgICAvLyB1cGRhdGUgX192dWVfXyByZWZlcmVuY2Vcblx0ICAgIGlmIChwcmV2RWwpIHtcblx0ICAgICAgcHJldkVsLl9fdnVlX18gPSBudWxsO1xuXHQgICAgfVxuXHQgICAgaWYgKHZtLiRlbCkge1xuXHQgICAgICB2bS4kZWwuX192dWVfXyA9IHZtO1xuXHQgICAgfVxuXHQgICAgLy8gaWYgcGFyZW50IGlzIGFuIEhPQywgdXBkYXRlIGl0cyAkZWwgYXMgd2VsbFxuXHQgICAgaWYgKHZtLiR2bm9kZSAmJiB2bS4kcGFyZW50ICYmIHZtLiR2bm9kZSA9PT0gdm0uJHBhcmVudC5fdm5vZGUpIHtcblx0ICAgICAgdm0uJHBhcmVudC4kZWwgPSB2bS4kZWw7XG5cdCAgICB9XG5cdCAgICAvLyB1cGRhdGVkIGhvb2sgaXMgY2FsbGVkIGJ5IHRoZSBzY2hlZHVsZXIgdG8gZW5zdXJlIHRoYXQgY2hpbGRyZW4gYXJlXG5cdCAgICAvLyB1cGRhdGVkIGluIGEgcGFyZW50J3MgdXBkYXRlZCBob29rLlxuXHQgIH07XG5cdFxuXHQgIFZ1ZS5wcm90b3R5cGUuX3VwZGF0ZUZyb21QYXJlbnQgPSBmdW5jdGlvbiAoXG5cdCAgICBwcm9wc0RhdGEsXG5cdCAgICBsaXN0ZW5lcnMsXG5cdCAgICBwYXJlbnRWbm9kZSxcblx0ICAgIHJlbmRlckNoaWxkcmVuXG5cdCAgKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXHQgICAgdmFyIGhhc0NoaWxkcmVuID0gISEodm0uJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuIHx8IHJlbmRlckNoaWxkcmVuKTtcblx0ICAgIHZtLiRvcHRpb25zLl9wYXJlbnRWbm9kZSA9IHBhcmVudFZub2RlO1xuXHQgICAgdm0uJHZub2RlID0gcGFyZW50Vm5vZGU7IC8vIHVwZGF0ZSB2bSdzIHBsYWNlaG9sZGVyIG5vZGUgd2l0aG91dCByZS1yZW5kZXJcblx0ICAgIGlmICh2bS5fdm5vZGUpIHsgLy8gdXBkYXRlIGNoaWxkIHRyZWUncyBwYXJlbnRcblx0ICAgICAgdm0uX3Zub2RlLnBhcmVudCA9IHBhcmVudFZub2RlO1xuXHQgICAgfVxuXHQgICAgdm0uJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuID0gcmVuZGVyQ2hpbGRyZW47XG5cdCAgICAvLyB1cGRhdGUgcHJvcHNcblx0ICAgIGlmIChwcm9wc0RhdGEgJiYgdm0uJG9wdGlvbnMucHJvcHMpIHtcblx0ICAgICAgb2JzZXJ2ZXJTdGF0ZS5zaG91bGRDb252ZXJ0ID0gZmFsc2U7XG5cdCAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG5cdCAgICAgICAgb2JzZXJ2ZXJTdGF0ZS5pc1NldHRpbmdQcm9wcyA9IHRydWU7XG5cdCAgICAgIH1cblx0ICAgICAgdmFyIHByb3BLZXlzID0gdm0uJG9wdGlvbnMuX3Byb3BLZXlzIHx8IFtdO1xuXHQgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BLZXlzLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgdmFyIGtleSA9IHByb3BLZXlzW2ldO1xuXHQgICAgICAgIHZtW2tleV0gPSB2YWxpZGF0ZVByb3Aoa2V5LCB2bS4kb3B0aW9ucy5wcm9wcywgcHJvcHNEYXRhLCB2bSk7XG5cdCAgICAgIH1cblx0ICAgICAgb2JzZXJ2ZXJTdGF0ZS5zaG91bGRDb252ZXJ0ID0gdHJ1ZTtcblx0ICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcblx0ICAgICAgICBvYnNlcnZlclN0YXRlLmlzU2V0dGluZ1Byb3BzID0gZmFsc2U7XG5cdCAgICAgIH1cblx0ICAgICAgdm0uJG9wdGlvbnMucHJvcHNEYXRhID0gcHJvcHNEYXRhO1xuXHQgICAgfVxuXHQgICAgLy8gdXBkYXRlIGxpc3RlbmVyc1xuXHQgICAgaWYgKGxpc3RlbmVycykge1xuXHQgICAgICB2YXIgb2xkTGlzdGVuZXJzID0gdm0uJG9wdGlvbnMuX3BhcmVudExpc3RlbmVycztcblx0ICAgICAgdm0uJG9wdGlvbnMuX3BhcmVudExpc3RlbmVycyA9IGxpc3RlbmVycztcblx0ICAgICAgdXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzKHZtLCBsaXN0ZW5lcnMsIG9sZExpc3RlbmVycyk7XG5cdCAgICB9XG5cdCAgICAvLyByZXNvbHZlIHNsb3RzICsgZm9yY2UgdXBkYXRlIGlmIGhhcyBjaGlsZHJlblxuXHQgICAgaWYgKGhhc0NoaWxkcmVuKSB7XG5cdCAgICAgIHZtLiRzbG90cyA9IHJlc29sdmVTbG90cyhyZW5kZXJDaGlsZHJlbiwgcGFyZW50Vm5vZGUuY29udGV4dCk7XG5cdCAgICAgIHZtLiRmb3JjZVVwZGF0ZSgpO1xuXHQgICAgfVxuXHQgIH07XG5cdFxuXHQgIFZ1ZS5wcm90b3R5cGUuJGZvcmNlVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblx0ICAgIGlmICh2bS5fd2F0Y2hlcikge1xuXHQgICAgICB2bS5fd2F0Y2hlci51cGRhdGUoKTtcblx0ICAgIH1cblx0ICB9O1xuXHRcblx0ICBWdWUucHJvdG90eXBlLiRkZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblx0ICAgIGlmICh2bS5faXNCZWluZ0Rlc3Ryb3llZCkge1xuXHQgICAgICByZXR1cm5cblx0ICAgIH1cblx0ICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlRGVzdHJveScpO1xuXHQgICAgdm0uX2lzQmVpbmdEZXN0cm95ZWQgPSB0cnVlO1xuXHQgICAgLy8gcmVtb3ZlIHNlbGYgZnJvbSBwYXJlbnRcblx0ICAgIHZhciBwYXJlbnQgPSB2bS4kcGFyZW50O1xuXHQgICAgaWYgKHBhcmVudCAmJiAhcGFyZW50Ll9pc0JlaW5nRGVzdHJveWVkICYmICF2bS4kb3B0aW9ucy5hYnN0cmFjdCkge1xuXHQgICAgICByZW1vdmUkMShwYXJlbnQuJGNoaWxkcmVuLCB2bSk7XG5cdCAgICB9XG5cdCAgICAvLyB0ZWFyZG93biB3YXRjaGVyc1xuXHQgICAgaWYgKHZtLl93YXRjaGVyKSB7XG5cdCAgICAgIHZtLl93YXRjaGVyLnRlYXJkb3duKCk7XG5cdCAgICB9XG5cdCAgICB2YXIgaSA9IHZtLl93YXRjaGVycy5sZW5ndGg7XG5cdCAgICB3aGlsZSAoaS0tKSB7XG5cdCAgICAgIHZtLl93YXRjaGVyc1tpXS50ZWFyZG93bigpO1xuXHQgICAgfVxuXHQgICAgLy8gcmVtb3ZlIHJlZmVyZW5jZSBmcm9tIGRhdGEgb2Jcblx0ICAgIC8vIGZyb3plbiBvYmplY3QgbWF5IG5vdCBoYXZlIG9ic2VydmVyLlxuXHQgICAgaWYgKHZtLl9kYXRhLl9fb2JfXykge1xuXHQgICAgICB2bS5fZGF0YS5fX29iX18udm1Db3VudC0tO1xuXHQgICAgfVxuXHQgICAgLy8gY2FsbCB0aGUgbGFzdCBob29rLi4uXG5cdCAgICB2bS5faXNEZXN0cm95ZWQgPSB0cnVlO1xuXHQgICAgY2FsbEhvb2sodm0sICdkZXN0cm95ZWQnKTtcblx0ICAgIC8vIHR1cm4gb2ZmIGFsbCBpbnN0YW5jZSBsaXN0ZW5lcnMuXG5cdCAgICB2bS4kb2ZmKCk7XG5cdCAgICAvLyByZW1vdmUgX192dWVfXyByZWZlcmVuY2Vcblx0ICAgIGlmICh2bS4kZWwpIHtcblx0ICAgICAgdm0uJGVsLl9fdnVlX18gPSBudWxsO1xuXHQgICAgfVxuXHQgICAgLy8gaW52b2tlIGRlc3Ryb3kgaG9va3Mgb24gY3VycmVudCByZW5kZXJlZCB0cmVlXG5cdCAgICB2bS5fX3BhdGNoX18odm0uX3Zub2RlLCBudWxsKTtcblx0ICB9O1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBjYWxsSG9vayAodm0sIGhvb2spIHtcblx0ICB2YXIgaGFuZGxlcnMgPSB2bS4kb3B0aW9uc1tob29rXTtcblx0ICBpZiAoaGFuZGxlcnMpIHtcblx0ICAgIGZvciAodmFyIGkgPSAwLCBqID0gaGFuZGxlcnMubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG5cdCAgICAgIGhhbmRsZXJzW2ldLmNhbGwodm0pO1xuXHQgICAgfVxuXHQgIH1cblx0ICBpZiAodm0uX2hhc0hvb2tFdmVudCkge1xuXHQgICAgdm0uJGVtaXQoJ2hvb2s6JyArIGhvb2spO1xuXHQgIH1cblx0fVxuXHRcblx0LyogICovXG5cdFxuXHRcblx0dmFyIHF1ZXVlID0gW107XG5cdHZhciBoYXMkMSA9IHt9O1xuXHR2YXIgY2lyY3VsYXIgPSB7fTtcblx0dmFyIHdhaXRpbmcgPSBmYWxzZTtcblx0dmFyIGZsdXNoaW5nID0gZmFsc2U7XG5cdHZhciBpbmRleCA9IDA7XG5cdFxuXHQvKipcblx0ICogUmVzZXQgdGhlIHNjaGVkdWxlcidzIHN0YXRlLlxuXHQgKi9cblx0ZnVuY3Rpb24gcmVzZXRTY2hlZHVsZXJTdGF0ZSAoKSB7XG5cdCAgcXVldWUubGVuZ3RoID0gMDtcblx0ICBoYXMkMSA9IHt9O1xuXHQgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG5cdCAgICBjaXJjdWxhciA9IHt9O1xuXHQgIH1cblx0ICB3YWl0aW5nID0gZmx1c2hpbmcgPSBmYWxzZTtcblx0fVxuXHRcblx0LyoqXG5cdCAqIEZsdXNoIGJvdGggcXVldWVzIGFuZCBydW4gdGhlIHdhdGNoZXJzLlxuXHQgKi9cblx0ZnVuY3Rpb24gZmx1c2hTY2hlZHVsZXJRdWV1ZSAoKSB7XG5cdCAgZmx1c2hpbmcgPSB0cnVlO1xuXHQgIHZhciB3YXRjaGVyLCBpZCwgdm07XG5cdFxuXHQgIC8vIFNvcnQgcXVldWUgYmVmb3JlIGZsdXNoLlxuXHQgIC8vIFRoaXMgZW5zdXJlcyB0aGF0OlxuXHQgIC8vIDEuIENvbXBvbmVudHMgYXJlIHVwZGF0ZWQgZnJvbSBwYXJlbnQgdG8gY2hpbGQuIChiZWNhdXNlIHBhcmVudCBpcyBhbHdheXNcblx0ICAvLyAgICBjcmVhdGVkIGJlZm9yZSB0aGUgY2hpbGQpXG5cdCAgLy8gMi4gQSBjb21wb25lbnQncyB1c2VyIHdhdGNoZXJzIGFyZSBydW4gYmVmb3JlIGl0cyByZW5kZXIgd2F0Y2hlciAoYmVjYXVzZVxuXHQgIC8vICAgIHVzZXIgd2F0Y2hlcnMgYXJlIGNyZWF0ZWQgYmVmb3JlIHRoZSByZW5kZXIgd2F0Y2hlcilcblx0ICAvLyAzLiBJZiBhIGNvbXBvbmVudCBpcyBkZXN0cm95ZWQgZHVyaW5nIGEgcGFyZW50IGNvbXBvbmVudCdzIHdhdGNoZXIgcnVuLFxuXHQgIC8vICAgIGl0cyB3YXRjaGVycyBjYW4gYmUgc2tpcHBlZC5cblx0ICBxdWV1ZS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhLmlkIC0gYi5pZDsgfSk7XG5cdFxuXHQgIC8vIGRvIG5vdCBjYWNoZSBsZW5ndGggYmVjYXVzZSBtb3JlIHdhdGNoZXJzIG1pZ2h0IGJlIHB1c2hlZFxuXHQgIC8vIGFzIHdlIHJ1biBleGlzdGluZyB3YXRjaGVyc1xuXHQgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IHF1ZXVlLmxlbmd0aDsgaW5kZXgrKykge1xuXHQgICAgd2F0Y2hlciA9IHF1ZXVlW2luZGV4XTtcblx0ICAgIGlkID0gd2F0Y2hlci5pZDtcblx0ICAgIGhhcyQxW2lkXSA9IG51bGw7XG5cdCAgICB3YXRjaGVyLnJ1bigpO1xuXHQgICAgLy8gaW4gZGV2IGJ1aWxkLCBjaGVjayBhbmQgc3RvcCBjaXJjdWxhciB1cGRhdGVzLlxuXHQgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaGFzJDFbaWRdICE9IG51bGwpIHtcblx0ICAgICAgY2lyY3VsYXJbaWRdID0gKGNpcmN1bGFyW2lkXSB8fCAwKSArIDE7XG5cdCAgICAgIGlmIChjaXJjdWxhcltpZF0gPiBjb25maWcuX21heFVwZGF0ZUNvdW50KSB7XG5cdCAgICAgICAgd2Fybihcblx0ICAgICAgICAgICdZb3UgbWF5IGhhdmUgYW4gaW5maW5pdGUgdXBkYXRlIGxvb3AgJyArIChcblx0ICAgICAgICAgICAgd2F0Y2hlci51c2VyXG5cdCAgICAgICAgICAgICAgPyAoXCJpbiB3YXRjaGVyIHdpdGggZXhwcmVzc2lvbiBcXFwiXCIgKyAod2F0Y2hlci5leHByZXNzaW9uKSArIFwiXFxcIlwiKVxuXHQgICAgICAgICAgICAgIDogXCJpbiBhIGNvbXBvbmVudCByZW5kZXIgZnVuY3Rpb24uXCJcblx0ICAgICAgICAgICksXG5cdCAgICAgICAgICB3YXRjaGVyLnZtXG5cdCAgICAgICAgKTtcblx0ICAgICAgICBicmVha1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfVxuXHRcblx0ICAvLyBjYWxsIHVwZGF0ZWQgaG9va3Ncblx0ICBpbmRleCA9IHF1ZXVlLmxlbmd0aDtcblx0ICB3aGlsZSAoaW5kZXgtLSkge1xuXHQgICAgd2F0Y2hlciA9IHF1ZXVlW2luZGV4XTtcblx0ICAgIHZtID0gd2F0Y2hlci52bTtcblx0ICAgIGlmICh2bS5fd2F0Y2hlciA9PT0gd2F0Y2hlciAmJiB2bS5faXNNb3VudGVkKSB7XG5cdCAgICAgIGNhbGxIb29rKHZtLCAndXBkYXRlZCcpO1xuXHQgICAgfVxuXHQgIH1cblx0XG5cdCAgLy8gZGV2dG9vbCBob29rXG5cdCAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG5cdCAgaWYgKGRldnRvb2xzICYmIGNvbmZpZy5kZXZ0b29scykge1xuXHQgICAgZGV2dG9vbHMuZW1pdCgnZmx1c2gnKTtcblx0ICB9XG5cdFxuXHQgIHJlc2V0U2NoZWR1bGVyU3RhdGUoKTtcblx0fVxuXHRcblx0LyoqXG5cdCAqIFB1c2ggYSB3YXRjaGVyIGludG8gdGhlIHdhdGNoZXIgcXVldWUuXG5cdCAqIEpvYnMgd2l0aCBkdXBsaWNhdGUgSURzIHdpbGwgYmUgc2tpcHBlZCB1bmxlc3MgaXQnc1xuXHQgKiBwdXNoZWQgd2hlbiB0aGUgcXVldWUgaXMgYmVpbmcgZmx1c2hlZC5cblx0ICovXG5cdGZ1bmN0aW9uIHF1ZXVlV2F0Y2hlciAod2F0Y2hlcikge1xuXHQgIHZhciBpZCA9IHdhdGNoZXIuaWQ7XG5cdCAgaWYgKGhhcyQxW2lkXSA9PSBudWxsKSB7XG5cdCAgICBoYXMkMVtpZF0gPSB0cnVlO1xuXHQgICAgaWYgKCFmbHVzaGluZykge1xuXHQgICAgICBxdWV1ZS5wdXNoKHdhdGNoZXIpO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgLy8gaWYgYWxyZWFkeSBmbHVzaGluZywgc3BsaWNlIHRoZSB3YXRjaGVyIGJhc2VkIG9uIGl0cyBpZFxuXHQgICAgICAvLyBpZiBhbHJlYWR5IHBhc3QgaXRzIGlkLCBpdCB3aWxsIGJlIHJ1biBuZXh0IGltbWVkaWF0ZWx5LlxuXHQgICAgICB2YXIgaSA9IHF1ZXVlLmxlbmd0aCAtIDE7XG5cdCAgICAgIHdoaWxlIChpID49IDAgJiYgcXVldWVbaV0uaWQgPiB3YXRjaGVyLmlkKSB7XG5cdCAgICAgICAgaS0tO1xuXHQgICAgICB9XG5cdCAgICAgIHF1ZXVlLnNwbGljZShNYXRoLm1heChpLCBpbmRleCkgKyAxLCAwLCB3YXRjaGVyKTtcblx0ICAgIH1cblx0ICAgIC8vIHF1ZXVlIHRoZSBmbHVzaFxuXHQgICAgaWYgKCF3YWl0aW5nKSB7XG5cdCAgICAgIHdhaXRpbmcgPSB0cnVlO1xuXHQgICAgICBuZXh0VGljayhmbHVzaFNjaGVkdWxlclF1ZXVlKTtcblx0ICAgIH1cblx0ICB9XG5cdH1cblx0XG5cdC8qICAqL1xuXHRcblx0dmFyIHVpZCQyID0gMDtcblx0XG5cdC8qKlxuXHQgKiBBIHdhdGNoZXIgcGFyc2VzIGFuIGV4cHJlc3Npb24sIGNvbGxlY3RzIGRlcGVuZGVuY2llcyxcblx0ICogYW5kIGZpcmVzIGNhbGxiYWNrIHdoZW4gdGhlIGV4cHJlc3Npb24gdmFsdWUgY2hhbmdlcy5cblx0ICogVGhpcyBpcyB1c2VkIGZvciBib3RoIHRoZSAkd2F0Y2goKSBhcGkgYW5kIGRpcmVjdGl2ZXMuXG5cdCAqL1xuXHR2YXIgV2F0Y2hlciA9IGZ1bmN0aW9uIFdhdGNoZXIgKFxuXHQgIHZtLFxuXHQgIGV4cE9yRm4sXG5cdCAgY2IsXG5cdCAgb3B0aW9uc1xuXHQpIHtcblx0ICB0aGlzLnZtID0gdm07XG5cdCAgdm0uX3dhdGNoZXJzLnB1c2godGhpcyk7XG5cdCAgLy8gb3B0aW9uc1xuXHQgIGlmIChvcHRpb25zKSB7XG5cdCAgICB0aGlzLmRlZXAgPSAhIW9wdGlvbnMuZGVlcDtcblx0ICAgIHRoaXMudXNlciA9ICEhb3B0aW9ucy51c2VyO1xuXHQgICAgdGhpcy5sYXp5ID0gISFvcHRpb25zLmxhenk7XG5cdCAgICB0aGlzLnN5bmMgPSAhIW9wdGlvbnMuc3luYztcblx0ICB9IGVsc2Uge1xuXHQgICAgdGhpcy5kZWVwID0gdGhpcy51c2VyID0gdGhpcy5sYXp5ID0gdGhpcy5zeW5jID0gZmFsc2U7XG5cdCAgfVxuXHQgIHRoaXMuY2IgPSBjYjtcblx0ICB0aGlzLmlkID0gKyt1aWQkMjsgLy8gdWlkIGZvciBiYXRjaGluZ1xuXHQgIHRoaXMuYWN0aXZlID0gdHJ1ZTtcblx0ICB0aGlzLmRpcnR5ID0gdGhpcy5sYXp5OyAvLyBmb3IgbGF6eSB3YXRjaGVyc1xuXHQgIHRoaXMuZGVwcyA9IFtdO1xuXHQgIHRoaXMubmV3RGVwcyA9IFtdO1xuXHQgIHRoaXMuZGVwSWRzID0gbmV3IF9TZXQoKTtcblx0ICB0aGlzLm5ld0RlcElkcyA9IG5ldyBfU2V0KCk7XG5cdCAgdGhpcy5leHByZXNzaW9uID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJ1xuXHQgICAgPyBleHBPckZuLnRvU3RyaW5nKClcblx0ICAgIDogJyc7XG5cdCAgLy8gcGFyc2UgZXhwcmVzc2lvbiBmb3IgZ2V0dGVyXG5cdCAgaWYgKHR5cGVvZiBleHBPckZuID09PSAnZnVuY3Rpb24nKSB7XG5cdCAgICB0aGlzLmdldHRlciA9IGV4cE9yRm47XG5cdCAgfSBlbHNlIHtcblx0ICAgIHRoaXMuZ2V0dGVyID0gcGFyc2VQYXRoKGV4cE9yRm4pO1xuXHQgICAgaWYgKCF0aGlzLmdldHRlcikge1xuXHQgICAgICB0aGlzLmdldHRlciA9IGZ1bmN0aW9uICgpIHt9O1xuXHQgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG5cdCAgICAgICAgXCJGYWlsZWQgd2F0Y2hpbmcgcGF0aDogXFxcIlwiICsgZXhwT3JGbiArIFwiXFxcIiBcIiArXG5cdCAgICAgICAgJ1dhdGNoZXIgb25seSBhY2NlcHRzIHNpbXBsZSBkb3QtZGVsaW1pdGVkIHBhdGhzLiAnICtcblx0ICAgICAgICAnRm9yIGZ1bGwgY29udHJvbCwgdXNlIGEgZnVuY3Rpb24gaW5zdGVhZC4nLFxuXHQgICAgICAgIHZtXG5cdCAgICAgICk7XG5cdCAgICB9XG5cdCAgfVxuXHQgIHRoaXMudmFsdWUgPSB0aGlzLmxhenlcblx0ICAgID8gdW5kZWZpbmVkXG5cdCAgICA6IHRoaXMuZ2V0KCk7XG5cdH07XG5cdFxuXHQvKipcblx0ICogRXZhbHVhdGUgdGhlIGdldHRlciwgYW5kIHJlLWNvbGxlY3QgZGVwZW5kZW5jaWVzLlxuXHQgKi9cblx0V2F0Y2hlci5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gZ2V0ICgpIHtcblx0ICBwdXNoVGFyZ2V0KHRoaXMpO1xuXHQgIHZhciB2YWx1ZSA9IHRoaXMuZ2V0dGVyLmNhbGwodGhpcy52bSwgdGhpcy52bSk7XG5cdCAgLy8gXCJ0b3VjaFwiIGV2ZXJ5IHByb3BlcnR5IHNvIHRoZXkgYXJlIGFsbCB0cmFja2VkIGFzXG5cdCAgLy8gZGVwZW5kZW5jaWVzIGZvciBkZWVwIHdhdGNoaW5nXG5cdCAgaWYgKHRoaXMuZGVlcCkge1xuXHQgICAgdHJhdmVyc2UodmFsdWUpO1xuXHQgIH1cblx0ICBwb3BUYXJnZXQoKTtcblx0ICB0aGlzLmNsZWFudXBEZXBzKCk7XG5cdCAgcmV0dXJuIHZhbHVlXG5cdH07XG5cdFxuXHQvKipcblx0ICogQWRkIGEgZGVwZW5kZW5jeSB0byB0aGlzIGRpcmVjdGl2ZS5cblx0ICovXG5cdFdhdGNoZXIucHJvdG90eXBlLmFkZERlcCA9IGZ1bmN0aW9uIGFkZERlcCAoZGVwKSB7XG5cdCAgdmFyIGlkID0gZGVwLmlkO1xuXHQgIGlmICghdGhpcy5uZXdEZXBJZHMuaGFzKGlkKSkge1xuXHQgICAgdGhpcy5uZXdEZXBJZHMuYWRkKGlkKTtcblx0ICAgIHRoaXMubmV3RGVwcy5wdXNoKGRlcCk7XG5cdCAgICBpZiAoIXRoaXMuZGVwSWRzLmhhcyhpZCkpIHtcblx0ICAgICAgZGVwLmFkZFN1Yih0aGlzKTtcblx0ICAgIH1cblx0ICB9XG5cdH07XG5cdFxuXHQvKipcblx0ICogQ2xlYW4gdXAgZm9yIGRlcGVuZGVuY3kgY29sbGVjdGlvbi5cblx0ICovXG5cdFdhdGNoZXIucHJvdG90eXBlLmNsZWFudXBEZXBzID0gZnVuY3Rpb24gY2xlYW51cERlcHMgKCkge1xuXHQgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cdFxuXHQgIHZhciBpID0gdGhpcy5kZXBzLmxlbmd0aDtcblx0ICB3aGlsZSAoaS0tKSB7XG5cdCAgICB2YXIgZGVwID0gdGhpcyQxLmRlcHNbaV07XG5cdCAgICBpZiAoIXRoaXMkMS5uZXdEZXBJZHMuaGFzKGRlcC5pZCkpIHtcblx0ICAgICAgZGVwLnJlbW92ZVN1Yih0aGlzJDEpO1xuXHQgICAgfVxuXHQgIH1cblx0ICB2YXIgdG1wID0gdGhpcy5kZXBJZHM7XG5cdCAgdGhpcy5kZXBJZHMgPSB0aGlzLm5ld0RlcElkcztcblx0ICB0aGlzLm5ld0RlcElkcyA9IHRtcDtcblx0ICB0aGlzLm5ld0RlcElkcy5jbGVhcigpO1xuXHQgIHRtcCA9IHRoaXMuZGVwcztcblx0ICB0aGlzLmRlcHMgPSB0aGlzLm5ld0RlcHM7XG5cdCAgdGhpcy5uZXdEZXBzID0gdG1wO1xuXHQgIHRoaXMubmV3RGVwcy5sZW5ndGggPSAwO1xuXHR9O1xuXHRcblx0LyoqXG5cdCAqIFN1YnNjcmliZXIgaW50ZXJmYWNlLlxuXHQgKiBXaWxsIGJlIGNhbGxlZCB3aGVuIGEgZGVwZW5kZW5jeSBjaGFuZ2VzLlxuXHQgKi9cblx0V2F0Y2hlci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlICgpIHtcblx0ICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuXHQgIGlmICh0aGlzLmxhenkpIHtcblx0ICAgIHRoaXMuZGlydHkgPSB0cnVlO1xuXHQgIH0gZWxzZSBpZiAodGhpcy5zeW5jKSB7XG5cdCAgICB0aGlzLnJ1bigpO1xuXHQgIH0gZWxzZSB7XG5cdCAgICBxdWV1ZVdhdGNoZXIodGhpcyk7XG5cdCAgfVxuXHR9O1xuXHRcblx0LyoqXG5cdCAqIFNjaGVkdWxlciBqb2IgaW50ZXJmYWNlLlxuXHQgKiBXaWxsIGJlIGNhbGxlZCBieSB0aGUgc2NoZWR1bGVyLlxuXHQgKi9cblx0V2F0Y2hlci5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gcnVuICgpIHtcblx0ICBpZiAodGhpcy5hY3RpdmUpIHtcblx0ICAgIHZhciB2YWx1ZSA9IHRoaXMuZ2V0KCk7XG5cdCAgICBpZiAoXG5cdCAgICAgIHZhbHVlICE9PSB0aGlzLnZhbHVlIHx8XG5cdCAgICAgIC8vIERlZXAgd2F0Y2hlcnMgYW5kIHdhdGNoZXJzIG9uIE9iamVjdC9BcnJheXMgc2hvdWxkIGZpcmUgZXZlblxuXHQgICAgICAvLyB3aGVuIHRoZSB2YWx1ZSBpcyB0aGUgc2FtZSwgYmVjYXVzZSB0aGUgdmFsdWUgbWF5XG5cdCAgICAgIC8vIGhhdmUgbXV0YXRlZC5cblx0ICAgICAgaXNPYmplY3QodmFsdWUpIHx8XG5cdCAgICAgIHRoaXMuZGVlcFxuXHQgICAgKSB7XG5cdCAgICAgIC8vIHNldCBuZXcgdmFsdWVcblx0ICAgICAgdmFyIG9sZFZhbHVlID0gdGhpcy52YWx1ZTtcblx0ICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuXHQgICAgICBpZiAodGhpcy51c2VyKSB7XG5cdCAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgIHRoaXMuY2IuY2FsbCh0aGlzLnZtLCB2YWx1ZSwgb2xkVmFsdWUpO1xuXHQgICAgICAgIH0gY2F0Y2ggKGUpIHtcblx0ICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG5cdCAgICAgICAgICBpZiAoY29uZmlnLmVycm9ySGFuZGxlcikge1xuXHQgICAgICAgICAgICBjb25maWcuZXJyb3JIYW5kbGVyLmNhbGwobnVsbCwgZSwgdGhpcy52bSk7XG5cdCAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG5cdCAgICAgICAgICAgICAgKFwiRXJyb3IgaW4gd2F0Y2hlciBcXFwiXCIgKyAodGhpcy5leHByZXNzaW9uKSArIFwiXFxcIlwiKSxcblx0ICAgICAgICAgICAgICB0aGlzLnZtXG5cdCAgICAgICAgICAgICk7XG5cdCAgICAgICAgICAgIHRocm93IGVcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgdGhpcy5jYi5jYWxsKHRoaXMudm0sIHZhbHVlLCBvbGRWYWx1ZSk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9XG5cdH07XG5cdFxuXHQvKipcblx0ICogRXZhbHVhdGUgdGhlIHZhbHVlIG9mIHRoZSB3YXRjaGVyLlxuXHQgKiBUaGlzIG9ubHkgZ2V0cyBjYWxsZWQgZm9yIGxhenkgd2F0Y2hlcnMuXG5cdCAqL1xuXHRXYXRjaGVyLnByb3RvdHlwZS5ldmFsdWF0ZSA9IGZ1bmN0aW9uIGV2YWx1YXRlICgpIHtcblx0ICB0aGlzLnZhbHVlID0gdGhpcy5nZXQoKTtcblx0ICB0aGlzLmRpcnR5ID0gZmFsc2U7XG5cdH07XG5cdFxuXHQvKipcblx0ICogRGVwZW5kIG9uIGFsbCBkZXBzIGNvbGxlY3RlZCBieSB0aGlzIHdhdGNoZXIuXG5cdCAqL1xuXHRXYXRjaGVyLnByb3RvdHlwZS5kZXBlbmQgPSBmdW5jdGlvbiBkZXBlbmQgKCkge1xuXHQgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cdFxuXHQgIHZhciBpID0gdGhpcy5kZXBzLmxlbmd0aDtcblx0ICB3aGlsZSAoaS0tKSB7XG5cdCAgICB0aGlzJDEuZGVwc1tpXS5kZXBlbmQoKTtcblx0ICB9XG5cdH07XG5cdFxuXHQvKipcblx0ICogUmVtb3ZlIHNlbGYgZnJvbSBhbGwgZGVwZW5kZW5jaWVzJyBzdWJzY3JpYmVyIGxpc3QuXG5cdCAqL1xuXHRXYXRjaGVyLnByb3RvdHlwZS50ZWFyZG93biA9IGZ1bmN0aW9uIHRlYXJkb3duICgpIHtcblx0ICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXHRcblx0ICBpZiAodGhpcy5hY3RpdmUpIHtcblx0ICAgIC8vIHJlbW92ZSBzZWxmIGZyb20gdm0ncyB3YXRjaGVyIGxpc3Rcblx0ICAgIC8vIHRoaXMgaXMgYSBzb21ld2hhdCBleHBlbnNpdmUgb3BlcmF0aW9uIHNvIHdlIHNraXAgaXRcblx0ICAgIC8vIGlmIHRoZSB2bSBpcyBiZWluZyBkZXN0cm95ZWQuXG5cdCAgICBpZiAoIXRoaXMudm0uX2lzQmVpbmdEZXN0cm95ZWQpIHtcblx0ICAgICAgcmVtb3ZlJDEodGhpcy52bS5fd2F0Y2hlcnMsIHRoaXMpO1xuXHQgICAgfVxuXHQgICAgdmFyIGkgPSB0aGlzLmRlcHMubGVuZ3RoO1xuXHQgICAgd2hpbGUgKGktLSkge1xuXHQgICAgICB0aGlzJDEuZGVwc1tpXS5yZW1vdmVTdWIodGhpcyQxKTtcblx0ICAgIH1cblx0ICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XG5cdCAgfVxuXHR9O1xuXHRcblx0LyoqXG5cdCAqIFJlY3Vyc2l2ZWx5IHRyYXZlcnNlIGFuIG9iamVjdCB0byBldm9rZSBhbGwgY29udmVydGVkXG5cdCAqIGdldHRlcnMsIHNvIHRoYXQgZXZlcnkgbmVzdGVkIHByb3BlcnR5IGluc2lkZSB0aGUgb2JqZWN0XG5cdCAqIGlzIGNvbGxlY3RlZCBhcyBhIFwiZGVlcFwiIGRlcGVuZGVuY3kuXG5cdCAqL1xuXHR2YXIgc2Vlbk9iamVjdHMgPSBuZXcgX1NldCgpO1xuXHRmdW5jdGlvbiB0cmF2ZXJzZSAodmFsKSB7XG5cdCAgc2Vlbk9iamVjdHMuY2xlYXIoKTtcblx0ICBfdHJhdmVyc2UodmFsLCBzZWVuT2JqZWN0cyk7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIF90cmF2ZXJzZSAodmFsLCBzZWVuKSB7XG5cdCAgdmFyIGksIGtleXM7XG5cdCAgdmFyIGlzQSA9IEFycmF5LmlzQXJyYXkodmFsKTtcblx0ICBpZiAoKCFpc0EgJiYgIWlzT2JqZWN0KHZhbCkpIHx8ICFPYmplY3QuaXNFeHRlbnNpYmxlKHZhbCkpIHtcblx0ICAgIHJldHVyblxuXHQgIH1cblx0ICBpZiAodmFsLl9fb2JfXykge1xuXHQgICAgdmFyIGRlcElkID0gdmFsLl9fb2JfXy5kZXAuaWQ7XG5cdCAgICBpZiAoc2Vlbi5oYXMoZGVwSWQpKSB7XG5cdCAgICAgIHJldHVyblxuXHQgICAgfVxuXHQgICAgc2Vlbi5hZGQoZGVwSWQpO1xuXHQgIH1cblx0ICBpZiAoaXNBKSB7XG5cdCAgICBpID0gdmFsLmxlbmd0aDtcblx0ICAgIHdoaWxlIChpLS0pIHsgX3RyYXZlcnNlKHZhbFtpXSwgc2Vlbik7IH1cblx0ICB9IGVsc2Uge1xuXHQgICAga2V5cyA9IE9iamVjdC5rZXlzKHZhbCk7XG5cdCAgICBpID0ga2V5cy5sZW5ndGg7XG5cdCAgICB3aGlsZSAoaS0tKSB7IF90cmF2ZXJzZSh2YWxba2V5c1tpXV0sIHNlZW4pOyB9XG5cdCAgfVxuXHR9XG5cdFxuXHQvKiAgKi9cblx0XG5cdGZ1bmN0aW9uIGluaXRTdGF0ZSAodm0pIHtcblx0ICB2bS5fd2F0Y2hlcnMgPSBbXTtcblx0ICB2YXIgb3B0cyA9IHZtLiRvcHRpb25zO1xuXHQgIGlmIChvcHRzLnByb3BzKSB7IGluaXRQcm9wcyh2bSwgb3B0cy5wcm9wcyk7IH1cblx0ICBpZiAob3B0cy5tZXRob2RzKSB7IGluaXRNZXRob2RzKHZtLCBvcHRzLm1ldGhvZHMpOyB9XG5cdCAgaWYgKG9wdHMuZGF0YSkge1xuXHQgICAgaW5pdERhdGEodm0pO1xuXHQgIH0gZWxzZSB7XG5cdCAgICBvYnNlcnZlKHZtLl9kYXRhID0ge30sIHRydWUgLyogYXNSb290RGF0YSAqLyk7XG5cdCAgfVxuXHQgIGlmIChvcHRzLmNvbXB1dGVkKSB7IGluaXRDb21wdXRlZCh2bSwgb3B0cy5jb21wdXRlZCk7IH1cblx0ICBpZiAob3B0cy53YXRjaCkgeyBpbml0V2F0Y2godm0sIG9wdHMud2F0Y2gpOyB9XG5cdH1cblx0XG5cdHZhciBpc1Jlc2VydmVkUHJvcCA9IHsga2V5OiAxLCByZWY6IDEsIHNsb3Q6IDEgfTtcblx0XG5cdGZ1bmN0aW9uIGluaXRQcm9wcyAodm0sIHByb3BzKSB7XG5cdCAgdmFyIHByb3BzRGF0YSA9IHZtLiRvcHRpb25zLnByb3BzRGF0YSB8fCB7fTtcblx0ICB2YXIga2V5cyA9IHZtLiRvcHRpb25zLl9wcm9wS2V5cyA9IE9iamVjdC5rZXlzKHByb3BzKTtcblx0ICB2YXIgaXNSb290ID0gIXZtLiRwYXJlbnQ7XG5cdCAgLy8gcm9vdCBpbnN0YW5jZSBwcm9wcyBzaG91bGQgYmUgY29udmVydGVkXG5cdCAgb2JzZXJ2ZXJTdGF0ZS5zaG91bGRDb252ZXJ0ID0gaXNSb290O1xuXHQgIHZhciBsb29wID0gZnVuY3Rpb24gKCBpICkge1xuXHQgICAgdmFyIGtleSA9IGtleXNbaV07XG5cdCAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuXHQgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcblx0ICAgICAgaWYgKGlzUmVzZXJ2ZWRQcm9wW2tleV0pIHtcblx0ICAgICAgICB3YXJuKFxuXHQgICAgICAgICAgKFwiXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIGEgcmVzZXJ2ZWQgYXR0cmlidXRlIGFuZCBjYW5ub3QgYmUgdXNlZCBhcyBjb21wb25lbnQgcHJvcC5cIiksXG5cdCAgICAgICAgICB2bVxuXHQgICAgICAgICk7XG5cdCAgICAgIH1cblx0ICAgICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sIGtleSwgdmFsaWRhdGVQcm9wKGtleSwgcHJvcHMsIHByb3BzRGF0YSwgdm0pLCBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgaWYgKHZtLiRwYXJlbnQgJiYgIW9ic2VydmVyU3RhdGUuaXNTZXR0aW5nUHJvcHMpIHtcblx0ICAgICAgICAgIHdhcm4oXG5cdCAgICAgICAgICAgIFwiQXZvaWQgbXV0YXRpbmcgYSBwcm9wIGRpcmVjdGx5IHNpbmNlIHRoZSB2YWx1ZSB3aWxsIGJlIFwiICtcblx0ICAgICAgICAgICAgXCJvdmVyd3JpdHRlbiB3aGVuZXZlciB0aGUgcGFyZW50IGNvbXBvbmVudCByZS1yZW5kZXJzLiBcIiArXG5cdCAgICAgICAgICAgIFwiSW5zdGVhZCwgdXNlIGEgZGF0YSBvciBjb21wdXRlZCBwcm9wZXJ0eSBiYXNlZCBvbiB0aGUgcHJvcCdzIFwiICtcblx0ICAgICAgICAgICAgXCJ2YWx1ZS4gUHJvcCBiZWluZyBtdXRhdGVkOiBcXFwiXCIgKyBrZXkgKyBcIlxcXCJcIixcblx0ICAgICAgICAgICAgdm1cblx0ICAgICAgICAgICk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9KTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCBrZXksIHZhbGlkYXRlUHJvcChrZXksIHByb3BzLCBwcm9wc0RhdGEsIHZtKSk7XG5cdCAgICB9XG5cdCAgfTtcblx0XG5cdCAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSBsb29wKCBpICk7XG5cdCAgb2JzZXJ2ZXJTdGF0ZS5zaG91bGRDb252ZXJ0ID0gdHJ1ZTtcblx0fVxuXHRcblx0ZnVuY3Rpb24gaW5pdERhdGEgKHZtKSB7XG5cdCAgdmFyIGRhdGEgPSB2bS4kb3B0aW9ucy5kYXRhO1xuXHQgIGRhdGEgPSB2bS5fZGF0YSA9IHR5cGVvZiBkYXRhID09PSAnZnVuY3Rpb24nXG5cdCAgICA/IGRhdGEuY2FsbCh2bSlcblx0ICAgIDogZGF0YSB8fCB7fTtcblx0ICBpZiAoIWlzUGxhaW5PYmplY3QoZGF0YSkpIHtcblx0ICAgIGRhdGEgPSB7fTtcblx0ICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2Fybihcblx0ICAgICAgJ2RhdGEgZnVuY3Rpb25zIHNob3VsZCByZXR1cm4gYW4gb2JqZWN0OlxcbicgK1xuXHQgICAgICAnaHR0cHM6Ly92dWVqcy5vcmcvdjIvZ3VpZGUvY29tcG9uZW50cy5odG1sI2RhdGEtTXVzdC1CZS1hLUZ1bmN0aW9uJyxcblx0ICAgICAgdm1cblx0ICAgICk7XG5cdCAgfVxuXHQgIC8vIHByb3h5IGRhdGEgb24gaW5zdGFuY2Vcblx0ICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGRhdGEpO1xuXHQgIHZhciBwcm9wcyA9IHZtLiRvcHRpb25zLnByb3BzO1xuXHQgIHZhciBpID0ga2V5cy5sZW5ndGg7XG5cdCAgd2hpbGUgKGktLSkge1xuXHQgICAgaWYgKHByb3BzICYmIGhhc093bihwcm9wcywga2V5c1tpXSkpIHtcblx0ICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuXHQgICAgICAgIFwiVGhlIGRhdGEgcHJvcGVydHkgXFxcIlwiICsgKGtleXNbaV0pICsgXCJcXFwiIGlzIGFscmVhZHkgZGVjbGFyZWQgYXMgYSBwcm9wLiBcIiArXG5cdCAgICAgICAgXCJVc2UgcHJvcCBkZWZhdWx0IHZhbHVlIGluc3RlYWQuXCIsXG5cdCAgICAgICAgdm1cblx0ICAgICAgKTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHByb3h5KHZtLCBrZXlzW2ldKTtcblx0ICAgIH1cblx0ICB9XG5cdCAgLy8gb2JzZXJ2ZSBkYXRhXG5cdCAgb2JzZXJ2ZShkYXRhLCB0cnVlIC8qIGFzUm9vdERhdGEgKi8pO1xuXHR9XG5cdFxuXHR2YXIgY29tcHV0ZWRTaGFyZWREZWZpbml0aW9uID0ge1xuXHQgIGVudW1lcmFibGU6IHRydWUsXG5cdCAgY29uZmlndXJhYmxlOiB0cnVlLFxuXHQgIGdldDogbm9vcCxcblx0ICBzZXQ6IG5vb3Bcblx0fTtcblx0XG5cdGZ1bmN0aW9uIGluaXRDb21wdXRlZCAodm0sIGNvbXB1dGVkKSB7XG5cdCAgZm9yICh2YXIga2V5IGluIGNvbXB1dGVkKSB7XG5cdCAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cblx0ICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGtleSBpbiB2bSkge1xuXHQgICAgICB3YXJuKFxuXHQgICAgICAgIFwiZXhpc3RpbmcgaW5zdGFuY2UgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIHdpbGwgYmUgXCIgK1xuXHQgICAgICAgIFwib3ZlcndyaXR0ZW4gYnkgYSBjb21wdXRlZCBwcm9wZXJ0eSB3aXRoIHRoZSBzYW1lIG5hbWUuXCIsXG5cdCAgICAgICAgdm1cblx0ICAgICAgKTtcblx0ICAgIH1cblx0ICAgIHZhciB1c2VyRGVmID0gY29tcHV0ZWRba2V5XTtcblx0ICAgIGlmICh0eXBlb2YgdXNlckRlZiA9PT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgICBjb21wdXRlZFNoYXJlZERlZmluaXRpb24uZ2V0ID0gbWFrZUNvbXB1dGVkR2V0dGVyKHVzZXJEZWYsIHZtKTtcblx0ICAgICAgY29tcHV0ZWRTaGFyZWREZWZpbml0aW9uLnNldCA9IG5vb3A7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICBjb21wdXRlZFNoYXJlZERlZmluaXRpb24uZ2V0ID0gdXNlckRlZi5nZXRcblx0ICAgICAgICA/IHVzZXJEZWYuY2FjaGUgIT09IGZhbHNlXG5cdCAgICAgICAgICA/IG1ha2VDb21wdXRlZEdldHRlcih1c2VyRGVmLmdldCwgdm0pXG5cdCAgICAgICAgICA6IGJpbmQkMSh1c2VyRGVmLmdldCwgdm0pXG5cdCAgICAgICAgOiBub29wO1xuXHQgICAgICBjb21wdXRlZFNoYXJlZERlZmluaXRpb24uc2V0ID0gdXNlckRlZi5zZXRcblx0ICAgICAgICA/IGJpbmQkMSh1c2VyRGVmLnNldCwgdm0pXG5cdCAgICAgICAgOiBub29wO1xuXHQgICAgfVxuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHZtLCBrZXksIGNvbXB1dGVkU2hhcmVkRGVmaW5pdGlvbik7XG5cdCAgfVxuXHR9XG5cdFxuXHRmdW5jdGlvbiBtYWtlQ29tcHV0ZWRHZXR0ZXIgKGdldHRlciwgb3duZXIpIHtcblx0ICB2YXIgd2F0Y2hlciA9IG5ldyBXYXRjaGVyKG93bmVyLCBnZXR0ZXIsIG5vb3AsIHtcblx0ICAgIGxhenk6IHRydWVcblx0ICB9KTtcblx0ICByZXR1cm4gZnVuY3Rpb24gY29tcHV0ZWRHZXR0ZXIgKCkge1xuXHQgICAgaWYgKHdhdGNoZXIuZGlydHkpIHtcblx0ICAgICAgd2F0Y2hlci5ldmFsdWF0ZSgpO1xuXHQgICAgfVxuXHQgICAgaWYgKERlcC50YXJnZXQpIHtcblx0ICAgICAgd2F0Y2hlci5kZXBlbmQoKTtcblx0ICAgIH1cblx0ICAgIHJldHVybiB3YXRjaGVyLnZhbHVlXG5cdCAgfVxuXHR9XG5cdFxuXHRmdW5jdGlvbiBpbml0TWV0aG9kcyAodm0sIG1ldGhvZHMpIHtcblx0ICBmb3IgKHZhciBrZXkgaW4gbWV0aG9kcykge1xuXHQgICAgdm1ba2V5XSA9IG1ldGhvZHNba2V5XSA9PSBudWxsID8gbm9vcCA6IGJpbmQkMShtZXRob2RzW2tleV0sIHZtKTtcblx0ICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIG1ldGhvZHNba2V5XSA9PSBudWxsKSB7XG5cdCAgICAgIHdhcm4oXG5cdCAgICAgICAgXCJtZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGhhcyBhbiB1bmRlZmluZWQgdmFsdWUgaW4gdGhlIGNvbXBvbmVudCBkZWZpbml0aW9uLiBcIiArXG5cdCAgICAgICAgXCJEaWQgeW91IHJlZmVyZW5jZSB0aGUgZnVuY3Rpb24gY29ycmVjdGx5P1wiLFxuXHQgICAgICAgIHZtXG5cdCAgICAgICk7XG5cdCAgICB9XG5cdCAgfVxuXHR9XG5cdFxuXHRmdW5jdGlvbiBpbml0V2F0Y2ggKHZtLCB3YXRjaCkge1xuXHQgIGZvciAodmFyIGtleSBpbiB3YXRjaCkge1xuXHQgICAgdmFyIGhhbmRsZXIgPSB3YXRjaFtrZXldO1xuXHQgICAgaWYgKEFycmF5LmlzQXJyYXkoaGFuZGxlcikpIHtcblx0ICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBoYW5kbGVyLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgY3JlYXRlV2F0Y2hlcih2bSwga2V5LCBoYW5kbGVyW2ldKTtcblx0ICAgICAgfVxuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgY3JlYXRlV2F0Y2hlcih2bSwga2V5LCBoYW5kbGVyKTtcblx0ICAgIH1cblx0ICB9XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGNyZWF0ZVdhdGNoZXIgKHZtLCBrZXksIGhhbmRsZXIpIHtcblx0ICB2YXIgb3B0aW9ucztcblx0ICBpZiAoaXNQbGFpbk9iamVjdChoYW5kbGVyKSkge1xuXHQgICAgb3B0aW9ucyA9IGhhbmRsZXI7XG5cdCAgICBoYW5kbGVyID0gaGFuZGxlci5oYW5kbGVyO1xuXHQgIH1cblx0ICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdzdHJpbmcnKSB7XG5cdCAgICBoYW5kbGVyID0gdm1baGFuZGxlcl07XG5cdCAgfVxuXHQgIHZtLiR3YXRjaChrZXksIGhhbmRsZXIsIG9wdGlvbnMpO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBzdGF0ZU1peGluIChWdWUpIHtcblx0ICAvLyBmbG93IHNvbWVob3cgaGFzIHByb2JsZW1zIHdpdGggZGlyZWN0bHkgZGVjbGFyZWQgZGVmaW5pdGlvbiBvYmplY3Rcblx0ICAvLyB3aGVuIHVzaW5nIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSwgc28gd2UgaGF2ZSB0byBwcm9jZWR1cmFsbHkgYnVpbGQgdXBcblx0ICAvLyB0aGUgb2JqZWN0IGhlcmUuXG5cdCAgdmFyIGRhdGFEZWYgPSB7fTtcblx0ICBkYXRhRGVmLmdldCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIHJldHVybiB0aGlzLl9kYXRhXG5cdCAgfTtcblx0ICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuXHQgICAgZGF0YURlZi5zZXQgPSBmdW5jdGlvbiAobmV3RGF0YSkge1xuXHQgICAgICB3YXJuKFxuXHQgICAgICAgICdBdm9pZCByZXBsYWNpbmcgaW5zdGFuY2Ugcm9vdCAkZGF0YS4gJyArXG5cdCAgICAgICAgJ1VzZSBuZXN0ZWQgZGF0YSBwcm9wZXJ0aWVzIGluc3RlYWQuJyxcblx0ICAgICAgICB0aGlzXG5cdCAgICAgICk7XG5cdCAgICB9O1xuXHQgIH1cblx0ICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRkYXRhJywgZGF0YURlZik7XG5cdFxuXHQgIFZ1ZS5wcm90b3R5cGUuJHNldCA9IHNldCQxO1xuXHQgIFZ1ZS5wcm90b3R5cGUuJGRlbGV0ZSA9IGRlbDtcblx0XG5cdCAgVnVlLnByb3RvdHlwZS4kd2F0Y2ggPSBmdW5jdGlvbiAoXG5cdCAgICBleHBPckZuLFxuXHQgICAgY2IsXG5cdCAgICBvcHRpb25zXG5cdCAgKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXHQgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cdCAgICBvcHRpb25zLnVzZXIgPSB0cnVlO1xuXHQgICAgdmFyIHdhdGNoZXIgPSBuZXcgV2F0Y2hlcih2bSwgZXhwT3JGbiwgY2IsIG9wdGlvbnMpO1xuXHQgICAgaWYgKG9wdGlvbnMuaW1tZWRpYXRlKSB7XG5cdCAgICAgIGNiLmNhbGwodm0sIHdhdGNoZXIudmFsdWUpO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIGZ1bmN0aW9uIHVud2F0Y2hGbiAoKSB7XG5cdCAgICAgIHdhdGNoZXIudGVhcmRvd24oKTtcblx0ICAgIH1cblx0ICB9O1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBwcm94eSAodm0sIGtleSkge1xuXHQgIGlmICghaXNSZXNlcnZlZChrZXkpKSB7XG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodm0sIGtleSwge1xuXHQgICAgICBjb25maWd1cmFibGU6IHRydWUsXG5cdCAgICAgIGVudW1lcmFibGU6IHRydWUsXG5cdCAgICAgIGdldDogZnVuY3Rpb24gcHJveHlHZXR0ZXIgKCkge1xuXHQgICAgICAgIHJldHVybiB2bS5fZGF0YVtrZXldXG5cdCAgICAgIH0sXG5cdCAgICAgIHNldDogZnVuY3Rpb24gcHJveHlTZXR0ZXIgKHZhbCkge1xuXHQgICAgICAgIHZtLl9kYXRhW2tleV0gPSB2YWw7XG5cdCAgICAgIH1cblx0ICAgIH0pO1xuXHQgIH1cblx0fVxuXHRcblx0LyogICovXG5cdFxuXHR2YXIgdWlkID0gMDtcblx0XG5cdGZ1bmN0aW9uIGluaXRNaXhpbiAoVnVlKSB7XG5cdCAgVnVlLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXHQgICAgLy8gYSB1aWRcblx0ICAgIHZtLl91aWQgPSB1aWQrKztcblx0ICAgIC8vIGEgZmxhZyB0byBhdm9pZCB0aGlzIGJlaW5nIG9ic2VydmVkXG5cdCAgICB2bS5faXNWdWUgPSB0cnVlO1xuXHQgICAgLy8gbWVyZ2Ugb3B0aW9uc1xuXHQgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5faXNDb21wb25lbnQpIHtcblx0ICAgICAgLy8gb3B0aW1pemUgaW50ZXJuYWwgY29tcG9uZW50IGluc3RhbnRpYXRpb25cblx0ICAgICAgLy8gc2luY2UgZHluYW1pYyBvcHRpb25zIG1lcmdpbmcgaXMgcHJldHR5IHNsb3csIGFuZCBub25lIG9mIHRoZVxuXHQgICAgICAvLyBpbnRlcm5hbCBjb21wb25lbnQgb3B0aW9ucyBuZWVkcyBzcGVjaWFsIHRyZWF0bWVudC5cblx0ICAgICAgaW5pdEludGVybmFsQ29tcG9uZW50KHZtLCBvcHRpb25zKTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHZtLiRvcHRpb25zID0gbWVyZ2VPcHRpb25zKFxuXHQgICAgICAgIHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnModm0uY29uc3RydWN0b3IpLFxuXHQgICAgICAgIG9wdGlvbnMgfHwge30sXG5cdCAgICAgICAgdm1cblx0ICAgICAgKTtcblx0ICAgIH1cblx0ICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG5cdCAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuXHQgICAgICBpbml0UHJveHkodm0pO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgdm0uX3JlbmRlclByb3h5ID0gdm07XG5cdCAgICB9XG5cdCAgICAvLyBleHBvc2UgcmVhbCBzZWxmXG5cdCAgICB2bS5fc2VsZiA9IHZtO1xuXHQgICAgaW5pdExpZmVjeWNsZSh2bSk7XG5cdCAgICBpbml0RXZlbnRzKHZtKTtcblx0ICAgIGluaXRSZW5kZXIodm0pO1xuXHQgICAgY2FsbEhvb2sodm0sICdiZWZvcmVDcmVhdGUnKTtcblx0ICAgIGluaXRTdGF0ZSh2bSk7XG5cdCAgICBjYWxsSG9vayh2bSwgJ2NyZWF0ZWQnKTtcblx0ICAgIGlmICh2bS4kb3B0aW9ucy5lbCkge1xuXHQgICAgICB2bS4kbW91bnQodm0uJG9wdGlvbnMuZWwpO1xuXHQgICAgfVxuXHQgIH07XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGluaXRJbnRlcm5hbENvbXBvbmVudCAodm0sIG9wdGlvbnMpIHtcblx0ICB2YXIgb3B0cyA9IHZtLiRvcHRpb25zID0gT2JqZWN0LmNyZWF0ZSh2bS5jb25zdHJ1Y3Rvci5vcHRpb25zKTtcblx0ICAvLyBkb2luZyB0aGlzIGJlY2F1c2UgaXQncyBmYXN0ZXIgdGhhbiBkeW5hbWljIGVudW1lcmF0aW9uLlxuXHQgIG9wdHMucGFyZW50ID0gb3B0aW9ucy5wYXJlbnQ7XG5cdCAgb3B0cy5wcm9wc0RhdGEgPSBvcHRpb25zLnByb3BzRGF0YTtcblx0ICBvcHRzLl9wYXJlbnRWbm9kZSA9IG9wdGlvbnMuX3BhcmVudFZub2RlO1xuXHQgIG9wdHMuX3BhcmVudExpc3RlbmVycyA9IG9wdGlvbnMuX3BhcmVudExpc3RlbmVycztcblx0ICBvcHRzLl9yZW5kZXJDaGlsZHJlbiA9IG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuO1xuXHQgIG9wdHMuX2NvbXBvbmVudFRhZyA9IG9wdGlvbnMuX2NvbXBvbmVudFRhZztcblx0ICBvcHRzLl9wYXJlbnRFbG0gPSBvcHRpb25zLl9wYXJlbnRFbG07XG5cdCAgb3B0cy5fcmVmRWxtID0gb3B0aW9ucy5fcmVmRWxtO1xuXHQgIGlmIChvcHRpb25zLnJlbmRlcikge1xuXHQgICAgb3B0cy5yZW5kZXIgPSBvcHRpb25zLnJlbmRlcjtcblx0ICAgIG9wdHMuc3RhdGljUmVuZGVyRm5zID0gb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnM7XG5cdCAgfVxuXHR9XG5cdFxuXHRmdW5jdGlvbiByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zIChDdG9yKSB7XG5cdCAgdmFyIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnM7XG5cdCAgaWYgKEN0b3Iuc3VwZXIpIHtcblx0ICAgIHZhciBzdXBlck9wdGlvbnMgPSBDdG9yLnN1cGVyLm9wdGlvbnM7XG5cdCAgICB2YXIgY2FjaGVkU3VwZXJPcHRpb25zID0gQ3Rvci5zdXBlck9wdGlvbnM7XG5cdCAgICB2YXIgZXh0ZW5kT3B0aW9ucyA9IEN0b3IuZXh0ZW5kT3B0aW9ucztcblx0ICAgIGlmIChzdXBlck9wdGlvbnMgIT09IGNhY2hlZFN1cGVyT3B0aW9ucykge1xuXHQgICAgICAvLyBzdXBlciBvcHRpb24gY2hhbmdlZFxuXHQgICAgICBDdG9yLnN1cGVyT3B0aW9ucyA9IHN1cGVyT3B0aW9ucztcblx0ICAgICAgZXh0ZW5kT3B0aW9ucy5yZW5kZXIgPSBvcHRpb25zLnJlbmRlcjtcblx0ICAgICAgZXh0ZW5kT3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBvcHRpb25zLnN0YXRpY1JlbmRlckZucztcblx0ICAgICAgZXh0ZW5kT3B0aW9ucy5fc2NvcGVJZCA9IG9wdGlvbnMuX3Njb3BlSWQ7XG5cdCAgICAgIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnMgPSBtZXJnZU9wdGlvbnMoc3VwZXJPcHRpb25zLCBleHRlbmRPcHRpb25zKTtcblx0ICAgICAgaWYgKG9wdGlvbnMubmFtZSkge1xuXHQgICAgICAgIG9wdGlvbnMuY29tcG9uZW50c1tvcHRpb25zLm5hbWVdID0gQ3Rvcjtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH1cblx0ICByZXR1cm4gb3B0aW9uc1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBWdWUkMyAob3B0aW9ucykge1xuXHQgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG5cdCAgICAhKHRoaXMgaW5zdGFuY2VvZiBWdWUkMykpIHtcblx0ICAgIHdhcm4oJ1Z1ZSBpcyBhIGNvbnN0cnVjdG9yIGFuZCBzaG91bGQgYmUgY2FsbGVkIHdpdGggdGhlIGBuZXdgIGtleXdvcmQnKTtcblx0ICB9XG5cdCAgdGhpcy5faW5pdChvcHRpb25zKTtcblx0fVxuXHRcblx0aW5pdE1peGluKFZ1ZSQzKTtcblx0c3RhdGVNaXhpbihWdWUkMyk7XG5cdGV2ZW50c01peGluKFZ1ZSQzKTtcblx0bGlmZWN5Y2xlTWl4aW4oVnVlJDMpO1xuXHRyZW5kZXJNaXhpbihWdWUkMyk7XG5cdFxuXHQvKiAgKi9cblx0XG5cdGZ1bmN0aW9uIGluaXRVc2UgKFZ1ZSkge1xuXHQgIFZ1ZS51c2UgPSBmdW5jdGlvbiAocGx1Z2luKSB7XG5cdCAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cblx0ICAgIGlmIChwbHVnaW4uaW5zdGFsbGVkKSB7XG5cdCAgICAgIHJldHVyblxuXHQgICAgfVxuXHQgICAgLy8gYWRkaXRpb25hbCBwYXJhbWV0ZXJzXG5cdCAgICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzLCAxKTtcblx0ICAgIGFyZ3MudW5zaGlmdCh0aGlzKTtcblx0ICAgIGlmICh0eXBlb2YgcGx1Z2luLmluc3RhbGwgPT09ICdmdW5jdGlvbicpIHtcblx0ICAgICAgcGx1Z2luLmluc3RhbGwuYXBwbHkocGx1Z2luLCBhcmdzKTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHBsdWdpbi5hcHBseShudWxsLCBhcmdzKTtcblx0ICAgIH1cblx0ICAgIHBsdWdpbi5pbnN0YWxsZWQgPSB0cnVlO1xuXHQgICAgcmV0dXJuIHRoaXNcblx0ICB9O1xuXHR9XG5cdFxuXHQvKiAgKi9cblx0XG5cdGZ1bmN0aW9uIGluaXRNaXhpbiQxIChWdWUpIHtcblx0ICBWdWUubWl4aW4gPSBmdW5jdGlvbiAobWl4aW4pIHtcblx0ICAgIHRoaXMub3B0aW9ucyA9IG1lcmdlT3B0aW9ucyh0aGlzLm9wdGlvbnMsIG1peGluKTtcblx0ICB9O1xuXHR9XG5cdFxuXHQvKiAgKi9cblx0XG5cdGZ1bmN0aW9uIGluaXRFeHRlbmQgKFZ1ZSkge1xuXHQgIC8qKlxuXHQgICAqIEVhY2ggaW5zdGFuY2UgY29uc3RydWN0b3IsIGluY2x1ZGluZyBWdWUsIGhhcyBhIHVuaXF1ZVxuXHQgICAqIGNpZC4gVGhpcyBlbmFibGVzIHVzIHRvIGNyZWF0ZSB3cmFwcGVkIFwiY2hpbGRcblx0ICAgKiBjb25zdHJ1Y3RvcnNcIiBmb3IgcHJvdG90eXBhbCBpbmhlcml0YW5jZSBhbmQgY2FjaGUgdGhlbS5cblx0ICAgKi9cblx0ICBWdWUuY2lkID0gMDtcblx0ICB2YXIgY2lkID0gMTtcblx0XG5cdCAgLyoqXG5cdCAgICogQ2xhc3MgaW5oZXJpdGFuY2Vcblx0ICAgKi9cblx0ICBWdWUuZXh0ZW5kID0gZnVuY3Rpb24gKGV4dGVuZE9wdGlvbnMpIHtcblx0ICAgIGV4dGVuZE9wdGlvbnMgPSBleHRlbmRPcHRpb25zIHx8IHt9O1xuXHQgICAgdmFyIFN1cGVyID0gdGhpcztcblx0ICAgIHZhciBTdXBlcklkID0gU3VwZXIuY2lkO1xuXHQgICAgdmFyIGNhY2hlZEN0b3JzID0gZXh0ZW5kT3B0aW9ucy5fQ3RvciB8fCAoZXh0ZW5kT3B0aW9ucy5fQ3RvciA9IHt9KTtcblx0ICAgIGlmIChjYWNoZWRDdG9yc1tTdXBlcklkXSkge1xuXHQgICAgICByZXR1cm4gY2FjaGVkQ3RvcnNbU3VwZXJJZF1cblx0ICAgIH1cblx0ICAgIHZhciBuYW1lID0gZXh0ZW5kT3B0aW9ucy5uYW1lIHx8IFN1cGVyLm9wdGlvbnMubmFtZTtcblx0ICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG5cdCAgICAgIGlmICghL15bYS16QS1aXVtcXHctXSokLy50ZXN0KG5hbWUpKSB7XG5cdCAgICAgICAgd2Fybihcblx0ICAgICAgICAgICdJbnZhbGlkIGNvbXBvbmVudCBuYW1lOiBcIicgKyBuYW1lICsgJ1wiLiBDb21wb25lbnQgbmFtZXMgJyArXG5cdCAgICAgICAgICAnY2FuIG9ubHkgY29udGFpbiBhbHBoYW51bWVyaWMgY2hhcmFjdGVycyBhbmQgdGhlIGh5cGhlbiwgJyArXG5cdCAgICAgICAgICAnYW5kIG11c3Qgc3RhcnQgd2l0aCBhIGxldHRlci4nXG5cdCAgICAgICAgKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgdmFyIFN1YiA9IGZ1bmN0aW9uIFZ1ZUNvbXBvbmVudCAob3B0aW9ucykge1xuXHQgICAgICB0aGlzLl9pbml0KG9wdGlvbnMpO1xuXHQgICAgfTtcblx0ICAgIFN1Yi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFN1cGVyLnByb3RvdHlwZSk7XG5cdCAgICBTdWIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU3ViO1xuXHQgICAgU3ViLmNpZCA9IGNpZCsrO1xuXHQgICAgU3ViLm9wdGlvbnMgPSBtZXJnZU9wdGlvbnMoXG5cdCAgICAgIFN1cGVyLm9wdGlvbnMsXG5cdCAgICAgIGV4dGVuZE9wdGlvbnNcblx0ICAgICk7XG5cdCAgICBTdWJbJ3N1cGVyJ10gPSBTdXBlcjtcblx0ICAgIC8vIGFsbG93IGZ1cnRoZXIgZXh0ZW5zaW9uL21peGluL3BsdWdpbiB1c2FnZVxuXHQgICAgU3ViLmV4dGVuZCA9IFN1cGVyLmV4dGVuZDtcblx0ICAgIFN1Yi5taXhpbiA9IFN1cGVyLm1peGluO1xuXHQgICAgU3ViLnVzZSA9IFN1cGVyLnVzZTtcblx0ICAgIC8vIGNyZWF0ZSBhc3NldCByZWdpc3RlcnMsIHNvIGV4dGVuZGVkIGNsYXNzZXNcblx0ICAgIC8vIGNhbiBoYXZlIHRoZWlyIHByaXZhdGUgYXNzZXRzIHRvby5cblx0ICAgIGNvbmZpZy5fYXNzZXRUeXBlcy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG5cdCAgICAgIFN1Ylt0eXBlXSA9IFN1cGVyW3R5cGVdO1xuXHQgICAgfSk7XG5cdCAgICAvLyBlbmFibGUgcmVjdXJzaXZlIHNlbGYtbG9va3VwXG5cdCAgICBpZiAobmFtZSkge1xuXHQgICAgICBTdWIub3B0aW9ucy5jb21wb25lbnRzW25hbWVdID0gU3ViO1xuXHQgICAgfVxuXHQgICAgLy8ga2VlcCBhIHJlZmVyZW5jZSB0byB0aGUgc3VwZXIgb3B0aW9ucyBhdCBleHRlbnNpb24gdGltZS5cblx0ICAgIC8vIGxhdGVyIGF0IGluc3RhbnRpYXRpb24gd2UgY2FuIGNoZWNrIGlmIFN1cGVyJ3Mgb3B0aW9ucyBoYXZlXG5cdCAgICAvLyBiZWVuIHVwZGF0ZWQuXG5cdCAgICBTdWIuc3VwZXJPcHRpb25zID0gU3VwZXIub3B0aW9ucztcblx0ICAgIFN1Yi5leHRlbmRPcHRpb25zID0gZXh0ZW5kT3B0aW9ucztcblx0ICAgIC8vIGNhY2hlIGNvbnN0cnVjdG9yXG5cdCAgICBjYWNoZWRDdG9yc1tTdXBlcklkXSA9IFN1Yjtcblx0ICAgIHJldHVybiBTdWJcblx0ICB9O1xuXHR9XG5cdFxuXHQvKiAgKi9cblx0XG5cdGZ1bmN0aW9uIGluaXRBc3NldFJlZ2lzdGVycyAoVnVlKSB7XG5cdCAgLyoqXG5cdCAgICogQ3JlYXRlIGFzc2V0IHJlZ2lzdHJhdGlvbiBtZXRob2RzLlxuXHQgICAqL1xuXHQgIGNvbmZpZy5fYXNzZXRUeXBlcy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG5cdCAgICBWdWVbdHlwZV0gPSBmdW5jdGlvbiAoXG5cdCAgICAgIGlkLFxuXHQgICAgICBkZWZpbml0aW9uXG5cdCAgICApIHtcblx0ICAgICAgaWYgKCFkZWZpbml0aW9uKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9uc1t0eXBlICsgJ3MnXVtpZF1cblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cblx0ICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuXHQgICAgICAgICAgaWYgKHR5cGUgPT09ICdjb21wb25lbnQnICYmIGNvbmZpZy5pc1Jlc2VydmVkVGFnKGlkKSkge1xuXHQgICAgICAgICAgICB3YXJuKFxuXHQgICAgICAgICAgICAgICdEbyBub3QgdXNlIGJ1aWx0LWluIG9yIHJlc2VydmVkIEhUTUwgZWxlbWVudHMgYXMgY29tcG9uZW50ICcgK1xuXHQgICAgICAgICAgICAgICdpZDogJyArIGlkXG5cdCAgICAgICAgICAgICk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmICh0eXBlID09PSAnY29tcG9uZW50JyAmJiBpc1BsYWluT2JqZWN0KGRlZmluaXRpb24pKSB7XG5cdCAgICAgICAgICBkZWZpbml0aW9uLm5hbWUgPSBkZWZpbml0aW9uLm5hbWUgfHwgaWQ7XG5cdCAgICAgICAgICBkZWZpbml0aW9uID0gdGhpcy5vcHRpb25zLl9iYXNlLmV4dGVuZChkZWZpbml0aW9uKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKHR5cGUgPT09ICdkaXJlY3RpdmUnICYmIHR5cGVvZiBkZWZpbml0aW9uID09PSAnZnVuY3Rpb24nKSB7XG5cdCAgICAgICAgICBkZWZpbml0aW9uID0geyBiaW5kOiBkZWZpbml0aW9uLCB1cGRhdGU6IGRlZmluaXRpb24gfTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5vcHRpb25zW3R5cGUgKyAncyddW2lkXSA9IGRlZmluaXRpb247XG5cdCAgICAgICAgcmV0dXJuIGRlZmluaXRpb25cblx0ICAgICAgfVxuXHQgICAgfTtcblx0ICB9KTtcblx0fVxuXHRcblx0LyogICovXG5cdFxuXHR2YXIgcGF0dGVyblR5cGVzID0gW1N0cmluZywgUmVnRXhwXTtcblx0XG5cdGZ1bmN0aW9uIGdldENvbXBvbmVudE5hbWUgKG9wdHMpIHtcblx0ICByZXR1cm4gb3B0cyAmJiAob3B0cy5DdG9yLm9wdGlvbnMubmFtZSB8fCBvcHRzLnRhZylcblx0fVxuXHRcblx0ZnVuY3Rpb24gbWF0Y2hlcyAocGF0dGVybiwgbmFtZSkge1xuXHQgIGlmICh0eXBlb2YgcGF0dGVybiA9PT0gJ3N0cmluZycpIHtcblx0ICAgIHJldHVybiBwYXR0ZXJuLnNwbGl0KCcsJykuaW5kZXhPZihuYW1lKSA+IC0xXG5cdCAgfSBlbHNlIHtcblx0ICAgIHJldHVybiBwYXR0ZXJuLnRlc3QobmFtZSlcblx0ICB9XG5cdH1cblx0XG5cdGZ1bmN0aW9uIHBydW5lQ2FjaGUgKGNhY2hlLCBmaWx0ZXIpIHtcblx0ICBmb3IgKHZhciBrZXkgaW4gY2FjaGUpIHtcblx0ICAgIHZhciBjYWNoZWROb2RlID0gY2FjaGVba2V5XTtcblx0ICAgIGlmIChjYWNoZWROb2RlKSB7XG5cdCAgICAgIHZhciBuYW1lID0gZ2V0Q29tcG9uZW50TmFtZShjYWNoZWROb2RlLmNvbXBvbmVudE9wdGlvbnMpO1xuXHQgICAgICBpZiAobmFtZSAmJiAhZmlsdGVyKG5hbWUpKSB7XG5cdCAgICAgICAgcHJ1bmVDYWNoZUVudHJ5KGNhY2hlZE5vZGUpO1xuXHQgICAgICAgIGNhY2hlW2tleV0gPSBudWxsO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfVxuXHR9XG5cdFxuXHRmdW5jdGlvbiBwcnVuZUNhY2hlRW50cnkgKHZub2RlKSB7XG5cdCAgaWYgKHZub2RlKSB7XG5cdCAgICBpZiAoIXZub2RlLmNvbXBvbmVudEluc3RhbmNlLl9pbmFjdGl2ZSkge1xuXHQgICAgICBjYWxsSG9vayh2bm9kZS5jb21wb25lbnRJbnN0YW5jZSwgJ2RlYWN0aXZhdGVkJyk7XG5cdCAgICB9XG5cdCAgICB2bm9kZS5jb21wb25lbnRJbnN0YW5jZS4kZGVzdHJveSgpO1xuXHQgIH1cblx0fVxuXHRcblx0dmFyIEtlZXBBbGl2ZSA9IHtcblx0ICBuYW1lOiAna2VlcC1hbGl2ZScsXG5cdCAgYWJzdHJhY3Q6IHRydWUsXG5cdFxuXHQgIHByb3BzOiB7XG5cdCAgICBpbmNsdWRlOiBwYXR0ZXJuVHlwZXMsXG5cdCAgICBleGNsdWRlOiBwYXR0ZXJuVHlwZXNcblx0ICB9LFxuXHRcblx0ICBjcmVhdGVkOiBmdW5jdGlvbiBjcmVhdGVkICgpIHtcblx0ICAgIHRoaXMuY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXHQgIH0sXG5cdFxuXHQgIGRlc3Ryb3llZDogZnVuY3Rpb24gZGVzdHJveWVkICgpIHtcblx0ICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXHRcblx0ICAgIGZvciAodmFyIGtleSBpbiB0aGlzLmNhY2hlKSB7XG5cdCAgICAgIHBydW5lQ2FjaGVFbnRyeSh0aGlzJDEuY2FjaGVba2V5XSk7XG5cdCAgICB9XG5cdCAgfSxcblx0XG5cdCAgd2F0Y2g6IHtcblx0ICAgIGluY2x1ZGU6IGZ1bmN0aW9uIGluY2x1ZGUgKHZhbCkge1xuXHQgICAgICBwcnVuZUNhY2hlKHRoaXMuY2FjaGUsIGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBtYXRjaGVzKHZhbCwgbmFtZSk7IH0pO1xuXHQgICAgfSxcblx0ICAgIGV4Y2x1ZGU6IGZ1bmN0aW9uIGV4Y2x1ZGUgKHZhbCkge1xuXHQgICAgICBwcnVuZUNhY2hlKHRoaXMuY2FjaGUsIGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiAhbWF0Y2hlcyh2YWwsIG5hbWUpOyB9KTtcblx0ICAgIH1cblx0ICB9LFxuXHRcblx0ICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoKSB7XG5cdCAgICB2YXIgdm5vZGUgPSBnZXRGaXJzdENvbXBvbmVudENoaWxkKHRoaXMuJHNsb3RzLmRlZmF1bHQpO1xuXHQgICAgdmFyIGNvbXBvbmVudE9wdGlvbnMgPSB2bm9kZSAmJiB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuXHQgICAgaWYgKGNvbXBvbmVudE9wdGlvbnMpIHtcblx0ICAgICAgLy8gY2hlY2sgcGF0dGVyblxuXHQgICAgICB2YXIgbmFtZSA9IGdldENvbXBvbmVudE5hbWUoY29tcG9uZW50T3B0aW9ucyk7XG5cdCAgICAgIGlmIChuYW1lICYmIChcblx0ICAgICAgICAodGhpcy5pbmNsdWRlICYmICFtYXRjaGVzKHRoaXMuaW5jbHVkZSwgbmFtZSkpIHx8XG5cdCAgICAgICAgKHRoaXMuZXhjbHVkZSAmJiBtYXRjaGVzKHRoaXMuZXhjbHVkZSwgbmFtZSkpXG5cdCAgICAgICkpIHtcblx0ICAgICAgICByZXR1cm4gdm5vZGVcblx0ICAgICAgfVxuXHQgICAgICB2YXIga2V5ID0gdm5vZGUua2V5ID09IG51bGxcblx0ICAgICAgICAvLyBzYW1lIGNvbnN0cnVjdG9yIG1heSBnZXQgcmVnaXN0ZXJlZCBhcyBkaWZmZXJlbnQgbG9jYWwgY29tcG9uZW50c1xuXHQgICAgICAgIC8vIHNvIGNpZCBhbG9uZSBpcyBub3QgZW5vdWdoICgjMzI2OSlcblx0ICAgICAgICA/IGNvbXBvbmVudE9wdGlvbnMuQ3Rvci5jaWQgKyAoY29tcG9uZW50T3B0aW9ucy50YWcgPyAoXCI6OlwiICsgKGNvbXBvbmVudE9wdGlvbnMudGFnKSkgOiAnJylcblx0ICAgICAgICA6IHZub2RlLmtleTtcblx0ICAgICAgaWYgKHRoaXMuY2FjaGVba2V5XSkge1xuXHQgICAgICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gdGhpcy5jYWNoZVtrZXldLmNvbXBvbmVudEluc3RhbmNlO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHRoaXMuY2FjaGVba2V5XSA9IHZub2RlO1xuXHQgICAgICB9XG5cdCAgICAgIHZub2RlLmRhdGEua2VlcEFsaXZlID0gdHJ1ZTtcblx0ICAgIH1cblx0ICAgIHJldHVybiB2bm9kZVxuXHQgIH1cblx0fTtcblx0XG5cdHZhciBidWlsdEluQ29tcG9uZW50cyA9IHtcblx0ICBLZWVwQWxpdmU6IEtlZXBBbGl2ZVxuXHR9O1xuXHRcblx0LyogICovXG5cdFxuXHRmdW5jdGlvbiBpbml0R2xvYmFsQVBJIChWdWUpIHtcblx0ICAvLyBjb25maWdcblx0ICB2YXIgY29uZmlnRGVmID0ge307XG5cdCAgY29uZmlnRGVmLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbmZpZzsgfTtcblx0ICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuXHQgICAgY29uZmlnRGVmLnNldCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgd2Fybihcblx0ICAgICAgICAnRG8gbm90IHJlcGxhY2UgdGhlIFZ1ZS5jb25maWcgb2JqZWN0LCBzZXQgaW5kaXZpZHVhbCBmaWVsZHMgaW5zdGVhZC4nXG5cdCAgICAgICk7XG5cdCAgICB9O1xuXHQgIH1cblx0ICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLCAnY29uZmlnJywgY29uZmlnRGVmKTtcblx0ICBWdWUudXRpbCA9IHV0aWw7XG5cdCAgVnVlLnNldCA9IHNldCQxO1xuXHQgIFZ1ZS5kZWxldGUgPSBkZWw7XG5cdCAgVnVlLm5leHRUaWNrID0gbmV4dFRpY2s7XG5cdFxuXHQgIFZ1ZS5vcHRpb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblx0ICBjb25maWcuX2Fzc2V0VHlwZXMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuXHQgICAgVnVlLm9wdGlvbnNbdHlwZSArICdzJ10gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXHQgIH0pO1xuXHRcblx0ICAvLyB0aGlzIGlzIHVzZWQgdG8gaWRlbnRpZnkgdGhlIFwiYmFzZVwiIGNvbnN0cnVjdG9yIHRvIGV4dGVuZCBhbGwgcGxhaW4tb2JqZWN0XG5cdCAgLy8gY29tcG9uZW50cyB3aXRoIGluIFdlZXgncyBtdWx0aS1pbnN0YW5jZSBzY2VuYXJpb3MuXG5cdCAgVnVlLm9wdGlvbnMuX2Jhc2UgPSBWdWU7XG5cdFxuXHQgIGV4dGVuZChWdWUub3B0aW9ucy5jb21wb25lbnRzLCBidWlsdEluQ29tcG9uZW50cyk7XG5cdFxuXHQgIGluaXRVc2UoVnVlKTtcblx0ICBpbml0TWl4aW4kMShWdWUpO1xuXHQgIGluaXRFeHRlbmQoVnVlKTtcblx0ICBpbml0QXNzZXRSZWdpc3RlcnMoVnVlKTtcblx0fVxuXHRcblx0aW5pdEdsb2JhbEFQSShWdWUkMyk7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlJDMucHJvdG90eXBlLCAnJGlzU2VydmVyJywge1xuXHQgIGdldDogaXNTZXJ2ZXJSZW5kZXJpbmdcblx0fSk7XG5cdFxuXHRWdWUkMy52ZXJzaW9uID0gJzIuMS4xMCc7XG5cdFxuXHQvKiAgKi9cblx0XG5cdC8vIGF0dHJpYnV0ZXMgdGhhdCBzaG91bGQgYmUgdXNpbmcgcHJvcHMgZm9yIGJpbmRpbmdcblx0dmFyIGFjY2VwdFZhbHVlID0gbWFrZU1hcCgnaW5wdXQsdGV4dGFyZWEsb3B0aW9uLHNlbGVjdCcpO1xuXHR2YXIgbXVzdFVzZVByb3AgPSBmdW5jdGlvbiAodGFnLCB0eXBlLCBhdHRyKSB7XG5cdCAgcmV0dXJuIChcblx0ICAgIChhdHRyID09PSAndmFsdWUnICYmIGFjY2VwdFZhbHVlKHRhZykpICYmIHR5cGUgIT09ICdidXR0b24nIHx8XG5cdCAgICAoYXR0ciA9PT0gJ3NlbGVjdGVkJyAmJiB0YWcgPT09ICdvcHRpb24nKSB8fFxuXHQgICAgKGF0dHIgPT09ICdjaGVja2VkJyAmJiB0YWcgPT09ICdpbnB1dCcpIHx8XG5cdCAgICAoYXR0ciA9PT0gJ211dGVkJyAmJiB0YWcgPT09ICd2aWRlbycpXG5cdCAgKVxuXHR9O1xuXHRcblx0dmFyIGlzRW51bWVyYXRlZEF0dHIgPSBtYWtlTWFwKCdjb250ZW50ZWRpdGFibGUsZHJhZ2dhYmxlLHNwZWxsY2hlY2snKTtcblx0XG5cdHZhciBpc0Jvb2xlYW5BdHRyID0gbWFrZU1hcChcblx0ICAnYWxsb3dmdWxsc2NyZWVuLGFzeW5jLGF1dG9mb2N1cyxhdXRvcGxheSxjaGVja2VkLGNvbXBhY3QsY29udHJvbHMsZGVjbGFyZSwnICtcblx0ICAnZGVmYXVsdCxkZWZhdWx0Y2hlY2tlZCxkZWZhdWx0bXV0ZWQsZGVmYXVsdHNlbGVjdGVkLGRlZmVyLGRpc2FibGVkLCcgK1xuXHQgICdlbmFibGVkLGZvcm1ub3ZhbGlkYXRlLGhpZGRlbixpbmRldGVybWluYXRlLGluZXJ0LGlzbWFwLGl0ZW1zY29wZSxsb29wLG11bHRpcGxlLCcgK1xuXHQgICdtdXRlZCxub2hyZWYsbm9yZXNpemUsbm9zaGFkZSxub3ZhbGlkYXRlLG5vd3JhcCxvcGVuLHBhdXNlb25leGl0LHJlYWRvbmx5LCcgK1xuXHQgICdyZXF1aXJlZCxyZXZlcnNlZCxzY29wZWQsc2VhbWxlc3Msc2VsZWN0ZWQsc29ydGFibGUsdHJhbnNsYXRlLCcgK1xuXHQgICd0cnVlc3BlZWQsdHlwZW11c3RtYXRjaCx2aXNpYmxlJ1xuXHQpO1xuXHRcblx0dmFyIHhsaW5rTlMgPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayc7XG5cdFxuXHR2YXIgaXNYbGluayA9IGZ1bmN0aW9uIChuYW1lKSB7XG5cdCAgcmV0dXJuIG5hbWUuY2hhckF0KDUpID09PSAnOicgJiYgbmFtZS5zbGljZSgwLCA1KSA9PT0gJ3hsaW5rJ1xuXHR9O1xuXHRcblx0dmFyIGdldFhsaW5rUHJvcCA9IGZ1bmN0aW9uIChuYW1lKSB7XG5cdCAgcmV0dXJuIGlzWGxpbmsobmFtZSkgPyBuYW1lLnNsaWNlKDYsIG5hbWUubGVuZ3RoKSA6ICcnXG5cdH07XG5cdFxuXHR2YXIgaXNGYWxzeUF0dHJWYWx1ZSA9IGZ1bmN0aW9uICh2YWwpIHtcblx0ICByZXR1cm4gdmFsID09IG51bGwgfHwgdmFsID09PSBmYWxzZVxuXHR9O1xuXHRcblx0LyogICovXG5cdFxuXHRmdW5jdGlvbiBnZW5DbGFzc0ZvclZub2RlICh2bm9kZSkge1xuXHQgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcblx0ICB2YXIgcGFyZW50Tm9kZSA9IHZub2RlO1xuXHQgIHZhciBjaGlsZE5vZGUgPSB2bm9kZTtcblx0ICB3aGlsZSAoY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlKSB7XG5cdCAgICBjaGlsZE5vZGUgPSBjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuXHQgICAgaWYgKGNoaWxkTm9kZS5kYXRhKSB7XG5cdCAgICAgIGRhdGEgPSBtZXJnZUNsYXNzRGF0YShjaGlsZE5vZGUuZGF0YSwgZGF0YSk7XG5cdCAgICB9XG5cdCAgfVxuXHQgIHdoaWxlICgocGFyZW50Tm9kZSA9IHBhcmVudE5vZGUucGFyZW50KSkge1xuXHQgICAgaWYgKHBhcmVudE5vZGUuZGF0YSkge1xuXHQgICAgICBkYXRhID0gbWVyZ2VDbGFzc0RhdGEoZGF0YSwgcGFyZW50Tm9kZS5kYXRhKTtcblx0ICAgIH1cblx0ICB9XG5cdCAgcmV0dXJuIGdlbkNsYXNzRnJvbURhdGEoZGF0YSlcblx0fVxuXHRcblx0ZnVuY3Rpb24gbWVyZ2VDbGFzc0RhdGEgKGNoaWxkLCBwYXJlbnQpIHtcblx0ICByZXR1cm4ge1xuXHQgICAgc3RhdGljQ2xhc3M6IGNvbmNhdChjaGlsZC5zdGF0aWNDbGFzcywgcGFyZW50LnN0YXRpY0NsYXNzKSxcblx0ICAgIGNsYXNzOiBjaGlsZC5jbGFzc1xuXHQgICAgICA/IFtjaGlsZC5jbGFzcywgcGFyZW50LmNsYXNzXVxuXHQgICAgICA6IHBhcmVudC5jbGFzc1xuXHQgIH1cblx0fVxuXHRcblx0ZnVuY3Rpb24gZ2VuQ2xhc3NGcm9tRGF0YSAoZGF0YSkge1xuXHQgIHZhciBkeW5hbWljQ2xhc3MgPSBkYXRhLmNsYXNzO1xuXHQgIHZhciBzdGF0aWNDbGFzcyA9IGRhdGEuc3RhdGljQ2xhc3M7XG5cdCAgaWYgKHN0YXRpY0NsYXNzIHx8IGR5bmFtaWNDbGFzcykge1xuXHQgICAgcmV0dXJuIGNvbmNhdChzdGF0aWNDbGFzcywgc3RyaW5naWZ5Q2xhc3MoZHluYW1pY0NsYXNzKSlcblx0ICB9XG5cdCAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cblx0ICByZXR1cm4gJydcblx0fVxuXHRcblx0ZnVuY3Rpb24gY29uY2F0IChhLCBiKSB7XG5cdCAgcmV0dXJuIGEgPyBiID8gKGEgKyAnICcgKyBiKSA6IGEgOiAoYiB8fCAnJylcblx0fVxuXHRcblx0ZnVuY3Rpb24gc3RyaW5naWZ5Q2xhc3MgKHZhbHVlKSB7XG5cdCAgdmFyIHJlcyA9ICcnO1xuXHQgIGlmICghdmFsdWUpIHtcblx0ICAgIHJldHVybiByZXNcblx0ICB9XG5cdCAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcblx0ICAgIHJldHVybiB2YWx1ZVxuXHQgIH1cblx0ICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcblx0ICAgIHZhciBzdHJpbmdpZmllZDtcblx0ICAgIGZvciAodmFyIGkgPSAwLCBsID0gdmFsdWUubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG5cdCAgICAgIGlmICh2YWx1ZVtpXSkge1xuXHQgICAgICAgIGlmICgoc3RyaW5naWZpZWQgPSBzdHJpbmdpZnlDbGFzcyh2YWx1ZVtpXSkpKSB7XG5cdCAgICAgICAgICByZXMgKz0gc3RyaW5naWZpZWQgKyAnICc7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICByZXR1cm4gcmVzLnNsaWNlKDAsIC0xKVxuXHQgIH1cblx0ICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG5cdCAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcblx0ICAgICAgaWYgKHZhbHVlW2tleV0pIHsgcmVzICs9IGtleSArICcgJzsgfVxuXHQgICAgfVxuXHQgICAgcmV0dXJuIHJlcy5zbGljZSgwLCAtMSlcblx0ICB9XG5cdCAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cblx0ICByZXR1cm4gcmVzXG5cdH1cblx0XG5cdC8qICAqL1xuXHRcblx0dmFyIG5hbWVzcGFjZU1hcCA9IHtcblx0ICBzdmc6ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsXG5cdCAgbWF0aDogJ2h0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUwnXG5cdH07XG5cdFxuXHR2YXIgaXNIVE1MVGFnID0gbWFrZU1hcChcblx0ICAnaHRtbCxib2R5LGJhc2UsaGVhZCxsaW5rLG1ldGEsc3R5bGUsdGl0bGUsJyArXG5cdCAgJ2FkZHJlc3MsYXJ0aWNsZSxhc2lkZSxmb290ZXIsaGVhZGVyLGgxLGgyLGgzLGg0LGg1LGg2LGhncm91cCxuYXYsc2VjdGlvbiwnICtcblx0ICAnZGl2LGRkLGRsLGR0LGZpZ2NhcHRpb24sZmlndXJlLGhyLGltZyxsaSxtYWluLG9sLHAscHJlLHVsLCcgK1xuXHQgICdhLGIsYWJicixiZGksYmRvLGJyLGNpdGUsY29kZSxkYXRhLGRmbixlbSxpLGtiZCxtYXJrLHEscnAscnQscnRjLHJ1YnksJyArXG5cdCAgJ3Msc2FtcCxzbWFsbCxzcGFuLHN0cm9uZyxzdWIsc3VwLHRpbWUsdSx2YXIsd2JyLGFyZWEsYXVkaW8sbWFwLHRyYWNrLHZpZGVvLCcgK1xuXHQgICdlbWJlZCxvYmplY3QscGFyYW0sc291cmNlLGNhbnZhcyxzY3JpcHQsbm9zY3JpcHQsZGVsLGlucywnICtcblx0ICAnY2FwdGlvbixjb2wsY29sZ3JvdXAsdGFibGUsdGhlYWQsdGJvZHksdGQsdGgsdHIsJyArXG5cdCAgJ2J1dHRvbixkYXRhbGlzdCxmaWVsZHNldCxmb3JtLGlucHV0LGxhYmVsLGxlZ2VuZCxtZXRlcixvcHRncm91cCxvcHRpb24sJyArXG5cdCAgJ291dHB1dCxwcm9ncmVzcyxzZWxlY3QsdGV4dGFyZWEsJyArXG5cdCAgJ2RldGFpbHMsZGlhbG9nLG1lbnUsbWVudWl0ZW0sc3VtbWFyeSwnICtcblx0ICAnY29udGVudCxlbGVtZW50LHNoYWRvdyx0ZW1wbGF0ZSdcblx0KTtcblx0XG5cdC8vIHRoaXMgbWFwIGlzIGludGVudGlvbmFsbHkgc2VsZWN0aXZlLCBvbmx5IGNvdmVyaW5nIFNWRyBlbGVtZW50cyB0aGF0IG1heVxuXHQvLyBjb250YWluIGNoaWxkIGVsZW1lbnRzLlxuXHR2YXIgaXNTVkcgPSBtYWtlTWFwKFxuXHQgICdzdmcsYW5pbWF0ZSxjaXJjbGUsY2xpcHBhdGgsY3Vyc29yLGRlZnMsZGVzYyxlbGxpcHNlLGZpbHRlciwnICtcblx0ICAnZm9udC1mYWNlLGcsZ2x5cGgsaW1hZ2UsbGluZSxtYXJrZXIsbWFzayxtaXNzaW5nLWdseXBoLHBhdGgscGF0dGVybiwnICtcblx0ICAncG9seWdvbixwb2x5bGluZSxyZWN0LHN3aXRjaCxzeW1ib2wsdGV4dCx0ZXh0cGF0aCx0c3Bhbix1c2UsdmlldycsXG5cdCAgdHJ1ZVxuXHQpO1xuXHRcblx0dmFyIGlzUHJlVGFnID0gZnVuY3Rpb24gKHRhZykgeyByZXR1cm4gdGFnID09PSAncHJlJzsgfTtcblx0XG5cdHZhciBpc1Jlc2VydmVkVGFnID0gZnVuY3Rpb24gKHRhZykge1xuXHQgIHJldHVybiBpc0hUTUxUYWcodGFnKSB8fCBpc1NWRyh0YWcpXG5cdH07XG5cdFxuXHRmdW5jdGlvbiBnZXRUYWdOYW1lc3BhY2UgKHRhZykge1xuXHQgIGlmIChpc1NWRyh0YWcpKSB7XG5cdCAgICByZXR1cm4gJ3N2Zydcblx0ICB9XG5cdCAgLy8gYmFzaWMgc3VwcG9ydCBmb3IgTWF0aE1MXG5cdCAgLy8gbm90ZSBpdCBkb2Vzbid0IHN1cHBvcnQgb3RoZXIgTWF0aE1MIGVsZW1lbnRzIGJlaW5nIGNvbXBvbmVudCByb290c1xuXHQgIGlmICh0YWcgPT09ICdtYXRoJykge1xuXHQgICAgcmV0dXJuICdtYXRoJ1xuXHQgIH1cblx0fVxuXHRcblx0dmFyIHVua25vd25FbGVtZW50Q2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXHRmdW5jdGlvbiBpc1Vua25vd25FbGVtZW50ICh0YWcpIHtcblx0ICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cblx0ICBpZiAoIWluQnJvd3Nlcikge1xuXHQgICAgcmV0dXJuIHRydWVcblx0ICB9XG5cdCAgaWYgKGlzUmVzZXJ2ZWRUYWcodGFnKSkge1xuXHQgICAgcmV0dXJuIGZhbHNlXG5cdCAgfVxuXHQgIHRhZyA9IHRhZy50b0xvd2VyQ2FzZSgpO1xuXHQgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuXHQgIGlmICh1bmtub3duRWxlbWVudENhY2hlW3RhZ10gIT0gbnVsbCkge1xuXHQgICAgcmV0dXJuIHVua25vd25FbGVtZW50Q2FjaGVbdGFnXVxuXHQgIH1cblx0ICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZyk7XG5cdCAgaWYgKHRhZy5pbmRleE9mKCctJykgPiAtMSkge1xuXHQgICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjgyMTAzNjQvMTA3MDI0NFxuXHQgICAgcmV0dXJuICh1bmtub3duRWxlbWVudENhY2hlW3RhZ10gPSAoXG5cdCAgICAgIGVsLmNvbnN0cnVjdG9yID09PSB3aW5kb3cuSFRNTFVua25vd25FbGVtZW50IHx8XG5cdCAgICAgIGVsLmNvbnN0cnVjdG9yID09PSB3aW5kb3cuSFRNTEVsZW1lbnRcblx0ICAgICkpXG5cdCAgfSBlbHNlIHtcblx0ICAgIHJldHVybiAodW5rbm93bkVsZW1lbnRDYWNoZVt0YWddID0gL0hUTUxVbmtub3duRWxlbWVudC8udGVzdChlbC50b1N0cmluZygpKSlcblx0ICB9XG5cdH1cblx0XG5cdC8qICAqL1xuXHRcblx0LyoqXG5cdCAqIFF1ZXJ5IGFuIGVsZW1lbnQgc2VsZWN0b3IgaWYgaXQncyBub3QgYW4gZWxlbWVudCBhbHJlYWR5LlxuXHQgKi9cblx0ZnVuY3Rpb24gcXVlcnkgKGVsKSB7XG5cdCAgaWYgKHR5cGVvZiBlbCA9PT0gJ3N0cmluZycpIHtcblx0ICAgIHZhciBzZWxlY3RvciA9IGVsO1xuXHQgICAgZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVsKTtcblx0ICAgIGlmICghZWwpIHtcblx0ICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuXHQgICAgICAgICdDYW5ub3QgZmluZCBlbGVtZW50OiAnICsgc2VsZWN0b3Jcblx0ICAgICAgKTtcblx0ICAgICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG5cdCAgICB9XG5cdCAgfVxuXHQgIHJldHVybiBlbFxuXHR9XG5cdFxuXHQvKiAgKi9cblx0XG5cdGZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQkMSAodGFnTmFtZSwgdm5vZGUpIHtcblx0ICB2YXIgZWxtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWdOYW1lKTtcblx0ICBpZiAodGFnTmFtZSAhPT0gJ3NlbGVjdCcpIHtcblx0ICAgIHJldHVybiBlbG1cblx0ICB9XG5cdCAgaWYgKHZub2RlLmRhdGEgJiYgdm5vZGUuZGF0YS5hdHRycyAmJiAnbXVsdGlwbGUnIGluIHZub2RlLmRhdGEuYXR0cnMpIHtcblx0ICAgIGVsbS5zZXRBdHRyaWJ1dGUoJ211bHRpcGxlJywgJ211bHRpcGxlJyk7XG5cdCAgfVxuXHQgIHJldHVybiBlbG1cblx0fVxuXHRcblx0ZnVuY3Rpb24gY3JlYXRlRWxlbWVudE5TIChuYW1lc3BhY2UsIHRhZ05hbWUpIHtcblx0ICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZU1hcFtuYW1lc3BhY2VdLCB0YWdOYW1lKVxuXHR9XG5cdFxuXHRmdW5jdGlvbiBjcmVhdGVUZXh0Tm9kZSAodGV4dCkge1xuXHQgIHJldHVybiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0ZXh0KVxuXHR9XG5cdFxuXHRmdW5jdGlvbiBjcmVhdGVDb21tZW50ICh0ZXh0KSB7XG5cdCAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQodGV4dClcblx0fVxuXHRcblx0ZnVuY3Rpb24gaW5zZXJ0QmVmb3JlIChwYXJlbnROb2RlLCBuZXdOb2RlLCByZWZlcmVuY2VOb2RlKSB7XG5cdCAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobmV3Tm9kZSwgcmVmZXJlbmNlTm9kZSk7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIHJlbW92ZUNoaWxkIChub2RlLCBjaGlsZCkge1xuXHQgIG5vZGUucmVtb3ZlQ2hpbGQoY2hpbGQpO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBhcHBlbmRDaGlsZCAobm9kZSwgY2hpbGQpIHtcblx0ICBub2RlLmFwcGVuZENoaWxkKGNoaWxkKTtcblx0fVxuXHRcblx0ZnVuY3Rpb24gcGFyZW50Tm9kZSAobm9kZSkge1xuXHQgIHJldHVybiBub2RlLnBhcmVudE5vZGVcblx0fVxuXHRcblx0ZnVuY3Rpb24gbmV4dFNpYmxpbmcgKG5vZGUpIHtcblx0ICByZXR1cm4gbm9kZS5uZXh0U2libGluZ1xuXHR9XG5cdFxuXHRmdW5jdGlvbiB0YWdOYW1lIChub2RlKSB7XG5cdCAgcmV0dXJuIG5vZGUudGFnTmFtZVxuXHR9XG5cdFxuXHRmdW5jdGlvbiBzZXRUZXh0Q29udGVudCAobm9kZSwgdGV4dCkge1xuXHQgIG5vZGUudGV4dENvbnRlbnQgPSB0ZXh0O1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBzZXRBdHRyaWJ1dGUgKG5vZGUsIGtleSwgdmFsKSB7XG5cdCAgbm9kZS5zZXRBdHRyaWJ1dGUoa2V5LCB2YWwpO1xuXHR9XG5cdFxuXHRcblx0dmFyIG5vZGVPcHMgPSBPYmplY3QuZnJlZXplKHtcblx0XHRjcmVhdGVFbGVtZW50OiBjcmVhdGVFbGVtZW50JDEsXG5cdFx0Y3JlYXRlRWxlbWVudE5TOiBjcmVhdGVFbGVtZW50TlMsXG5cdFx0Y3JlYXRlVGV4dE5vZGU6IGNyZWF0ZVRleHROb2RlLFxuXHRcdGNyZWF0ZUNvbW1lbnQ6IGNyZWF0ZUNvbW1lbnQsXG5cdFx0aW5zZXJ0QmVmb3JlOiBpbnNlcnRCZWZvcmUsXG5cdFx0cmVtb3ZlQ2hpbGQ6IHJlbW92ZUNoaWxkLFxuXHRcdGFwcGVuZENoaWxkOiBhcHBlbmRDaGlsZCxcblx0XHRwYXJlbnROb2RlOiBwYXJlbnROb2RlLFxuXHRcdG5leHRTaWJsaW5nOiBuZXh0U2libGluZyxcblx0XHR0YWdOYW1lOiB0YWdOYW1lLFxuXHRcdHNldFRleHRDb250ZW50OiBzZXRUZXh0Q29udGVudCxcblx0XHRzZXRBdHRyaWJ1dGU6IHNldEF0dHJpYnV0ZVxuXHR9KTtcblx0XG5cdC8qICAqL1xuXHRcblx0dmFyIHJlZiA9IHtcblx0ICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSAoXywgdm5vZGUpIHtcblx0ICAgIHJlZ2lzdGVyUmVmKHZub2RlKTtcblx0ICB9LFxuXHQgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlIChvbGRWbm9kZSwgdm5vZGUpIHtcblx0ICAgIGlmIChvbGRWbm9kZS5kYXRhLnJlZiAhPT0gdm5vZGUuZGF0YS5yZWYpIHtcblx0ICAgICAgcmVnaXN0ZXJSZWYob2xkVm5vZGUsIHRydWUpO1xuXHQgICAgICByZWdpc3RlclJlZih2bm9kZSk7XG5cdCAgICB9XG5cdCAgfSxcblx0ICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95ICh2bm9kZSkge1xuXHQgICAgcmVnaXN0ZXJSZWYodm5vZGUsIHRydWUpO1xuXHQgIH1cblx0fTtcblx0XG5cdGZ1bmN0aW9uIHJlZ2lzdGVyUmVmICh2bm9kZSwgaXNSZW1vdmFsKSB7XG5cdCAgdmFyIGtleSA9IHZub2RlLmRhdGEucmVmO1xuXHQgIGlmICgha2V5KSB7IHJldHVybiB9XG5cdFxuXHQgIHZhciB2bSA9IHZub2RlLmNvbnRleHQ7XG5cdCAgdmFyIHJlZiA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlIHx8IHZub2RlLmVsbTtcblx0ICB2YXIgcmVmcyA9IHZtLiRyZWZzO1xuXHQgIGlmIChpc1JlbW92YWwpIHtcblx0ICAgIGlmIChBcnJheS5pc0FycmF5KHJlZnNba2V5XSkpIHtcblx0ICAgICAgcmVtb3ZlJDEocmVmc1trZXldLCByZWYpO1xuXHQgICAgfSBlbHNlIGlmIChyZWZzW2tleV0gPT09IHJlZikge1xuXHQgICAgICByZWZzW2tleV0gPSB1bmRlZmluZWQ7XG5cdCAgICB9XG5cdCAgfSBlbHNlIHtcblx0ICAgIGlmICh2bm9kZS5kYXRhLnJlZkluRm9yKSB7XG5cdCAgICAgIGlmIChBcnJheS5pc0FycmF5KHJlZnNba2V5XSkgJiYgcmVmc1trZXldLmluZGV4T2YocmVmKSA8IDApIHtcblx0ICAgICAgICByZWZzW2tleV0ucHVzaChyZWYpO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHJlZnNba2V5XSA9IFtyZWZdO1xuXHQgICAgICB9XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICByZWZzW2tleV0gPSByZWY7XG5cdCAgICB9XG5cdCAgfVxuXHR9XG5cdFxuXHQvKipcblx0ICogVmlydHVhbCBET00gcGF0Y2hpbmcgYWxnb3JpdGhtIGJhc2VkIG9uIFNuYWJiZG9tIGJ5XG5cdCAqIFNpbW9uIEZyaWlzIFZpbmR1bSAoQHBhbGRlcGluZClcblx0ICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXG5cdCAqIGh0dHBzOi8vZ2l0aHViLmNvbS9wYWxkZXBpbmQvc25hYmJkb20vYmxvYi9tYXN0ZXIvTElDRU5TRVxuXHQgKlxuXHQgKiBtb2RpZmllZCBieSBFdmFuIFlvdSAoQHl5eDk5MDgwMylcblx0ICpcblx0XG5cdC8qXG5cdCAqIE5vdCB0eXBlLWNoZWNraW5nIHRoaXMgYmVjYXVzZSB0aGlzIGZpbGUgaXMgcGVyZi1jcml0aWNhbCBhbmQgdGhlIGNvc3Rcblx0ICogb2YgbWFraW5nIGZsb3cgdW5kZXJzdGFuZCBpdCBpcyBub3Qgd29ydGggaXQuXG5cdCAqL1xuXHRcblx0dmFyIGVtcHR5Tm9kZSA9IG5ldyBWTm9kZSgnJywge30sIFtdKTtcblx0XG5cdHZhciBob29rcyQxID0gWydjcmVhdGUnLCAnYWN0aXZhdGUnLCAndXBkYXRlJywgJ3JlbW92ZScsICdkZXN0cm95J107XG5cdFxuXHRmdW5jdGlvbiBpc1VuZGVmIChzKSB7XG5cdCAgcmV0dXJuIHMgPT0gbnVsbFxuXHR9XG5cdFxuXHRmdW5jdGlvbiBpc0RlZiAocykge1xuXHQgIHJldHVybiBzICE9IG51bGxcblx0fVxuXHRcblx0ZnVuY3Rpb24gc2FtZVZub2RlICh2bm9kZTEsIHZub2RlMikge1xuXHQgIHJldHVybiAoXG5cdCAgICB2bm9kZTEua2V5ID09PSB2bm9kZTIua2V5ICYmXG5cdCAgICB2bm9kZTEudGFnID09PSB2bm9kZTIudGFnICYmXG5cdCAgICB2bm9kZTEuaXNDb21tZW50ID09PSB2bm9kZTIuaXNDb21tZW50ICYmXG5cdCAgICAhdm5vZGUxLmRhdGEgPT09ICF2bm9kZTIuZGF0YVxuXHQgIClcblx0fVxuXHRcblx0ZnVuY3Rpb24gY3JlYXRlS2V5VG9PbGRJZHggKGNoaWxkcmVuLCBiZWdpbklkeCwgZW5kSWR4KSB7XG5cdCAgdmFyIGksIGtleTtcblx0ICB2YXIgbWFwID0ge307XG5cdCAgZm9yIChpID0gYmVnaW5JZHg7IGkgPD0gZW5kSWR4OyArK2kpIHtcblx0ICAgIGtleSA9IGNoaWxkcmVuW2ldLmtleTtcblx0ICAgIGlmIChpc0RlZihrZXkpKSB7IG1hcFtrZXldID0gaTsgfVxuXHQgIH1cblx0ICByZXR1cm4gbWFwXG5cdH1cblx0XG5cdGZ1bmN0aW9uIGNyZWF0ZVBhdGNoRnVuY3Rpb24gKGJhY2tlbmQpIHtcblx0ICB2YXIgaSwgajtcblx0ICB2YXIgY2JzID0ge307XG5cdFxuXHQgIHZhciBtb2R1bGVzID0gYmFja2VuZC5tb2R1bGVzO1xuXHQgIHZhciBub2RlT3BzID0gYmFja2VuZC5ub2RlT3BzO1xuXHRcblx0ICBmb3IgKGkgPSAwOyBpIDwgaG9va3MkMS5sZW5ndGg7ICsraSkge1xuXHQgICAgY2JzW2hvb2tzJDFbaV1dID0gW107XG5cdCAgICBmb3IgKGogPSAwOyBqIDwgbW9kdWxlcy5sZW5ndGg7ICsraikge1xuXHQgICAgICBpZiAobW9kdWxlc1tqXVtob29rcyQxW2ldXSAhPT0gdW5kZWZpbmVkKSB7IGNic1tob29rcyQxW2ldXS5wdXNoKG1vZHVsZXNbal1baG9va3MkMVtpXV0pOyB9XG5cdCAgICB9XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBlbXB0eU5vZGVBdCAoZWxtKSB7XG5cdCAgICByZXR1cm4gbmV3IFZOb2RlKG5vZGVPcHMudGFnTmFtZShlbG0pLnRvTG93ZXJDYXNlKCksIHt9LCBbXSwgdW5kZWZpbmVkLCBlbG0pXG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBjcmVhdGVSbUNiIChjaGlsZEVsbSwgbGlzdGVuZXJzKSB7XG5cdCAgICBmdW5jdGlvbiByZW1vdmUkJDEgKCkge1xuXHQgICAgICBpZiAoLS1yZW1vdmUkJDEubGlzdGVuZXJzID09PSAwKSB7XG5cdCAgICAgICAgcmVtb3ZlTm9kZShjaGlsZEVsbSk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICAgIHJlbW92ZSQkMS5saXN0ZW5lcnMgPSBsaXN0ZW5lcnM7XG5cdCAgICByZXR1cm4gcmVtb3ZlJCQxXG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiByZW1vdmVOb2RlIChlbCkge1xuXHQgICAgdmFyIHBhcmVudCA9IG5vZGVPcHMucGFyZW50Tm9kZShlbCk7XG5cdCAgICAvLyBlbGVtZW50IG1heSBoYXZlIGFscmVhZHkgYmVlbiByZW1vdmVkIGR1ZSB0byB2LWh0bWwgLyB2LXRleHRcblx0ICAgIGlmIChwYXJlbnQpIHtcblx0ICAgICAgbm9kZU9wcy5yZW1vdmVDaGlsZChwYXJlbnQsIGVsKTtcblx0ICAgIH1cblx0ICB9XG5cdFxuXHQgIHZhciBpblByZSA9IDA7XG5cdCAgZnVuY3Rpb24gY3JlYXRlRWxtICh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSwgbmVzdGVkKSB7XG5cdCAgICB2bm9kZS5pc1Jvb3RJbnNlcnQgPSAhbmVzdGVkOyAvLyBmb3IgdHJhbnNpdGlvbiBlbnRlciBjaGVja1xuXHQgICAgaWYgKGNyZWF0ZUNvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSkpIHtcblx0ICAgICAgcmV0dXJuXG5cdCAgICB9XG5cdFxuXHQgICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuXHQgICAgdmFyIGNoaWxkcmVuID0gdm5vZGUuY2hpbGRyZW47XG5cdCAgICB2YXIgdGFnID0gdm5vZGUudGFnO1xuXHQgICAgaWYgKGlzRGVmKHRhZykpIHtcblx0ICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcblx0ICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLnByZSkge1xuXHQgICAgICAgICAgaW5QcmUrKztcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKFxuXHQgICAgICAgICAgIWluUHJlICYmXG5cdCAgICAgICAgICAhdm5vZGUubnMgJiZcblx0ICAgICAgICAgICEoY29uZmlnLmlnbm9yZWRFbGVtZW50cy5sZW5ndGggJiYgY29uZmlnLmlnbm9yZWRFbGVtZW50cy5pbmRleE9mKHRhZykgPiAtMSkgJiZcblx0ICAgICAgICAgIGNvbmZpZy5pc1Vua25vd25FbGVtZW50KHRhZylcblx0ICAgICAgICApIHtcblx0ICAgICAgICAgIHdhcm4oXG5cdCAgICAgICAgICAgICdVbmtub3duIGN1c3RvbSBlbGVtZW50OiA8JyArIHRhZyArICc+IC0gZGlkIHlvdSAnICtcblx0ICAgICAgICAgICAgJ3JlZ2lzdGVyIHRoZSBjb21wb25lbnQgY29ycmVjdGx5PyBGb3IgcmVjdXJzaXZlIGNvbXBvbmVudHMsICcgK1xuXHQgICAgICAgICAgICAnbWFrZSBzdXJlIHRvIHByb3ZpZGUgdGhlIFwibmFtZVwiIG9wdGlvbi4nLFxuXHQgICAgICAgICAgICB2bm9kZS5jb250ZXh0XG5cdCAgICAgICAgICApO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICB2bm9kZS5lbG0gPSB2bm9kZS5uc1xuXHQgICAgICAgID8gbm9kZU9wcy5jcmVhdGVFbGVtZW50TlModm5vZGUubnMsIHRhZylcblx0ICAgICAgICA6IG5vZGVPcHMuY3JlYXRlRWxlbWVudCh0YWcsIHZub2RlKTtcblx0ICAgICAgc2V0U2NvcGUodm5vZGUpO1xuXHRcblx0ICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG5cdCAgICAgIHtcblx0ICAgICAgICBjcmVhdGVDaGlsZHJlbih2bm9kZSwgY2hpbGRyZW4sIGluc2VydGVkVm5vZGVRdWV1ZSk7XG5cdCAgICAgICAgaWYgKGlzRGVmKGRhdGEpKSB7XG5cdCAgICAgICAgICBpbnZva2VDcmVhdGVIb29rcyh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBkYXRhICYmIGRhdGEucHJlKSB7XG5cdCAgICAgICAgaW5QcmUtLTtcblx0ICAgICAgfVxuXHQgICAgfSBlbHNlIGlmICh2bm9kZS5pc0NvbW1lbnQpIHtcblx0ICAgICAgdm5vZGUuZWxtID0gbm9kZU9wcy5jcmVhdGVDb21tZW50KHZub2RlLnRleHQpO1xuXHQgICAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICB2bm9kZS5lbG0gPSBub2RlT3BzLmNyZWF0ZVRleHROb2RlKHZub2RlLnRleHQpO1xuXHQgICAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XG5cdCAgICB9XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBjcmVhdGVDb21wb25lbnQgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKSB7XG5cdCAgICB2YXIgaSA9IHZub2RlLmRhdGE7XG5cdCAgICBpZiAoaXNEZWYoaSkpIHtcblx0ICAgICAgdmFyIGlzUmVhY3RpdmF0ZWQgPSBpc0RlZih2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkgJiYgaS5rZWVwQWxpdmU7XG5cdCAgICAgIGlmIChpc0RlZihpID0gaS5ob29rKSAmJiBpc0RlZihpID0gaS5pbml0KSkge1xuXHQgICAgICAgIGkodm5vZGUsIGZhbHNlIC8qIGh5ZHJhdGluZyAqLywgcGFyZW50RWxtLCByZWZFbG0pO1xuXHQgICAgICB9XG5cdCAgICAgIC8vIGFmdGVyIGNhbGxpbmcgdGhlIGluaXQgaG9vaywgaWYgdGhlIHZub2RlIGlzIGEgY2hpbGQgY29tcG9uZW50XG5cdCAgICAgIC8vIGl0IHNob3VsZCd2ZSBjcmVhdGVkIGEgY2hpbGQgaW5zdGFuY2UgYW5kIG1vdW50ZWQgaXQuIHRoZSBjaGlsZFxuXHQgICAgICAvLyBjb21wb25lbnQgYWxzbyBoYXMgc2V0IHRoZSBwbGFjZWhvbGRlciB2bm9kZSdzIGVsbS5cblx0ICAgICAgLy8gaW4gdGhhdCBjYXNlIHdlIGNhbiBqdXN0IHJldHVybiB0aGUgZWxlbWVudCBhbmQgYmUgZG9uZS5cblx0ICAgICAgaWYgKGlzRGVmKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSkge1xuXHQgICAgICAgIGluaXRDb21wb25lbnQodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG5cdCAgICAgICAgaWYgKGlzUmVhY3RpdmF0ZWQpIHtcblx0ICAgICAgICAgIHJlYWN0aXZhdGVDb21wb25lbnQodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gdHJ1ZVxuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBpbml0Q29tcG9uZW50ICh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7XG5cdCAgICBpZiAodm5vZGUuZGF0YS5wZW5kaW5nSW5zZXJ0KSB7XG5cdCAgICAgIGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoLmFwcGx5KGluc2VydGVkVm5vZGVRdWV1ZSwgdm5vZGUuZGF0YS5wZW5kaW5nSW5zZXJ0KTtcblx0ICAgIH1cblx0ICAgIHZub2RlLmVsbSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlLiRlbDtcblx0ICAgIGlmIChpc1BhdGNoYWJsZSh2bm9kZSkpIHtcblx0ICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG5cdCAgICAgIHNldFNjb3BlKHZub2RlKTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIC8vIGVtcHR5IGNvbXBvbmVudCByb290LlxuXHQgICAgICAvLyBza2lwIGFsbCBlbGVtZW50LXJlbGF0ZWQgbW9kdWxlcyBleGNlcHQgZm9yIHJlZiAoIzM0NTUpXG5cdCAgICAgIHJlZ2lzdGVyUmVmKHZub2RlKTtcblx0ICAgICAgLy8gbWFrZSBzdXJlIHRvIGludm9rZSB0aGUgaW5zZXJ0IGhvb2tcblx0ICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2godm5vZGUpO1xuXHQgICAgfVxuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gcmVhY3RpdmF0ZUNvbXBvbmVudCAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pIHtcblx0ICAgIHZhciBpO1xuXHQgICAgLy8gaGFjayBmb3IgIzQzMzk6IGEgcmVhY3RpdmF0ZWQgY29tcG9uZW50IHdpdGggaW5uZXIgdHJhbnNpdGlvblxuXHQgICAgLy8gZG9lcyBub3QgdHJpZ2dlciBiZWNhdXNlIHRoZSBpbm5lciBub2RlJ3MgY3JlYXRlZCBob29rcyBhcmUgbm90IGNhbGxlZFxuXHQgICAgLy8gYWdhaW4uIEl0J3Mgbm90IGlkZWFsIHRvIGludm9sdmUgbW9kdWxlLXNwZWNpZmljIGxvZ2ljIGluIGhlcmUgYnV0XG5cdCAgICAvLyB0aGVyZSBkb2Vzbid0IHNlZW0gdG8gYmUgYSBiZXR0ZXIgd2F5IHRvIGRvIGl0LlxuXHQgICAgdmFyIGlubmVyTm9kZSA9IHZub2RlO1xuXHQgICAgd2hpbGUgKGlubmVyTm9kZS5jb21wb25lbnRJbnN0YW5jZSkge1xuXHQgICAgICBpbm5lck5vZGUgPSBpbm5lck5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuXHQgICAgICBpZiAoaXNEZWYoaSA9IGlubmVyTm9kZS5kYXRhKSAmJiBpc0RlZihpID0gaS50cmFuc2l0aW9uKSkge1xuXHQgICAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMuYWN0aXZhdGUubGVuZ3RoOyArK2kpIHtcblx0ICAgICAgICAgIGNicy5hY3RpdmF0ZVtpXShlbXB0eU5vZGUsIGlubmVyTm9kZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoKGlubmVyTm9kZSk7XG5cdCAgICAgICAgYnJlYWtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgLy8gdW5saWtlIGEgbmV3bHkgY3JlYXRlZCBjb21wb25lbnQsXG5cdCAgICAvLyBhIHJlYWN0aXZhdGVkIGtlZXAtYWxpdmUgY29tcG9uZW50IGRvZXNuJ3QgaW5zZXJ0IGl0c2VsZlxuXHQgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gaW5zZXJ0IChwYXJlbnQsIGVsbSwgcmVmKSB7XG5cdCAgICBpZiAocGFyZW50KSB7XG5cdCAgICAgIGlmIChyZWYpIHtcblx0ICAgICAgICBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnQsIGVsbSwgcmVmKTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICBub2RlT3BzLmFwcGVuZENoaWxkKHBhcmVudCwgZWxtKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gY3JlYXRlQ2hpbGRyZW4gKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7XG5cdCAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcblx0ICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7ICsraSkge1xuXHQgICAgICAgIGNyZWF0ZUVsbShjaGlsZHJlbltpXSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCB2bm9kZS5lbG0sIG51bGwsIHRydWUpO1xuXHQgICAgICB9XG5cdCAgICB9IGVsc2UgaWYgKGlzUHJpbWl0aXZlKHZub2RlLnRleHQpKSB7XG5cdCAgICAgIG5vZGVPcHMuYXBwZW5kQ2hpbGQodm5vZGUuZWxtLCBub2RlT3BzLmNyZWF0ZVRleHROb2RlKHZub2RlLnRleHQpKTtcblx0ICAgIH1cblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIGlzUGF0Y2hhYmxlICh2bm9kZSkge1xuXHQgICAgd2hpbGUgKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSB7XG5cdCAgICAgIHZub2RlID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIGlzRGVmKHZub2RlLnRhZylcblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIGludm9rZUNyZWF0ZUhvb2tzICh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7XG5cdCAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjYnMuY3JlYXRlLmxlbmd0aDsgKytpJDEpIHtcblx0ICAgICAgY2JzLmNyZWF0ZVtpJDFdKGVtcHR5Tm9kZSwgdm5vZGUpO1xuXHQgICAgfVxuXHQgICAgaSA9IHZub2RlLmRhdGEuaG9vazsgLy8gUmV1c2UgdmFyaWFibGVcblx0ICAgIGlmIChpc0RlZihpKSkge1xuXHQgICAgICBpZiAoaS5jcmVhdGUpIHsgaS5jcmVhdGUoZW1wdHlOb2RlLCB2bm9kZSk7IH1cblx0ICAgICAgaWYgKGkuaW5zZXJ0KSB7IGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoKHZub2RlKTsgfVxuXHQgICAgfVxuXHQgIH1cblx0XG5cdCAgLy8gc2V0IHNjb3BlIGlkIGF0dHJpYnV0ZSBmb3Igc2NvcGVkIENTUy5cblx0ICAvLyB0aGlzIGlzIGltcGxlbWVudGVkIGFzIGEgc3BlY2lhbCBjYXNlIHRvIGF2b2lkIHRoZSBvdmVyaGVhZFxuXHQgIC8vIG9mIGdvaW5nIHRocm91Z2ggdGhlIG5vcm1hbCBhdHRyaWJ1dGUgcGF0Y2hpbmcgcHJvY2Vzcy5cblx0ICBmdW5jdGlvbiBzZXRTY29wZSAodm5vZGUpIHtcblx0ICAgIHZhciBpO1xuXHQgICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5jb250ZXh0KSAmJiBpc0RlZihpID0gaS4kb3B0aW9ucy5fc2NvcGVJZCkpIHtcblx0ICAgICAgbm9kZU9wcy5zZXRBdHRyaWJ1dGUodm5vZGUuZWxtLCBpLCAnJyk7XG5cdCAgICB9XG5cdCAgICBpZiAoaXNEZWYoaSA9IGFjdGl2ZUluc3RhbmNlKSAmJlxuXHQgICAgICAgIGkgIT09IHZub2RlLmNvbnRleHQgJiZcblx0ICAgICAgICBpc0RlZihpID0gaS4kb3B0aW9ucy5fc2NvcGVJZCkpIHtcblx0ICAgICAgbm9kZU9wcy5zZXRBdHRyaWJ1dGUodm5vZGUuZWxtLCBpLCAnJyk7XG5cdCAgICB9XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBhZGRWbm9kZXMgKHBhcmVudEVsbSwgcmVmRWxtLCB2bm9kZXMsIHN0YXJ0SWR4LCBlbmRJZHgsIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuXHQgICAgZm9yICg7IHN0YXJ0SWR4IDw9IGVuZElkeDsgKytzdGFydElkeCkge1xuXHQgICAgICBjcmVhdGVFbG0odm5vZGVzW3N0YXJ0SWR4XSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSk7XG5cdCAgICB9XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBpbnZva2VEZXN0cm95SG9vayAodm5vZGUpIHtcblx0ICAgIHZhciBpLCBqO1xuXHQgICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuXHQgICAgaWYgKGlzRGVmKGRhdGEpKSB7XG5cdCAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5kZXN0cm95KSkgeyBpKHZub2RlKTsgfVxuXHQgICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLmRlc3Ryb3kubGVuZ3RoOyArK2kpIHsgY2JzLmRlc3Ryb3lbaV0odm5vZGUpOyB9XG5cdCAgICB9XG5cdCAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmNoaWxkcmVuKSkge1xuXHQgICAgICBmb3IgKGogPSAwOyBqIDwgdm5vZGUuY2hpbGRyZW4ubGVuZ3RoOyArK2opIHtcblx0ICAgICAgICBpbnZva2VEZXN0cm95SG9vayh2bm9kZS5jaGlsZHJlbltqXSk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIHJlbW92ZVZub2RlcyAocGFyZW50RWxtLCB2bm9kZXMsIHN0YXJ0SWR4LCBlbmRJZHgpIHtcblx0ICAgIGZvciAoOyBzdGFydElkeCA8PSBlbmRJZHg7ICsrc3RhcnRJZHgpIHtcblx0ICAgICAgdmFyIGNoID0gdm5vZGVzW3N0YXJ0SWR4XTtcblx0ICAgICAgaWYgKGlzRGVmKGNoKSkge1xuXHQgICAgICAgIGlmIChpc0RlZihjaC50YWcpKSB7XG5cdCAgICAgICAgICByZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rKGNoKTtcblx0ICAgICAgICAgIGludm9rZURlc3Ryb3lIb29rKGNoKTtcblx0ICAgICAgICB9IGVsc2UgeyAvLyBUZXh0IG5vZGVcblx0ICAgICAgICAgIHJlbW92ZU5vZGUoY2guZWxtKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIHJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2sgKHZub2RlLCBybSkge1xuXHQgICAgaWYgKHJtIHx8IGlzRGVmKHZub2RlLmRhdGEpKSB7XG5cdCAgICAgIHZhciBsaXN0ZW5lcnMgPSBjYnMucmVtb3ZlLmxlbmd0aCArIDE7XG5cdCAgICAgIGlmICghcm0pIHtcblx0ICAgICAgICAvLyBkaXJlY3RseSByZW1vdmluZ1xuXHQgICAgICAgIHJtID0gY3JlYXRlUm1DYih2bm9kZS5lbG0sIGxpc3RlbmVycyk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgLy8gd2UgaGF2ZSBhIHJlY3Vyc2l2ZWx5IHBhc3NlZCBkb3duIHJtIGNhbGxiYWNrXG5cdCAgICAgICAgLy8gaW5jcmVhc2UgdGhlIGxpc3RlbmVycyBjb3VudFxuXHQgICAgICAgIHJtLmxpc3RlbmVycyArPSBsaXN0ZW5lcnM7XG5cdCAgICAgIH1cblx0ICAgICAgLy8gcmVjdXJzaXZlbHkgaW52b2tlIGhvb2tzIG9uIGNoaWxkIGNvbXBvbmVudCByb290IG5vZGVcblx0ICAgICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkgJiYgaXNEZWYoaSA9IGkuX3Zub2RlKSAmJiBpc0RlZihpLmRhdGEpKSB7XG5cdCAgICAgICAgcmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayhpLCBybSk7XG5cdCAgICAgIH1cblx0ICAgICAgZm9yIChpID0gMDsgaSA8IGNicy5yZW1vdmUubGVuZ3RoOyArK2kpIHtcblx0ICAgICAgICBjYnMucmVtb3ZlW2ldKHZub2RlLCBybSk7XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5kYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnJlbW92ZSkpIHtcblx0ICAgICAgICBpKHZub2RlLCBybSk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgcm0oKTtcblx0ICAgICAgfVxuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgcmVtb3ZlTm9kZSh2bm9kZS5lbG0pO1xuXHQgICAgfVxuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gdXBkYXRlQ2hpbGRyZW4gKHBhcmVudEVsbSwgb2xkQ2gsIG5ld0NoLCBpbnNlcnRlZFZub2RlUXVldWUsIHJlbW92ZU9ubHkpIHtcblx0ICAgIHZhciBvbGRTdGFydElkeCA9IDA7XG5cdCAgICB2YXIgbmV3U3RhcnRJZHggPSAwO1xuXHQgICAgdmFyIG9sZEVuZElkeCA9IG9sZENoLmxlbmd0aCAtIDE7XG5cdCAgICB2YXIgb2xkU3RhcnRWbm9kZSA9IG9sZENoWzBdO1xuXHQgICAgdmFyIG9sZEVuZFZub2RlID0gb2xkQ2hbb2xkRW5kSWR4XTtcblx0ICAgIHZhciBuZXdFbmRJZHggPSBuZXdDaC5sZW5ndGggLSAxO1xuXHQgICAgdmFyIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFswXTtcblx0ICAgIHZhciBuZXdFbmRWbm9kZSA9IG5ld0NoW25ld0VuZElkeF07XG5cdCAgICB2YXIgb2xkS2V5VG9JZHgsIGlkeEluT2xkLCBlbG1Ub01vdmUsIHJlZkVsbTtcblx0XG5cdCAgICAvLyByZW1vdmVPbmx5IGlzIGEgc3BlY2lhbCBmbGFnIHVzZWQgb25seSBieSA8dHJhbnNpdGlvbi1ncm91cD5cblx0ICAgIC8vIHRvIGVuc3VyZSByZW1vdmVkIGVsZW1lbnRzIHN0YXkgaW4gY29ycmVjdCByZWxhdGl2ZSBwb3NpdGlvbnNcblx0ICAgIC8vIGR1cmluZyBsZWF2aW5nIHRyYW5zaXRpb25zXG5cdCAgICB2YXIgY2FuTW92ZSA9ICFyZW1vdmVPbmx5O1xuXHRcblx0ICAgIHdoaWxlIChvbGRTdGFydElkeCA8PSBvbGRFbmRJZHggJiYgbmV3U3RhcnRJZHggPD0gbmV3RW5kSWR4KSB7XG5cdCAgICAgIGlmIChpc1VuZGVmKG9sZFN0YXJ0Vm5vZGUpKSB7XG5cdCAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdOyAvLyBWbm9kZSBoYXMgYmVlbiBtb3ZlZCBsZWZ0XG5cdCAgICAgIH0gZWxzZSBpZiAoaXNVbmRlZihvbGRFbmRWbm9kZSkpIHtcblx0ICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTtcblx0ICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3U3RhcnRWbm9kZSkpIHtcblx0ICAgICAgICBwYXRjaFZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG5cdCAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdO1xuXHQgICAgICAgIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFsrK25ld1N0YXJ0SWR4XTtcblx0ICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkRW5kVm5vZGUsIG5ld0VuZFZub2RlKSkge1xuXHQgICAgICAgIHBhdGNoVm5vZGUob2xkRW5kVm5vZGUsIG5ld0VuZFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuXHQgICAgICAgIG9sZEVuZFZub2RlID0gb2xkQ2hbLS1vbGRFbmRJZHhdO1xuXHQgICAgICAgIG5ld0VuZFZub2RlID0gbmV3Q2hbLS1uZXdFbmRJZHhdO1xuXHQgICAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRTdGFydFZub2RlLCBuZXdFbmRWbm9kZSkpIHsgLy8gVm5vZGUgbW92ZWQgcmlnaHRcblx0ICAgICAgICBwYXRjaFZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld0VuZFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuXHQgICAgICAgIGNhbk1vdmUgJiYgbm9kZU9wcy5pbnNlcnRCZWZvcmUocGFyZW50RWxtLCBvbGRTdGFydFZub2RlLmVsbSwgbm9kZU9wcy5uZXh0U2libGluZyhvbGRFbmRWbm9kZS5lbG0pKTtcblx0ICAgICAgICBvbGRTdGFydFZub2RlID0gb2xkQ2hbKytvbGRTdGFydElkeF07XG5cdCAgICAgICAgbmV3RW5kVm5vZGUgPSBuZXdDaFstLW5ld0VuZElkeF07XG5cdCAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZEVuZFZub2RlLCBuZXdTdGFydFZub2RlKSkgeyAvLyBWbm9kZSBtb3ZlZCBsZWZ0XG5cdCAgICAgICAgcGF0Y2hWbm9kZShvbGRFbmRWbm9kZSwgbmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcblx0ICAgICAgICBjYW5Nb3ZlICYmIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudEVsbSwgb2xkRW5kVm5vZGUuZWxtLCBvbGRTdGFydFZub2RlLmVsbSk7XG5cdCAgICAgICAgb2xkRW5kVm5vZGUgPSBvbGRDaFstLW9sZEVuZElkeF07XG5cdCAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIGlmIChpc1VuZGVmKG9sZEtleVRvSWR4KSkgeyBvbGRLZXlUb0lkeCA9IGNyZWF0ZUtleVRvT2xkSWR4KG9sZENoLCBvbGRTdGFydElkeCwgb2xkRW5kSWR4KTsgfVxuXHQgICAgICAgIGlkeEluT2xkID0gaXNEZWYobmV3U3RhcnRWbm9kZS5rZXkpID8gb2xkS2V5VG9JZHhbbmV3U3RhcnRWbm9kZS5rZXldIDogbnVsbDtcblx0ICAgICAgICBpZiAoaXNVbmRlZihpZHhJbk9sZCkpIHsgLy8gTmV3IGVsZW1lbnRcblx0ICAgICAgICAgIGNyZWF0ZUVsbShuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgb2xkU3RhcnRWbm9kZS5lbG0pO1xuXHQgICAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICBlbG1Ub01vdmUgPSBvbGRDaFtpZHhJbk9sZF07XG5cdCAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cblx0ICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFlbG1Ub01vdmUpIHtcblx0ICAgICAgICAgICAgd2Fybihcblx0ICAgICAgICAgICAgICAnSXQgc2VlbXMgdGhlcmUgYXJlIGR1cGxpY2F0ZSBrZXlzIHRoYXQgaXMgY2F1c2luZyBhbiB1cGRhdGUgZXJyb3IuICcgK1xuXHQgICAgICAgICAgICAgICdNYWtlIHN1cmUgZWFjaCB2LWZvciBpdGVtIGhhcyBhIHVuaXF1ZSBrZXkuJ1xuXHQgICAgICAgICAgICApO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgaWYgKHNhbWVWbm9kZShlbG1Ub01vdmUsIG5ld1N0YXJ0Vm5vZGUpKSB7XG5cdCAgICAgICAgICAgIHBhdGNoVm5vZGUoZWxtVG9Nb3ZlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuXHQgICAgICAgICAgICBvbGRDaFtpZHhJbk9sZF0gPSB1bmRlZmluZWQ7XG5cdCAgICAgICAgICAgIGNhbk1vdmUgJiYgbm9kZU9wcy5pbnNlcnRCZWZvcmUocGFyZW50RWxtLCBuZXdTdGFydFZub2RlLmVsbSwgb2xkU3RhcnRWbm9kZS5lbG0pO1xuXHQgICAgICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG5cdCAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAvLyBzYW1lIGtleSBidXQgZGlmZmVyZW50IGVsZW1lbnQuIHRyZWF0IGFzIG5ldyBlbGVtZW50XG5cdCAgICAgICAgICAgIGNyZWF0ZUVsbShuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgb2xkU3RhcnRWbm9kZS5lbG0pO1xuXHQgICAgICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICBpZiAob2xkU3RhcnRJZHggPiBvbGRFbmRJZHgpIHtcblx0ICAgICAgcmVmRWxtID0gaXNVbmRlZihuZXdDaFtuZXdFbmRJZHggKyAxXSkgPyBudWxsIDogbmV3Q2hbbmV3RW5kSWR4ICsgMV0uZWxtO1xuXHQgICAgICBhZGRWbm9kZXMocGFyZW50RWxtLCByZWZFbG0sIG5ld0NoLCBuZXdTdGFydElkeCwgbmV3RW5kSWR4LCBpbnNlcnRlZFZub2RlUXVldWUpO1xuXHQgICAgfSBlbHNlIGlmIChuZXdTdGFydElkeCA+IG5ld0VuZElkeCkge1xuXHQgICAgICByZW1vdmVWbm9kZXMocGFyZW50RWxtLCBvbGRDaCwgb2xkU3RhcnRJZHgsIG9sZEVuZElkeCk7XG5cdCAgICB9XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBwYXRjaFZub2RlIChvbGRWbm9kZSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcmVtb3ZlT25seSkge1xuXHQgICAgaWYgKG9sZFZub2RlID09PSB2bm9kZSkge1xuXHQgICAgICByZXR1cm5cblx0ICAgIH1cblx0ICAgIC8vIHJldXNlIGVsZW1lbnQgZm9yIHN0YXRpYyB0cmVlcy5cblx0ICAgIC8vIG5vdGUgd2Ugb25seSBkbyB0aGlzIGlmIHRoZSB2bm9kZSBpcyBjbG9uZWQgLVxuXHQgICAgLy8gaWYgdGhlIG5ldyBub2RlIGlzIG5vdCBjbG9uZWQgaXQgbWVhbnMgdGhlIHJlbmRlciBmdW5jdGlvbnMgaGF2ZSBiZWVuXG5cdCAgICAvLyByZXNldCBieSB0aGUgaG90LXJlbG9hZC1hcGkgYW5kIHdlIG5lZWQgdG8gZG8gYSBwcm9wZXIgcmUtcmVuZGVyLlxuXHQgICAgaWYgKHZub2RlLmlzU3RhdGljICYmXG5cdCAgICAgICAgb2xkVm5vZGUuaXNTdGF0aWMgJiZcblx0ICAgICAgICB2bm9kZS5rZXkgPT09IG9sZFZub2RlLmtleSAmJlxuXHQgICAgICAgICh2bm9kZS5pc0Nsb25lZCB8fCB2bm9kZS5pc09uY2UpKSB7XG5cdCAgICAgIHZub2RlLmVsbSA9IG9sZFZub2RlLmVsbTtcblx0ICAgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBvbGRWbm9kZS5jb21wb25lbnRJbnN0YW5jZTtcblx0ICAgICAgcmV0dXJuXG5cdCAgICB9XG5cdCAgICB2YXIgaTtcblx0ICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcblx0ICAgIHZhciBoYXNEYXRhID0gaXNEZWYoZGF0YSk7XG5cdCAgICBpZiAoaGFzRGF0YSAmJiBpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5wcmVwYXRjaCkpIHtcblx0ICAgICAgaShvbGRWbm9kZSwgdm5vZGUpO1xuXHQgICAgfVxuXHQgICAgdmFyIGVsbSA9IHZub2RlLmVsbSA9IG9sZFZub2RlLmVsbTtcblx0ICAgIHZhciBvbGRDaCA9IG9sZFZub2RlLmNoaWxkcmVuO1xuXHQgICAgdmFyIGNoID0gdm5vZGUuY2hpbGRyZW47XG5cdCAgICBpZiAoaGFzRGF0YSAmJiBpc1BhdGNoYWJsZSh2bm9kZSkpIHtcblx0ICAgICAgZm9yIChpID0gMDsgaSA8IGNicy51cGRhdGUubGVuZ3RoOyArK2kpIHsgY2JzLnVwZGF0ZVtpXShvbGRWbm9kZSwgdm5vZGUpOyB9XG5cdCAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS51cGRhdGUpKSB7IGkob2xkVm5vZGUsIHZub2RlKTsgfVxuXHQgICAgfVxuXHQgICAgaWYgKGlzVW5kZWYodm5vZGUudGV4dCkpIHtcblx0ICAgICAgaWYgKGlzRGVmKG9sZENoKSAmJiBpc0RlZihjaCkpIHtcblx0ICAgICAgICBpZiAob2xkQ2ggIT09IGNoKSB7IHVwZGF0ZUNoaWxkcmVuKGVsbSwgb2xkQ2gsIGNoLCBpbnNlcnRlZFZub2RlUXVldWUsIHJlbW92ZU9ubHkpOyB9XG5cdCAgICAgIH0gZWxzZSBpZiAoaXNEZWYoY2gpKSB7XG5cdCAgICAgICAgaWYgKGlzRGVmKG9sZFZub2RlLnRleHQpKSB7IG5vZGVPcHMuc2V0VGV4dENvbnRlbnQoZWxtLCAnJyk7IH1cblx0ICAgICAgICBhZGRWbm9kZXMoZWxtLCBudWxsLCBjaCwgMCwgY2gubGVuZ3RoIC0gMSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcblx0ICAgICAgfSBlbHNlIGlmIChpc0RlZihvbGRDaCkpIHtcblx0ICAgICAgICByZW1vdmVWbm9kZXMoZWxtLCBvbGRDaCwgMCwgb2xkQ2gubGVuZ3RoIC0gMSk7XG5cdCAgICAgIH0gZWxzZSBpZiAoaXNEZWYob2xkVm5vZGUudGV4dCkpIHtcblx0ICAgICAgICBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgJycpO1xuXHQgICAgICB9XG5cdCAgICB9IGVsc2UgaWYgKG9sZFZub2RlLnRleHQgIT09IHZub2RlLnRleHQpIHtcblx0ICAgICAgbm9kZU9wcy5zZXRUZXh0Q29udGVudChlbG0sIHZub2RlLnRleHQpO1xuXHQgICAgfVxuXHQgICAgaWYgKGhhc0RhdGEpIHtcblx0ICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnBvc3RwYXRjaCkpIHsgaShvbGRWbm9kZSwgdm5vZGUpOyB9XG5cdCAgICB9XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBpbnZva2VJbnNlcnRIb29rICh2bm9kZSwgcXVldWUsIGluaXRpYWwpIHtcblx0ICAgIC8vIGRlbGF5IGluc2VydCBob29rcyBmb3IgY29tcG9uZW50IHJvb3Qgbm9kZXMsIGludm9rZSB0aGVtIGFmdGVyIHRoZVxuXHQgICAgLy8gZWxlbWVudCBpcyByZWFsbHkgaW5zZXJ0ZWRcblx0ICAgIGlmIChpbml0aWFsICYmIHZub2RlLnBhcmVudCkge1xuXHQgICAgICB2bm9kZS5wYXJlbnQuZGF0YS5wZW5kaW5nSW5zZXJ0ID0gcXVldWU7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgKytpKSB7XG5cdCAgICAgICAgcXVldWVbaV0uZGF0YS5ob29rLmluc2VydChxdWV1ZVtpXSk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9XG5cdFxuXHQgIHZhciBiYWlsZWQgPSBmYWxzZTtcblx0ICAvLyBsaXN0IG9mIG1vZHVsZXMgdGhhdCBjYW4gc2tpcCBjcmVhdGUgaG9vayBkdXJpbmcgaHlkcmF0aW9uIGJlY2F1c2UgdGhleVxuXHQgIC8vIGFyZSBhbHJlYWR5IHJlbmRlcmVkIG9uIHRoZSBjbGllbnQgb3IgaGFzIG5vIG5lZWQgZm9yIGluaXRpYWxpemF0aW9uXG5cdCAgdmFyIGlzUmVuZGVyZWRNb2R1bGUgPSBtYWtlTWFwKCdhdHRycyxzdHlsZSxjbGFzcyxzdGF0aWNDbGFzcyxzdGF0aWNTdHlsZSxrZXknKTtcblx0XG5cdCAgLy8gTm90ZTogdGhpcyBpcyBhIGJyb3dzZXItb25seSBmdW5jdGlvbiBzbyB3ZSBjYW4gYXNzdW1lIGVsbXMgYXJlIERPTSBub2Rlcy5cblx0ICBmdW5jdGlvbiBoeWRyYXRlIChlbG0sIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcblx0ICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG5cdCAgICAgIGlmICghYXNzZXJ0Tm9kZU1hdGNoKGVsbSwgdm5vZGUpKSB7XG5cdCAgICAgICAgcmV0dXJuIGZhbHNlXG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICAgIHZub2RlLmVsbSA9IGVsbTtcblx0ICAgIHZhciB0YWcgPSB2bm9kZS50YWc7XG5cdCAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG5cdCAgICB2YXIgY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbjtcblx0ICAgIGlmIChpc0RlZihkYXRhKSkge1xuXHQgICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkuaW5pdCkpIHsgaSh2bm9kZSwgdHJ1ZSAvKiBoeWRyYXRpbmcgKi8pOyB9XG5cdCAgICAgIGlmIChpc0RlZihpID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UpKSB7XG5cdCAgICAgICAgLy8gY2hpbGQgY29tcG9uZW50LiBpdCBzaG91bGQgaGF2ZSBoeWRyYXRlZCBpdHMgb3duIHRyZWUuXG5cdCAgICAgICAgaW5pdENvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcblx0ICAgICAgICByZXR1cm4gdHJ1ZVxuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICBpZiAoaXNEZWYodGFnKSkge1xuXHQgICAgICBpZiAoaXNEZWYoY2hpbGRyZW4pKSB7XG5cdCAgICAgICAgLy8gZW1wdHkgZWxlbWVudCwgYWxsb3cgY2xpZW50IHRvIHBpY2sgdXAgYW5kIHBvcHVsYXRlIGNoaWxkcmVuXG5cdCAgICAgICAgaWYgKCFlbG0uaGFzQ2hpbGROb2RlcygpKSB7XG5cdCAgICAgICAgICBjcmVhdGVDaGlsZHJlbih2bm9kZSwgY2hpbGRyZW4sIGluc2VydGVkVm5vZGVRdWV1ZSk7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIHZhciBjaGlsZHJlbk1hdGNoID0gdHJ1ZTtcblx0ICAgICAgICAgIHZhciBjaGlsZE5vZGUgPSBlbG0uZmlyc3RDaGlsZDtcblx0ICAgICAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGNoaWxkcmVuLmxlbmd0aDsgaSQxKyspIHtcblx0ICAgICAgICAgICAgaWYgKCFjaGlsZE5vZGUgfHwgIWh5ZHJhdGUoY2hpbGROb2RlLCBjaGlsZHJlbltpJDFdLCBpbnNlcnRlZFZub2RlUXVldWUpKSB7XG5cdCAgICAgICAgICAgICAgY2hpbGRyZW5NYXRjaCA9IGZhbHNlO1xuXHQgICAgICAgICAgICAgIGJyZWFrXG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgY2hpbGROb2RlID0gY2hpbGROb2RlLm5leHRTaWJsaW5nO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgLy8gaWYgY2hpbGROb2RlIGlzIG5vdCBudWxsLCBpdCBtZWFucyB0aGUgYWN0dWFsIGNoaWxkTm9kZXMgbGlzdCBpc1xuXHQgICAgICAgICAgLy8gbG9uZ2VyIHRoYW4gdGhlIHZpcnR1YWwgY2hpbGRyZW4gbGlzdC5cblx0ICAgICAgICAgIGlmICghY2hpbGRyZW5NYXRjaCB8fCBjaGlsZE5vZGUpIHtcblx0ICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcblx0ICAgICAgICAgICAgICAgIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJlxuXHQgICAgICAgICAgICAgICAgIWJhaWxlZCkge1xuXHQgICAgICAgICAgICAgIGJhaWxlZCA9IHRydWU7XG5cdCAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdQYXJlbnQ6ICcsIGVsbSk7XG5cdCAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdNaXNtYXRjaGluZyBjaGlsZE5vZGVzIHZzLiBWTm9kZXM6ICcsIGVsbS5jaGlsZE5vZGVzLCBjaGlsZHJlbik7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIGlmIChpc0RlZihkYXRhKSkge1xuXHQgICAgICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7XG5cdCAgICAgICAgICBpZiAoIWlzUmVuZGVyZWRNb2R1bGUoa2V5KSkge1xuXHQgICAgICAgICAgICBpbnZva2VDcmVhdGVIb29rcyh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcblx0ICAgICAgICAgICAgYnJlYWtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH0gZWxzZSBpZiAoZWxtLmRhdGEgIT09IHZub2RlLnRleHQpIHtcblx0ICAgICAgZWxtLmRhdGEgPSB2bm9kZS50ZXh0O1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIHRydWVcblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIGFzc2VydE5vZGVNYXRjaCAobm9kZSwgdm5vZGUpIHtcblx0ICAgIGlmICh2bm9kZS50YWcpIHtcblx0ICAgICAgcmV0dXJuIChcblx0ICAgICAgICB2bm9kZS50YWcuaW5kZXhPZigndnVlLWNvbXBvbmVudCcpID09PSAwIHx8XG5cdCAgICAgICAgdm5vZGUudGFnLnRvTG93ZXJDYXNlKCkgPT09IChub2RlLnRhZ05hbWUgJiYgbm9kZS50YWdOYW1lLnRvTG93ZXJDYXNlKCkpXG5cdCAgICAgIClcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHJldHVybiBub2RlLm5vZGVUeXBlID09PSAodm5vZGUuaXNDb21tZW50ID8gOCA6IDMpXG5cdCAgICB9XG5cdCAgfVxuXHRcblx0ICByZXR1cm4gZnVuY3Rpb24gcGF0Y2ggKG9sZFZub2RlLCB2bm9kZSwgaHlkcmF0aW5nLCByZW1vdmVPbmx5LCBwYXJlbnRFbG0sIHJlZkVsbSkge1xuXHQgICAgaWYgKCF2bm9kZSkge1xuXHQgICAgICBpZiAob2xkVm5vZGUpIHsgaW52b2tlRGVzdHJveUhvb2sob2xkVm5vZGUpOyB9XG5cdCAgICAgIHJldHVyblxuXHQgICAgfVxuXHRcblx0ICAgIHZhciBpc0luaXRpYWxQYXRjaCA9IGZhbHNlO1xuXHQgICAgdmFyIGluc2VydGVkVm5vZGVRdWV1ZSA9IFtdO1xuXHRcblx0ICAgIGlmICghb2xkVm5vZGUpIHtcblx0ICAgICAgLy8gZW1wdHkgbW91bnQgKGxpa2VseSBhcyBjb21wb25lbnQpLCBjcmVhdGUgbmV3IHJvb3QgZWxlbWVudFxuXHQgICAgICBpc0luaXRpYWxQYXRjaCA9IHRydWU7XG5cdCAgICAgIGNyZWF0ZUVsbSh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSk7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICB2YXIgaXNSZWFsRWxlbWVudCA9IGlzRGVmKG9sZFZub2RlLm5vZGVUeXBlKTtcblx0ICAgICAgaWYgKCFpc1JlYWxFbGVtZW50ICYmIHNhbWVWbm9kZShvbGRWbm9kZSwgdm5vZGUpKSB7XG5cdCAgICAgICAgLy8gcGF0Y2ggZXhpc3Rpbmcgcm9vdCBub2RlXG5cdCAgICAgICAgcGF0Y2hWbm9kZShvbGRWbm9kZSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcmVtb3ZlT25seSk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgaWYgKGlzUmVhbEVsZW1lbnQpIHtcblx0ICAgICAgICAgIC8vIG1vdW50aW5nIHRvIGEgcmVhbCBlbGVtZW50XG5cdCAgICAgICAgICAvLyBjaGVjayBpZiB0aGlzIGlzIHNlcnZlci1yZW5kZXJlZCBjb250ZW50IGFuZCBpZiB3ZSBjYW4gcGVyZm9ybVxuXHQgICAgICAgICAgLy8gYSBzdWNjZXNzZnVsIGh5ZHJhdGlvbi5cblx0ICAgICAgICAgIGlmIChvbGRWbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiBvbGRWbm9kZS5oYXNBdHRyaWJ1dGUoJ3NlcnZlci1yZW5kZXJlZCcpKSB7XG5cdCAgICAgICAgICAgIG9sZFZub2RlLnJlbW92ZUF0dHJpYnV0ZSgnc2VydmVyLXJlbmRlcmVkJyk7XG5cdCAgICAgICAgICAgIGh5ZHJhdGluZyA9IHRydWU7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICBpZiAoaHlkcmF0aW5nKSB7XG5cdCAgICAgICAgICAgIGlmIChoeWRyYXRlKG9sZFZub2RlLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSkge1xuXHQgICAgICAgICAgICAgIGludm9rZUluc2VydEhvb2sodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgdHJ1ZSk7XG5cdCAgICAgICAgICAgICAgcmV0dXJuIG9sZFZub2RlXG5cdCAgICAgICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuXHQgICAgICAgICAgICAgIHdhcm4oXG5cdCAgICAgICAgICAgICAgICAnVGhlIGNsaWVudC1zaWRlIHJlbmRlcmVkIHZpcnR1YWwgRE9NIHRyZWUgaXMgbm90IG1hdGNoaW5nICcgK1xuXHQgICAgICAgICAgICAgICAgJ3NlcnZlci1yZW5kZXJlZCBjb250ZW50LiBUaGlzIGlzIGxpa2VseSBjYXVzZWQgYnkgaW5jb3JyZWN0ICcgK1xuXHQgICAgICAgICAgICAgICAgJ0hUTUwgbWFya3VwLCBmb3IgZXhhbXBsZSBuZXN0aW5nIGJsb2NrLWxldmVsIGVsZW1lbnRzIGluc2lkZSAnICtcblx0ICAgICAgICAgICAgICAgICc8cD4sIG9yIG1pc3NpbmcgPHRib2R5Pi4gQmFpbGluZyBoeWRyYXRpb24gYW5kIHBlcmZvcm1pbmcgJyArXG5cdCAgICAgICAgICAgICAgICAnZnVsbCBjbGllbnQtc2lkZSByZW5kZXIuJ1xuXHQgICAgICAgICAgICAgICk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIC8vIGVpdGhlciBub3Qgc2VydmVyLXJlbmRlcmVkLCBvciBoeWRyYXRpb24gZmFpbGVkLlxuXHQgICAgICAgICAgLy8gY3JlYXRlIGFuIGVtcHR5IG5vZGUgYW5kIHJlcGxhY2UgaXRcblx0ICAgICAgICAgIG9sZFZub2RlID0gZW1wdHlOb2RlQXQob2xkVm5vZGUpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICAvLyByZXBsYWNpbmcgZXhpc3RpbmcgZWxlbWVudFxuXHQgICAgICAgIHZhciBvbGRFbG0gPSBvbGRWbm9kZS5lbG07XG5cdCAgICAgICAgdmFyIHBhcmVudEVsbSQxID0gbm9kZU9wcy5wYXJlbnROb2RlKG9sZEVsbSk7XG5cdCAgICAgICAgY3JlYXRlRWxtKFxuXHQgICAgICAgICAgdm5vZGUsXG5cdCAgICAgICAgICBpbnNlcnRlZFZub2RlUXVldWUsXG5cdCAgICAgICAgICAvLyBleHRyZW1lbHkgcmFyZSBlZGdlIGNhc2U6IGRvIG5vdCBpbnNlcnQgaWYgb2xkIGVsZW1lbnQgaXMgaW4gYVxuXHQgICAgICAgICAgLy8gbGVhdmluZyB0cmFuc2l0aW9uLiBPbmx5IGhhcHBlbnMgd2hlbiBjb21iaW5pbmcgdHJhbnNpdGlvbiArXG5cdCAgICAgICAgICAvLyBrZWVwLWFsaXZlICsgSE9Dcy4gKCM0NTkwKVxuXHQgICAgICAgICAgb2xkRWxtLl9sZWF2ZUNiID8gbnVsbCA6IHBhcmVudEVsbSQxLFxuXHQgICAgICAgICAgbm9kZU9wcy5uZXh0U2libGluZyhvbGRFbG0pXG5cdCAgICAgICAgKTtcblx0XG5cdCAgICAgICAgaWYgKHZub2RlLnBhcmVudCkge1xuXHQgICAgICAgICAgLy8gY29tcG9uZW50IHJvb3QgZWxlbWVudCByZXBsYWNlZC5cblx0ICAgICAgICAgIC8vIHVwZGF0ZSBwYXJlbnQgcGxhY2Vob2xkZXIgbm9kZSBlbGVtZW50LCByZWN1cnNpdmVseVxuXHQgICAgICAgICAgdmFyIGFuY2VzdG9yID0gdm5vZGUucGFyZW50O1xuXHQgICAgICAgICAgd2hpbGUgKGFuY2VzdG9yKSB7XG5cdCAgICAgICAgICAgIGFuY2VzdG9yLmVsbSA9IHZub2RlLmVsbTtcblx0ICAgICAgICAgICAgYW5jZXN0b3IgPSBhbmNlc3Rvci5wYXJlbnQ7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICBpZiAoaXNQYXRjaGFibGUodm5vZGUpKSB7XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2JzLmNyZWF0ZS5sZW5ndGg7ICsraSkge1xuXHQgICAgICAgICAgICAgIGNicy5jcmVhdGVbaV0oZW1wdHlOb2RlLCB2bm9kZS5wYXJlbnQpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICBpZiAocGFyZW50RWxtJDEgIT09IG51bGwpIHtcblx0ICAgICAgICAgIHJlbW92ZVZub2RlcyhwYXJlbnRFbG0kMSwgW29sZFZub2RlXSwgMCwgMCk7XG5cdCAgICAgICAgfSBlbHNlIGlmIChpc0RlZihvbGRWbm9kZS50YWcpKSB7XG5cdCAgICAgICAgICBpbnZva2VEZXN0cm95SG9vayhvbGRWbm9kZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9XG5cdFxuXHQgICAgaW52b2tlSW5zZXJ0SG9vayh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpc0luaXRpYWxQYXRjaCk7XG5cdCAgICByZXR1cm4gdm5vZGUuZWxtXG5cdCAgfVxuXHR9XG5cdFxuXHQvKiAgKi9cblx0XG5cdHZhciBkaXJlY3RpdmVzID0ge1xuXHQgIGNyZWF0ZTogdXBkYXRlRGlyZWN0aXZlcyxcblx0ICB1cGRhdGU6IHVwZGF0ZURpcmVjdGl2ZXMsXG5cdCAgZGVzdHJveTogZnVuY3Rpb24gdW5iaW5kRGlyZWN0aXZlcyAodm5vZGUpIHtcblx0ICAgIHVwZGF0ZURpcmVjdGl2ZXModm5vZGUsIGVtcHR5Tm9kZSk7XG5cdCAgfVxuXHR9O1xuXHRcblx0ZnVuY3Rpb24gdXBkYXRlRGlyZWN0aXZlcyAob2xkVm5vZGUsIHZub2RlKSB7XG5cdCAgaWYgKG9sZFZub2RlLmRhdGEuZGlyZWN0aXZlcyB8fCB2bm9kZS5kYXRhLmRpcmVjdGl2ZXMpIHtcblx0ICAgIF91cGRhdGUob2xkVm5vZGUsIHZub2RlKTtcblx0ICB9XG5cdH1cblx0XG5cdGZ1bmN0aW9uIF91cGRhdGUgKG9sZFZub2RlLCB2bm9kZSkge1xuXHQgIHZhciBpc0NyZWF0ZSA9IG9sZFZub2RlID09PSBlbXB0eU5vZGU7XG5cdCAgdmFyIGlzRGVzdHJveSA9IHZub2RlID09PSBlbXB0eU5vZGU7XG5cdCAgdmFyIG9sZERpcnMgPSBub3JtYWxpemVEaXJlY3RpdmVzJDEob2xkVm5vZGUuZGF0YS5kaXJlY3RpdmVzLCBvbGRWbm9kZS5jb250ZXh0KTtcblx0ICB2YXIgbmV3RGlycyA9IG5vcm1hbGl6ZURpcmVjdGl2ZXMkMSh2bm9kZS5kYXRhLmRpcmVjdGl2ZXMsIHZub2RlLmNvbnRleHQpO1xuXHRcblx0ICB2YXIgZGlyc1dpdGhJbnNlcnQgPSBbXTtcblx0ICB2YXIgZGlyc1dpdGhQb3N0cGF0Y2ggPSBbXTtcblx0XG5cdCAgdmFyIGtleSwgb2xkRGlyLCBkaXI7XG5cdCAgZm9yIChrZXkgaW4gbmV3RGlycykge1xuXHQgICAgb2xkRGlyID0gb2xkRGlyc1trZXldO1xuXHQgICAgZGlyID0gbmV3RGlyc1trZXldO1xuXHQgICAgaWYgKCFvbGREaXIpIHtcblx0ICAgICAgLy8gbmV3IGRpcmVjdGl2ZSwgYmluZFxuXHQgICAgICBjYWxsSG9vayQxKGRpciwgJ2JpbmQnLCB2bm9kZSwgb2xkVm5vZGUpO1xuXHQgICAgICBpZiAoZGlyLmRlZiAmJiBkaXIuZGVmLmluc2VydGVkKSB7XG5cdCAgICAgICAgZGlyc1dpdGhJbnNlcnQucHVzaChkaXIpO1xuXHQgICAgICB9XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICAvLyBleGlzdGluZyBkaXJlY3RpdmUsIHVwZGF0ZVxuXHQgICAgICBkaXIub2xkVmFsdWUgPSBvbGREaXIudmFsdWU7XG5cdCAgICAgIGNhbGxIb29rJDEoZGlyLCAndXBkYXRlJywgdm5vZGUsIG9sZFZub2RlKTtcblx0ICAgICAgaWYgKGRpci5kZWYgJiYgZGlyLmRlZi5jb21wb25lbnRVcGRhdGVkKSB7XG5cdCAgICAgICAgZGlyc1dpdGhQb3N0cGF0Y2gucHVzaChkaXIpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfVxuXHRcblx0ICBpZiAoZGlyc1dpdGhJbnNlcnQubGVuZ3RoKSB7XG5cdCAgICB2YXIgY2FsbEluc2VydCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaXJzV2l0aEluc2VydC5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgIGNhbGxIb29rJDEoZGlyc1dpdGhJbnNlcnRbaV0sICdpbnNlcnRlZCcsIHZub2RlLCBvbGRWbm9kZSk7XG5cdCAgICAgIH1cblx0ICAgIH07XG5cdCAgICBpZiAoaXNDcmVhdGUpIHtcblx0ICAgICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUuZGF0YS5ob29rIHx8ICh2bm9kZS5kYXRhLmhvb2sgPSB7fSksICdpbnNlcnQnLCBjYWxsSW5zZXJ0LCAnZGlyLWluc2VydCcpO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgY2FsbEluc2VydCgpO1xuXHQgICAgfVxuXHQgIH1cblx0XG5cdCAgaWYgKGRpcnNXaXRoUG9zdHBhdGNoLmxlbmd0aCkge1xuXHQgICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUuZGF0YS5ob29rIHx8ICh2bm9kZS5kYXRhLmhvb2sgPSB7fSksICdwb3N0cGF0Y2gnLCBmdW5jdGlvbiAoKSB7XG5cdCAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGlyc1dpdGhQb3N0cGF0Y2gubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICBjYWxsSG9vayQxKGRpcnNXaXRoUG9zdHBhdGNoW2ldLCAnY29tcG9uZW50VXBkYXRlZCcsIHZub2RlLCBvbGRWbm9kZSk7XG5cdCAgICAgIH1cblx0ICAgIH0sICdkaXItcG9zdHBhdGNoJyk7XG5cdCAgfVxuXHRcblx0ICBpZiAoIWlzQ3JlYXRlKSB7XG5cdCAgICBmb3IgKGtleSBpbiBvbGREaXJzKSB7XG5cdCAgICAgIGlmICghbmV3RGlyc1trZXldKSB7XG5cdCAgICAgICAgLy8gbm8gbG9uZ2VyIHByZXNlbnQsIHVuYmluZFxuXHQgICAgICAgIGNhbGxIb29rJDEob2xkRGlyc1trZXldLCAndW5iaW5kJywgb2xkVm5vZGUsIG9sZFZub2RlLCBpc0Rlc3Ryb3kpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfVxuXHR9XG5cdFxuXHR2YXIgZW1wdHlNb2RpZmllcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXHRcblx0ZnVuY3Rpb24gbm9ybWFsaXplRGlyZWN0aXZlcyQxIChcblx0ICBkaXJzLFxuXHQgIHZtXG5cdCkge1xuXHQgIHZhciByZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXHQgIGlmICghZGlycykge1xuXHQgICAgcmV0dXJuIHJlc1xuXHQgIH1cblx0ICB2YXIgaSwgZGlyO1xuXHQgIGZvciAoaSA9IDA7IGkgPCBkaXJzLmxlbmd0aDsgaSsrKSB7XG5cdCAgICBkaXIgPSBkaXJzW2ldO1xuXHQgICAgaWYgKCFkaXIubW9kaWZpZXJzKSB7XG5cdCAgICAgIGRpci5tb2RpZmllcnMgPSBlbXB0eU1vZGlmaWVycztcblx0ICAgIH1cblx0ICAgIHJlc1tnZXRSYXdEaXJOYW1lKGRpcildID0gZGlyO1xuXHQgICAgZGlyLmRlZiA9IHJlc29sdmVBc3NldCh2bS4kb3B0aW9ucywgJ2RpcmVjdGl2ZXMnLCBkaXIubmFtZSwgdHJ1ZSk7XG5cdCAgfVxuXHQgIHJldHVybiByZXNcblx0fVxuXHRcblx0ZnVuY3Rpb24gZ2V0UmF3RGlyTmFtZSAoZGlyKSB7XG5cdCAgcmV0dXJuIGRpci5yYXdOYW1lIHx8ICgoZGlyLm5hbWUpICsgXCIuXCIgKyAoT2JqZWN0LmtleXMoZGlyLm1vZGlmaWVycyB8fCB7fSkuam9pbignLicpKSlcblx0fVxuXHRcblx0ZnVuY3Rpb24gY2FsbEhvb2skMSAoZGlyLCBob29rLCB2bm9kZSwgb2xkVm5vZGUsIGlzRGVzdHJveSkge1xuXHQgIHZhciBmbiA9IGRpci5kZWYgJiYgZGlyLmRlZltob29rXTtcblx0ICBpZiAoZm4pIHtcblx0ICAgIGZuKHZub2RlLmVsbSwgZGlyLCB2bm9kZSwgb2xkVm5vZGUsIGlzRGVzdHJveSk7XG5cdCAgfVxuXHR9XG5cdFxuXHR2YXIgYmFzZU1vZHVsZXMgPSBbXG5cdCAgcmVmLFxuXHQgIGRpcmVjdGl2ZXNcblx0XTtcblx0XG5cdC8qICAqL1xuXHRcblx0ZnVuY3Rpb24gdXBkYXRlQXR0cnMgKG9sZFZub2RlLCB2bm9kZSkge1xuXHQgIGlmICghb2xkVm5vZGUuZGF0YS5hdHRycyAmJiAhdm5vZGUuZGF0YS5hdHRycykge1xuXHQgICAgcmV0dXJuXG5cdCAgfVxuXHQgIHZhciBrZXksIGN1ciwgb2xkO1xuXHQgIHZhciBlbG0gPSB2bm9kZS5lbG07XG5cdCAgdmFyIG9sZEF0dHJzID0gb2xkVm5vZGUuZGF0YS5hdHRycyB8fCB7fTtcblx0ICB2YXIgYXR0cnMgPSB2bm9kZS5kYXRhLmF0dHJzIHx8IHt9O1xuXHQgIC8vIGNsb25lIG9ic2VydmVkIG9iamVjdHMsIGFzIHRoZSB1c2VyIHByb2JhYmx5IHdhbnRzIHRvIG11dGF0ZSBpdFxuXHQgIGlmIChhdHRycy5fX29iX18pIHtcblx0ICAgIGF0dHJzID0gdm5vZGUuZGF0YS5hdHRycyA9IGV4dGVuZCh7fSwgYXR0cnMpO1xuXHQgIH1cblx0XG5cdCAgZm9yIChrZXkgaW4gYXR0cnMpIHtcblx0ICAgIGN1ciA9IGF0dHJzW2tleV07XG5cdCAgICBvbGQgPSBvbGRBdHRyc1trZXldO1xuXHQgICAgaWYgKG9sZCAhPT0gY3VyKSB7XG5cdCAgICAgIHNldEF0dHIoZWxtLCBrZXksIGN1cik7XG5cdCAgICB9XG5cdCAgfVxuXHQgIC8vICM0MzkxOiBpbiBJRTksIHNldHRpbmcgdHlwZSBjYW4gcmVzZXQgdmFsdWUgZm9yIGlucHV0W3R5cGU9cmFkaW9dXG5cdCAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG5cdCAgaWYgKGlzSUU5ICYmIGF0dHJzLnZhbHVlICE9PSBvbGRBdHRycy52YWx1ZSkge1xuXHQgICAgc2V0QXR0cihlbG0sICd2YWx1ZScsIGF0dHJzLnZhbHVlKTtcblx0ICB9XG5cdCAgZm9yIChrZXkgaW4gb2xkQXR0cnMpIHtcblx0ICAgIGlmIChhdHRyc1trZXldID09IG51bGwpIHtcblx0ICAgICAgaWYgKGlzWGxpbmsoa2V5KSkge1xuXHQgICAgICAgIGVsbS5yZW1vdmVBdHRyaWJ1dGVOUyh4bGlua05TLCBnZXRYbGlua1Byb3Aoa2V5KSk7XG5cdCAgICAgIH0gZWxzZSBpZiAoIWlzRW51bWVyYXRlZEF0dHIoa2V5KSkge1xuXHQgICAgICAgIGVsbS5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH1cblx0fVxuXHRcblx0ZnVuY3Rpb24gc2V0QXR0ciAoZWwsIGtleSwgdmFsdWUpIHtcblx0ICBpZiAoaXNCb29sZWFuQXR0cihrZXkpKSB7XG5cdCAgICAvLyBzZXQgYXR0cmlidXRlIGZvciBibGFuayB2YWx1ZVxuXHQgICAgLy8gZS5nLiA8b3B0aW9uIGRpc2FibGVkPlNlbGVjdCBvbmU8L29wdGlvbj5cblx0ICAgIGlmIChpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSkge1xuXHQgICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIGtleSk7XG5cdCAgICB9XG5cdCAgfSBlbHNlIGlmIChpc0VudW1lcmF0ZWRBdHRyKGtleSkpIHtcblx0ICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIGlzRmFsc3lBdHRyVmFsdWUodmFsdWUpIHx8IHZhbHVlID09PSAnZmFsc2UnID8gJ2ZhbHNlJyA6ICd0cnVlJyk7XG5cdCAgfSBlbHNlIGlmIChpc1hsaW5rKGtleSkpIHtcblx0ICAgIGlmIChpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSkge1xuXHQgICAgICBlbC5yZW1vdmVBdHRyaWJ1dGVOUyh4bGlua05TLCBnZXRYbGlua1Byb3Aoa2V5KSk7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICBlbC5zZXRBdHRyaWJ1dGVOUyh4bGlua05TLCBrZXksIHZhbHVlKTtcblx0ICAgIH1cblx0ICB9IGVsc2Uge1xuXHQgICAgaWYgKGlzRmFsc3lBdHRyVmFsdWUodmFsdWUpKSB7XG5cdCAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgZWwuc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpO1xuXHQgICAgfVxuXHQgIH1cblx0fVxuXHRcblx0dmFyIGF0dHJzID0ge1xuXHQgIGNyZWF0ZTogdXBkYXRlQXR0cnMsXG5cdCAgdXBkYXRlOiB1cGRhdGVBdHRyc1xuXHR9O1xuXHRcblx0LyogICovXG5cdFxuXHRmdW5jdGlvbiB1cGRhdGVDbGFzcyAob2xkVm5vZGUsIHZub2RlKSB7XG5cdCAgdmFyIGVsID0gdm5vZGUuZWxtO1xuXHQgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcblx0ICB2YXIgb2xkRGF0YSA9IG9sZFZub2RlLmRhdGE7XG5cdCAgaWYgKCFkYXRhLnN0YXRpY0NsYXNzICYmICFkYXRhLmNsYXNzICYmXG5cdCAgICAgICghb2xkRGF0YSB8fCAoIW9sZERhdGEuc3RhdGljQ2xhc3MgJiYgIW9sZERhdGEuY2xhc3MpKSkge1xuXHQgICAgcmV0dXJuXG5cdCAgfVxuXHRcblx0ICB2YXIgY2xzID0gZ2VuQ2xhc3NGb3JWbm9kZSh2bm9kZSk7XG5cdFxuXHQgIC8vIGhhbmRsZSB0cmFuc2l0aW9uIGNsYXNzZXNcblx0ICB2YXIgdHJhbnNpdGlvbkNsYXNzID0gZWwuX3RyYW5zaXRpb25DbGFzc2VzO1xuXHQgIGlmICh0cmFuc2l0aW9uQ2xhc3MpIHtcblx0ICAgIGNscyA9IGNvbmNhdChjbHMsIHN0cmluZ2lmeUNsYXNzKHRyYW5zaXRpb25DbGFzcykpO1xuXHQgIH1cblx0XG5cdCAgLy8gc2V0IHRoZSBjbGFzc1xuXHQgIGlmIChjbHMgIT09IGVsLl9wcmV2Q2xhc3MpIHtcblx0ICAgIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBjbHMpO1xuXHQgICAgZWwuX3ByZXZDbGFzcyA9IGNscztcblx0ICB9XG5cdH1cblx0XG5cdHZhciBrbGFzcyA9IHtcblx0ICBjcmVhdGU6IHVwZGF0ZUNsYXNzLFxuXHQgIHVwZGF0ZTogdXBkYXRlQ2xhc3Ncblx0fTtcblx0XG5cdC8qICAqL1xuXHRcblx0dmFyIHRhcmdldCQxO1xuXHRcblx0ZnVuY3Rpb24gYWRkJDIgKFxuXHQgIGV2ZW50LFxuXHQgIGhhbmRsZXIsXG5cdCAgb25jZSxcblx0ICBjYXB0dXJlXG5cdCkge1xuXHQgIGlmIChvbmNlKSB7XG5cdCAgICB2YXIgb2xkSGFuZGxlciA9IGhhbmRsZXI7XG5cdCAgICB2YXIgX3RhcmdldCA9IHRhcmdldCQxOyAvLyBzYXZlIGN1cnJlbnQgdGFyZ2V0IGVsZW1lbnQgaW4gY2xvc3VyZVxuXHQgICAgaGFuZGxlciA9IGZ1bmN0aW9uIChldikge1xuXHQgICAgICByZW1vdmUkMyhldmVudCwgaGFuZGxlciwgY2FwdHVyZSwgX3RhcmdldCk7XG5cdCAgICAgIGFyZ3VtZW50cy5sZW5ndGggPT09IDFcblx0ICAgICAgICA/IG9sZEhhbmRsZXIoZXYpXG5cdCAgICAgICAgOiBvbGRIYW5kbGVyLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG5cdCAgICB9O1xuXHQgIH1cblx0ICB0YXJnZXQkMS5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLCBjYXB0dXJlKTtcblx0fVxuXHRcblx0ZnVuY3Rpb24gcmVtb3ZlJDMgKFxuXHQgIGV2ZW50LFxuXHQgIGhhbmRsZXIsXG5cdCAgY2FwdHVyZSxcblx0ICBfdGFyZ2V0XG5cdCkge1xuXHQgIChfdGFyZ2V0IHx8IHRhcmdldCQxKS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLCBjYXB0dXJlKTtcblx0fVxuXHRcblx0ZnVuY3Rpb24gdXBkYXRlRE9NTGlzdGVuZXJzIChvbGRWbm9kZSwgdm5vZGUpIHtcblx0ICBpZiAoIW9sZFZub2RlLmRhdGEub24gJiYgIXZub2RlLmRhdGEub24pIHtcblx0ICAgIHJldHVyblxuXHQgIH1cblx0ICB2YXIgb24gPSB2bm9kZS5kYXRhLm9uIHx8IHt9O1xuXHQgIHZhciBvbGRPbiA9IG9sZFZub2RlLmRhdGEub24gfHwge307XG5cdCAgdGFyZ2V0JDEgPSB2bm9kZS5lbG07XG5cdCAgdXBkYXRlTGlzdGVuZXJzKG9uLCBvbGRPbiwgYWRkJDIsIHJlbW92ZSQzLCB2bm9kZS5jb250ZXh0KTtcblx0fVxuXHRcblx0dmFyIGV2ZW50cyA9IHtcblx0ICBjcmVhdGU6IHVwZGF0ZURPTUxpc3RlbmVycyxcblx0ICB1cGRhdGU6IHVwZGF0ZURPTUxpc3RlbmVyc1xuXHR9O1xuXHRcblx0LyogICovXG5cdFxuXHRmdW5jdGlvbiB1cGRhdGVET01Qcm9wcyAob2xkVm5vZGUsIHZub2RlKSB7XG5cdCAgaWYgKCFvbGRWbm9kZS5kYXRhLmRvbVByb3BzICYmICF2bm9kZS5kYXRhLmRvbVByb3BzKSB7XG5cdCAgICByZXR1cm5cblx0ICB9XG5cdCAgdmFyIGtleSwgY3VyO1xuXHQgIHZhciBlbG0gPSB2bm9kZS5lbG07XG5cdCAgdmFyIG9sZFByb3BzID0gb2xkVm5vZGUuZGF0YS5kb21Qcm9wcyB8fCB7fTtcblx0ICB2YXIgcHJvcHMgPSB2bm9kZS5kYXRhLmRvbVByb3BzIHx8IHt9O1xuXHQgIC8vIGNsb25lIG9ic2VydmVkIG9iamVjdHMsIGFzIHRoZSB1c2VyIHByb2JhYmx5IHdhbnRzIHRvIG11dGF0ZSBpdFxuXHQgIGlmIChwcm9wcy5fX29iX18pIHtcblx0ICAgIHByb3BzID0gdm5vZGUuZGF0YS5kb21Qcm9wcyA9IGV4dGVuZCh7fSwgcHJvcHMpO1xuXHQgIH1cblx0XG5cdCAgZm9yIChrZXkgaW4gb2xkUHJvcHMpIHtcblx0ICAgIGlmIChwcm9wc1trZXldID09IG51bGwpIHtcblx0ICAgICAgZWxtW2tleV0gPSAnJztcblx0ICAgIH1cblx0ICB9XG5cdCAgZm9yIChrZXkgaW4gcHJvcHMpIHtcblx0ICAgIGN1ciA9IHByb3BzW2tleV07XG5cdCAgICAvLyBpZ25vcmUgY2hpbGRyZW4gaWYgdGhlIG5vZGUgaGFzIHRleHRDb250ZW50IG9yIGlubmVySFRNTCxcblx0ICAgIC8vIGFzIHRoZXNlIHdpbGwgdGhyb3cgYXdheSBleGlzdGluZyBET00gbm9kZXMgYW5kIGNhdXNlIHJlbW92YWwgZXJyb3JzXG5cdCAgICAvLyBvbiBzdWJzZXF1ZW50IHBhdGNoZXMgKCMzMzYwKVxuXHQgICAgaWYgKGtleSA9PT0gJ3RleHRDb250ZW50JyB8fCBrZXkgPT09ICdpbm5lckhUTUwnKSB7XG5cdCAgICAgIGlmICh2bm9kZS5jaGlsZHJlbikgeyB2bm9kZS5jaGlsZHJlbi5sZW5ndGggPSAwOyB9XG5cdCAgICAgIGlmIChjdXIgPT09IG9sZFByb3BzW2tleV0pIHsgY29udGludWUgfVxuXHQgICAgfVxuXHRcblx0ICAgIGlmIChrZXkgPT09ICd2YWx1ZScpIHtcblx0ICAgICAgLy8gc3RvcmUgdmFsdWUgYXMgX3ZhbHVlIGFzIHdlbGwgc2luY2Vcblx0ICAgICAgLy8gbm9uLXN0cmluZyB2YWx1ZXMgd2lsbCBiZSBzdHJpbmdpZmllZFxuXHQgICAgICBlbG0uX3ZhbHVlID0gY3VyO1xuXHQgICAgICAvLyBhdm9pZCByZXNldHRpbmcgY3Vyc29yIHBvc2l0aW9uIHdoZW4gdmFsdWUgaXMgdGhlIHNhbWVcblx0ICAgICAgdmFyIHN0ckN1ciA9IGN1ciA9PSBudWxsID8gJycgOiBTdHJpbmcoY3VyKTtcblx0ICAgICAgaWYgKHNob3VsZFVwZGF0ZVZhbHVlKGVsbSwgdm5vZGUsIHN0ckN1cikpIHtcblx0ICAgICAgICBlbG0udmFsdWUgPSBzdHJDdXI7XG5cdCAgICAgIH1cblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIGVsbVtrZXldID0gY3VyO1xuXHQgICAgfVxuXHQgIH1cblx0fVxuXHRcblx0Ly8gY2hlY2sgcGxhdGZvcm1zL3dlYi91dGlsL2F0dHJzLmpzIGFjY2VwdFZhbHVlXG5cdFxuXHRcblx0ZnVuY3Rpb24gc2hvdWxkVXBkYXRlVmFsdWUgKFxuXHQgIGVsbSxcblx0ICB2bm9kZSxcblx0ICBjaGVja1ZhbFxuXHQpIHtcblx0ICByZXR1cm4gKCFlbG0uY29tcG9zaW5nICYmIChcblx0ICAgIHZub2RlLnRhZyA9PT0gJ29wdGlvbicgfHxcblx0ICAgIGlzRGlydHkoZWxtLCBjaGVja1ZhbCkgfHxcblx0ICAgIGlzSW5wdXRDaGFuZ2VkKHZub2RlLCBjaGVja1ZhbClcblx0ICApKVxuXHR9XG5cdFxuXHRmdW5jdGlvbiBpc0RpcnR5IChlbG0sIGNoZWNrVmFsKSB7XG5cdCAgLy8gcmV0dXJuIHRydWUgd2hlbiB0ZXh0Ym94ICgubnVtYmVyIGFuZCAudHJpbSkgbG9zZXMgZm9jdXMgYW5kIGl0cyB2YWx1ZSBpcyBub3QgZXF1YWwgdG8gdGhlIHVwZGF0ZWQgdmFsdWVcblx0ICByZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAhPT0gZWxtICYmIGVsbS52YWx1ZSAhPT0gY2hlY2tWYWxcblx0fVxuXHRcblx0ZnVuY3Rpb24gaXNJbnB1dENoYW5nZWQgKHZub2RlLCBuZXdWYWwpIHtcblx0ICB2YXIgdmFsdWUgPSB2bm9kZS5lbG0udmFsdWU7XG5cdCAgdmFyIG1vZGlmaWVycyA9IHZub2RlLmVsbS5fdk1vZGlmaWVyczsgLy8gaW5qZWN0ZWQgYnkgdi1tb2RlbCBydW50aW1lXG5cdCAgaWYgKChtb2RpZmllcnMgJiYgbW9kaWZpZXJzLm51bWJlcikgfHwgdm5vZGUuZWxtLnR5cGUgPT09ICdudW1iZXInKSB7XG5cdCAgICByZXR1cm4gdG9OdW1iZXIodmFsdWUpICE9PSB0b051bWJlcihuZXdWYWwpXG5cdCAgfVxuXHQgIGlmIChtb2RpZmllcnMgJiYgbW9kaWZpZXJzLnRyaW0pIHtcblx0ICAgIHJldHVybiB2YWx1ZS50cmltKCkgIT09IG5ld1ZhbC50cmltKClcblx0ICB9XG5cdCAgcmV0dXJuIHZhbHVlICE9PSBuZXdWYWxcblx0fVxuXHRcblx0dmFyIGRvbVByb3BzID0ge1xuXHQgIGNyZWF0ZTogdXBkYXRlRE9NUHJvcHMsXG5cdCAgdXBkYXRlOiB1cGRhdGVET01Qcm9wc1xuXHR9O1xuXHRcblx0LyogICovXG5cdFxuXHR2YXIgcGFyc2VTdHlsZVRleHQgPSBjYWNoZWQoZnVuY3Rpb24gKGNzc1RleHQpIHtcblx0ICB2YXIgcmVzID0ge307XG5cdCAgdmFyIGxpc3REZWxpbWl0ZXIgPSAvOyg/IVteKF0qXFwpKS9nO1xuXHQgIHZhciBwcm9wZXJ0eURlbGltaXRlciA9IC86KC4rKS87XG5cdCAgY3NzVGV4dC5zcGxpdChsaXN0RGVsaW1pdGVyKS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG5cdCAgICBpZiAoaXRlbSkge1xuXHQgICAgICB2YXIgdG1wID0gaXRlbS5zcGxpdChwcm9wZXJ0eURlbGltaXRlcik7XG5cdCAgICAgIHRtcC5sZW5ndGggPiAxICYmIChyZXNbdG1wWzBdLnRyaW0oKV0gPSB0bXBbMV0udHJpbSgpKTtcblx0ICAgIH1cblx0ICB9KTtcblx0ICByZXR1cm4gcmVzXG5cdH0pO1xuXHRcblx0Ly8gbWVyZ2Ugc3RhdGljIGFuZCBkeW5hbWljIHN0eWxlIGRhdGEgb24gdGhlIHNhbWUgdm5vZGVcblx0ZnVuY3Rpb24gbm9ybWFsaXplU3R5bGVEYXRhIChkYXRhKSB7XG5cdCAgdmFyIHN0eWxlID0gbm9ybWFsaXplU3R5bGVCaW5kaW5nKGRhdGEuc3R5bGUpO1xuXHQgIC8vIHN0YXRpYyBzdHlsZSBpcyBwcmUtcHJvY2Vzc2VkIGludG8gYW4gb2JqZWN0IGR1cmluZyBjb21waWxhdGlvblxuXHQgIC8vIGFuZCBpcyBhbHdheXMgYSBmcmVzaCBvYmplY3QsIHNvIGl0J3Mgc2FmZSB0byBtZXJnZSBpbnRvIGl0XG5cdCAgcmV0dXJuIGRhdGEuc3RhdGljU3R5bGVcblx0ICAgID8gZXh0ZW5kKGRhdGEuc3RhdGljU3R5bGUsIHN0eWxlKVxuXHQgICAgOiBzdHlsZVxuXHR9XG5cdFxuXHQvLyBub3JtYWxpemUgcG9zc2libGUgYXJyYXkgLyBzdHJpbmcgdmFsdWVzIGludG8gT2JqZWN0XG5cdGZ1bmN0aW9uIG5vcm1hbGl6ZVN0eWxlQmluZGluZyAoYmluZGluZ1N0eWxlKSB7XG5cdCAgaWYgKEFycmF5LmlzQXJyYXkoYmluZGluZ1N0eWxlKSkge1xuXHQgICAgcmV0dXJuIHRvT2JqZWN0KGJpbmRpbmdTdHlsZSlcblx0ICB9XG5cdCAgaWYgKHR5cGVvZiBiaW5kaW5nU3R5bGUgPT09ICdzdHJpbmcnKSB7XG5cdCAgICByZXR1cm4gcGFyc2VTdHlsZVRleHQoYmluZGluZ1N0eWxlKVxuXHQgIH1cblx0ICByZXR1cm4gYmluZGluZ1N0eWxlXG5cdH1cblx0XG5cdC8qKlxuXHQgKiBwYXJlbnQgY29tcG9uZW50IHN0eWxlIHNob3VsZCBiZSBhZnRlciBjaGlsZCdzXG5cdCAqIHNvIHRoYXQgcGFyZW50IGNvbXBvbmVudCdzIHN0eWxlIGNvdWxkIG92ZXJyaWRlIGl0XG5cdCAqL1xuXHRmdW5jdGlvbiBnZXRTdHlsZSAodm5vZGUsIGNoZWNrQ2hpbGQpIHtcblx0ICB2YXIgcmVzID0ge307XG5cdCAgdmFyIHN0eWxlRGF0YTtcblx0XG5cdCAgaWYgKGNoZWNrQ2hpbGQpIHtcblx0ICAgIHZhciBjaGlsZE5vZGUgPSB2bm9kZTtcblx0ICAgIHdoaWxlIChjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UpIHtcblx0ICAgICAgY2hpbGROb2RlID0gY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTtcblx0ICAgICAgaWYgKGNoaWxkTm9kZS5kYXRhICYmIChzdHlsZURhdGEgPSBub3JtYWxpemVTdHlsZURhdGEoY2hpbGROb2RlLmRhdGEpKSkge1xuXHQgICAgICAgIGV4dGVuZChyZXMsIHN0eWxlRGF0YSk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9XG5cdFxuXHQgIGlmICgoc3R5bGVEYXRhID0gbm9ybWFsaXplU3R5bGVEYXRhKHZub2RlLmRhdGEpKSkge1xuXHQgICAgZXh0ZW5kKHJlcywgc3R5bGVEYXRhKTtcblx0ICB9XG5cdFxuXHQgIHZhciBwYXJlbnROb2RlID0gdm5vZGU7XG5cdCAgd2hpbGUgKChwYXJlbnROb2RlID0gcGFyZW50Tm9kZS5wYXJlbnQpKSB7XG5cdCAgICBpZiAocGFyZW50Tm9kZS5kYXRhICYmIChzdHlsZURhdGEgPSBub3JtYWxpemVTdHlsZURhdGEocGFyZW50Tm9kZS5kYXRhKSkpIHtcblx0ICAgICAgZXh0ZW5kKHJlcywgc3R5bGVEYXRhKTtcblx0ICAgIH1cblx0ICB9XG5cdCAgcmV0dXJuIHJlc1xuXHR9XG5cdFxuXHQvKiAgKi9cblx0XG5cdHZhciBjc3NWYXJSRSA9IC9eLS0vO1xuXHR2YXIgaW1wb3J0YW50UkUgPSAvXFxzKiFpbXBvcnRhbnQkLztcblx0dmFyIHNldFByb3AgPSBmdW5jdGlvbiAoZWwsIG5hbWUsIHZhbCkge1xuXHQgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuXHQgIGlmIChjc3NWYXJSRS50ZXN0KG5hbWUpKSB7XG5cdCAgICBlbC5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2YWwpO1xuXHQgIH0gZWxzZSBpZiAoaW1wb3J0YW50UkUudGVzdCh2YWwpKSB7XG5cdCAgICBlbC5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2YWwucmVwbGFjZShpbXBvcnRhbnRSRSwgJycpLCAnaW1wb3J0YW50Jyk7XG5cdCAgfSBlbHNlIHtcblx0ICAgIGVsLnN0eWxlW25vcm1hbGl6ZShuYW1lKV0gPSB2YWw7XG5cdCAgfVxuXHR9O1xuXHRcblx0dmFyIHByZWZpeGVzID0gWydXZWJraXQnLCAnTW96JywgJ21zJ107XG5cdFxuXHR2YXIgdGVzdEVsO1xuXHR2YXIgbm9ybWFsaXplID0gY2FjaGVkKGZ1bmN0aW9uIChwcm9wKSB7XG5cdCAgdGVzdEVsID0gdGVzdEVsIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXHQgIHByb3AgPSBjYW1lbGl6ZShwcm9wKTtcblx0ICBpZiAocHJvcCAhPT0gJ2ZpbHRlcicgJiYgKHByb3AgaW4gdGVzdEVsLnN0eWxlKSkge1xuXHQgICAgcmV0dXJuIHByb3Bcblx0ICB9XG5cdCAgdmFyIHVwcGVyID0gcHJvcC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHByb3Auc2xpY2UoMSk7XG5cdCAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmVmaXhlcy5sZW5ndGg7IGkrKykge1xuXHQgICAgdmFyIHByZWZpeGVkID0gcHJlZml4ZXNbaV0gKyB1cHBlcjtcblx0ICAgIGlmIChwcmVmaXhlZCBpbiB0ZXN0RWwuc3R5bGUpIHtcblx0ICAgICAgcmV0dXJuIHByZWZpeGVkXG5cdCAgICB9XG5cdCAgfVxuXHR9KTtcblx0XG5cdGZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChvbGRWbm9kZSwgdm5vZGUpIHtcblx0ICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG5cdCAgdmFyIG9sZERhdGEgPSBvbGRWbm9kZS5kYXRhO1xuXHRcblx0ICBpZiAoIWRhdGEuc3RhdGljU3R5bGUgJiYgIWRhdGEuc3R5bGUgJiZcblx0ICAgICAgIW9sZERhdGEuc3RhdGljU3R5bGUgJiYgIW9sZERhdGEuc3R5bGUpIHtcblx0ICAgIHJldHVyblxuXHQgIH1cblx0XG5cdCAgdmFyIGN1ciwgbmFtZTtcblx0ICB2YXIgZWwgPSB2bm9kZS5lbG07XG5cdCAgdmFyIG9sZFN0YXRpY1N0eWxlID0gb2xkVm5vZGUuZGF0YS5zdGF0aWNTdHlsZTtcblx0ICB2YXIgb2xkU3R5bGVCaW5kaW5nID0gb2xkVm5vZGUuZGF0YS5zdHlsZSB8fCB7fTtcblx0XG5cdCAgLy8gaWYgc3RhdGljIHN0eWxlIGV4aXN0cywgc3R5bGViaW5kaW5nIGFscmVhZHkgbWVyZ2VkIGludG8gaXQgd2hlbiBkb2luZyBub3JtYWxpemVTdHlsZURhdGFcblx0ICB2YXIgb2xkU3R5bGUgPSBvbGRTdGF0aWNTdHlsZSB8fCBvbGRTdHlsZUJpbmRpbmc7XG5cdFxuXHQgIHZhciBzdHlsZSA9IG5vcm1hbGl6ZVN0eWxlQmluZGluZyh2bm9kZS5kYXRhLnN0eWxlKSB8fCB7fTtcblx0XG5cdCAgdm5vZGUuZGF0YS5zdHlsZSA9IHN0eWxlLl9fb2JfXyA/IGV4dGVuZCh7fSwgc3R5bGUpIDogc3R5bGU7XG5cdFxuXHQgIHZhciBuZXdTdHlsZSA9IGdldFN0eWxlKHZub2RlLCB0cnVlKTtcblx0XG5cdCAgZm9yIChuYW1lIGluIG9sZFN0eWxlKSB7XG5cdCAgICBpZiAobmV3U3R5bGVbbmFtZV0gPT0gbnVsbCkge1xuXHQgICAgICBzZXRQcm9wKGVsLCBuYW1lLCAnJyk7XG5cdCAgICB9XG5cdCAgfVxuXHQgIGZvciAobmFtZSBpbiBuZXdTdHlsZSkge1xuXHQgICAgY3VyID0gbmV3U3R5bGVbbmFtZV07XG5cdCAgICBpZiAoY3VyICE9PSBvbGRTdHlsZVtuYW1lXSkge1xuXHQgICAgICAvLyBpZTkgc2V0dGluZyB0byBudWxsIGhhcyBubyBlZmZlY3QsIG11c3QgdXNlIGVtcHR5IHN0cmluZ1xuXHQgICAgICBzZXRQcm9wKGVsLCBuYW1lLCBjdXIgPT0gbnVsbCA/ICcnIDogY3VyKTtcblx0ICAgIH1cblx0ICB9XG5cdH1cblx0XG5cdHZhciBzdHlsZSA9IHtcblx0ICBjcmVhdGU6IHVwZGF0ZVN0eWxlLFxuXHQgIHVwZGF0ZTogdXBkYXRlU3R5bGVcblx0fTtcblx0XG5cdC8qICAqL1xuXHRcblx0LyoqXG5cdCAqIEFkZCBjbGFzcyB3aXRoIGNvbXBhdGliaWxpdHkgZm9yIFNWRyBzaW5jZSBjbGFzc0xpc3QgaXMgbm90IHN1cHBvcnRlZCBvblxuXHQgKiBTVkcgZWxlbWVudHMgaW4gSUVcblx0ICovXG5cdGZ1bmN0aW9uIGFkZENsYXNzIChlbCwgY2xzKSB7XG5cdCAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG5cdCAgaWYgKCFjbHMgfHwgIWNscy50cmltKCkpIHtcblx0ICAgIHJldHVyblxuXHQgIH1cblx0XG5cdCAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cblx0ICBpZiAoZWwuY2xhc3NMaXN0KSB7XG5cdCAgICBpZiAoY2xzLmluZGV4T2YoJyAnKSA+IC0xKSB7XG5cdCAgICAgIGNscy5zcGxpdCgvXFxzKy8pLmZvckVhY2goZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGVsLmNsYXNzTGlzdC5hZGQoYyk7IH0pO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgZWwuY2xhc3NMaXN0LmFkZChjbHMpO1xuXHQgICAgfVxuXHQgIH0gZWxzZSB7XG5cdCAgICB2YXIgY3VyID0gJyAnICsgZWwuZ2V0QXR0cmlidXRlKCdjbGFzcycpICsgJyAnO1xuXHQgICAgaWYgKGN1ci5pbmRleE9mKCcgJyArIGNscyArICcgJykgPCAwKSB7XG5cdCAgICAgIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAoY3VyICsgY2xzKS50cmltKCkpO1xuXHQgICAgfVxuXHQgIH1cblx0fVxuXHRcblx0LyoqXG5cdCAqIFJlbW92ZSBjbGFzcyB3aXRoIGNvbXBhdGliaWxpdHkgZm9yIFNWRyBzaW5jZSBjbGFzc0xpc3QgaXMgbm90IHN1cHBvcnRlZCBvblxuXHQgKiBTVkcgZWxlbWVudHMgaW4gSUVcblx0ICovXG5cdGZ1bmN0aW9uIHJlbW92ZUNsYXNzIChlbCwgY2xzKSB7XG5cdCAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG5cdCAgaWYgKCFjbHMgfHwgIWNscy50cmltKCkpIHtcblx0ICAgIHJldHVyblxuXHQgIH1cblx0XG5cdCAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cblx0ICBpZiAoZWwuY2xhc3NMaXN0KSB7XG5cdCAgICBpZiAoY2xzLmluZGV4T2YoJyAnKSA+IC0xKSB7XG5cdCAgICAgIGNscy5zcGxpdCgvXFxzKy8pLmZvckVhY2goZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGVsLmNsYXNzTGlzdC5yZW1vdmUoYyk7IH0pO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZShjbHMpO1xuXHQgICAgfVxuXHQgIH0gZWxzZSB7XG5cdCAgICB2YXIgY3VyID0gJyAnICsgZWwuZ2V0QXR0cmlidXRlKCdjbGFzcycpICsgJyAnO1xuXHQgICAgdmFyIHRhciA9ICcgJyArIGNscyArICcgJztcblx0ICAgIHdoaWxlIChjdXIuaW5kZXhPZih0YXIpID49IDApIHtcblx0ICAgICAgY3VyID0gY3VyLnJlcGxhY2UodGFyLCAnICcpO1xuXHQgICAgfVxuXHQgICAgZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsIGN1ci50cmltKCkpO1xuXHQgIH1cblx0fVxuXHRcblx0LyogICovXG5cdFxuXHR2YXIgaGFzVHJhbnNpdGlvbiA9IGluQnJvd3NlciAmJiAhaXNJRTk7XG5cdHZhciBUUkFOU0lUSU9OID0gJ3RyYW5zaXRpb24nO1xuXHR2YXIgQU5JTUFUSU9OID0gJ2FuaW1hdGlvbic7XG5cdFxuXHQvLyBUcmFuc2l0aW9uIHByb3BlcnR5L2V2ZW50IHNuaWZmaW5nXG5cdHZhciB0cmFuc2l0aW9uUHJvcCA9ICd0cmFuc2l0aW9uJztcblx0dmFyIHRyYW5zaXRpb25FbmRFdmVudCA9ICd0cmFuc2l0aW9uZW5kJztcblx0dmFyIGFuaW1hdGlvblByb3AgPSAnYW5pbWF0aW9uJztcblx0dmFyIGFuaW1hdGlvbkVuZEV2ZW50ID0gJ2FuaW1hdGlvbmVuZCc7XG5cdGlmIChoYXNUcmFuc2l0aW9uKSB7XG5cdCAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG5cdCAgaWYgKHdpbmRvdy5vbnRyYW5zaXRpb25lbmQgPT09IHVuZGVmaW5lZCAmJlxuXHQgICAgd2luZG93Lm9ud2Via2l0dHJhbnNpdGlvbmVuZCAhPT0gdW5kZWZpbmVkKSB7XG5cdCAgICB0cmFuc2l0aW9uUHJvcCA9ICdXZWJraXRUcmFuc2l0aW9uJztcblx0ICAgIHRyYW5zaXRpb25FbmRFdmVudCA9ICd3ZWJraXRUcmFuc2l0aW9uRW5kJztcblx0ICB9XG5cdCAgaWYgKHdpbmRvdy5vbmFuaW1hdGlvbmVuZCA9PT0gdW5kZWZpbmVkICYmXG5cdCAgICB3aW5kb3cub253ZWJraXRhbmltYXRpb25lbmQgIT09IHVuZGVmaW5lZCkge1xuXHQgICAgYW5pbWF0aW9uUHJvcCA9ICdXZWJraXRBbmltYXRpb24nO1xuXHQgICAgYW5pbWF0aW9uRW5kRXZlbnQgPSAnd2Via2l0QW5pbWF0aW9uRW5kJztcblx0ICB9XG5cdH1cblx0XG5cdC8vIGJpbmRpbmcgdG8gd2luZG93IGlzIG5lY2Vzc2FyeSB0byBtYWtlIGhvdCByZWxvYWQgd29yayBpbiBJRSBpbiBzdHJpY3QgbW9kZVxuXHR2YXIgcmFmID0gaW5Ccm93c2VyICYmIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWVcblx0ICA/IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUuYmluZCh3aW5kb3cpXG5cdCAgOiBzZXRUaW1lb3V0O1xuXHRcblx0ZnVuY3Rpb24gbmV4dEZyYW1lIChmbikge1xuXHQgIHJhZihmdW5jdGlvbiAoKSB7XG5cdCAgICByYWYoZm4pO1xuXHQgIH0pO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBhZGRUcmFuc2l0aW9uQ2xhc3MgKGVsLCBjbHMpIHtcblx0ICAoZWwuX3RyYW5zaXRpb25DbGFzc2VzIHx8IChlbC5fdHJhbnNpdGlvbkNsYXNzZXMgPSBbXSkpLnB1c2goY2xzKTtcblx0ICBhZGRDbGFzcyhlbCwgY2xzKTtcblx0fVxuXHRcblx0ZnVuY3Rpb24gcmVtb3ZlVHJhbnNpdGlvbkNsYXNzIChlbCwgY2xzKSB7XG5cdCAgaWYgKGVsLl90cmFuc2l0aW9uQ2xhc3Nlcykge1xuXHQgICAgcmVtb3ZlJDEoZWwuX3RyYW5zaXRpb25DbGFzc2VzLCBjbHMpO1xuXHQgIH1cblx0ICByZW1vdmVDbGFzcyhlbCwgY2xzKTtcblx0fVxuXHRcblx0ZnVuY3Rpb24gd2hlblRyYW5zaXRpb25FbmRzIChcblx0ICBlbCxcblx0ICBleHBlY3RlZFR5cGUsXG5cdCAgY2Jcblx0KSB7XG5cdCAgdmFyIHJlZiA9IGdldFRyYW5zaXRpb25JbmZvKGVsLCBleHBlY3RlZFR5cGUpO1xuXHQgIHZhciB0eXBlID0gcmVmLnR5cGU7XG5cdCAgdmFyIHRpbWVvdXQgPSByZWYudGltZW91dDtcblx0ICB2YXIgcHJvcENvdW50ID0gcmVmLnByb3BDb3VudDtcblx0ICBpZiAoIXR5cGUpIHsgcmV0dXJuIGNiKCkgfVxuXHQgIHZhciBldmVudCA9IHR5cGUgPT09IFRSQU5TSVRJT04gPyB0cmFuc2l0aW9uRW5kRXZlbnQgOiBhbmltYXRpb25FbmRFdmVudDtcblx0ICB2YXIgZW5kZWQgPSAwO1xuXHQgIHZhciBlbmQgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBvbkVuZCk7XG5cdCAgICBjYigpO1xuXHQgIH07XG5cdCAgdmFyIG9uRW5kID0gZnVuY3Rpb24gKGUpIHtcblx0ICAgIGlmIChlLnRhcmdldCA9PT0gZWwpIHtcblx0ICAgICAgaWYgKCsrZW5kZWQgPj0gcHJvcENvdW50KSB7XG5cdCAgICAgICAgZW5kKCk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9O1xuXHQgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuXHQgICAgaWYgKGVuZGVkIDwgcHJvcENvdW50KSB7XG5cdCAgICAgIGVuZCgpO1xuXHQgICAgfVxuXHQgIH0sIHRpbWVvdXQgKyAxKTtcblx0ICBlbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBvbkVuZCk7XG5cdH1cblx0XG5cdHZhciB0cmFuc2Zvcm1SRSA9IC9cXGIodHJhbnNmb3JtfGFsbCkoLHwkKS87XG5cdFxuXHRmdW5jdGlvbiBnZXRUcmFuc2l0aW9uSW5mbyAoZWwsIGV4cGVjdGVkVHlwZSkge1xuXHQgIHZhciBzdHlsZXMgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCk7XG5cdCAgdmFyIHRyYW5zaXRpb25lRGVsYXlzID0gc3R5bGVzW3RyYW5zaXRpb25Qcm9wICsgJ0RlbGF5J10uc3BsaXQoJywgJyk7XG5cdCAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbnMgPSBzdHlsZXNbdHJhbnNpdGlvblByb3AgKyAnRHVyYXRpb24nXS5zcGxpdCgnLCAnKTtcblx0ICB2YXIgdHJhbnNpdGlvblRpbWVvdXQgPSBnZXRUaW1lb3V0KHRyYW5zaXRpb25lRGVsYXlzLCB0cmFuc2l0aW9uRHVyYXRpb25zKTtcblx0ICB2YXIgYW5pbWF0aW9uRGVsYXlzID0gc3R5bGVzW2FuaW1hdGlvblByb3AgKyAnRGVsYXknXS5zcGxpdCgnLCAnKTtcblx0ICB2YXIgYW5pbWF0aW9uRHVyYXRpb25zID0gc3R5bGVzW2FuaW1hdGlvblByb3AgKyAnRHVyYXRpb24nXS5zcGxpdCgnLCAnKTtcblx0ICB2YXIgYW5pbWF0aW9uVGltZW91dCA9IGdldFRpbWVvdXQoYW5pbWF0aW9uRGVsYXlzLCBhbmltYXRpb25EdXJhdGlvbnMpO1xuXHRcblx0ICB2YXIgdHlwZTtcblx0ICB2YXIgdGltZW91dCA9IDA7XG5cdCAgdmFyIHByb3BDb3VudCA9IDA7XG5cdCAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG5cdCAgaWYgKGV4cGVjdGVkVHlwZSA9PT0gVFJBTlNJVElPTikge1xuXHQgICAgaWYgKHRyYW5zaXRpb25UaW1lb3V0ID4gMCkge1xuXHQgICAgICB0eXBlID0gVFJBTlNJVElPTjtcblx0ICAgICAgdGltZW91dCA9IHRyYW5zaXRpb25UaW1lb3V0O1xuXHQgICAgICBwcm9wQ291bnQgPSB0cmFuc2l0aW9uRHVyYXRpb25zLmxlbmd0aDtcblx0ICAgIH1cblx0ICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gQU5JTUFUSU9OKSB7XG5cdCAgICBpZiAoYW5pbWF0aW9uVGltZW91dCA+IDApIHtcblx0ICAgICAgdHlwZSA9IEFOSU1BVElPTjtcblx0ICAgICAgdGltZW91dCA9IGFuaW1hdGlvblRpbWVvdXQ7XG5cdCAgICAgIHByb3BDb3VudCA9IGFuaW1hdGlvbkR1cmF0aW9ucy5sZW5ndGg7XG5cdCAgICB9XG5cdCAgfSBlbHNlIHtcblx0ICAgIHRpbWVvdXQgPSBNYXRoLm1heCh0cmFuc2l0aW9uVGltZW91dCwgYW5pbWF0aW9uVGltZW91dCk7XG5cdCAgICB0eXBlID0gdGltZW91dCA+IDBcblx0ICAgICAgPyB0cmFuc2l0aW9uVGltZW91dCA+IGFuaW1hdGlvblRpbWVvdXRcblx0ICAgICAgICA/IFRSQU5TSVRJT05cblx0ICAgICAgICA6IEFOSU1BVElPTlxuXHQgICAgICA6IG51bGw7XG5cdCAgICBwcm9wQ291bnQgPSB0eXBlXG5cdCAgICAgID8gdHlwZSA9PT0gVFJBTlNJVElPTlxuXHQgICAgICAgID8gdHJhbnNpdGlvbkR1cmF0aW9ucy5sZW5ndGhcblx0ICAgICAgICA6IGFuaW1hdGlvbkR1cmF0aW9ucy5sZW5ndGhcblx0ICAgICAgOiAwO1xuXHQgIH1cblx0ICB2YXIgaGFzVHJhbnNmb3JtID1cblx0ICAgIHR5cGUgPT09IFRSQU5TSVRJT04gJiZcblx0ICAgIHRyYW5zZm9ybVJFLnRlc3Qoc3R5bGVzW3RyYW5zaXRpb25Qcm9wICsgJ1Byb3BlcnR5J10pO1xuXHQgIHJldHVybiB7XG5cdCAgICB0eXBlOiB0eXBlLFxuXHQgICAgdGltZW91dDogdGltZW91dCxcblx0ICAgIHByb3BDb3VudDogcHJvcENvdW50LFxuXHQgICAgaGFzVHJhbnNmb3JtOiBoYXNUcmFuc2Zvcm1cblx0ICB9XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGdldFRpbWVvdXQgKGRlbGF5cywgZHVyYXRpb25zKSB7XG5cdCAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cblx0ICB3aGlsZSAoZGVsYXlzLmxlbmd0aCA8IGR1cmF0aW9ucy5sZW5ndGgpIHtcblx0ICAgIGRlbGF5cyA9IGRlbGF5cy5jb25jYXQoZGVsYXlzKTtcblx0ICB9XG5cdFxuXHQgIHJldHVybiBNYXRoLm1heC5hcHBseShudWxsLCBkdXJhdGlvbnMubWFwKGZ1bmN0aW9uIChkLCBpKSB7XG5cdCAgICByZXR1cm4gdG9NcyhkKSArIHRvTXMoZGVsYXlzW2ldKVxuXHQgIH0pKVxuXHR9XG5cdFxuXHRmdW5jdGlvbiB0b01zIChzKSB7XG5cdCAgcmV0dXJuIE51bWJlcihzLnNsaWNlKDAsIC0xKSkgKiAxMDAwXG5cdH1cblx0XG5cdC8qICAqL1xuXHRcblx0ZnVuY3Rpb24gZW50ZXIgKHZub2RlLCB0b2dnbGVEaXNwbGF5KSB7XG5cdCAgdmFyIGVsID0gdm5vZGUuZWxtO1xuXHRcblx0ICAvLyBjYWxsIGxlYXZlIGNhbGxiYWNrIG5vd1xuXHQgIGlmIChlbC5fbGVhdmVDYikge1xuXHQgICAgZWwuX2xlYXZlQ2IuY2FuY2VsbGVkID0gdHJ1ZTtcblx0ICAgIGVsLl9sZWF2ZUNiKCk7XG5cdCAgfVxuXHRcblx0ICB2YXIgZGF0YSA9IHJlc29sdmVUcmFuc2l0aW9uKHZub2RlLmRhdGEudHJhbnNpdGlvbik7XG5cdCAgaWYgKCFkYXRhKSB7XG5cdCAgICByZXR1cm5cblx0ICB9XG5cdFxuXHQgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuXHQgIGlmIChlbC5fZW50ZXJDYiB8fCBlbC5ub2RlVHlwZSAhPT0gMSkge1xuXHQgICAgcmV0dXJuXG5cdCAgfVxuXHRcblx0ICB2YXIgY3NzID0gZGF0YS5jc3M7XG5cdCAgdmFyIHR5cGUgPSBkYXRhLnR5cGU7XG5cdCAgdmFyIGVudGVyQ2xhc3MgPSBkYXRhLmVudGVyQ2xhc3M7XG5cdCAgdmFyIGVudGVyVG9DbGFzcyA9IGRhdGEuZW50ZXJUb0NsYXNzO1xuXHQgIHZhciBlbnRlckFjdGl2ZUNsYXNzID0gZGF0YS5lbnRlckFjdGl2ZUNsYXNzO1xuXHQgIHZhciBhcHBlYXJDbGFzcyA9IGRhdGEuYXBwZWFyQ2xhc3M7XG5cdCAgdmFyIGFwcGVhclRvQ2xhc3MgPSBkYXRhLmFwcGVhclRvQ2xhc3M7XG5cdCAgdmFyIGFwcGVhckFjdGl2ZUNsYXNzID0gZGF0YS5hcHBlYXJBY3RpdmVDbGFzcztcblx0ICB2YXIgYmVmb3JlRW50ZXIgPSBkYXRhLmJlZm9yZUVudGVyO1xuXHQgIHZhciBlbnRlciA9IGRhdGEuZW50ZXI7XG5cdCAgdmFyIGFmdGVyRW50ZXIgPSBkYXRhLmFmdGVyRW50ZXI7XG5cdCAgdmFyIGVudGVyQ2FuY2VsbGVkID0gZGF0YS5lbnRlckNhbmNlbGxlZDtcblx0ICB2YXIgYmVmb3JlQXBwZWFyID0gZGF0YS5iZWZvcmVBcHBlYXI7XG5cdCAgdmFyIGFwcGVhciA9IGRhdGEuYXBwZWFyO1xuXHQgIHZhciBhZnRlckFwcGVhciA9IGRhdGEuYWZ0ZXJBcHBlYXI7XG5cdCAgdmFyIGFwcGVhckNhbmNlbGxlZCA9IGRhdGEuYXBwZWFyQ2FuY2VsbGVkO1xuXHRcblx0ICAvLyBhY3RpdmVJbnN0YW5jZSB3aWxsIGFsd2F5cyBiZSB0aGUgPHRyYW5zaXRpb24+IGNvbXBvbmVudCBtYW5hZ2luZyB0aGlzXG5cdCAgLy8gdHJhbnNpdGlvbi4gT25lIGVkZ2UgY2FzZSB0byBjaGVjayBpcyB3aGVuIHRoZSA8dHJhbnNpdGlvbj4gaXMgcGxhY2VkXG5cdCAgLy8gYXMgdGhlIHJvb3Qgbm9kZSBvZiBhIGNoaWxkIGNvbXBvbmVudC4gSW4gdGhhdCBjYXNlIHdlIG5lZWQgdG8gY2hlY2tcblx0ICAvLyA8dHJhbnNpdGlvbj4ncyBwYXJlbnQgZm9yIGFwcGVhciBjaGVjay5cblx0ICB2YXIgY29udGV4dCA9IGFjdGl2ZUluc3RhbmNlO1xuXHQgIHZhciB0cmFuc2l0aW9uTm9kZSA9IGFjdGl2ZUluc3RhbmNlLiR2bm9kZTtcblx0ICB3aGlsZSAodHJhbnNpdGlvbk5vZGUgJiYgdHJhbnNpdGlvbk5vZGUucGFyZW50KSB7XG5cdCAgICB0cmFuc2l0aW9uTm9kZSA9IHRyYW5zaXRpb25Ob2RlLnBhcmVudDtcblx0ICAgIGNvbnRleHQgPSB0cmFuc2l0aW9uTm9kZS5jb250ZXh0O1xuXHQgIH1cblx0XG5cdCAgdmFyIGlzQXBwZWFyID0gIWNvbnRleHQuX2lzTW91bnRlZCB8fCAhdm5vZGUuaXNSb290SW5zZXJ0O1xuXHRcblx0ICBpZiAoaXNBcHBlYXIgJiYgIWFwcGVhciAmJiBhcHBlYXIgIT09ICcnKSB7XG5cdCAgICByZXR1cm5cblx0ICB9XG5cdFxuXHQgIHZhciBzdGFydENsYXNzID0gaXNBcHBlYXIgPyBhcHBlYXJDbGFzcyA6IGVudGVyQ2xhc3M7XG5cdCAgdmFyIGFjdGl2ZUNsYXNzID0gaXNBcHBlYXIgPyBhcHBlYXJBY3RpdmVDbGFzcyA6IGVudGVyQWN0aXZlQ2xhc3M7XG5cdCAgdmFyIHRvQ2xhc3MgPSBpc0FwcGVhciA/IGFwcGVhclRvQ2xhc3MgOiBlbnRlclRvQ2xhc3M7XG5cdCAgdmFyIGJlZm9yZUVudGVySG9vayA9IGlzQXBwZWFyID8gKGJlZm9yZUFwcGVhciB8fCBiZWZvcmVFbnRlcikgOiBiZWZvcmVFbnRlcjtcblx0ICB2YXIgZW50ZXJIb29rID0gaXNBcHBlYXIgPyAodHlwZW9mIGFwcGVhciA9PT0gJ2Z1bmN0aW9uJyA/IGFwcGVhciA6IGVudGVyKSA6IGVudGVyO1xuXHQgIHZhciBhZnRlckVudGVySG9vayA9IGlzQXBwZWFyID8gKGFmdGVyQXBwZWFyIHx8IGFmdGVyRW50ZXIpIDogYWZ0ZXJFbnRlcjtcblx0ICB2YXIgZW50ZXJDYW5jZWxsZWRIb29rID0gaXNBcHBlYXIgPyAoYXBwZWFyQ2FuY2VsbGVkIHx8IGVudGVyQ2FuY2VsbGVkKSA6IGVudGVyQ2FuY2VsbGVkO1xuXHRcblx0ICB2YXIgZXhwZWN0c0NTUyA9IGNzcyAhPT0gZmFsc2UgJiYgIWlzSUU5O1xuXHQgIHZhciB1c2VyV2FudHNDb250cm9sID1cblx0ICAgIGVudGVySG9vayAmJlxuXHQgICAgLy8gZW50ZXJIb29rIG1heSBiZSBhIGJvdW5kIG1ldGhvZCB3aGljaCBleHBvc2VzXG5cdCAgICAvLyB0aGUgbGVuZ3RoIG9mIG9yaWdpbmFsIGZuIGFzIF9sZW5ndGhcblx0ICAgIChlbnRlckhvb2suX2xlbmd0aCB8fCBlbnRlckhvb2subGVuZ3RoKSA+IDE7XG5cdFxuXHQgIHZhciBjYiA9IGVsLl9lbnRlckNiID0gb25jZShmdW5jdGlvbiAoKSB7XG5cdCAgICBpZiAoZXhwZWN0c0NTUykge1xuXHQgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIHRvQ2xhc3MpO1xuXHQgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGFjdGl2ZUNsYXNzKTtcblx0ICAgIH1cblx0ICAgIGlmIChjYi5jYW5jZWxsZWQpIHtcblx0ICAgICAgaWYgKGV4cGVjdHNDU1MpIHtcblx0ICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIHN0YXJ0Q2xhc3MpO1xuXHQgICAgICB9XG5cdCAgICAgIGVudGVyQ2FuY2VsbGVkSG9vayAmJiBlbnRlckNhbmNlbGxlZEhvb2soZWwpO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgYWZ0ZXJFbnRlckhvb2sgJiYgYWZ0ZXJFbnRlckhvb2soZWwpO1xuXHQgICAgfVxuXHQgICAgZWwuX2VudGVyQ2IgPSBudWxsO1xuXHQgIH0pO1xuXHRcblx0ICBpZiAoIXZub2RlLmRhdGEuc2hvdykge1xuXHQgICAgLy8gcmVtb3ZlIHBlbmRpbmcgbGVhdmUgZWxlbWVudCBvbiBlbnRlciBieSBpbmplY3RpbmcgYW4gaW5zZXJ0IGhvb2tcblx0ICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLmRhdGEuaG9vayB8fCAodm5vZGUuZGF0YS5ob29rID0ge30pLCAnaW5zZXJ0JywgZnVuY3Rpb24gKCkge1xuXHQgICAgICB2YXIgcGFyZW50ID0gZWwucGFyZW50Tm9kZTtcblx0ICAgICAgdmFyIHBlbmRpbmdOb2RlID0gcGFyZW50ICYmIHBhcmVudC5fcGVuZGluZyAmJiBwYXJlbnQuX3BlbmRpbmdbdm5vZGUua2V5XTtcblx0ICAgICAgaWYgKHBlbmRpbmdOb2RlICYmXG5cdCAgICAgICAgICBwZW5kaW5nTm9kZS50YWcgPT09IHZub2RlLnRhZyAmJlxuXHQgICAgICAgICAgcGVuZGluZ05vZGUuZWxtLl9sZWF2ZUNiKSB7XG5cdCAgICAgICAgcGVuZGluZ05vZGUuZWxtLl9sZWF2ZUNiKCk7XG5cdCAgICAgIH1cblx0ICAgICAgZW50ZXJIb29rICYmIGVudGVySG9vayhlbCwgY2IpO1xuXHQgICAgfSwgJ3RyYW5zaXRpb24taW5zZXJ0Jyk7XG5cdCAgfVxuXHRcblx0ICAvLyBzdGFydCBlbnRlciB0cmFuc2l0aW9uXG5cdCAgYmVmb3JlRW50ZXJIb29rICYmIGJlZm9yZUVudGVySG9vayhlbCk7XG5cdCAgaWYgKGV4cGVjdHNDU1MpIHtcblx0ICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgc3RhcnRDbGFzcyk7XG5cdCAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGFjdGl2ZUNsYXNzKTtcblx0ICAgIG5leHRGcmFtZShmdW5jdGlvbiAoKSB7XG5cdCAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgdG9DbGFzcyk7XG5cdCAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgc3RhcnRDbGFzcyk7XG5cdCAgICAgIGlmICghY2IuY2FuY2VsbGVkICYmICF1c2VyV2FudHNDb250cm9sKSB7XG5cdCAgICAgICAgd2hlblRyYW5zaXRpb25FbmRzKGVsLCB0eXBlLCBjYik7XG5cdCAgICAgIH1cblx0ICAgIH0pO1xuXHQgIH1cblx0XG5cdCAgaWYgKHZub2RlLmRhdGEuc2hvdykge1xuXHQgICAgdG9nZ2xlRGlzcGxheSAmJiB0b2dnbGVEaXNwbGF5KCk7XG5cdCAgICBlbnRlckhvb2sgJiYgZW50ZXJIb29rKGVsLCBjYik7XG5cdCAgfVxuXHRcblx0ICBpZiAoIWV4cGVjdHNDU1MgJiYgIXVzZXJXYW50c0NvbnRyb2wpIHtcblx0ICAgIGNiKCk7XG5cdCAgfVxuXHR9XG5cdFxuXHRmdW5jdGlvbiBsZWF2ZSAodm5vZGUsIHJtKSB7XG5cdCAgdmFyIGVsID0gdm5vZGUuZWxtO1xuXHRcblx0ICAvLyBjYWxsIGVudGVyIGNhbGxiYWNrIG5vd1xuXHQgIGlmIChlbC5fZW50ZXJDYikge1xuXHQgICAgZWwuX2VudGVyQ2IuY2FuY2VsbGVkID0gdHJ1ZTtcblx0ICAgIGVsLl9lbnRlckNiKCk7XG5cdCAgfVxuXHRcblx0ICB2YXIgZGF0YSA9IHJlc29sdmVUcmFuc2l0aW9uKHZub2RlLmRhdGEudHJhbnNpdGlvbik7XG5cdCAgaWYgKCFkYXRhKSB7XG5cdCAgICByZXR1cm4gcm0oKVxuXHQgIH1cblx0XG5cdCAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG5cdCAgaWYgKGVsLl9sZWF2ZUNiIHx8IGVsLm5vZGVUeXBlICE9PSAxKSB7XG5cdCAgICByZXR1cm5cblx0ICB9XG5cdFxuXHQgIHZhciBjc3MgPSBkYXRhLmNzcztcblx0ICB2YXIgdHlwZSA9IGRhdGEudHlwZTtcblx0ICB2YXIgbGVhdmVDbGFzcyA9IGRhdGEubGVhdmVDbGFzcztcblx0ICB2YXIgbGVhdmVUb0NsYXNzID0gZGF0YS5sZWF2ZVRvQ2xhc3M7XG5cdCAgdmFyIGxlYXZlQWN0aXZlQ2xhc3MgPSBkYXRhLmxlYXZlQWN0aXZlQ2xhc3M7XG5cdCAgdmFyIGJlZm9yZUxlYXZlID0gZGF0YS5iZWZvcmVMZWF2ZTtcblx0ICB2YXIgbGVhdmUgPSBkYXRhLmxlYXZlO1xuXHQgIHZhciBhZnRlckxlYXZlID0gZGF0YS5hZnRlckxlYXZlO1xuXHQgIHZhciBsZWF2ZUNhbmNlbGxlZCA9IGRhdGEubGVhdmVDYW5jZWxsZWQ7XG5cdCAgdmFyIGRlbGF5TGVhdmUgPSBkYXRhLmRlbGF5TGVhdmU7XG5cdFxuXHQgIHZhciBleHBlY3RzQ1NTID0gY3NzICE9PSBmYWxzZSAmJiAhaXNJRTk7XG5cdCAgdmFyIHVzZXJXYW50c0NvbnRyb2wgPVxuXHQgICAgbGVhdmUgJiZcblx0ICAgIC8vIGxlYXZlIGhvb2sgbWF5IGJlIGEgYm91bmQgbWV0aG9kIHdoaWNoIGV4cG9zZXNcblx0ICAgIC8vIHRoZSBsZW5ndGggb2Ygb3JpZ2luYWwgZm4gYXMgX2xlbmd0aFxuXHQgICAgKGxlYXZlLl9sZW5ndGggfHwgbGVhdmUubGVuZ3RoKSA+IDE7XG5cdFxuXHQgIHZhciBjYiA9IGVsLl9sZWF2ZUNiID0gb25jZShmdW5jdGlvbiAoKSB7XG5cdCAgICBpZiAoZWwucGFyZW50Tm9kZSAmJiBlbC5wYXJlbnROb2RlLl9wZW5kaW5nKSB7XG5cdCAgICAgIGVsLnBhcmVudE5vZGUuX3BlbmRpbmdbdm5vZGUua2V5XSA9IG51bGw7XG5cdCAgICB9XG5cdCAgICBpZiAoZXhwZWN0c0NTUykge1xuXHQgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlVG9DbGFzcyk7XG5cdCAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVBY3RpdmVDbGFzcyk7XG5cdCAgICB9XG5cdCAgICBpZiAoY2IuY2FuY2VsbGVkKSB7XG5cdCAgICAgIGlmIChleHBlY3RzQ1NTKSB7XG5cdCAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUNsYXNzKTtcblx0ICAgICAgfVxuXHQgICAgICBsZWF2ZUNhbmNlbGxlZCAmJiBsZWF2ZUNhbmNlbGxlZChlbCk7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICBybSgpO1xuXHQgICAgICBhZnRlckxlYXZlICYmIGFmdGVyTGVhdmUoZWwpO1xuXHQgICAgfVxuXHQgICAgZWwuX2xlYXZlQ2IgPSBudWxsO1xuXHQgIH0pO1xuXHRcblx0ICBpZiAoZGVsYXlMZWF2ZSkge1xuXHQgICAgZGVsYXlMZWF2ZShwZXJmb3JtTGVhdmUpO1xuXHQgIH0gZWxzZSB7XG5cdCAgICBwZXJmb3JtTGVhdmUoKTtcblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIHBlcmZvcm1MZWF2ZSAoKSB7XG5cdCAgICAvLyB0aGUgZGVsYXllZCBsZWF2ZSBtYXkgaGF2ZSBhbHJlYWR5IGJlZW4gY2FuY2VsbGVkXG5cdCAgICBpZiAoY2IuY2FuY2VsbGVkKSB7XG5cdCAgICAgIHJldHVyblxuXHQgICAgfVxuXHQgICAgLy8gcmVjb3JkIGxlYXZpbmcgZWxlbWVudFxuXHQgICAgaWYgKCF2bm9kZS5kYXRhLnNob3cpIHtcblx0ICAgICAgKGVsLnBhcmVudE5vZGUuX3BlbmRpbmcgfHwgKGVsLnBhcmVudE5vZGUuX3BlbmRpbmcgPSB7fSkpW3Zub2RlLmtleV0gPSB2bm9kZTtcblx0ICAgIH1cblx0ICAgIGJlZm9yZUxlYXZlICYmIGJlZm9yZUxlYXZlKGVsKTtcblx0ICAgIGlmIChleHBlY3RzQ1NTKSB7XG5cdCAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVDbGFzcyk7XG5cdCAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVBY3RpdmVDbGFzcyk7XG5cdCAgICAgIG5leHRGcmFtZShmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZVRvQ2xhc3MpO1xuXHQgICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVDbGFzcyk7XG5cdCAgICAgICAgaWYgKCFjYi5jYW5jZWxsZWQgJiYgIXVzZXJXYW50c0NvbnRyb2wpIHtcblx0ICAgICAgICAgIHdoZW5UcmFuc2l0aW9uRW5kcyhlbCwgdHlwZSwgY2IpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSk7XG5cdCAgICB9XG5cdCAgICBsZWF2ZSAmJiBsZWF2ZShlbCwgY2IpO1xuXHQgICAgaWYgKCFleHBlY3RzQ1NTICYmICF1c2VyV2FudHNDb250cm9sKSB7XG5cdCAgICAgIGNiKCk7XG5cdCAgICB9XG5cdCAgfVxuXHR9XG5cdFxuXHRmdW5jdGlvbiByZXNvbHZlVHJhbnNpdGlvbiAoZGVmJCQxKSB7XG5cdCAgaWYgKCFkZWYkJDEpIHtcblx0ICAgIHJldHVyblxuXHQgIH1cblx0ICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuXHQgIGlmICh0eXBlb2YgZGVmJCQxID09PSAnb2JqZWN0Jykge1xuXHQgICAgdmFyIHJlcyA9IHt9O1xuXHQgICAgaWYgKGRlZiQkMS5jc3MgIT09IGZhbHNlKSB7XG5cdCAgICAgIGV4dGVuZChyZXMsIGF1dG9Dc3NUcmFuc2l0aW9uKGRlZiQkMS5uYW1lIHx8ICd2JykpO1xuXHQgICAgfVxuXHQgICAgZXh0ZW5kKHJlcywgZGVmJCQxKTtcblx0ICAgIHJldHVybiByZXNcblx0ICB9IGVsc2UgaWYgKHR5cGVvZiBkZWYkJDEgPT09ICdzdHJpbmcnKSB7XG5cdCAgICByZXR1cm4gYXV0b0Nzc1RyYW5zaXRpb24oZGVmJCQxKVxuXHQgIH1cblx0fVxuXHRcblx0dmFyIGF1dG9Dc3NUcmFuc2l0aW9uID0gY2FjaGVkKGZ1bmN0aW9uIChuYW1lKSB7XG5cdCAgcmV0dXJuIHtcblx0ICAgIGVudGVyQ2xhc3M6IChuYW1lICsgXCItZW50ZXJcIiksXG5cdCAgICBsZWF2ZUNsYXNzOiAobmFtZSArIFwiLWxlYXZlXCIpLFxuXHQgICAgYXBwZWFyQ2xhc3M6IChuYW1lICsgXCItZW50ZXJcIiksXG5cdCAgICBlbnRlclRvQ2xhc3M6IChuYW1lICsgXCItZW50ZXItdG9cIiksXG5cdCAgICBsZWF2ZVRvQ2xhc3M6IChuYW1lICsgXCItbGVhdmUtdG9cIiksXG5cdCAgICBhcHBlYXJUb0NsYXNzOiAobmFtZSArIFwiLWVudGVyLXRvXCIpLFxuXHQgICAgZW50ZXJBY3RpdmVDbGFzczogKG5hbWUgKyBcIi1lbnRlci1hY3RpdmVcIiksXG5cdCAgICBsZWF2ZUFjdGl2ZUNsYXNzOiAobmFtZSArIFwiLWxlYXZlLWFjdGl2ZVwiKSxcblx0ICAgIGFwcGVhckFjdGl2ZUNsYXNzOiAobmFtZSArIFwiLWVudGVyLWFjdGl2ZVwiKVxuXHQgIH1cblx0fSk7XG5cdFxuXHRmdW5jdGlvbiBvbmNlIChmbikge1xuXHQgIHZhciBjYWxsZWQgPSBmYWxzZTtcblx0ICByZXR1cm4gZnVuY3Rpb24gKCkge1xuXHQgICAgaWYgKCFjYWxsZWQpIHtcblx0ICAgICAgY2FsbGVkID0gdHJ1ZTtcblx0ICAgICAgZm4oKTtcblx0ICAgIH1cblx0ICB9XG5cdH1cblx0XG5cdGZ1bmN0aW9uIF9lbnRlciAoXywgdm5vZGUpIHtcblx0ICBpZiAoIXZub2RlLmRhdGEuc2hvdykge1xuXHQgICAgZW50ZXIodm5vZGUpO1xuXHQgIH1cblx0fVxuXHRcblx0dmFyIHRyYW5zaXRpb24gPSBpbkJyb3dzZXIgPyB7XG5cdCAgY3JlYXRlOiBfZW50ZXIsXG5cdCAgYWN0aXZhdGU6IF9lbnRlcixcblx0ICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSAodm5vZGUsIHJtKSB7XG5cdCAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuXHQgICAgaWYgKCF2bm9kZS5kYXRhLnNob3cpIHtcblx0ICAgICAgbGVhdmUodm5vZGUsIHJtKTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHJtKCk7XG5cdCAgICB9XG5cdCAgfVxuXHR9IDoge307XG5cdFxuXHR2YXIgcGxhdGZvcm1Nb2R1bGVzID0gW1xuXHQgIGF0dHJzLFxuXHQgIGtsYXNzLFxuXHQgIGV2ZW50cyxcblx0ICBkb21Qcm9wcyxcblx0ICBzdHlsZSxcblx0ICB0cmFuc2l0aW9uXG5cdF07XG5cdFxuXHQvKiAgKi9cblx0XG5cdC8vIHRoZSBkaXJlY3RpdmUgbW9kdWxlIHNob3VsZCBiZSBhcHBsaWVkIGxhc3QsIGFmdGVyIGFsbFxuXHQvLyBidWlsdC1pbiBtb2R1bGVzIGhhdmUgYmVlbiBhcHBsaWVkLlxuXHR2YXIgbW9kdWxlcyA9IHBsYXRmb3JtTW9kdWxlcy5jb25jYXQoYmFzZU1vZHVsZXMpO1xuXHRcblx0dmFyIHBhdGNoJDEgPSBjcmVhdGVQYXRjaEZ1bmN0aW9uKHsgbm9kZU9wczogbm9kZU9wcywgbW9kdWxlczogbW9kdWxlcyB9KTtcblx0XG5cdC8qKlxuXHQgKiBOb3QgdHlwZSBjaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBmbG93IGRvZXNuJ3QgbGlrZSBhdHRhY2hpbmdcblx0ICogcHJvcGVydGllcyB0byBFbGVtZW50cy5cblx0ICovXG5cdFxuXHR2YXIgbW9kZWxhYmxlVGFnUkUgPSAvXmlucHV0fHNlbGVjdHx0ZXh0YXJlYXx2dWUtY29tcG9uZW50LVswLTldKygtWzAtOWEtekEtWl8tXSopPyQvO1xuXHRcblx0LyogaXN0YW5idWwgaWdub3JlIGlmICovXG5cdGlmIChpc0lFOSkge1xuXHQgIC8vIGh0dHA6Ly93d3cubWF0dHM0MTEuY29tL3Bvc3QvaW50ZXJuZXQtZXhwbG9yZXItOS1vbmlucHV0L1xuXHQgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3NlbGVjdGlvbmNoYW5nZScsIGZ1bmN0aW9uICgpIHtcblx0ICAgIHZhciBlbCA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG5cdCAgICBpZiAoZWwgJiYgZWwudm1vZGVsKSB7XG5cdCAgICAgIHRyaWdnZXIoZWwsICdpbnB1dCcpO1xuXHQgICAgfVxuXHQgIH0pO1xuXHR9XG5cdFxuXHR2YXIgbW9kZWwgPSB7XG5cdCAgaW5zZXJ0ZWQ6IGZ1bmN0aW9uIGluc2VydGVkIChlbCwgYmluZGluZywgdm5vZGUpIHtcblx0ICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG5cdCAgICAgIGlmICghbW9kZWxhYmxlVGFnUkUudGVzdCh2bm9kZS50YWcpKSB7XG5cdCAgICAgICAgd2Fybihcblx0ICAgICAgICAgIFwidi1tb2RlbCBpcyBub3Qgc3VwcG9ydGVkIG9uIGVsZW1lbnQgdHlwZTogPFwiICsgKHZub2RlLnRhZykgKyBcIj4uIFwiICtcblx0ICAgICAgICAgICdJZiB5b3UgYXJlIHdvcmtpbmcgd2l0aCBjb250ZW50ZWRpdGFibGUsIGl0XFwncyByZWNvbW1lbmRlZCB0byAnICtcblx0ICAgICAgICAgICd3cmFwIGEgbGlicmFyeSBkZWRpY2F0ZWQgZm9yIHRoYXQgcHVycG9zZSBpbnNpZGUgYSBjdXN0b20gY29tcG9uZW50LicsXG5cdCAgICAgICAgICB2bm9kZS5jb250ZXh0XG5cdCAgICAgICAgKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgaWYgKHZub2RlLnRhZyA9PT0gJ3NlbGVjdCcpIHtcblx0ICAgICAgdmFyIGNiID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHNldFNlbGVjdGVkKGVsLCBiaW5kaW5nLCB2bm9kZS5jb250ZXh0KTtcblx0ICAgICAgfTtcblx0ICAgICAgY2IoKTtcblx0ICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG5cdCAgICAgIGlmIChpc0lFIHx8IGlzRWRnZSkge1xuXHQgICAgICAgIHNldFRpbWVvdXQoY2IsIDApO1xuXHQgICAgICB9XG5cdCAgICB9IGVsc2UgaWYgKHZub2RlLnRhZyA9PT0gJ3RleHRhcmVhJyB8fCBlbC50eXBlID09PSAndGV4dCcpIHtcblx0ICAgICAgZWwuX3ZNb2RpZmllcnMgPSBiaW5kaW5nLm1vZGlmaWVycztcblx0ICAgICAgaWYgKCFiaW5kaW5nLm1vZGlmaWVycy5sYXp5KSB7XG5cdCAgICAgICAgaWYgKCFpc0FuZHJvaWQpIHtcblx0ICAgICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbXBvc2l0aW9uc3RhcnQnLCBvbkNvbXBvc2l0aW9uU3RhcnQpO1xuXHQgICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY29tcG9zaXRpb25lbmQnLCBvbkNvbXBvc2l0aW9uRW5kKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG5cdCAgICAgICAgaWYgKGlzSUU5KSB7XG5cdCAgICAgICAgICBlbC52bW9kZWwgPSB0cnVlO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH0sXG5cdCAgY29tcG9uZW50VXBkYXRlZDogZnVuY3Rpb24gY29tcG9uZW50VXBkYXRlZCAoZWwsIGJpbmRpbmcsIHZub2RlKSB7XG5cdCAgICBpZiAodm5vZGUudGFnID09PSAnc2VsZWN0Jykge1xuXHQgICAgICBzZXRTZWxlY3RlZChlbCwgYmluZGluZywgdm5vZGUuY29udGV4dCk7XG5cdCAgICAgIC8vIGluIGNhc2UgdGhlIG9wdGlvbnMgcmVuZGVyZWQgYnkgdi1mb3IgaGF2ZSBjaGFuZ2VkLFxuXHQgICAgICAvLyBpdCdzIHBvc3NpYmxlIHRoYXQgdGhlIHZhbHVlIGlzIG91dC1vZi1zeW5jIHdpdGggdGhlIHJlbmRlcmVkIG9wdGlvbnMuXG5cdCAgICAgIC8vIGRldGVjdCBzdWNoIGNhc2VzIGFuZCBmaWx0ZXIgb3V0IHZhbHVlcyB0aGF0IG5vIGxvbmdlciBoYXMgYSBtYXRjaGluZ1xuXHQgICAgICAvLyBvcHRpb24gaW4gdGhlIERPTS5cblx0ICAgICAgdmFyIG5lZWRSZXNldCA9IGVsLm11bHRpcGxlXG5cdCAgICAgICAgPyBiaW5kaW5nLnZhbHVlLnNvbWUoZnVuY3Rpb24gKHYpIHsgcmV0dXJuIGhhc05vTWF0Y2hpbmdPcHRpb24odiwgZWwub3B0aW9ucyk7IH0pXG5cdCAgICAgICAgOiBiaW5kaW5nLnZhbHVlICE9PSBiaW5kaW5nLm9sZFZhbHVlICYmIGhhc05vTWF0Y2hpbmdPcHRpb24oYmluZGluZy52YWx1ZSwgZWwub3B0aW9ucyk7XG5cdCAgICAgIGlmIChuZWVkUmVzZXQpIHtcblx0ICAgICAgICB0cmlnZ2VyKGVsLCAnY2hhbmdlJyk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9XG5cdH07XG5cdFxuXHRmdW5jdGlvbiBzZXRTZWxlY3RlZCAoZWwsIGJpbmRpbmcsIHZtKSB7XG5cdCAgdmFyIHZhbHVlID0gYmluZGluZy52YWx1ZTtcblx0ICB2YXIgaXNNdWx0aXBsZSA9IGVsLm11bHRpcGxlO1xuXHQgIGlmIChpc011bHRpcGxlICYmICFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuXHQgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuXHQgICAgICBcIjxzZWxlY3QgbXVsdGlwbGUgdi1tb2RlbD1cXFwiXCIgKyAoYmluZGluZy5leHByZXNzaW9uKSArIFwiXFxcIj4gXCIgK1xuXHQgICAgICBcImV4cGVjdHMgYW4gQXJyYXkgdmFsdWUgZm9yIGl0cyBiaW5kaW5nLCBidXQgZ290IFwiICsgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkuc2xpY2UoOCwgLTEpKSxcblx0ICAgICAgdm1cblx0ICAgICk7XG5cdCAgICByZXR1cm5cblx0ICB9XG5cdCAgdmFyIHNlbGVjdGVkLCBvcHRpb247XG5cdCAgZm9yICh2YXIgaSA9IDAsIGwgPSBlbC5vcHRpb25zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuXHQgICAgb3B0aW9uID0gZWwub3B0aW9uc1tpXTtcblx0ICAgIGlmIChpc011bHRpcGxlKSB7XG5cdCAgICAgIHNlbGVjdGVkID0gbG9vc2VJbmRleE9mKHZhbHVlLCBnZXRWYWx1ZShvcHRpb24pKSA+IC0xO1xuXHQgICAgICBpZiAob3B0aW9uLnNlbGVjdGVkICE9PSBzZWxlY3RlZCkge1xuXHQgICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IHNlbGVjdGVkO1xuXHQgICAgICB9XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICBpZiAobG9vc2VFcXVhbChnZXRWYWx1ZShvcHRpb24pLCB2YWx1ZSkpIHtcblx0ICAgICAgICBpZiAoZWwuc2VsZWN0ZWRJbmRleCAhPT0gaSkge1xuXHQgICAgICAgICAgZWwuc2VsZWN0ZWRJbmRleCA9IGk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVyblxuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfVxuXHQgIGlmICghaXNNdWx0aXBsZSkge1xuXHQgICAgZWwuc2VsZWN0ZWRJbmRleCA9IC0xO1xuXHQgIH1cblx0fVxuXHRcblx0ZnVuY3Rpb24gaGFzTm9NYXRjaGluZ09wdGlvbiAodmFsdWUsIG9wdGlvbnMpIHtcblx0ICBmb3IgKHZhciBpID0gMCwgbCA9IG9wdGlvbnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG5cdCAgICBpZiAobG9vc2VFcXVhbChnZXRWYWx1ZShvcHRpb25zW2ldKSwgdmFsdWUpKSB7XG5cdCAgICAgIHJldHVybiBmYWxzZVxuXHQgICAgfVxuXHQgIH1cblx0ICByZXR1cm4gdHJ1ZVxuXHR9XG5cdFxuXHRmdW5jdGlvbiBnZXRWYWx1ZSAob3B0aW9uKSB7XG5cdCAgcmV0dXJuICdfdmFsdWUnIGluIG9wdGlvblxuXHQgICAgPyBvcHRpb24uX3ZhbHVlXG5cdCAgICA6IG9wdGlvbi52YWx1ZVxuXHR9XG5cdFxuXHRmdW5jdGlvbiBvbkNvbXBvc2l0aW9uU3RhcnQgKGUpIHtcblx0ICBlLnRhcmdldC5jb21wb3NpbmcgPSB0cnVlO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBvbkNvbXBvc2l0aW9uRW5kIChlKSB7XG5cdCAgZS50YXJnZXQuY29tcG9zaW5nID0gZmFsc2U7XG5cdCAgdHJpZ2dlcihlLnRhcmdldCwgJ2lucHV0Jyk7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIHRyaWdnZXIgKGVsLCB0eXBlKSB7XG5cdCAgdmFyIGUgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnSFRNTEV2ZW50cycpO1xuXHQgIGUuaW5pdEV2ZW50KHR5cGUsIHRydWUsIHRydWUpO1xuXHQgIGVsLmRpc3BhdGNoRXZlbnQoZSk7XG5cdH1cblx0XG5cdC8qICAqL1xuXHRcblx0Ly8gcmVjdXJzaXZlbHkgc2VhcmNoIGZvciBwb3NzaWJsZSB0cmFuc2l0aW9uIGRlZmluZWQgaW5zaWRlIHRoZSBjb21wb25lbnQgcm9vdFxuXHRmdW5jdGlvbiBsb2NhdGVOb2RlICh2bm9kZSkge1xuXHQgIHJldHVybiB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSAmJiAoIXZub2RlLmRhdGEgfHwgIXZub2RlLmRhdGEudHJhbnNpdGlvbilcblx0ICAgID8gbG9jYXRlTm9kZSh2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGUpXG5cdCAgICA6IHZub2RlXG5cdH1cblx0XG5cdHZhciBzaG93ID0ge1xuXHQgIGJpbmQ6IGZ1bmN0aW9uIGJpbmQgKGVsLCByZWYsIHZub2RlKSB7XG5cdCAgICB2YXIgdmFsdWUgPSByZWYudmFsdWU7XG5cdFxuXHQgICAgdm5vZGUgPSBsb2NhdGVOb2RlKHZub2RlKTtcblx0ICAgIHZhciB0cmFuc2l0aW9uID0gdm5vZGUuZGF0YSAmJiB2bm9kZS5kYXRhLnRyYW5zaXRpb247XG5cdCAgICB2YXIgb3JpZ2luYWxEaXNwbGF5ID0gZWwuX192T3JpZ2luYWxEaXNwbGF5ID1cblx0ICAgICAgZWwuc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnID8gJycgOiBlbC5zdHlsZS5kaXNwbGF5O1xuXHQgICAgaWYgKHZhbHVlICYmIHRyYW5zaXRpb24gJiYgIWlzSUU5KSB7XG5cdCAgICAgIHZub2RlLmRhdGEuc2hvdyA9IHRydWU7XG5cdCAgICAgIGVudGVyKHZub2RlLCBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IG9yaWdpbmFsRGlzcGxheTtcblx0ICAgICAgfSk7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gdmFsdWUgPyBvcmlnaW5hbERpc3BsYXkgOiAnbm9uZSc7XG5cdCAgICB9XG5cdCAgfSxcblx0XG5cdCAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUgKGVsLCByZWYsIHZub2RlKSB7XG5cdCAgICB2YXIgdmFsdWUgPSByZWYudmFsdWU7XG5cdCAgICB2YXIgb2xkVmFsdWUgPSByZWYub2xkVmFsdWU7XG5cdFxuXHQgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG5cdCAgICBpZiAodmFsdWUgPT09IG9sZFZhbHVlKSB7IHJldHVybiB9XG5cdCAgICB2bm9kZSA9IGxvY2F0ZU5vZGUodm5vZGUpO1xuXHQgICAgdmFyIHRyYW5zaXRpb24gPSB2bm9kZS5kYXRhICYmIHZub2RlLmRhdGEudHJhbnNpdGlvbjtcblx0ICAgIGlmICh0cmFuc2l0aW9uICYmICFpc0lFOSkge1xuXHQgICAgICB2bm9kZS5kYXRhLnNob3cgPSB0cnVlO1xuXHQgICAgICBpZiAodmFsdWUpIHtcblx0ICAgICAgICBlbnRlcih2bm9kZSwgZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IGVsLl9fdk9yaWdpbmFsRGlzcGxheTtcblx0ICAgICAgICB9KTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICBsZWF2ZSh2bm9kZSwgZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9ICdub25lJztcblx0ICAgICAgICB9KTtcblx0ICAgICAgfVxuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IHZhbHVlID8gZWwuX192T3JpZ2luYWxEaXNwbGF5IDogJ25vbmUnO1xuXHQgICAgfVxuXHQgIH0sXG5cdFxuXHQgIHVuYmluZDogZnVuY3Rpb24gdW5iaW5kIChcblx0ICAgIGVsLFxuXHQgICAgYmluZGluZyxcblx0ICAgIHZub2RlLFxuXHQgICAgb2xkVm5vZGUsXG5cdCAgICBpc0Rlc3Ryb3lcblx0ICApIHtcblx0ICAgIGlmICghaXNEZXN0cm95KSB7XG5cdCAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSBlbC5fX3ZPcmlnaW5hbERpc3BsYXk7XG5cdCAgICB9XG5cdCAgfVxuXHR9O1xuXHRcblx0dmFyIHBsYXRmb3JtRGlyZWN0aXZlcyA9IHtcblx0ICBtb2RlbDogbW9kZWwsXG5cdCAgc2hvdzogc2hvd1xuXHR9O1xuXHRcblx0LyogICovXG5cdFxuXHQvLyBQcm92aWRlcyB0cmFuc2l0aW9uIHN1cHBvcnQgZm9yIGEgc2luZ2xlIGVsZW1lbnQvY29tcG9uZW50LlxuXHQvLyBzdXBwb3J0cyB0cmFuc2l0aW9uIG1vZGUgKG91dC1pbiAvIGluLW91dClcblx0XG5cdHZhciB0cmFuc2l0aW9uUHJvcHMgPSB7XG5cdCAgbmFtZTogU3RyaW5nLFxuXHQgIGFwcGVhcjogQm9vbGVhbixcblx0ICBjc3M6IEJvb2xlYW4sXG5cdCAgbW9kZTogU3RyaW5nLFxuXHQgIHR5cGU6IFN0cmluZyxcblx0ICBlbnRlckNsYXNzOiBTdHJpbmcsXG5cdCAgbGVhdmVDbGFzczogU3RyaW5nLFxuXHQgIGVudGVyVG9DbGFzczogU3RyaW5nLFxuXHQgIGxlYXZlVG9DbGFzczogU3RyaW5nLFxuXHQgIGVudGVyQWN0aXZlQ2xhc3M6IFN0cmluZyxcblx0ICBsZWF2ZUFjdGl2ZUNsYXNzOiBTdHJpbmcsXG5cdCAgYXBwZWFyQ2xhc3M6IFN0cmluZyxcblx0ICBhcHBlYXJBY3RpdmVDbGFzczogU3RyaW5nLFxuXHQgIGFwcGVhclRvQ2xhc3M6IFN0cmluZ1xuXHR9O1xuXHRcblx0Ly8gaW4gY2FzZSB0aGUgY2hpbGQgaXMgYWxzbyBhbiBhYnN0cmFjdCBjb21wb25lbnQsIGUuZy4gPGtlZXAtYWxpdmU+XG5cdC8vIHdlIHdhbnQgdG8gcmVjdXJzaXZlbHkgcmV0cmlldmUgdGhlIHJlYWwgY29tcG9uZW50IHRvIGJlIHJlbmRlcmVkXG5cdGZ1bmN0aW9uIGdldFJlYWxDaGlsZCAodm5vZGUpIHtcblx0ICB2YXIgY29tcE9wdGlvbnMgPSB2bm9kZSAmJiB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuXHQgIGlmIChjb21wT3B0aW9ucyAmJiBjb21wT3B0aW9ucy5DdG9yLm9wdGlvbnMuYWJzdHJhY3QpIHtcblx0ICAgIHJldHVybiBnZXRSZWFsQ2hpbGQoZ2V0Rmlyc3RDb21wb25lbnRDaGlsZChjb21wT3B0aW9ucy5jaGlsZHJlbikpXG5cdCAgfSBlbHNlIHtcblx0ICAgIHJldHVybiB2bm9kZVxuXHQgIH1cblx0fVxuXHRcblx0ZnVuY3Rpb24gZXh0cmFjdFRyYW5zaXRpb25EYXRhIChjb21wKSB7XG5cdCAgdmFyIGRhdGEgPSB7fTtcblx0ICB2YXIgb3B0aW9ucyA9IGNvbXAuJG9wdGlvbnM7XG5cdCAgLy8gcHJvcHNcblx0ICBmb3IgKHZhciBrZXkgaW4gb3B0aW9ucy5wcm9wc0RhdGEpIHtcblx0ICAgIGRhdGFba2V5XSA9IGNvbXBba2V5XTtcblx0ICB9XG5cdCAgLy8gZXZlbnRzLlxuXHQgIC8vIGV4dHJhY3QgbGlzdGVuZXJzIGFuZCBwYXNzIHRoZW0gZGlyZWN0bHkgdG8gdGhlIHRyYW5zaXRpb24gbWV0aG9kc1xuXHQgIHZhciBsaXN0ZW5lcnMgPSBvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM7XG5cdCAgZm9yICh2YXIga2V5JDEgaW4gbGlzdGVuZXJzKSB7XG5cdCAgICBkYXRhW2NhbWVsaXplKGtleSQxKV0gPSBsaXN0ZW5lcnNba2V5JDFdLmZuO1xuXHQgIH1cblx0ICByZXR1cm4gZGF0YVxuXHR9XG5cdFxuXHRmdW5jdGlvbiBwbGFjZWhvbGRlciAoaCwgcmF3Q2hpbGQpIHtcblx0ICByZXR1cm4gL1xcZC1rZWVwLWFsaXZlJC8udGVzdChyYXdDaGlsZC50YWcpXG5cdCAgICA/IGgoJ2tlZXAtYWxpdmUnKVxuXHQgICAgOiBudWxsXG5cdH1cblx0XG5cdGZ1bmN0aW9uIGhhc1BhcmVudFRyYW5zaXRpb24gKHZub2RlKSB7XG5cdCAgd2hpbGUgKCh2bm9kZSA9IHZub2RlLnBhcmVudCkpIHtcblx0ICAgIGlmICh2bm9kZS5kYXRhLnRyYW5zaXRpb24pIHtcblx0ICAgICAgcmV0dXJuIHRydWVcblx0ICAgIH1cblx0ICB9XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGlzU2FtZUNoaWxkIChjaGlsZCwgb2xkQ2hpbGQpIHtcblx0ICByZXR1cm4gb2xkQ2hpbGQua2V5ID09PSBjaGlsZC5rZXkgJiYgb2xkQ2hpbGQudGFnID09PSBjaGlsZC50YWdcblx0fVxuXHRcblx0dmFyIFRyYW5zaXRpb24gPSB7XG5cdCAgbmFtZTogJ3RyYW5zaXRpb24nLFxuXHQgIHByb3BzOiB0cmFuc2l0aW9uUHJvcHMsXG5cdCAgYWJzdHJhY3Q6IHRydWUsXG5cdFxuXHQgIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyIChoKSB7XG5cdCAgICB2YXIgdGhpcyQxID0gdGhpcztcblx0XG5cdCAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLiRzbG90cy5kZWZhdWx0O1xuXHQgICAgaWYgKCFjaGlsZHJlbikge1xuXHQgICAgICByZXR1cm5cblx0ICAgIH1cblx0XG5cdCAgICAvLyBmaWx0ZXIgb3V0IHRleHQgbm9kZXMgKHBvc3NpYmxlIHdoaXRlc3BhY2VzKVxuXHQgICAgY2hpbGRyZW4gPSBjaGlsZHJlbi5maWx0ZXIoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMudGFnOyB9KTtcblx0ICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuXHQgICAgaWYgKCFjaGlsZHJlbi5sZW5ndGgpIHtcblx0ICAgICAgcmV0dXJuXG5cdCAgICB9XG5cdFxuXHQgICAgLy8gd2FybiBtdWx0aXBsZSBlbGVtZW50c1xuXHQgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY2hpbGRyZW4ubGVuZ3RoID4gMSkge1xuXHQgICAgICB3YXJuKFxuXHQgICAgICAgICc8dHJhbnNpdGlvbj4gY2FuIG9ubHkgYmUgdXNlZCBvbiBhIHNpbmdsZSBlbGVtZW50LiBVc2UgJyArXG5cdCAgICAgICAgJzx0cmFuc2l0aW9uLWdyb3VwPiBmb3IgbGlzdHMuJyxcblx0ICAgICAgICB0aGlzLiRwYXJlbnRcblx0ICAgICAgKTtcblx0ICAgIH1cblx0XG5cdCAgICB2YXIgbW9kZSA9IHRoaXMubW9kZTtcblx0XG5cdCAgICAvLyB3YXJuIGludmFsaWQgbW9kZVxuXHQgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcblx0ICAgICAgICBtb2RlICYmIG1vZGUgIT09ICdpbi1vdXQnICYmIG1vZGUgIT09ICdvdXQtaW4nKSB7XG5cdCAgICAgIHdhcm4oXG5cdCAgICAgICAgJ2ludmFsaWQgPHRyYW5zaXRpb24+IG1vZGU6ICcgKyBtb2RlLFxuXHQgICAgICAgIHRoaXMuJHBhcmVudFxuXHQgICAgICApO1xuXHQgICAgfVxuXHRcblx0ICAgIHZhciByYXdDaGlsZCA9IGNoaWxkcmVuWzBdO1xuXHRcblx0ICAgIC8vIGlmIHRoaXMgaXMgYSBjb21wb25lbnQgcm9vdCBub2RlIGFuZCB0aGUgY29tcG9uZW50J3Ncblx0ICAgIC8vIHBhcmVudCBjb250YWluZXIgbm9kZSBhbHNvIGhhcyB0cmFuc2l0aW9uLCBza2lwLlxuXHQgICAgaWYgKGhhc1BhcmVudFRyYW5zaXRpb24odGhpcy4kdm5vZGUpKSB7XG5cdCAgICAgIHJldHVybiByYXdDaGlsZFxuXHQgICAgfVxuXHRcblx0ICAgIC8vIGFwcGx5IHRyYW5zaXRpb24gZGF0YSB0byBjaGlsZFxuXHQgICAgLy8gdXNlIGdldFJlYWxDaGlsZCgpIHRvIGlnbm9yZSBhYnN0cmFjdCBjb21wb25lbnRzIGUuZy4ga2VlcC1hbGl2ZVxuXHQgICAgdmFyIGNoaWxkID0gZ2V0UmVhbENoaWxkKHJhd0NoaWxkKTtcblx0ICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuXHQgICAgaWYgKCFjaGlsZCkge1xuXHQgICAgICByZXR1cm4gcmF3Q2hpbGRcblx0ICAgIH1cblx0XG5cdCAgICBpZiAodGhpcy5fbGVhdmluZykge1xuXHQgICAgICByZXR1cm4gcGxhY2Vob2xkZXIoaCwgcmF3Q2hpbGQpXG5cdCAgICB9XG5cdFxuXHQgICAgLy8gZW5zdXJlIGEga2V5IHRoYXQgaXMgdW5pcXVlIHRvIHRoZSB2bm9kZSB0eXBlIGFuZCB0byB0aGlzIHRyYW5zaXRpb25cblx0ICAgIC8vIGNvbXBvbmVudCBpbnN0YW5jZS4gVGhpcyBrZXkgd2lsbCBiZSB1c2VkIHRvIHJlbW92ZSBwZW5kaW5nIGxlYXZpbmcgbm9kZXNcblx0ICAgIC8vIGR1cmluZyBlbnRlcmluZy5cblx0ICAgIHZhciBpZCA9IFwiX190cmFuc2l0aW9uLVwiICsgKHRoaXMuX3VpZCkgKyBcIi1cIjtcblx0ICAgIHZhciBrZXkgPSBjaGlsZC5rZXkgPSBjaGlsZC5rZXkgPT0gbnVsbFxuXHQgICAgICA/IGlkICsgY2hpbGQudGFnXG5cdCAgICAgIDogaXNQcmltaXRpdmUoY2hpbGQua2V5KVxuXHQgICAgICAgID8gKFN0cmluZyhjaGlsZC5rZXkpLmluZGV4T2YoaWQpID09PSAwID8gY2hpbGQua2V5IDogaWQgKyBjaGlsZC5rZXkpXG5cdCAgICAgICAgOiBjaGlsZC5rZXk7XG5cdCAgICB2YXIgZGF0YSA9IChjaGlsZC5kYXRhIHx8IChjaGlsZC5kYXRhID0ge30pKS50cmFuc2l0aW9uID0gZXh0cmFjdFRyYW5zaXRpb25EYXRhKHRoaXMpO1xuXHQgICAgdmFyIG9sZFJhd0NoaWxkID0gdGhpcy5fdm5vZGU7XG5cdCAgICB2YXIgb2xkQ2hpbGQgPSBnZXRSZWFsQ2hpbGQob2xkUmF3Q2hpbGQpO1xuXHRcblx0ICAgIC8vIG1hcmsgdi1zaG93XG5cdCAgICAvLyBzbyB0aGF0IHRoZSB0cmFuc2l0aW9uIG1vZHVsZSBjYW4gaGFuZCBvdmVyIHRoZSBjb250cm9sIHRvIHRoZSBkaXJlY3RpdmVcblx0ICAgIGlmIChjaGlsZC5kYXRhLmRpcmVjdGl2ZXMgJiYgY2hpbGQuZGF0YS5kaXJlY3RpdmVzLnNvbWUoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQubmFtZSA9PT0gJ3Nob3cnOyB9KSkge1xuXHQgICAgICBjaGlsZC5kYXRhLnNob3cgPSB0cnVlO1xuXHQgICAgfVxuXHRcblx0ICAgIGlmIChvbGRDaGlsZCAmJiBvbGRDaGlsZC5kYXRhICYmICFpc1NhbWVDaGlsZChjaGlsZCwgb2xkQ2hpbGQpKSB7XG5cdCAgICAgIC8vIHJlcGxhY2Ugb2xkIGNoaWxkIHRyYW5zaXRpb24gZGF0YSB3aXRoIGZyZXNoIG9uZVxuXHQgICAgICAvLyBpbXBvcnRhbnQgZm9yIGR5bmFtaWMgdHJhbnNpdGlvbnMhXG5cdCAgICAgIHZhciBvbGREYXRhID0gb2xkQ2hpbGQgJiYgKG9sZENoaWxkLmRhdGEudHJhbnNpdGlvbiA9IGV4dGVuZCh7fSwgZGF0YSkpO1xuXHQgICAgICAvLyBoYW5kbGUgdHJhbnNpdGlvbiBtb2RlXG5cdCAgICAgIGlmIChtb2RlID09PSAnb3V0LWluJykge1xuXHQgICAgICAgIC8vIHJldHVybiBwbGFjZWhvbGRlciBub2RlIGFuZCBxdWV1ZSB1cGRhdGUgd2hlbiBsZWF2ZSBmaW5pc2hlc1xuXHQgICAgICAgIHRoaXMuX2xlYXZpbmcgPSB0cnVlO1xuXHQgICAgICAgIG1lcmdlVk5vZGVIb29rKG9sZERhdGEsICdhZnRlckxlYXZlJywgZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgdGhpcyQxLl9sZWF2aW5nID0gZmFsc2U7XG5cdCAgICAgICAgICB0aGlzJDEuJGZvcmNlVXBkYXRlKCk7XG5cdCAgICAgICAgfSwga2V5KTtcblx0ICAgICAgICByZXR1cm4gcGxhY2Vob2xkZXIoaCwgcmF3Q2hpbGQpXG5cdCAgICAgIH0gZWxzZSBpZiAobW9kZSA9PT0gJ2luLW91dCcpIHtcblx0ICAgICAgICB2YXIgZGVsYXllZExlYXZlO1xuXHQgICAgICAgIHZhciBwZXJmb3JtTGVhdmUgPSBmdW5jdGlvbiAoKSB7IGRlbGF5ZWRMZWF2ZSgpOyB9O1xuXHQgICAgICAgIG1lcmdlVk5vZGVIb29rKGRhdGEsICdhZnRlckVudGVyJywgcGVyZm9ybUxlYXZlLCBrZXkpO1xuXHQgICAgICAgIG1lcmdlVk5vZGVIb29rKGRhdGEsICdlbnRlckNhbmNlbGxlZCcsIHBlcmZvcm1MZWF2ZSwga2V5KTtcblx0ICAgICAgICBtZXJnZVZOb2RlSG9vayhvbGREYXRhLCAnZGVsYXlMZWF2ZScsIGZ1bmN0aW9uIChsZWF2ZSkge1xuXHQgICAgICAgICAgZGVsYXllZExlYXZlID0gbGVhdmU7XG5cdCAgICAgICAgfSwga2V5KTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHRcblx0ICAgIHJldHVybiByYXdDaGlsZFxuXHQgIH1cblx0fTtcblx0XG5cdC8qICAqL1xuXHRcblx0Ly8gUHJvdmlkZXMgdHJhbnNpdGlvbiBzdXBwb3J0IGZvciBsaXN0IGl0ZW1zLlxuXHQvLyBzdXBwb3J0cyBtb3ZlIHRyYW5zaXRpb25zIHVzaW5nIHRoZSBGTElQIHRlY2huaXF1ZS5cblx0XG5cdC8vIEJlY2F1c2UgdGhlIHZkb20ncyBjaGlsZHJlbiB1cGRhdGUgYWxnb3JpdGhtIGlzIFwidW5zdGFibGVcIiAtIGkuZS5cblx0Ly8gaXQgZG9lc24ndCBndWFyYW50ZWUgdGhlIHJlbGF0aXZlIHBvc2l0aW9uaW5nIG9mIHJlbW92ZWQgZWxlbWVudHMsXG5cdC8vIHdlIGZvcmNlIHRyYW5zaXRpb24tZ3JvdXAgdG8gdXBkYXRlIGl0cyBjaGlsZHJlbiBpbnRvIHR3byBwYXNzZXM6XG5cdC8vIGluIHRoZSBmaXJzdCBwYXNzLCB3ZSByZW1vdmUgYWxsIG5vZGVzIHRoYXQgbmVlZCB0byBiZSByZW1vdmVkLFxuXHQvLyB0cmlnZ2VyaW5nIHRoZWlyIGxlYXZpbmcgdHJhbnNpdGlvbjsgaW4gdGhlIHNlY29uZCBwYXNzLCB3ZSBpbnNlcnQvbW92ZVxuXHQvLyBpbnRvIHRoZSBmaW5hbCBkaXNpcmVkIHN0YXRlLiBUaGlzIHdheSBpbiB0aGUgc2Vjb25kIHBhc3MgcmVtb3ZlZFxuXHQvLyBub2RlcyB3aWxsIHJlbWFpbiB3aGVyZSB0aGV5IHNob3VsZCBiZS5cblx0XG5cdHZhciBwcm9wcyA9IGV4dGVuZCh7XG5cdCAgdGFnOiBTdHJpbmcsXG5cdCAgbW92ZUNsYXNzOiBTdHJpbmdcblx0fSwgdHJhbnNpdGlvblByb3BzKTtcblx0XG5cdGRlbGV0ZSBwcm9wcy5tb2RlO1xuXHRcblx0dmFyIFRyYW5zaXRpb25Hcm91cCA9IHtcblx0ICBwcm9wczogcHJvcHMsXG5cdFxuXHQgIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyIChoKSB7XG5cdCAgICB2YXIgdGFnID0gdGhpcy50YWcgfHwgdGhpcy4kdm5vZGUuZGF0YS50YWcgfHwgJ3NwYW4nO1xuXHQgICAgdmFyIG1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cdCAgICB2YXIgcHJldkNoaWxkcmVuID0gdGhpcy5wcmV2Q2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xuXHQgICAgdmFyIHJhd0NoaWxkcmVuID0gdGhpcy4kc2xvdHMuZGVmYXVsdCB8fCBbXTtcblx0ICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW4gPSBbXTtcblx0ICAgIHZhciB0cmFuc2l0aW9uRGF0YSA9IGV4dHJhY3RUcmFuc2l0aW9uRGF0YSh0aGlzKTtcblx0XG5cdCAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJhd0NoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgIHZhciBjID0gcmF3Q2hpbGRyZW5baV07XG5cdCAgICAgIGlmIChjLnRhZykge1xuXHQgICAgICAgIGlmIChjLmtleSAhPSBudWxsICYmIFN0cmluZyhjLmtleSkuaW5kZXhPZignX192bGlzdCcpICE9PSAwKSB7XG5cdCAgICAgICAgICBjaGlsZHJlbi5wdXNoKGMpO1xuXHQgICAgICAgICAgbWFwW2Mua2V5XSA9IGNcblx0ICAgICAgICAgIDsoYy5kYXRhIHx8IChjLmRhdGEgPSB7fSkpLnRyYW5zaXRpb24gPSB0cmFuc2l0aW9uRGF0YTtcblx0ICAgICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcblx0ICAgICAgICAgIHZhciBvcHRzID0gYy5jb21wb25lbnRPcHRpb25zO1xuXHQgICAgICAgICAgdmFyIG5hbWUgPSBvcHRzXG5cdCAgICAgICAgICAgID8gKG9wdHMuQ3Rvci5vcHRpb25zLm5hbWUgfHwgb3B0cy50YWcpXG5cdCAgICAgICAgICAgIDogYy50YWc7XG5cdCAgICAgICAgICB3YXJuKChcIjx0cmFuc2l0aW9uLWdyb3VwPiBjaGlsZHJlbiBtdXN0IGJlIGtleWVkOiA8XCIgKyBuYW1lICsgXCI+XCIpKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH1cblx0XG5cdCAgICBpZiAocHJldkNoaWxkcmVuKSB7XG5cdCAgICAgIHZhciBrZXB0ID0gW107XG5cdCAgICAgIHZhciByZW1vdmVkID0gW107XG5cdCAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IHByZXZDaGlsZHJlbi5sZW5ndGg7IGkkMSsrKSB7XG5cdCAgICAgICAgdmFyIGMkMSA9IHByZXZDaGlsZHJlbltpJDFdO1xuXHQgICAgICAgIGMkMS5kYXRhLnRyYW5zaXRpb24gPSB0cmFuc2l0aW9uRGF0YTtcblx0ICAgICAgICBjJDEuZGF0YS5wb3MgPSBjJDEuZWxtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHQgICAgICAgIGlmIChtYXBbYyQxLmtleV0pIHtcblx0ICAgICAgICAgIGtlcHQucHVzaChjJDEpO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICByZW1vdmVkLnB1c2goYyQxKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgICAgdGhpcy5rZXB0ID0gaCh0YWcsIG51bGwsIGtlcHQpO1xuXHQgICAgICB0aGlzLnJlbW92ZWQgPSByZW1vdmVkO1xuXHQgICAgfVxuXHRcblx0ICAgIHJldHVybiBoKHRhZywgbnVsbCwgY2hpbGRyZW4pXG5cdCAgfSxcblx0XG5cdCAgYmVmb3JlVXBkYXRlOiBmdW5jdGlvbiBiZWZvcmVVcGRhdGUgKCkge1xuXHQgICAgLy8gZm9yY2UgcmVtb3ZpbmcgcGFzc1xuXHQgICAgdGhpcy5fX3BhdGNoX18oXG5cdCAgICAgIHRoaXMuX3Zub2RlLFxuXHQgICAgICB0aGlzLmtlcHQsXG5cdCAgICAgIGZhbHNlLCAvLyBoeWRyYXRpbmdcblx0ICAgICAgdHJ1ZSAvLyByZW1vdmVPbmx5ICghaW1wb3J0YW50LCBhdm9pZHMgdW5uZWNlc3NhcnkgbW92ZXMpXG5cdCAgICApO1xuXHQgICAgdGhpcy5fdm5vZGUgPSB0aGlzLmtlcHQ7XG5cdCAgfSxcblx0XG5cdCAgdXBkYXRlZDogZnVuY3Rpb24gdXBkYXRlZCAoKSB7XG5cdCAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnByZXZDaGlsZHJlbjtcblx0ICAgIHZhciBtb3ZlQ2xhc3MgPSB0aGlzLm1vdmVDbGFzcyB8fCAoKHRoaXMubmFtZSB8fCAndicpICsgJy1tb3ZlJyk7XG5cdCAgICBpZiAoIWNoaWxkcmVuLmxlbmd0aCB8fCAhdGhpcy5oYXNNb3ZlKGNoaWxkcmVuWzBdLmVsbSwgbW92ZUNsYXNzKSkge1xuXHQgICAgICByZXR1cm5cblx0ICAgIH1cblx0XG5cdCAgICAvLyB3ZSBkaXZpZGUgdGhlIHdvcmsgaW50byB0aHJlZSBsb29wcyB0byBhdm9pZCBtaXhpbmcgRE9NIHJlYWRzIGFuZCB3cml0ZXNcblx0ICAgIC8vIGluIGVhY2ggaXRlcmF0aW9uIC0gd2hpY2ggaGVscHMgcHJldmVudCBsYXlvdXQgdGhyYXNoaW5nLlxuXHQgICAgY2hpbGRyZW4uZm9yRWFjaChjYWxsUGVuZGluZ0Nicyk7XG5cdCAgICBjaGlsZHJlbi5mb3JFYWNoKHJlY29yZFBvc2l0aW9uKTtcblx0ICAgIGNoaWxkcmVuLmZvckVhY2goYXBwbHlUcmFuc2xhdGlvbik7XG5cdFxuXHQgICAgLy8gZm9yY2UgcmVmbG93IHRvIHB1dCBldmVyeXRoaW5nIGluIHBvc2l0aW9uXG5cdCAgICB2YXIgZiA9IGRvY3VtZW50LmJvZHkub2Zmc2V0SGVpZ2h0OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cdFxuXHQgICAgY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoYykge1xuXHQgICAgICBpZiAoYy5kYXRhLm1vdmVkKSB7XG5cdCAgICAgICAgdmFyIGVsID0gYy5lbG07XG5cdCAgICAgICAgdmFyIHMgPSBlbC5zdHlsZTtcblx0ICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIG1vdmVDbGFzcyk7XG5cdCAgICAgICAgcy50cmFuc2Zvcm0gPSBzLldlYmtpdFRyYW5zZm9ybSA9IHMudHJhbnNpdGlvbkR1cmF0aW9uID0gJyc7XG5cdCAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcih0cmFuc2l0aW9uRW5kRXZlbnQsIGVsLl9tb3ZlQ2IgPSBmdW5jdGlvbiBjYiAoZSkge1xuXHQgICAgICAgICAgaWYgKCFlIHx8IC90cmFuc2Zvcm0kLy50ZXN0KGUucHJvcGVydHlOYW1lKSkge1xuXHQgICAgICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKHRyYW5zaXRpb25FbmRFdmVudCwgY2IpO1xuXHQgICAgICAgICAgICBlbC5fbW92ZUNiID0gbnVsbDtcblx0ICAgICAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBtb3ZlQ2xhc3MpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH0pO1xuXHQgICAgICB9XG5cdCAgICB9KTtcblx0ICB9LFxuXHRcblx0ICBtZXRob2RzOiB7XG5cdCAgICBoYXNNb3ZlOiBmdW5jdGlvbiBoYXNNb3ZlIChlbCwgbW92ZUNsYXNzKSB7XG5cdCAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuXHQgICAgICBpZiAoIWhhc1RyYW5zaXRpb24pIHtcblx0ICAgICAgICByZXR1cm4gZmFsc2Vcblx0ICAgICAgfVxuXHQgICAgICBpZiAodGhpcy5faGFzTW92ZSAhPSBudWxsKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuX2hhc01vdmVcblx0ICAgICAgfVxuXHQgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIG1vdmVDbGFzcyk7XG5cdCAgICAgIHZhciBpbmZvID0gZ2V0VHJhbnNpdGlvbkluZm8oZWwpO1xuXHQgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIG1vdmVDbGFzcyk7XG5cdCAgICAgIHJldHVybiAodGhpcy5faGFzTW92ZSA9IGluZm8uaGFzVHJhbnNmb3JtKVxuXHQgICAgfVxuXHQgIH1cblx0fTtcblx0XG5cdGZ1bmN0aW9uIGNhbGxQZW5kaW5nQ2JzIChjKSB7XG5cdCAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG5cdCAgaWYgKGMuZWxtLl9tb3ZlQ2IpIHtcblx0ICAgIGMuZWxtLl9tb3ZlQ2IoKTtcblx0ICB9XG5cdCAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG5cdCAgaWYgKGMuZWxtLl9lbnRlckNiKSB7XG5cdCAgICBjLmVsbS5fZW50ZXJDYigpO1xuXHQgIH1cblx0fVxuXHRcblx0ZnVuY3Rpb24gcmVjb3JkUG9zaXRpb24gKGMpIHtcblx0ICBjLmRhdGEubmV3UG9zID0gYy5lbG0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGFwcGx5VHJhbnNsYXRpb24gKGMpIHtcblx0ICB2YXIgb2xkUG9zID0gYy5kYXRhLnBvcztcblx0ICB2YXIgbmV3UG9zID0gYy5kYXRhLm5ld1Bvcztcblx0ICB2YXIgZHggPSBvbGRQb3MubGVmdCAtIG5ld1Bvcy5sZWZ0O1xuXHQgIHZhciBkeSA9IG9sZFBvcy50b3AgLSBuZXdQb3MudG9wO1xuXHQgIGlmIChkeCB8fCBkeSkge1xuXHQgICAgYy5kYXRhLm1vdmVkID0gdHJ1ZTtcblx0ICAgIHZhciBzID0gYy5lbG0uc3R5bGU7XG5cdCAgICBzLnRyYW5zZm9ybSA9IHMuV2Via2l0VHJhbnNmb3JtID0gXCJ0cmFuc2xhdGUoXCIgKyBkeCArIFwicHgsXCIgKyBkeSArIFwicHgpXCI7XG5cdCAgICBzLnRyYW5zaXRpb25EdXJhdGlvbiA9ICcwcyc7XG5cdCAgfVxuXHR9XG5cdFxuXHR2YXIgcGxhdGZvcm1Db21wb25lbnRzID0ge1xuXHQgIFRyYW5zaXRpb246IFRyYW5zaXRpb24sXG5cdCAgVHJhbnNpdGlvbkdyb3VwOiBUcmFuc2l0aW9uR3JvdXBcblx0fTtcblx0XG5cdC8qICAqL1xuXHRcblx0Ly8gaW5zdGFsbCBwbGF0Zm9ybSBzcGVjaWZpYyB1dGlsc1xuXHRWdWUkMy5jb25maWcuaXNVbmtub3duRWxlbWVudCA9IGlzVW5rbm93bkVsZW1lbnQ7XG5cdFZ1ZSQzLmNvbmZpZy5pc1Jlc2VydmVkVGFnID0gaXNSZXNlcnZlZFRhZztcblx0VnVlJDMuY29uZmlnLmdldFRhZ05hbWVzcGFjZSA9IGdldFRhZ05hbWVzcGFjZTtcblx0VnVlJDMuY29uZmlnLm11c3RVc2VQcm9wID0gbXVzdFVzZVByb3A7XG5cdFxuXHQvLyBpbnN0YWxsIHBsYXRmb3JtIHJ1bnRpbWUgZGlyZWN0aXZlcyAmIGNvbXBvbmVudHNcblx0ZXh0ZW5kKFZ1ZSQzLm9wdGlvbnMuZGlyZWN0aXZlcywgcGxhdGZvcm1EaXJlY3RpdmVzKTtcblx0ZXh0ZW5kKFZ1ZSQzLm9wdGlvbnMuY29tcG9uZW50cywgcGxhdGZvcm1Db21wb25lbnRzKTtcblx0XG5cdC8vIGluc3RhbGwgcGxhdGZvcm0gcGF0Y2ggZnVuY3Rpb25cblx0VnVlJDMucHJvdG90eXBlLl9fcGF0Y2hfXyA9IGluQnJvd3NlciA/IHBhdGNoJDEgOiBub29wO1xuXHRcblx0Ly8gd3JhcCBtb3VudFxuXHRWdWUkMy5wcm90b3R5cGUuJG1vdW50ID0gZnVuY3Rpb24gKFxuXHQgIGVsLFxuXHQgIGh5ZHJhdGluZ1xuXHQpIHtcblx0ICBlbCA9IGVsICYmIGluQnJvd3NlciA/IHF1ZXJ5KGVsKSA6IHVuZGVmaW5lZDtcblx0ICByZXR1cm4gdGhpcy5fbW91bnQoZWwsIGh5ZHJhdGluZylcblx0fTtcblx0XG5cdGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG5cdCAgICBpbkJyb3dzZXIgJiYgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG5cdCAgY29uc29sZVtjb25zb2xlLmluZm8gPyAnaW5mbycgOiAnbG9nJ10oXG5cdCAgICBcIllvdSBhcmUgcnVubmluZyBWdWUgaW4gZGV2ZWxvcG1lbnQgbW9kZS5cXG5cIiArXG5cdCAgICBcIk1ha2Ugc3VyZSB0byB0dXJuIG9uIHByb2R1Y3Rpb24gbW9kZSB3aGVuIGRlcGxveWluZyBmb3IgcHJvZHVjdGlvbi5cXG5cIiArXG5cdCAgICBcIlNlZSBtb3JlIHRpcHMgYXQgaHR0cHM6Ly92dWVqcy5vcmcvZ3VpZGUvZGVwbG95bWVudC5odG1sXCJcblx0ICApO1xuXHR9XG5cdFxuXHQvLyBkZXZ0b29scyBnbG9iYWwgaG9va1xuXHQvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuXHRzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcblx0ICBpZiAoY29uZmlnLmRldnRvb2xzKSB7XG5cdCAgICBpZiAoZGV2dG9vbHMpIHtcblx0ICAgICAgZGV2dG9vbHMuZW1pdCgnaW5pdCcsIFZ1ZSQzKTtcblx0ICAgIH0gZWxzZSBpZiAoXG5cdCAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcblx0ICAgICAgaW5Ccm93c2VyICYmICFpc0VkZ2UgJiYgL0Nocm9tZVxcL1xcZCsvLnRlc3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpXG5cdCAgICApIHtcblx0ICAgICAgY29uc29sZVtjb25zb2xlLmluZm8gPyAnaW5mbycgOiAnbG9nJ10oXG5cdCAgICAgICAgJ0Rvd25sb2FkIHRoZSBWdWUgRGV2dG9vbHMgZXh0ZW5zaW9uIGZvciBhIGJldHRlciBkZXZlbG9wbWVudCBleHBlcmllbmNlOlxcbicgK1xuXHQgICAgICAgICdodHRwczovL2dpdGh1Yi5jb20vdnVlanMvdnVlLWRldnRvb2xzJ1xuXHQgICAgICApO1xuXHQgICAgfVxuXHQgIH1cblx0fSwgMCk7XG5cdFxuXHQvKiAgKi9cblx0XG5cdC8vIGNoZWNrIHdoZXRoZXIgY3VycmVudCBicm93c2VyIGVuY29kZXMgYSBjaGFyIGluc2lkZSBhdHRyaWJ1dGUgdmFsdWVzXG5cdGZ1bmN0aW9uIHNob3VsZERlY29kZSAoY29udGVudCwgZW5jb2RlZCkge1xuXHQgIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblx0ICBkaXYuaW5uZXJIVE1MID0gXCI8ZGl2IGE9XFxcIlwiICsgY29udGVudCArIFwiXFxcIj5cIjtcblx0ICByZXR1cm4gZGl2LmlubmVySFRNTC5pbmRleE9mKGVuY29kZWQpID4gMFxuXHR9XG5cdFxuXHQvLyAjMzY2M1xuXHQvLyBJRSBlbmNvZGVzIG5ld2xpbmVzIGluc2lkZSBhdHRyaWJ1dGUgdmFsdWVzIHdoaWxlIG90aGVyIGJyb3dzZXJzIGRvbid0XG5cdHZhciBzaG91bGREZWNvZGVOZXdsaW5lcyA9IGluQnJvd3NlciA/IHNob3VsZERlY29kZSgnXFxuJywgJyYjMTA7JykgOiBmYWxzZTtcblx0XG5cdC8qICAqL1xuXHRcblx0dmFyIGRlY29kZXI7XG5cdFxuXHRmdW5jdGlvbiBkZWNvZGUgKGh0bWwpIHtcblx0ICBkZWNvZGVyID0gZGVjb2RlciB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblx0ICBkZWNvZGVyLmlubmVySFRNTCA9IGh0bWw7XG5cdCAgcmV0dXJuIGRlY29kZXIudGV4dENvbnRlbnRcblx0fVxuXHRcblx0LyogICovXG5cdFxuXHR2YXIgaXNVbmFyeVRhZyA9IG1ha2VNYXAoXG5cdCAgJ2FyZWEsYmFzZSxicixjb2wsZW1iZWQsZnJhbWUsaHIsaW1nLGlucHV0LGlzaW5kZXgsa2V5Z2VuLCcgK1xuXHQgICdsaW5rLG1ldGEscGFyYW0sc291cmNlLHRyYWNrLHdicicsXG5cdCAgdHJ1ZVxuXHQpO1xuXHRcblx0Ly8gRWxlbWVudHMgdGhhdCB5b3UgY2FuLCBpbnRlbnRpb25hbGx5LCBsZWF2ZSBvcGVuXG5cdC8vIChhbmQgd2hpY2ggY2xvc2UgdGhlbXNlbHZlcylcblx0dmFyIGNhbkJlTGVmdE9wZW5UYWcgPSBtYWtlTWFwKFxuXHQgICdjb2xncm91cCxkZCxkdCxsaSxvcHRpb25zLHAsdGQsdGZvb3QsdGgsdGhlYWQsdHIsc291cmNlJyxcblx0ICB0cnVlXG5cdCk7XG5cdFxuXHQvLyBIVE1MNSB0YWdzIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2luZGljZXMuaHRtbCNlbGVtZW50cy0zXG5cdC8vIFBocmFzaW5nIENvbnRlbnQgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZG9tLmh0bWwjcGhyYXNpbmctY29udGVudFxuXHR2YXIgaXNOb25QaHJhc2luZ1RhZyA9IG1ha2VNYXAoXG5cdCAgJ2FkZHJlc3MsYXJ0aWNsZSxhc2lkZSxiYXNlLGJsb2NrcXVvdGUsYm9keSxjYXB0aW9uLGNvbCxjb2xncm91cCxkZCwnICtcblx0ICAnZGV0YWlscyxkaWFsb2csZGl2LGRsLGR0LGZpZWxkc2V0LGZpZ2NhcHRpb24sZmlndXJlLGZvb3Rlcixmb3JtLCcgK1xuXHQgICdoMSxoMixoMyxoNCxoNSxoNixoZWFkLGhlYWRlcixoZ3JvdXAsaHIsaHRtbCxsZWdlbmQsbGksbWVudWl0ZW0sbWV0YSwnICtcblx0ICAnb3B0Z3JvdXAsb3B0aW9uLHBhcmFtLHJwLHJ0LHNvdXJjZSxzdHlsZSxzdW1tYXJ5LHRib2R5LHRkLHRmb290LHRoLHRoZWFkLCcgK1xuXHQgICd0aXRsZSx0cix0cmFjaycsXG5cdCAgdHJ1ZVxuXHQpO1xuXHRcblx0LyoqXG5cdCAqIE5vdCB0eXBlLWNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGl0J3MgbW9zdGx5IHZlbmRvciBjb2RlLlxuXHQgKi9cblx0XG5cdC8qIVxuXHQgKiBIVE1MIFBhcnNlciBCeSBKb2huIFJlc2lnIChlam9obi5vcmcpXG5cdCAqIE1vZGlmaWVkIGJ5IEp1cml5IFwia2FuZ2F4XCIgWmF5dHNldlxuXHQgKiBPcmlnaW5hbCBjb2RlIGJ5IEVyaWsgQXJ2aWRzc29uLCBNb3ppbGxhIFB1YmxpYyBMaWNlbnNlXG5cdCAqIGh0dHA6Ly9lcmlrLmVhZS5uZXQvc2ltcGxlaHRtbHBhcnNlci9zaW1wbGVodG1scGFyc2VyLmpzXG5cdCAqL1xuXHRcblx0Ly8gUmVndWxhciBFeHByZXNzaW9ucyBmb3IgcGFyc2luZyB0YWdzIGFuZCBhdHRyaWJ1dGVzXG5cdHZhciBzaW5nbGVBdHRySWRlbnRpZmllciA9IC8oW15cXHNcIic8Pi89XSspLztcblx0dmFyIHNpbmdsZUF0dHJBc3NpZ24gPSAvKD86PSkvO1xuXHR2YXIgc2luZ2xlQXR0clZhbHVlcyA9IFtcblx0ICAvLyBhdHRyIHZhbHVlIGRvdWJsZSBxdW90ZXNcblx0ICAvXCIoW15cIl0qKVwiKy8uc291cmNlLFxuXHQgIC8vIGF0dHIgdmFsdWUsIHNpbmdsZSBxdW90ZXNcblx0ICAvJyhbXiddKiknKy8uc291cmNlLFxuXHQgIC8vIGF0dHIgdmFsdWUsIG5vIHF1b3Rlc1xuXHQgIC8oW15cXHNcIic9PD5gXSspLy5zb3VyY2Vcblx0XTtcblx0dmFyIGF0dHJpYnV0ZSA9IG5ldyBSZWdFeHAoXG5cdCAgJ15cXFxccyonICsgc2luZ2xlQXR0cklkZW50aWZpZXIuc291cmNlICtcblx0ICAnKD86XFxcXHMqKCcgKyBzaW5nbGVBdHRyQXNzaWduLnNvdXJjZSArICcpJyArXG5cdCAgJ1xcXFxzKig/OicgKyBzaW5nbGVBdHRyVmFsdWVzLmpvaW4oJ3wnKSArICcpKT8nXG5cdCk7XG5cdFxuXHQvLyBjb3VsZCB1c2UgaHR0cHM6Ly93d3cudzMub3JnL1RSLzE5OTkvUkVDLXhtbC1uYW1lcy0xOTk5MDExNC8jTlQtUU5hbWVcblx0Ly8gYnV0IGZvciBWdWUgdGVtcGxhdGVzIHdlIGNhbiBlbmZvcmNlIGEgc2ltcGxlIGNoYXJzZXRcblx0dmFyIG5jbmFtZSA9ICdbYS16QS1aX11bXFxcXHdcXFxcLVxcXFwuXSonO1xuXHR2YXIgcW5hbWVDYXB0dXJlID0gJygoPzonICsgbmNuYW1lICsgJ1xcXFw6KT8nICsgbmNuYW1lICsgJyknO1xuXHR2YXIgc3RhcnRUYWdPcGVuID0gbmV3IFJlZ0V4cCgnXjwnICsgcW5hbWVDYXB0dXJlKTtcblx0dmFyIHN0YXJ0VGFnQ2xvc2UgPSAvXlxccyooXFwvPyk+Lztcblx0dmFyIGVuZFRhZyA9IG5ldyBSZWdFeHAoJ148XFxcXC8nICsgcW5hbWVDYXB0dXJlICsgJ1tePl0qPicpO1xuXHR2YXIgZG9jdHlwZSA9IC9ePCFET0NUWVBFIFtePl0rPi9pO1xuXHR2YXIgY29tbWVudCA9IC9ePCEtLS87XG5cdHZhciBjb25kaXRpb25hbENvbW1lbnQgPSAvXjwhXFxbLztcblx0XG5cdHZhciBJU19SRUdFWF9DQVBUVVJJTkdfQlJPS0VOID0gZmFsc2U7XG5cdCd4Jy5yZXBsYWNlKC94KC4pPy9nLCBmdW5jdGlvbiAobSwgZykge1xuXHQgIElTX1JFR0VYX0NBUFRVUklOR19CUk9LRU4gPSBnID09PSAnJztcblx0fSk7XG5cdFxuXHQvLyBTcGVjaWFsIEVsZW1lbnRzIChjYW4gY29udGFpbiBhbnl0aGluZylcblx0dmFyIGlzU2NyaXB0T3JTdHlsZSA9IG1ha2VNYXAoJ3NjcmlwdCxzdHlsZScsIHRydWUpO1xuXHR2YXIgcmVDYWNoZSA9IHt9O1xuXHRcblx0dmFyIGx0UkUgPSAvJmx0Oy9nO1xuXHR2YXIgZ3RSRSA9IC8mZ3Q7L2c7XG5cdHZhciBubFJFID0gLyYjMTA7L2c7XG5cdHZhciBhbXBSRSA9IC8mYW1wOy9nO1xuXHR2YXIgcXVvdGVSRSA9IC8mcXVvdDsvZztcblx0XG5cdGZ1bmN0aW9uIGRlY29kZUF0dHIgKHZhbHVlLCBzaG91bGREZWNvZGVOZXdsaW5lcykge1xuXHQgIGlmIChzaG91bGREZWNvZGVOZXdsaW5lcykge1xuXHQgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKG5sUkUsICdcXG4nKTtcblx0ICB9XG5cdCAgcmV0dXJuIHZhbHVlXG5cdCAgICAucmVwbGFjZShsdFJFLCAnPCcpXG5cdCAgICAucmVwbGFjZShndFJFLCAnPicpXG5cdCAgICAucmVwbGFjZShhbXBSRSwgJyYnKVxuXHQgICAgLnJlcGxhY2UocXVvdGVSRSwgJ1wiJylcblx0fVxuXHRcblx0ZnVuY3Rpb24gcGFyc2VIVE1MIChodG1sLCBvcHRpb25zKSB7XG5cdCAgdmFyIHN0YWNrID0gW107XG5cdCAgdmFyIGV4cGVjdEhUTUwgPSBvcHRpb25zLmV4cGVjdEhUTUw7XG5cdCAgdmFyIGlzVW5hcnlUYWckJDEgPSBvcHRpb25zLmlzVW5hcnlUYWcgfHwgbm87XG5cdCAgdmFyIGluZGV4ID0gMDtcblx0ICB2YXIgbGFzdCwgbGFzdFRhZztcblx0ICB3aGlsZSAoaHRtbCkge1xuXHQgICAgbGFzdCA9IGh0bWw7XG5cdCAgICAvLyBNYWtlIHN1cmUgd2UncmUgbm90IGluIGEgc2NyaXB0IG9yIHN0eWxlIGVsZW1lbnRcblx0ICAgIGlmICghbGFzdFRhZyB8fCAhaXNTY3JpcHRPclN0eWxlKGxhc3RUYWcpKSB7XG5cdCAgICAgIHZhciB0ZXh0RW5kID0gaHRtbC5pbmRleE9mKCc8Jyk7XG5cdCAgICAgIGlmICh0ZXh0RW5kID09PSAwKSB7XG5cdCAgICAgICAgLy8gQ29tbWVudDpcblx0ICAgICAgICBpZiAoY29tbWVudC50ZXN0KGh0bWwpKSB7XG5cdCAgICAgICAgICB2YXIgY29tbWVudEVuZCA9IGh0bWwuaW5kZXhPZignLS0+Jyk7XG5cdFxuXHQgICAgICAgICAgaWYgKGNvbW1lbnRFbmQgPj0gMCkge1xuXHQgICAgICAgICAgICBhZHZhbmNlKGNvbW1lbnRFbmQgKyAzKTtcblx0ICAgICAgICAgICAgY29udGludWVcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIC8vIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29uZGl0aW9uYWxfY29tbWVudCNEb3dubGV2ZWwtcmV2ZWFsZWRfY29uZGl0aW9uYWxfY29tbWVudFxuXHQgICAgICAgIGlmIChjb25kaXRpb25hbENvbW1lbnQudGVzdChodG1sKSkge1xuXHQgICAgICAgICAgdmFyIGNvbmRpdGlvbmFsRW5kID0gaHRtbC5pbmRleE9mKCddPicpO1xuXHRcblx0ICAgICAgICAgIGlmIChjb25kaXRpb25hbEVuZCA+PSAwKSB7XG5cdCAgICAgICAgICAgIGFkdmFuY2UoY29uZGl0aW9uYWxFbmQgKyAyKTtcblx0ICAgICAgICAgICAgY29udGludWVcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIC8vIERvY3R5cGU6XG5cdCAgICAgICAgdmFyIGRvY3R5cGVNYXRjaCA9IGh0bWwubWF0Y2goZG9jdHlwZSk7XG5cdCAgICAgICAgaWYgKGRvY3R5cGVNYXRjaCkge1xuXHQgICAgICAgICAgYWR2YW5jZShkb2N0eXBlTWF0Y2hbMF0ubGVuZ3RoKTtcblx0ICAgICAgICAgIGNvbnRpbnVlXG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICAvLyBFbmQgdGFnOlxuXHQgICAgICAgIHZhciBlbmRUYWdNYXRjaCA9IGh0bWwubWF0Y2goZW5kVGFnKTtcblx0ICAgICAgICBpZiAoZW5kVGFnTWF0Y2gpIHtcblx0ICAgICAgICAgIHZhciBjdXJJbmRleCA9IGluZGV4O1xuXHQgICAgICAgICAgYWR2YW5jZShlbmRUYWdNYXRjaFswXS5sZW5ndGgpO1xuXHQgICAgICAgICAgcGFyc2VFbmRUYWcoZW5kVGFnTWF0Y2hbMV0sIGN1ckluZGV4LCBpbmRleCk7XG5cdCAgICAgICAgICBjb250aW51ZVxuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgLy8gU3RhcnQgdGFnOlxuXHQgICAgICAgIHZhciBzdGFydFRhZ01hdGNoID0gcGFyc2VTdGFydFRhZygpO1xuXHQgICAgICAgIGlmIChzdGFydFRhZ01hdGNoKSB7XG5cdCAgICAgICAgICBoYW5kbGVTdGFydFRhZyhzdGFydFRhZ01hdGNoKTtcblx0ICAgICAgICAgIGNvbnRpbnVlXG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdFxuXHQgICAgICB2YXIgdGV4dCA9ICh2b2lkIDApLCByZXN0JDEgPSAodm9pZCAwKSwgbmV4dCA9ICh2b2lkIDApO1xuXHQgICAgICBpZiAodGV4dEVuZCA+IDApIHtcblx0ICAgICAgICByZXN0JDEgPSBodG1sLnNsaWNlKHRleHRFbmQpO1xuXHQgICAgICAgIHdoaWxlIChcblx0ICAgICAgICAgICFlbmRUYWcudGVzdChyZXN0JDEpICYmXG5cdCAgICAgICAgICAhc3RhcnRUYWdPcGVuLnRlc3QocmVzdCQxKSAmJlxuXHQgICAgICAgICAgIWNvbW1lbnQudGVzdChyZXN0JDEpICYmXG5cdCAgICAgICAgICAhY29uZGl0aW9uYWxDb21tZW50LnRlc3QocmVzdCQxKVxuXHQgICAgICAgICkge1xuXHQgICAgICAgICAgLy8gPCBpbiBwbGFpbiB0ZXh0LCBiZSBmb3JnaXZpbmcgYW5kIHRyZWF0IGl0IGFzIHRleHRcblx0ICAgICAgICAgIG5leHQgPSByZXN0JDEuaW5kZXhPZignPCcsIDEpO1xuXHQgICAgICAgICAgaWYgKG5leHQgPCAwKSB7IGJyZWFrIH1cblx0ICAgICAgICAgIHRleHRFbmQgKz0gbmV4dDtcblx0ICAgICAgICAgIHJlc3QkMSA9IGh0bWwuc2xpY2UodGV4dEVuZCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRleHQgPSBodG1sLnN1YnN0cmluZygwLCB0ZXh0RW5kKTtcblx0ICAgICAgICBhZHZhbmNlKHRleHRFbmQpO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICBpZiAodGV4dEVuZCA8IDApIHtcblx0ICAgICAgICB0ZXh0ID0gaHRtbDtcblx0ICAgICAgICBodG1sID0gJyc7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGlmIChvcHRpb25zLmNoYXJzICYmIHRleHQpIHtcblx0ICAgICAgICBvcHRpb25zLmNoYXJzKHRleHQpO1xuXHQgICAgICB9XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICB2YXIgc3RhY2tlZFRhZyA9IGxhc3RUYWcudG9Mb3dlckNhc2UoKTtcblx0ICAgICAgdmFyIHJlU3RhY2tlZFRhZyA9IHJlQ2FjaGVbc3RhY2tlZFRhZ10gfHwgKHJlQ2FjaGVbc3RhY2tlZFRhZ10gPSBuZXcgUmVnRXhwKCcoW1xcXFxzXFxcXFNdKj8pKDwvJyArIHN0YWNrZWRUYWcgKyAnW14+XSo+KScsICdpJykpO1xuXHQgICAgICB2YXIgZW5kVGFnTGVuZ3RoID0gMDtcblx0ICAgICAgdmFyIHJlc3QgPSBodG1sLnJlcGxhY2UocmVTdGFja2VkVGFnLCBmdW5jdGlvbiAoYWxsLCB0ZXh0LCBlbmRUYWcpIHtcblx0ICAgICAgICBlbmRUYWdMZW5ndGggPSBlbmRUYWcubGVuZ3RoO1xuXHQgICAgICAgIGlmIChzdGFja2VkVGFnICE9PSAnc2NyaXB0JyAmJiBzdGFja2VkVGFnICE9PSAnc3R5bGUnICYmIHN0YWNrZWRUYWcgIT09ICdub3NjcmlwdCcpIHtcblx0ICAgICAgICAgIHRleHQgPSB0ZXh0XG5cdCAgICAgICAgICAgIC5yZXBsYWNlKC88IS0tKFtcXHNcXFNdKj8pLS0+L2csICckMScpXG5cdCAgICAgICAgICAgIC5yZXBsYWNlKC88IVxcW0NEQVRBXFxbKFtcXHNcXFNdKj8pXV0+L2csICckMScpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAob3B0aW9ucy5jaGFycykge1xuXHQgICAgICAgICAgb3B0aW9ucy5jaGFycyh0ZXh0KTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuICcnXG5cdCAgICAgIH0pO1xuXHQgICAgICBpbmRleCArPSBodG1sLmxlbmd0aCAtIHJlc3QubGVuZ3RoO1xuXHQgICAgICBodG1sID0gcmVzdDtcblx0ICAgICAgcGFyc2VFbmRUYWcoc3RhY2tlZFRhZywgaW5kZXggLSBlbmRUYWdMZW5ndGgsIGluZGV4KTtcblx0ICAgIH1cblx0XG5cdCAgICBpZiAoaHRtbCA9PT0gbGFzdCAmJiBvcHRpb25zLmNoYXJzKSB7XG5cdCAgICAgIG9wdGlvbnMuY2hhcnMoaHRtbCk7XG5cdCAgICAgIGJyZWFrXG5cdCAgICB9XG5cdCAgfVxuXHRcblx0ICAvLyBDbGVhbiB1cCBhbnkgcmVtYWluaW5nIHRhZ3Ncblx0ICBwYXJzZUVuZFRhZygpO1xuXHRcblx0ICBmdW5jdGlvbiBhZHZhbmNlIChuKSB7XG5cdCAgICBpbmRleCArPSBuO1xuXHQgICAgaHRtbCA9IGh0bWwuc3Vic3RyaW5nKG4pO1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gcGFyc2VTdGFydFRhZyAoKSB7XG5cdCAgICB2YXIgc3RhcnQgPSBodG1sLm1hdGNoKHN0YXJ0VGFnT3Blbik7XG5cdCAgICBpZiAoc3RhcnQpIHtcblx0ICAgICAgdmFyIG1hdGNoID0ge1xuXHQgICAgICAgIHRhZ05hbWU6IHN0YXJ0WzFdLFxuXHQgICAgICAgIGF0dHJzOiBbXSxcblx0ICAgICAgICBzdGFydDogaW5kZXhcblx0ICAgICAgfTtcblx0ICAgICAgYWR2YW5jZShzdGFydFswXS5sZW5ndGgpO1xuXHQgICAgICB2YXIgZW5kLCBhdHRyO1xuXHQgICAgICB3aGlsZSAoIShlbmQgPSBodG1sLm1hdGNoKHN0YXJ0VGFnQ2xvc2UpKSAmJiAoYXR0ciA9IGh0bWwubWF0Y2goYXR0cmlidXRlKSkpIHtcblx0ICAgICAgICBhZHZhbmNlKGF0dHJbMF0ubGVuZ3RoKTtcblx0ICAgICAgICBtYXRjaC5hdHRycy5wdXNoKGF0dHIpO1xuXHQgICAgICB9XG5cdCAgICAgIGlmIChlbmQpIHtcblx0ICAgICAgICBtYXRjaC51bmFyeVNsYXNoID0gZW5kWzFdO1xuXHQgICAgICAgIGFkdmFuY2UoZW5kWzBdLmxlbmd0aCk7XG5cdCAgICAgICAgbWF0Y2guZW5kID0gaW5kZXg7XG5cdCAgICAgICAgcmV0dXJuIG1hdGNoXG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIGhhbmRsZVN0YXJ0VGFnIChtYXRjaCkge1xuXHQgICAgdmFyIHRhZ05hbWUgPSBtYXRjaC50YWdOYW1lO1xuXHQgICAgdmFyIHVuYXJ5U2xhc2ggPSBtYXRjaC51bmFyeVNsYXNoO1xuXHRcblx0ICAgIGlmIChleHBlY3RIVE1MKSB7XG5cdCAgICAgIGlmIChsYXN0VGFnID09PSAncCcgJiYgaXNOb25QaHJhc2luZ1RhZyh0YWdOYW1lKSkge1xuXHQgICAgICAgIHBhcnNlRW5kVGFnKGxhc3RUYWcpO1xuXHQgICAgICB9XG5cdCAgICAgIGlmIChjYW5CZUxlZnRPcGVuVGFnKHRhZ05hbWUpICYmIGxhc3RUYWcgPT09IHRhZ05hbWUpIHtcblx0ICAgICAgICBwYXJzZUVuZFRhZyh0YWdOYW1lKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHRcblx0ICAgIHZhciB1bmFyeSA9IGlzVW5hcnlUYWckJDEodGFnTmFtZSkgfHwgdGFnTmFtZSA9PT0gJ2h0bWwnICYmIGxhc3RUYWcgPT09ICdoZWFkJyB8fCAhIXVuYXJ5U2xhc2g7XG5cdFxuXHQgICAgdmFyIGwgPSBtYXRjaC5hdHRycy5sZW5ndGg7XG5cdCAgICB2YXIgYXR0cnMgPSBuZXcgQXJyYXkobCk7XG5cdCAgICBmb3IgKHZhciBpID0gMDsgaSA8IGw7IGkrKykge1xuXHQgICAgICB2YXIgYXJncyA9IG1hdGNoLmF0dHJzW2ldO1xuXHQgICAgICAvLyBoYWNraXNoIHdvcmsgYXJvdW5kIEZGIGJ1ZyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0zNjk3Nzhcblx0ICAgICAgaWYgKElTX1JFR0VYX0NBUFRVUklOR19CUk9LRU4gJiYgYXJnc1swXS5pbmRleE9mKCdcIlwiJykgPT09IC0xKSB7XG5cdCAgICAgICAgaWYgKGFyZ3NbM10gPT09ICcnKSB7IGRlbGV0ZSBhcmdzWzNdOyB9XG5cdCAgICAgICAgaWYgKGFyZ3NbNF0gPT09ICcnKSB7IGRlbGV0ZSBhcmdzWzRdOyB9XG5cdCAgICAgICAgaWYgKGFyZ3NbNV0gPT09ICcnKSB7IGRlbGV0ZSBhcmdzWzVdOyB9XG5cdCAgICAgIH1cblx0ICAgICAgdmFyIHZhbHVlID0gYXJnc1szXSB8fCBhcmdzWzRdIHx8IGFyZ3NbNV0gfHwgJyc7XG5cdCAgICAgIGF0dHJzW2ldID0ge1xuXHQgICAgICAgIG5hbWU6IGFyZ3NbMV0sXG5cdCAgICAgICAgdmFsdWU6IGRlY29kZUF0dHIoXG5cdCAgICAgICAgICB2YWx1ZSxcblx0ICAgICAgICAgIG9wdGlvbnMuc2hvdWxkRGVjb2RlTmV3bGluZXNcblx0ICAgICAgICApXG5cdCAgICAgIH07XG5cdCAgICB9XG5cdFxuXHQgICAgaWYgKCF1bmFyeSkge1xuXHQgICAgICBzdGFjay5wdXNoKHsgdGFnOiB0YWdOYW1lLCBsb3dlckNhc2VkVGFnOiB0YWdOYW1lLnRvTG93ZXJDYXNlKCksIGF0dHJzOiBhdHRycyB9KTtcblx0ICAgICAgbGFzdFRhZyA9IHRhZ05hbWU7XG5cdCAgICAgIHVuYXJ5U2xhc2ggPSAnJztcblx0ICAgIH1cblx0XG5cdCAgICBpZiAob3B0aW9ucy5zdGFydCkge1xuXHQgICAgICBvcHRpb25zLnN0YXJ0KHRhZ05hbWUsIGF0dHJzLCB1bmFyeSwgbWF0Y2guc3RhcnQsIG1hdGNoLmVuZCk7XG5cdCAgICB9XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBwYXJzZUVuZFRhZyAodGFnTmFtZSwgc3RhcnQsIGVuZCkge1xuXHQgICAgdmFyIHBvcywgbG93ZXJDYXNlZFRhZ05hbWU7XG5cdCAgICBpZiAoc3RhcnQgPT0gbnVsbCkgeyBzdGFydCA9IGluZGV4OyB9XG5cdCAgICBpZiAoZW5kID09IG51bGwpIHsgZW5kID0gaW5kZXg7IH1cblx0XG5cdCAgICBpZiAodGFnTmFtZSkge1xuXHQgICAgICBsb3dlckNhc2VkVGFnTmFtZSA9IHRhZ05hbWUudG9Mb3dlckNhc2UoKTtcblx0ICAgIH1cblx0XG5cdCAgICAvLyBGaW5kIHRoZSBjbG9zZXN0IG9wZW5lZCB0YWcgb2YgdGhlIHNhbWUgdHlwZVxuXHQgICAgaWYgKHRhZ05hbWUpIHtcblx0ICAgICAgZm9yIChwb3MgPSBzdGFjay5sZW5ndGggLSAxOyBwb3MgPj0gMDsgcG9zLS0pIHtcblx0ICAgICAgICBpZiAoc3RhY2tbcG9zXS5sb3dlckNhc2VkVGFnID09PSBsb3dlckNhc2VkVGFnTmFtZSkge1xuXHQgICAgICAgICAgYnJlYWtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIC8vIElmIG5vIHRhZyBuYW1lIGlzIHByb3ZpZGVkLCBjbGVhbiBzaG9wXG5cdCAgICAgIHBvcyA9IDA7XG5cdCAgICB9XG5cdFxuXHQgICAgaWYgKHBvcyA+PSAwKSB7XG5cdCAgICAgIC8vIENsb3NlIGFsbCB0aGUgb3BlbiBlbGVtZW50cywgdXAgdGhlIHN0YWNrXG5cdCAgICAgIGZvciAodmFyIGkgPSBzdGFjay5sZW5ndGggLSAxOyBpID49IHBvczsgaS0tKSB7XG5cdCAgICAgICAgaWYgKG9wdGlvbnMuZW5kKSB7XG5cdCAgICAgICAgICBvcHRpb25zLmVuZChzdGFja1tpXS50YWcsIHN0YXJ0LCBlbmQpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHRcblx0ICAgICAgLy8gUmVtb3ZlIHRoZSBvcGVuIGVsZW1lbnRzIGZyb20gdGhlIHN0YWNrXG5cdCAgICAgIHN0YWNrLmxlbmd0aCA9IHBvcztcblx0ICAgICAgbGFzdFRhZyA9IHBvcyAmJiBzdGFja1twb3MgLSAxXS50YWc7XG5cdCAgICB9IGVsc2UgaWYgKGxvd2VyQ2FzZWRUYWdOYW1lID09PSAnYnInKSB7XG5cdCAgICAgIGlmIChvcHRpb25zLnN0YXJ0KSB7XG5cdCAgICAgICAgb3B0aW9ucy5zdGFydCh0YWdOYW1lLCBbXSwgdHJ1ZSwgc3RhcnQsIGVuZCk7XG5cdCAgICAgIH1cblx0ICAgIH0gZWxzZSBpZiAobG93ZXJDYXNlZFRhZ05hbWUgPT09ICdwJykge1xuXHQgICAgICBpZiAob3B0aW9ucy5zdGFydCkge1xuXHQgICAgICAgIG9wdGlvbnMuc3RhcnQodGFnTmFtZSwgW10sIGZhbHNlLCBzdGFydCwgZW5kKTtcblx0ICAgICAgfVxuXHQgICAgICBpZiAob3B0aW9ucy5lbmQpIHtcblx0ICAgICAgICBvcHRpb25zLmVuZCh0YWdOYW1lLCBzdGFydCwgZW5kKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH1cblx0fVxuXHRcblx0LyogICovXG5cdFxuXHRmdW5jdGlvbiBwYXJzZUZpbHRlcnMgKGV4cCkge1xuXHQgIHZhciBpblNpbmdsZSA9IGZhbHNlO1xuXHQgIHZhciBpbkRvdWJsZSA9IGZhbHNlO1xuXHQgIHZhciBpblRlbXBsYXRlU3RyaW5nID0gZmFsc2U7XG5cdCAgdmFyIGluUmVnZXggPSBmYWxzZTtcblx0ICB2YXIgY3VybHkgPSAwO1xuXHQgIHZhciBzcXVhcmUgPSAwO1xuXHQgIHZhciBwYXJlbiA9IDA7XG5cdCAgdmFyIGxhc3RGaWx0ZXJJbmRleCA9IDA7XG5cdCAgdmFyIGMsIHByZXYsIGksIGV4cHJlc3Npb24sIGZpbHRlcnM7XG5cdFxuXHQgIGZvciAoaSA9IDA7IGkgPCBleHAubGVuZ3RoOyBpKyspIHtcblx0ICAgIHByZXYgPSBjO1xuXHQgICAgYyA9IGV4cC5jaGFyQ29kZUF0KGkpO1xuXHQgICAgaWYgKGluU2luZ2xlKSB7XG5cdCAgICAgIGlmIChjID09PSAweDI3ICYmIHByZXYgIT09IDB4NUMpIHsgaW5TaW5nbGUgPSBmYWxzZTsgfVxuXHQgICAgfSBlbHNlIGlmIChpbkRvdWJsZSkge1xuXHQgICAgICBpZiAoYyA9PT0gMHgyMiAmJiBwcmV2ICE9PSAweDVDKSB7IGluRG91YmxlID0gZmFsc2U7IH1cblx0ICAgIH0gZWxzZSBpZiAoaW5UZW1wbGF0ZVN0cmluZykge1xuXHQgICAgICBpZiAoYyA9PT0gMHg2MCAmJiBwcmV2ICE9PSAweDVDKSB7IGluVGVtcGxhdGVTdHJpbmcgPSBmYWxzZTsgfVxuXHQgICAgfSBlbHNlIGlmIChpblJlZ2V4KSB7XG5cdCAgICAgIGlmIChjID09PSAweDJmICYmIHByZXYgIT09IDB4NUMpIHsgaW5SZWdleCA9IGZhbHNlOyB9XG5cdCAgICB9IGVsc2UgaWYgKFxuXHQgICAgICBjID09PSAweDdDICYmIC8vIHBpcGVcblx0ICAgICAgZXhwLmNoYXJDb2RlQXQoaSArIDEpICE9PSAweDdDICYmXG5cdCAgICAgIGV4cC5jaGFyQ29kZUF0KGkgLSAxKSAhPT0gMHg3QyAmJlxuXHQgICAgICAhY3VybHkgJiYgIXNxdWFyZSAmJiAhcGFyZW5cblx0ICAgICkge1xuXHQgICAgICBpZiAoZXhwcmVzc2lvbiA9PT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAgLy8gZmlyc3QgZmlsdGVyLCBlbmQgb2YgZXhwcmVzc2lvblxuXHQgICAgICAgIGxhc3RGaWx0ZXJJbmRleCA9IGkgKyAxO1xuXHQgICAgICAgIGV4cHJlc3Npb24gPSBleHAuc2xpY2UoMCwgaSkudHJpbSgpO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHB1c2hGaWx0ZXIoKTtcblx0ICAgICAgfVxuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgc3dpdGNoIChjKSB7XG5cdCAgICAgICAgY2FzZSAweDIyOiBpbkRvdWJsZSA9IHRydWU7IGJyZWFrICAgICAgICAgLy8gXCJcblx0ICAgICAgICBjYXNlIDB4Mjc6IGluU2luZ2xlID0gdHJ1ZTsgYnJlYWsgICAgICAgICAvLyAnXG5cdCAgICAgICAgY2FzZSAweDYwOiBpblRlbXBsYXRlU3RyaW5nID0gdHJ1ZTsgYnJlYWsgLy8gYFxuXHQgICAgICAgIGNhc2UgMHgyODogcGFyZW4rKzsgYnJlYWsgICAgICAgICAgICAgICAgIC8vIChcblx0ICAgICAgICBjYXNlIDB4Mjk6IHBhcmVuLS07IGJyZWFrICAgICAgICAgICAgICAgICAvLyApXG5cdCAgICAgICAgY2FzZSAweDVCOiBzcXVhcmUrKzsgYnJlYWsgICAgICAgICAgICAgICAgLy8gW1xuXHQgICAgICAgIGNhc2UgMHg1RDogc3F1YXJlLS07IGJyZWFrICAgICAgICAgICAgICAgIC8vIF1cblx0ICAgICAgICBjYXNlIDB4N0I6IGN1cmx5Kys7IGJyZWFrICAgICAgICAgICAgICAgICAvLyB7XG5cdCAgICAgICAgY2FzZSAweDdEOiBjdXJseS0tOyBicmVhayAgICAgICAgICAgICAgICAgLy8gfVxuXHQgICAgICB9XG5cdCAgICAgIGlmIChjID09PSAweDJmKSB7IC8vIC9cblx0ICAgICAgICB2YXIgaiA9IGkgLSAxO1xuXHQgICAgICAgIHZhciBwID0gKHZvaWQgMCk7XG5cdCAgICAgICAgLy8gZmluZCBmaXJzdCBub24td2hpdGVzcGFjZSBwcmV2IGNoYXJcblx0ICAgICAgICBmb3IgKDsgaiA+PSAwOyBqLS0pIHtcblx0ICAgICAgICAgIHAgPSBleHAuY2hhckF0KGopO1xuXHQgICAgICAgICAgaWYgKHAgIT09ICcgJykgeyBicmVhayB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmICghcCB8fCAhL1tcXHckXS8udGVzdChwKSkge1xuXHQgICAgICAgICAgaW5SZWdleCA9IHRydWU7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfVxuXHRcblx0ICBpZiAoZXhwcmVzc2lvbiA9PT0gdW5kZWZpbmVkKSB7XG5cdCAgICBleHByZXNzaW9uID0gZXhwLnNsaWNlKDAsIGkpLnRyaW0oKTtcblx0ICB9IGVsc2UgaWYgKGxhc3RGaWx0ZXJJbmRleCAhPT0gMCkge1xuXHQgICAgcHVzaEZpbHRlcigpO1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gcHVzaEZpbHRlciAoKSB7XG5cdCAgICAoZmlsdGVycyB8fCAoZmlsdGVycyA9IFtdKSkucHVzaChleHAuc2xpY2UobGFzdEZpbHRlckluZGV4LCBpKS50cmltKCkpO1xuXHQgICAgbGFzdEZpbHRlckluZGV4ID0gaSArIDE7XG5cdCAgfVxuXHRcblx0ICBpZiAoZmlsdGVycykge1xuXHQgICAgZm9yIChpID0gMDsgaSA8IGZpbHRlcnMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgZXhwcmVzc2lvbiA9IHdyYXBGaWx0ZXIoZXhwcmVzc2lvbiwgZmlsdGVyc1tpXSk7XG5cdCAgICB9XG5cdCAgfVxuXHRcblx0ICByZXR1cm4gZXhwcmVzc2lvblxuXHR9XG5cdFxuXHRmdW5jdGlvbiB3cmFwRmlsdGVyIChleHAsIGZpbHRlcikge1xuXHQgIHZhciBpID0gZmlsdGVyLmluZGV4T2YoJygnKTtcblx0ICBpZiAoaSA8IDApIHtcblx0ICAgIC8vIF9mOiByZXNvbHZlRmlsdGVyXG5cdCAgICByZXR1cm4gKFwiX2YoXFxcIlwiICsgZmlsdGVyICsgXCJcXFwiKShcIiArIGV4cCArIFwiKVwiKVxuXHQgIH0gZWxzZSB7XG5cdCAgICB2YXIgbmFtZSA9IGZpbHRlci5zbGljZSgwLCBpKTtcblx0ICAgIHZhciBhcmdzID0gZmlsdGVyLnNsaWNlKGkgKyAxKTtcblx0ICAgIHJldHVybiAoXCJfZihcXFwiXCIgKyBuYW1lICsgXCJcXFwiKShcIiArIGV4cCArIFwiLFwiICsgYXJncylcblx0ICB9XG5cdH1cblx0XG5cdC8qICAqL1xuXHRcblx0dmFyIGRlZmF1bHRUYWdSRSA9IC9cXHtcXHsoKD86LnxcXG4pKz8pXFx9XFx9L2c7XG5cdHZhciByZWdleEVzY2FwZVJFID0gL1stLiorP14ke30oKXxbXFxdXFwvXFxcXF0vZztcblx0XG5cdHZhciBidWlsZFJlZ2V4ID0gY2FjaGVkKGZ1bmN0aW9uIChkZWxpbWl0ZXJzKSB7XG5cdCAgdmFyIG9wZW4gPSBkZWxpbWl0ZXJzWzBdLnJlcGxhY2UocmVnZXhFc2NhcGVSRSwgJ1xcXFwkJicpO1xuXHQgIHZhciBjbG9zZSA9IGRlbGltaXRlcnNbMV0ucmVwbGFjZShyZWdleEVzY2FwZVJFLCAnXFxcXCQmJyk7XG5cdCAgcmV0dXJuIG5ldyBSZWdFeHAob3BlbiArICcoKD86LnxcXFxcbikrPyknICsgY2xvc2UsICdnJylcblx0fSk7XG5cdFxuXHRmdW5jdGlvbiBwYXJzZVRleHQgKFxuXHQgIHRleHQsXG5cdCAgZGVsaW1pdGVyc1xuXHQpIHtcblx0ICB2YXIgdGFnUkUgPSBkZWxpbWl0ZXJzID8gYnVpbGRSZWdleChkZWxpbWl0ZXJzKSA6IGRlZmF1bHRUYWdSRTtcblx0ICBpZiAoIXRhZ1JFLnRlc3QodGV4dCkpIHtcblx0ICAgIHJldHVyblxuXHQgIH1cblx0ICB2YXIgdG9rZW5zID0gW107XG5cdCAgdmFyIGxhc3RJbmRleCA9IHRhZ1JFLmxhc3RJbmRleCA9IDA7XG5cdCAgdmFyIG1hdGNoLCBpbmRleDtcblx0ICB3aGlsZSAoKG1hdGNoID0gdGFnUkUuZXhlYyh0ZXh0KSkpIHtcblx0ICAgIGluZGV4ID0gbWF0Y2guaW5kZXg7XG5cdCAgICAvLyBwdXNoIHRleHQgdG9rZW5cblx0ICAgIGlmIChpbmRleCA+IGxhc3RJbmRleCkge1xuXHQgICAgICB0b2tlbnMucHVzaChKU09OLnN0cmluZ2lmeSh0ZXh0LnNsaWNlKGxhc3RJbmRleCwgaW5kZXgpKSk7XG5cdCAgICB9XG5cdCAgICAvLyB0YWcgdG9rZW5cblx0ICAgIHZhciBleHAgPSBwYXJzZUZpbHRlcnMobWF0Y2hbMV0udHJpbSgpKTtcblx0ICAgIHRva2Vucy5wdXNoKChcIl9zKFwiICsgZXhwICsgXCIpXCIpKTtcblx0ICAgIGxhc3RJbmRleCA9IGluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoO1xuXHQgIH1cblx0ICBpZiAobGFzdEluZGV4IDwgdGV4dC5sZW5ndGgpIHtcblx0ICAgIHRva2Vucy5wdXNoKEpTT04uc3RyaW5naWZ5KHRleHQuc2xpY2UobGFzdEluZGV4KSkpO1xuXHQgIH1cblx0ICByZXR1cm4gdG9rZW5zLmpvaW4oJysnKVxuXHR9XG5cdFxuXHQvKiAgKi9cblx0XG5cdGZ1bmN0aW9uIGJhc2VXYXJuIChtc2cpIHtcblx0ICBjb25zb2xlLmVycm9yKChcIltWdWUgcGFyc2VyXTogXCIgKyBtc2cpKTtcblx0fVxuXHRcblx0ZnVuY3Rpb24gcGx1Y2tNb2R1bGVGdW5jdGlvbiAoXG5cdCAgbW9kdWxlcyxcblx0ICBrZXlcblx0KSB7XG5cdCAgcmV0dXJuIG1vZHVsZXNcblx0ICAgID8gbW9kdWxlcy5tYXAoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG1ba2V5XTsgfSkuZmlsdGVyKGZ1bmN0aW9uIChfKSB7IHJldHVybiBfOyB9KVxuXHQgICAgOiBbXVxuXHR9XG5cdFxuXHRmdW5jdGlvbiBhZGRQcm9wIChlbCwgbmFtZSwgdmFsdWUpIHtcblx0ICAoZWwucHJvcHMgfHwgKGVsLnByb3BzID0gW10pKS5wdXNoKHsgbmFtZTogbmFtZSwgdmFsdWU6IHZhbHVlIH0pO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBhZGRBdHRyIChlbCwgbmFtZSwgdmFsdWUpIHtcblx0ICAoZWwuYXR0cnMgfHwgKGVsLmF0dHJzID0gW10pKS5wdXNoKHsgbmFtZTogbmFtZSwgdmFsdWU6IHZhbHVlIH0pO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBhZGREaXJlY3RpdmUgKFxuXHQgIGVsLFxuXHQgIG5hbWUsXG5cdCAgcmF3TmFtZSxcblx0ICB2YWx1ZSxcblx0ICBhcmcsXG5cdCAgbW9kaWZpZXJzXG5cdCkge1xuXHQgIChlbC5kaXJlY3RpdmVzIHx8IChlbC5kaXJlY3RpdmVzID0gW10pKS5wdXNoKHsgbmFtZTogbmFtZSwgcmF3TmFtZTogcmF3TmFtZSwgdmFsdWU6IHZhbHVlLCBhcmc6IGFyZywgbW9kaWZpZXJzOiBtb2RpZmllcnMgfSk7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGFkZEhhbmRsZXIgKFxuXHQgIGVsLFxuXHQgIG5hbWUsXG5cdCAgdmFsdWUsXG5cdCAgbW9kaWZpZXJzLFxuXHQgIGltcG9ydGFudFxuXHQpIHtcblx0ICAvLyBjaGVjayBjYXB0dXJlIG1vZGlmaWVyXG5cdCAgaWYgKG1vZGlmaWVycyAmJiBtb2RpZmllcnMuY2FwdHVyZSkge1xuXHQgICAgZGVsZXRlIG1vZGlmaWVycy5jYXB0dXJlO1xuXHQgICAgbmFtZSA9ICchJyArIG5hbWU7IC8vIG1hcmsgdGhlIGV2ZW50IGFzIGNhcHR1cmVkXG5cdCAgfVxuXHQgIGlmIChtb2RpZmllcnMgJiYgbW9kaWZpZXJzLm9uY2UpIHtcblx0ICAgIGRlbGV0ZSBtb2RpZmllcnMub25jZTtcblx0ICAgIG5hbWUgPSAnficgKyBuYW1lOyAvLyBtYXJrIHRoZSBldmVudCBhcyBvbmNlXG5cdCAgfVxuXHQgIHZhciBldmVudHM7XG5cdCAgaWYgKG1vZGlmaWVycyAmJiBtb2RpZmllcnMubmF0aXZlKSB7XG5cdCAgICBkZWxldGUgbW9kaWZpZXJzLm5hdGl2ZTtcblx0ICAgIGV2ZW50cyA9IGVsLm5hdGl2ZUV2ZW50cyB8fCAoZWwubmF0aXZlRXZlbnRzID0ge30pO1xuXHQgIH0gZWxzZSB7XG5cdCAgICBldmVudHMgPSBlbC5ldmVudHMgfHwgKGVsLmV2ZW50cyA9IHt9KTtcblx0ICB9XG5cdCAgdmFyIG5ld0hhbmRsZXIgPSB7IHZhbHVlOiB2YWx1ZSwgbW9kaWZpZXJzOiBtb2RpZmllcnMgfTtcblx0ICB2YXIgaGFuZGxlcnMgPSBldmVudHNbbmFtZV07XG5cdCAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG5cdCAgaWYgKEFycmF5LmlzQXJyYXkoaGFuZGxlcnMpKSB7XG5cdCAgICBpbXBvcnRhbnQgPyBoYW5kbGVycy51bnNoaWZ0KG5ld0hhbmRsZXIpIDogaGFuZGxlcnMucHVzaChuZXdIYW5kbGVyKTtcblx0ICB9IGVsc2UgaWYgKGhhbmRsZXJzKSB7XG5cdCAgICBldmVudHNbbmFtZV0gPSBpbXBvcnRhbnQgPyBbbmV3SGFuZGxlciwgaGFuZGxlcnNdIDogW2hhbmRsZXJzLCBuZXdIYW5kbGVyXTtcblx0ICB9IGVsc2Uge1xuXHQgICAgZXZlbnRzW25hbWVdID0gbmV3SGFuZGxlcjtcblx0ICB9XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGdldEJpbmRpbmdBdHRyIChcblx0ICBlbCxcblx0ICBuYW1lLFxuXHQgIGdldFN0YXRpY1xuXHQpIHtcblx0ICB2YXIgZHluYW1pY1ZhbHVlID1cblx0ICAgIGdldEFuZFJlbW92ZUF0dHIoZWwsICc6JyArIG5hbWUpIHx8XG5cdCAgICBnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1iaW5kOicgKyBuYW1lKTtcblx0ICBpZiAoZHluYW1pY1ZhbHVlICE9IG51bGwpIHtcblx0ICAgIHJldHVybiBwYXJzZUZpbHRlcnMoZHluYW1pY1ZhbHVlKVxuXHQgIH0gZWxzZSBpZiAoZ2V0U3RhdGljICE9PSBmYWxzZSkge1xuXHQgICAgdmFyIHN0YXRpY1ZhbHVlID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgbmFtZSk7XG5cdCAgICBpZiAoc3RhdGljVmFsdWUgIT0gbnVsbCkge1xuXHQgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoc3RhdGljVmFsdWUpXG5cdCAgICB9XG5cdCAgfVxuXHR9XG5cdFxuXHRmdW5jdGlvbiBnZXRBbmRSZW1vdmVBdHRyIChlbCwgbmFtZSkge1xuXHQgIHZhciB2YWw7XG5cdCAgaWYgKCh2YWwgPSBlbC5hdHRyc01hcFtuYW1lXSkgIT0gbnVsbCkge1xuXHQgICAgdmFyIGxpc3QgPSBlbC5hdHRyc0xpc3Q7XG5cdCAgICBmb3IgKHZhciBpID0gMCwgbCA9IGxpc3QubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG5cdCAgICAgIGlmIChsaXN0W2ldLm5hbWUgPT09IG5hbWUpIHtcblx0ICAgICAgICBsaXN0LnNwbGljZShpLCAxKTtcblx0ICAgICAgICBicmVha1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfVxuXHQgIHJldHVybiB2YWxcblx0fVxuXHRcblx0dmFyIGxlbjtcblx0dmFyIHN0cjtcblx0dmFyIGNocjtcblx0dmFyIGluZGV4JDE7XG5cdHZhciBleHByZXNzaW9uUG9zO1xuXHR2YXIgZXhwcmVzc2lvbkVuZFBvcztcblx0XG5cdC8qKlxuXHQgKiBwYXJzZSBkaXJlY3RpdmUgbW9kZWwgdG8gZG8gdGhlIGFycmF5IHVwZGF0ZSB0cmFuc2Zvcm0uIGFbaWR4XSA9IHZhbCA9PiAkJGEuc3BsaWNlKCQkaWR4LCAxLCB2YWwpXG5cdCAqXG5cdCAqIGZvciBsb29wIHBvc3NpYmxlIGNhc2VzOlxuXHQgKlxuXHQgKiAtIHRlc3Rcblx0ICogLSB0ZXN0W2lkeF1cblx0ICogLSB0ZXN0W3Rlc3QxW2lkeF1dXG5cdCAqIC0gdGVzdFtcImFcIl1baWR4XVxuXHQgKiAtIHh4eC50ZXN0W2FbYV0udGVzdDFbaWR4XV1cblx0ICogLSB0ZXN0Lnh4eC5hW1wiYXNhXCJdW3Rlc3QxW2lkeF1dXG5cdCAqXG5cdCAqL1xuXHRcblx0ZnVuY3Rpb24gcGFyc2VNb2RlbCAodmFsKSB7XG5cdCAgc3RyID0gdmFsO1xuXHQgIGxlbiA9IHN0ci5sZW5ndGg7XG5cdCAgaW5kZXgkMSA9IGV4cHJlc3Npb25Qb3MgPSBleHByZXNzaW9uRW5kUG9zID0gMDtcblx0XG5cdCAgaWYgKHZhbC5pbmRleE9mKCdbJykgPCAwIHx8IHZhbC5sYXN0SW5kZXhPZignXScpIDwgbGVuIC0gMSkge1xuXHQgICAgcmV0dXJuIHtcblx0ICAgICAgZXhwOiB2YWwsXG5cdCAgICAgIGlkeDogbnVsbFxuXHQgICAgfVxuXHQgIH1cblx0XG5cdCAgd2hpbGUgKCFlb2YoKSkge1xuXHQgICAgY2hyID0gbmV4dCgpO1xuXHQgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG5cdCAgICBpZiAoaXNTdHJpbmdTdGFydChjaHIpKSB7XG5cdCAgICAgIHBhcnNlU3RyaW5nKGNocik7XG5cdCAgICB9IGVsc2UgaWYgKGNociA9PT0gMHg1Qikge1xuXHQgICAgICBwYXJzZUJyYWNrZXQoY2hyKTtcblx0ICAgIH1cblx0ICB9XG5cdFxuXHQgIHJldHVybiB7XG5cdCAgICBleHA6IHZhbC5zdWJzdHJpbmcoMCwgZXhwcmVzc2lvblBvcyksXG5cdCAgICBpZHg6IHZhbC5zdWJzdHJpbmcoZXhwcmVzc2lvblBvcyArIDEsIGV4cHJlc3Npb25FbmRQb3MpXG5cdCAgfVxuXHR9XG5cdFxuXHRmdW5jdGlvbiBuZXh0ICgpIHtcblx0ICByZXR1cm4gc3RyLmNoYXJDb2RlQXQoKytpbmRleCQxKVxuXHR9XG5cdFxuXHRmdW5jdGlvbiBlb2YgKCkge1xuXHQgIHJldHVybiBpbmRleCQxID49IGxlblxuXHR9XG5cdFxuXHRmdW5jdGlvbiBpc1N0cmluZ1N0YXJ0IChjaHIpIHtcblx0ICByZXR1cm4gY2hyID09PSAweDIyIHx8IGNociA9PT0gMHgyN1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBwYXJzZUJyYWNrZXQgKGNocikge1xuXHQgIHZhciBpbkJyYWNrZXQgPSAxO1xuXHQgIGV4cHJlc3Npb25Qb3MgPSBpbmRleCQxO1xuXHQgIHdoaWxlICghZW9mKCkpIHtcblx0ICAgIGNociA9IG5leHQoKTtcblx0ICAgIGlmIChpc1N0cmluZ1N0YXJ0KGNocikpIHtcblx0ICAgICAgcGFyc2VTdHJpbmcoY2hyKTtcblx0ICAgICAgY29udGludWVcblx0ICAgIH1cblx0ICAgIGlmIChjaHIgPT09IDB4NUIpIHsgaW5CcmFja2V0Kys7IH1cblx0ICAgIGlmIChjaHIgPT09IDB4NUQpIHsgaW5CcmFja2V0LS07IH1cblx0ICAgIGlmIChpbkJyYWNrZXQgPT09IDApIHtcblx0ICAgICAgZXhwcmVzc2lvbkVuZFBvcyA9IGluZGV4JDE7XG5cdCAgICAgIGJyZWFrXG5cdCAgICB9XG5cdCAgfVxuXHR9XG5cdFxuXHRmdW5jdGlvbiBwYXJzZVN0cmluZyAoY2hyKSB7XG5cdCAgdmFyIHN0cmluZ1F1b3RlID0gY2hyO1xuXHQgIHdoaWxlICghZW9mKCkpIHtcblx0ICAgIGNociA9IG5leHQoKTtcblx0ICAgIGlmIChjaHIgPT09IHN0cmluZ1F1b3RlKSB7XG5cdCAgICAgIGJyZWFrXG5cdCAgICB9XG5cdCAgfVxuXHR9XG5cdFxuXHQvKiAgKi9cblx0XG5cdHZhciBkaXJSRSA9IC9edi18XkB8XjovO1xuXHR2YXIgZm9yQWxpYXNSRSA9IC8oLio/KVxccysoPzppbnxvZilcXHMrKC4qKS87XG5cdHZhciBmb3JJdGVyYXRvclJFID0gL1xcKChcXHtbXn1dKlxcfXxbXixdKiksKFteLF0qKSg/OiwoW14sXSopKT9cXCkvO1xuXHR2YXIgYmluZFJFID0gL146fF52LWJpbmQ6Lztcblx0dmFyIG9uUkUgPSAvXkB8XnYtb246Lztcblx0dmFyIGFyZ1JFID0gLzooLiopJC87XG5cdHZhciBtb2RpZmllclJFID0gL1xcLlteLl0rL2c7XG5cdFxuXHR2YXIgZGVjb2RlSFRNTENhY2hlZCA9IGNhY2hlZChkZWNvZGUpO1xuXHRcblx0Ly8gY29uZmlndXJhYmxlIHN0YXRlXG5cdHZhciB3YXJuJDE7XG5cdHZhciBwbGF0Zm9ybUdldFRhZ05hbWVzcGFjZTtcblx0dmFyIHBsYXRmb3JtTXVzdFVzZVByb3A7XG5cdHZhciBwbGF0Zm9ybUlzUHJlVGFnO1xuXHR2YXIgcHJlVHJhbnNmb3Jtcztcblx0dmFyIHRyYW5zZm9ybXM7XG5cdHZhciBwb3N0VHJhbnNmb3Jtcztcblx0dmFyIGRlbGltaXRlcnM7XG5cdFxuXHQvKipcblx0ICogQ29udmVydCBIVE1MIHN0cmluZyB0byBBU1QuXG5cdCAqL1xuXHRmdW5jdGlvbiBwYXJzZSAoXG5cdCAgdGVtcGxhdGUsXG5cdCAgb3B0aW9uc1xuXHQpIHtcblx0ICB3YXJuJDEgPSBvcHRpb25zLndhcm4gfHwgYmFzZVdhcm47XG5cdCAgcGxhdGZvcm1HZXRUYWdOYW1lc3BhY2UgPSBvcHRpb25zLmdldFRhZ05hbWVzcGFjZSB8fCBubztcblx0ICBwbGF0Zm9ybU11c3RVc2VQcm9wID0gb3B0aW9ucy5tdXN0VXNlUHJvcCB8fCBubztcblx0ICBwbGF0Zm9ybUlzUHJlVGFnID0gb3B0aW9ucy5pc1ByZVRhZyB8fCBubztcblx0ICBwcmVUcmFuc2Zvcm1zID0gcGx1Y2tNb2R1bGVGdW5jdGlvbihvcHRpb25zLm1vZHVsZXMsICdwcmVUcmFuc2Zvcm1Ob2RlJyk7XG5cdCAgdHJhbnNmb3JtcyA9IHBsdWNrTW9kdWxlRnVuY3Rpb24ob3B0aW9ucy5tb2R1bGVzLCAndHJhbnNmb3JtTm9kZScpO1xuXHQgIHBvc3RUcmFuc2Zvcm1zID0gcGx1Y2tNb2R1bGVGdW5jdGlvbihvcHRpb25zLm1vZHVsZXMsICdwb3N0VHJhbnNmb3JtTm9kZScpO1xuXHQgIGRlbGltaXRlcnMgPSBvcHRpb25zLmRlbGltaXRlcnM7XG5cdCAgdmFyIHN0YWNrID0gW107XG5cdCAgdmFyIHByZXNlcnZlV2hpdGVzcGFjZSA9IG9wdGlvbnMucHJlc2VydmVXaGl0ZXNwYWNlICE9PSBmYWxzZTtcblx0ICB2YXIgcm9vdDtcblx0ICB2YXIgY3VycmVudFBhcmVudDtcblx0ICB2YXIgaW5WUHJlID0gZmFsc2U7XG5cdCAgdmFyIGluUHJlID0gZmFsc2U7XG5cdCAgdmFyIHdhcm5lZCA9IGZhbHNlO1xuXHQgIHBhcnNlSFRNTCh0ZW1wbGF0ZSwge1xuXHQgICAgZXhwZWN0SFRNTDogb3B0aW9ucy5leHBlY3RIVE1MLFxuXHQgICAgaXNVbmFyeVRhZzogb3B0aW9ucy5pc1VuYXJ5VGFnLFxuXHQgICAgc2hvdWxkRGVjb2RlTmV3bGluZXM6IG9wdGlvbnMuc2hvdWxkRGVjb2RlTmV3bGluZXMsXG5cdCAgICBzdGFydDogZnVuY3Rpb24gc3RhcnQgKHRhZywgYXR0cnMsIHVuYXJ5KSB7XG5cdCAgICAgIC8vIGNoZWNrIG5hbWVzcGFjZS5cblx0ICAgICAgLy8gaW5oZXJpdCBwYXJlbnQgbnMgaWYgdGhlcmUgaXMgb25lXG5cdCAgICAgIHZhciBucyA9IChjdXJyZW50UGFyZW50ICYmIGN1cnJlbnRQYXJlbnQubnMpIHx8IHBsYXRmb3JtR2V0VGFnTmFtZXNwYWNlKHRhZyk7XG5cdFxuXHQgICAgICAvLyBoYW5kbGUgSUUgc3ZnIGJ1Z1xuXHQgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cblx0ICAgICAgaWYgKGlzSUUgJiYgbnMgPT09ICdzdmcnKSB7XG5cdCAgICAgICAgYXR0cnMgPSBndWFyZElFU1ZHQnVnKGF0dHJzKTtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgdmFyIGVsZW1lbnQgPSB7XG5cdCAgICAgICAgdHlwZTogMSxcblx0ICAgICAgICB0YWc6IHRhZyxcblx0ICAgICAgICBhdHRyc0xpc3Q6IGF0dHJzLFxuXHQgICAgICAgIGF0dHJzTWFwOiBtYWtlQXR0cnNNYXAoYXR0cnMpLFxuXHQgICAgICAgIHBhcmVudDogY3VycmVudFBhcmVudCxcblx0ICAgICAgICBjaGlsZHJlbjogW11cblx0ICAgICAgfTtcblx0ICAgICAgaWYgKG5zKSB7XG5cdCAgICAgICAgZWxlbWVudC5ucyA9IG5zO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICBpZiAoaXNGb3JiaWRkZW5UYWcoZWxlbWVudCkgJiYgIWlzU2VydmVyUmVuZGVyaW5nKCkpIHtcblx0ICAgICAgICBlbGVtZW50LmZvcmJpZGRlbiA9IHRydWU7XG5cdCAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuJDEoXG5cdCAgICAgICAgICAnVGVtcGxhdGVzIHNob3VsZCBvbmx5IGJlIHJlc3BvbnNpYmxlIGZvciBtYXBwaW5nIHRoZSBzdGF0ZSB0byB0aGUgJyArXG5cdCAgICAgICAgICAnVUkuIEF2b2lkIHBsYWNpbmcgdGFncyB3aXRoIHNpZGUtZWZmZWN0cyBpbiB5b3VyIHRlbXBsYXRlcywgc3VjaCBhcyAnICtcblx0ICAgICAgICAgIFwiPFwiICsgdGFnICsgXCI+XCIgKyAnLCBhcyB0aGV5IHdpbGwgbm90IGJlIHBhcnNlZC4nXG5cdCAgICAgICAgKTtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgLy8gYXBwbHkgcHJlLXRyYW5zZm9ybXNcblx0ICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmVUcmFuc2Zvcm1zLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgcHJlVHJhbnNmb3Jtc1tpXShlbGVtZW50LCBvcHRpb25zKTtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgaWYgKCFpblZQcmUpIHtcblx0ICAgICAgICBwcm9jZXNzUHJlKGVsZW1lbnQpO1xuXHQgICAgICAgIGlmIChlbGVtZW50LnByZSkge1xuXHQgICAgICAgICAgaW5WUHJlID0gdHJ1ZTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKHBsYXRmb3JtSXNQcmVUYWcoZWxlbWVudC50YWcpKSB7XG5cdCAgICAgICAgaW5QcmUgPSB0cnVlO1xuXHQgICAgICB9XG5cdCAgICAgIGlmIChpblZQcmUpIHtcblx0ICAgICAgICBwcm9jZXNzUmF3QXR0cnMoZWxlbWVudCk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgcHJvY2Vzc0ZvcihlbGVtZW50KTtcblx0ICAgICAgICBwcm9jZXNzSWYoZWxlbWVudCk7XG5cdCAgICAgICAgcHJvY2Vzc09uY2UoZWxlbWVudCk7XG5cdCAgICAgICAgcHJvY2Vzc0tleShlbGVtZW50KTtcblx0XG5cdCAgICAgICAgLy8gZGV0ZXJtaW5lIHdoZXRoZXIgdGhpcyBpcyBhIHBsYWluIGVsZW1lbnQgYWZ0ZXJcblx0ICAgICAgICAvLyByZW1vdmluZyBzdHJ1Y3R1cmFsIGF0dHJpYnV0ZXNcblx0ICAgICAgICBlbGVtZW50LnBsYWluID0gIWVsZW1lbnQua2V5ICYmICFhdHRycy5sZW5ndGg7XG5cdFxuXHQgICAgICAgIHByb2Nlc3NSZWYoZWxlbWVudCk7XG5cdCAgICAgICAgcHJvY2Vzc1Nsb3QoZWxlbWVudCk7XG5cdCAgICAgICAgcHJvY2Vzc0NvbXBvbmVudChlbGVtZW50KTtcblx0ICAgICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCB0cmFuc2Zvcm1zLmxlbmd0aDsgaSQxKyspIHtcblx0ICAgICAgICAgIHRyYW5zZm9ybXNbaSQxXShlbGVtZW50LCBvcHRpb25zKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcHJvY2Vzc0F0dHJzKGVsZW1lbnQpO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICBmdW5jdGlvbiBjaGVja1Jvb3RDb25zdHJhaW50cyAoZWwpIHtcblx0ICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhd2FybmVkKSB7XG5cdCAgICAgICAgICBpZiAoZWwudGFnID09PSAnc2xvdCcgfHwgZWwudGFnID09PSAndGVtcGxhdGUnKSB7XG5cdCAgICAgICAgICAgIHdhcm5lZCA9IHRydWU7XG5cdCAgICAgICAgICAgIHdhcm4kMShcblx0ICAgICAgICAgICAgICBcIkNhbm5vdCB1c2UgPFwiICsgKGVsLnRhZykgKyBcIj4gYXMgY29tcG9uZW50IHJvb3QgZWxlbWVudCBiZWNhdXNlIGl0IG1heSBcIiArXG5cdCAgICAgICAgICAgICAgJ2NvbnRhaW4gbXVsdGlwbGUgbm9kZXM6XFxuJyArIHRlbXBsYXRlXG5cdCAgICAgICAgICAgICk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICBpZiAoZWwuYXR0cnNNYXAuaGFzT3duUHJvcGVydHkoJ3YtZm9yJykpIHtcblx0ICAgICAgICAgICAgd2FybmVkID0gdHJ1ZTtcblx0ICAgICAgICAgICAgd2FybiQxKFxuXHQgICAgICAgICAgICAgICdDYW5ub3QgdXNlIHYtZm9yIG9uIHN0YXRlZnVsIGNvbXBvbmVudCByb290IGVsZW1lbnQgYmVjYXVzZSAnICtcblx0ICAgICAgICAgICAgICAnaXQgcmVuZGVycyBtdWx0aXBsZSBlbGVtZW50czpcXG4nICsgdGVtcGxhdGVcblx0ICAgICAgICAgICAgKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIC8vIHRyZWUgbWFuYWdlbWVudFxuXHQgICAgICBpZiAoIXJvb3QpIHtcblx0ICAgICAgICByb290ID0gZWxlbWVudDtcblx0ICAgICAgICBjaGVja1Jvb3RDb25zdHJhaW50cyhyb290KTtcblx0ICAgICAgfSBlbHNlIGlmICghc3RhY2subGVuZ3RoKSB7XG5cdCAgICAgICAgLy8gYWxsb3cgcm9vdCBlbGVtZW50cyB3aXRoIHYtaWYsIHYtZWxzZS1pZiBhbmQgdi1lbHNlXG5cdCAgICAgICAgaWYgKHJvb3QuaWYgJiYgKGVsZW1lbnQuZWxzZWlmIHx8IGVsZW1lbnQuZWxzZSkpIHtcblx0ICAgICAgICAgIGNoZWNrUm9vdENvbnN0cmFpbnRzKGVsZW1lbnQpO1xuXHQgICAgICAgICAgYWRkSWZDb25kaXRpb24ocm9vdCwge1xuXHQgICAgICAgICAgICBleHA6IGVsZW1lbnQuZWxzZWlmLFxuXHQgICAgICAgICAgICBibG9jazogZWxlbWVudFxuXHQgICAgICAgICAgfSk7XG5cdCAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICF3YXJuZWQpIHtcblx0ICAgICAgICAgIHdhcm5lZCA9IHRydWU7XG5cdCAgICAgICAgICB3YXJuJDEoXG5cdCAgICAgICAgICAgIFwiQ29tcG9uZW50IHRlbXBsYXRlIHNob3VsZCBjb250YWluIGV4YWN0bHkgb25lIHJvb3QgZWxlbWVudDpcIiArXG5cdCAgICAgICAgICAgIFwiXFxuXFxuXCIgKyB0ZW1wbGF0ZSArIFwiXFxuXFxuXCIgK1xuXHQgICAgICAgICAgICBcIklmIHlvdSBhcmUgdXNpbmcgdi1pZiBvbiBtdWx0aXBsZSBlbGVtZW50cywgXCIgK1xuXHQgICAgICAgICAgICBcInVzZSB2LWVsc2UtaWYgdG8gY2hhaW4gdGhlbSBpbnN0ZWFkLlwiXG5cdCAgICAgICAgICApO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICBpZiAoY3VycmVudFBhcmVudCAmJiAhZWxlbWVudC5mb3JiaWRkZW4pIHtcblx0ICAgICAgICBpZiAoZWxlbWVudC5lbHNlaWYgfHwgZWxlbWVudC5lbHNlKSB7XG5cdCAgICAgICAgICBwcm9jZXNzSWZDb25kaXRpb25zKGVsZW1lbnQsIGN1cnJlbnRQYXJlbnQpO1xuXHQgICAgICAgIH0gZWxzZSBpZiAoZWxlbWVudC5zbG90U2NvcGUpIHsgLy8gc2NvcGVkIHNsb3Rcblx0ICAgICAgICAgIGN1cnJlbnRQYXJlbnQucGxhaW4gPSBmYWxzZTtcblx0ICAgICAgICAgIHZhciBuYW1lID0gZWxlbWVudC5zbG90VGFyZ2V0IHx8ICdkZWZhdWx0JzsoY3VycmVudFBhcmVudC5zY29wZWRTbG90cyB8fCAoY3VycmVudFBhcmVudC5zY29wZWRTbG90cyA9IHt9KSlbbmFtZV0gPSBlbGVtZW50O1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICBjdXJyZW50UGFyZW50LmNoaWxkcmVuLnB1c2goZWxlbWVudCk7XG5cdCAgICAgICAgICBlbGVtZW50LnBhcmVudCA9IGN1cnJlbnRQYXJlbnQ7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIGlmICghdW5hcnkpIHtcblx0ICAgICAgICBjdXJyZW50UGFyZW50ID0gZWxlbWVudDtcblx0ICAgICAgICBzdGFjay5wdXNoKGVsZW1lbnQpO1xuXHQgICAgICB9XG5cdCAgICAgIC8vIGFwcGx5IHBvc3QtdHJhbnNmb3Jtc1xuXHQgICAgICBmb3IgKHZhciBpJDIgPSAwOyBpJDIgPCBwb3N0VHJhbnNmb3Jtcy5sZW5ndGg7IGkkMisrKSB7XG5cdCAgICAgICAgcG9zdFRyYW5zZm9ybXNbaSQyXShlbGVtZW50LCBvcHRpb25zKTtcblx0ICAgICAgfVxuXHQgICAgfSxcblx0XG5cdCAgICBlbmQ6IGZ1bmN0aW9uIGVuZCAoKSB7XG5cdCAgICAgIC8vIHJlbW92ZSB0cmFpbGluZyB3aGl0ZXNwYWNlXG5cdCAgICAgIHZhciBlbGVtZW50ID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XG5cdCAgICAgIHZhciBsYXN0Tm9kZSA9IGVsZW1lbnQuY2hpbGRyZW5bZWxlbWVudC5jaGlsZHJlbi5sZW5ndGggLSAxXTtcblx0ICAgICAgaWYgKGxhc3ROb2RlICYmIGxhc3ROb2RlLnR5cGUgPT09IDMgJiYgbGFzdE5vZGUudGV4dCA9PT0gJyAnKSB7XG5cdCAgICAgICAgZWxlbWVudC5jaGlsZHJlbi5wb3AoKTtcblx0ICAgICAgfVxuXHQgICAgICAvLyBwb3Agc3RhY2tcblx0ICAgICAgc3RhY2subGVuZ3RoIC09IDE7XG5cdCAgICAgIGN1cnJlbnRQYXJlbnQgPSBzdGFja1tzdGFjay5sZW5ndGggLSAxXTtcblx0ICAgICAgLy8gY2hlY2sgcHJlIHN0YXRlXG5cdCAgICAgIGlmIChlbGVtZW50LnByZSkge1xuXHQgICAgICAgIGluVlByZSA9IGZhbHNlO1xuXHQgICAgICB9XG5cdCAgICAgIGlmIChwbGF0Zm9ybUlzUHJlVGFnKGVsZW1lbnQudGFnKSkge1xuXHQgICAgICAgIGluUHJlID0gZmFsc2U7XG5cdCAgICAgIH1cblx0ICAgIH0sXG5cdFxuXHQgICAgY2hhcnM6IGZ1bmN0aW9uIGNoYXJzICh0ZXh0KSB7XG5cdCAgICAgIGlmICghY3VycmVudFBhcmVudCkge1xuXHQgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICF3YXJuZWQgJiYgdGV4dCA9PT0gdGVtcGxhdGUpIHtcblx0ICAgICAgICAgIHdhcm5lZCA9IHRydWU7XG5cdCAgICAgICAgICB3YXJuJDEoXG5cdCAgICAgICAgICAgICdDb21wb25lbnQgdGVtcGxhdGUgcmVxdWlyZXMgYSByb290IGVsZW1lbnQsIHJhdGhlciB0aGFuIGp1c3QgdGV4dDpcXG5cXG4nICsgdGVtcGxhdGVcblx0ICAgICAgICAgICk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVyblxuXHQgICAgICB9XG5cdCAgICAgIC8vIElFIHRleHRhcmVhIHBsYWNlaG9sZGVyIGJ1Z1xuXHQgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cblx0ICAgICAgaWYgKGlzSUUgJiZcblx0ICAgICAgICAgIGN1cnJlbnRQYXJlbnQudGFnID09PSAndGV4dGFyZWEnICYmXG5cdCAgICAgICAgICBjdXJyZW50UGFyZW50LmF0dHJzTWFwLnBsYWNlaG9sZGVyID09PSB0ZXh0KSB7XG5cdCAgICAgICAgcmV0dXJuXG5cdCAgICAgIH1cblx0ICAgICAgdmFyIGNoaWxkcmVuID0gY3VycmVudFBhcmVudC5jaGlsZHJlbjtcblx0ICAgICAgdGV4dCA9IGluUHJlIHx8IHRleHQudHJpbSgpXG5cdCAgICAgICAgPyBkZWNvZGVIVE1MQ2FjaGVkKHRleHQpXG5cdCAgICAgICAgLy8gb25seSBwcmVzZXJ2ZSB3aGl0ZXNwYWNlIGlmIGl0cyBub3QgcmlnaHQgYWZ0ZXIgYSBzdGFydGluZyB0YWdcblx0ICAgICAgICA6IHByZXNlcnZlV2hpdGVzcGFjZSAmJiBjaGlsZHJlbi5sZW5ndGggPyAnICcgOiAnJztcblx0ICAgICAgaWYgKHRleHQpIHtcblx0ICAgICAgICB2YXIgZXhwcmVzc2lvbjtcblx0ICAgICAgICBpZiAoIWluVlByZSAmJiB0ZXh0ICE9PSAnICcgJiYgKGV4cHJlc3Npb24gPSBwYXJzZVRleHQodGV4dCwgZGVsaW1pdGVycykpKSB7XG5cdCAgICAgICAgICBjaGlsZHJlbi5wdXNoKHtcblx0ICAgICAgICAgICAgdHlwZTogMixcblx0ICAgICAgICAgICAgZXhwcmVzc2lvbjogZXhwcmVzc2lvbixcblx0ICAgICAgICAgICAgdGV4dDogdGV4dFxuXHQgICAgICAgICAgfSk7XG5cdCAgICAgICAgfSBlbHNlIGlmICh0ZXh0ICE9PSAnICcgfHwgY2hpbGRyZW5bY2hpbGRyZW4ubGVuZ3RoIC0gMV0udGV4dCAhPT0gJyAnKSB7XG5cdCAgICAgICAgICBjdXJyZW50UGFyZW50LmNoaWxkcmVuLnB1c2goe1xuXHQgICAgICAgICAgICB0eXBlOiAzLFxuXHQgICAgICAgICAgICB0ZXh0OiB0ZXh0XG5cdCAgICAgICAgICB9KTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9KTtcblx0ICByZXR1cm4gcm9vdFxuXHR9XG5cdFxuXHRmdW5jdGlvbiBwcm9jZXNzUHJlIChlbCkge1xuXHQgIGlmIChnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1wcmUnKSAhPSBudWxsKSB7XG5cdCAgICBlbC5wcmUgPSB0cnVlO1xuXHQgIH1cblx0fVxuXHRcblx0ZnVuY3Rpb24gcHJvY2Vzc1Jhd0F0dHJzIChlbCkge1xuXHQgIHZhciBsID0gZWwuYXR0cnNMaXN0Lmxlbmd0aDtcblx0ICBpZiAobCkge1xuXHQgICAgdmFyIGF0dHJzID0gZWwuYXR0cnMgPSBuZXcgQXJyYXkobCk7XG5cdCAgICBmb3IgKHZhciBpID0gMDsgaSA8IGw7IGkrKykge1xuXHQgICAgICBhdHRyc1tpXSA9IHtcblx0ICAgICAgICBuYW1lOiBlbC5hdHRyc0xpc3RbaV0ubmFtZSxcblx0ICAgICAgICB2YWx1ZTogSlNPTi5zdHJpbmdpZnkoZWwuYXR0cnNMaXN0W2ldLnZhbHVlKVxuXHQgICAgICB9O1xuXHQgICAgfVxuXHQgIH0gZWxzZSBpZiAoIWVsLnByZSkge1xuXHQgICAgLy8gbm9uIHJvb3Qgbm9kZSBpbiBwcmUgYmxvY2tzIHdpdGggbm8gYXR0cmlidXRlc1xuXHQgICAgZWwucGxhaW4gPSB0cnVlO1xuXHQgIH1cblx0fVxuXHRcblx0ZnVuY3Rpb24gcHJvY2Vzc0tleSAoZWwpIHtcblx0ICB2YXIgZXhwID0gZ2V0QmluZGluZ0F0dHIoZWwsICdrZXknKTtcblx0ICBpZiAoZXhwKSB7XG5cdCAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBlbC50YWcgPT09ICd0ZW1wbGF0ZScpIHtcblx0ICAgICAgd2FybiQxKFwiPHRlbXBsYXRlPiBjYW5ub3QgYmUga2V5ZWQuIFBsYWNlIHRoZSBrZXkgb24gcmVhbCBlbGVtZW50cyBpbnN0ZWFkLlwiKTtcblx0ICAgIH1cblx0ICAgIGVsLmtleSA9IGV4cDtcblx0ICB9XG5cdH1cblx0XG5cdGZ1bmN0aW9uIHByb2Nlc3NSZWYgKGVsKSB7XG5cdCAgdmFyIHJlZiA9IGdldEJpbmRpbmdBdHRyKGVsLCAncmVmJyk7XG5cdCAgaWYgKHJlZikge1xuXHQgICAgZWwucmVmID0gcmVmO1xuXHQgICAgZWwucmVmSW5Gb3IgPSBjaGVja0luRm9yKGVsKTtcblx0ICB9XG5cdH1cblx0XG5cdGZ1bmN0aW9uIHByb2Nlc3NGb3IgKGVsKSB7XG5cdCAgdmFyIGV4cDtcblx0ICBpZiAoKGV4cCA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LWZvcicpKSkge1xuXHQgICAgdmFyIGluTWF0Y2ggPSBleHAubWF0Y2goZm9yQWxpYXNSRSk7XG5cdCAgICBpZiAoIWluTWF0Y2gpIHtcblx0ICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuJDEoXG5cdCAgICAgICAgKFwiSW52YWxpZCB2LWZvciBleHByZXNzaW9uOiBcIiArIGV4cClcblx0ICAgICAgKTtcblx0ICAgICAgcmV0dXJuXG5cdCAgICB9XG5cdCAgICBlbC5mb3IgPSBpbk1hdGNoWzJdLnRyaW0oKTtcblx0ICAgIHZhciBhbGlhcyA9IGluTWF0Y2hbMV0udHJpbSgpO1xuXHQgICAgdmFyIGl0ZXJhdG9yTWF0Y2ggPSBhbGlhcy5tYXRjaChmb3JJdGVyYXRvclJFKTtcblx0ICAgIGlmIChpdGVyYXRvck1hdGNoKSB7XG5cdCAgICAgIGVsLmFsaWFzID0gaXRlcmF0b3JNYXRjaFsxXS50cmltKCk7XG5cdCAgICAgIGVsLml0ZXJhdG9yMSA9IGl0ZXJhdG9yTWF0Y2hbMl0udHJpbSgpO1xuXHQgICAgICBpZiAoaXRlcmF0b3JNYXRjaFszXSkge1xuXHQgICAgICAgIGVsLml0ZXJhdG9yMiA9IGl0ZXJhdG9yTWF0Y2hbM10udHJpbSgpO1xuXHQgICAgICB9XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICBlbC5hbGlhcyA9IGFsaWFzO1xuXHQgICAgfVxuXHQgIH1cblx0fVxuXHRcblx0ZnVuY3Rpb24gcHJvY2Vzc0lmIChlbCkge1xuXHQgIHZhciBleHAgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1pZicpO1xuXHQgIGlmIChleHApIHtcblx0ICAgIGVsLmlmID0gZXhwO1xuXHQgICAgYWRkSWZDb25kaXRpb24oZWwsIHtcblx0ICAgICAgZXhwOiBleHAsXG5cdCAgICAgIGJsb2NrOiBlbFxuXHQgICAgfSk7XG5cdCAgfSBlbHNlIHtcblx0ICAgIGlmIChnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1lbHNlJykgIT0gbnVsbCkge1xuXHQgICAgICBlbC5lbHNlID0gdHJ1ZTtcblx0ICAgIH1cblx0ICAgIHZhciBlbHNlaWYgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1lbHNlLWlmJyk7XG5cdCAgICBpZiAoZWxzZWlmKSB7XG5cdCAgICAgIGVsLmVsc2VpZiA9IGVsc2VpZjtcblx0ICAgIH1cblx0ICB9XG5cdH1cblx0XG5cdGZ1bmN0aW9uIHByb2Nlc3NJZkNvbmRpdGlvbnMgKGVsLCBwYXJlbnQpIHtcblx0ICB2YXIgcHJldiA9IGZpbmRQcmV2RWxlbWVudChwYXJlbnQuY2hpbGRyZW4pO1xuXHQgIGlmIChwcmV2ICYmIHByZXYuaWYpIHtcblx0ICAgIGFkZElmQ29uZGl0aW9uKHByZXYsIHtcblx0ICAgICAgZXhwOiBlbC5lbHNlaWYsXG5cdCAgICAgIGJsb2NrOiBlbFxuXHQgICAgfSk7XG5cdCAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG5cdCAgICB3YXJuJDEoXG5cdCAgICAgIFwidi1cIiArIChlbC5lbHNlaWYgPyAoJ2Vsc2UtaWY9XCInICsgZWwuZWxzZWlmICsgJ1wiJykgOiAnZWxzZScpICsgXCIgXCIgK1xuXHQgICAgICBcInVzZWQgb24gZWxlbWVudCA8XCIgKyAoZWwudGFnKSArIFwiPiB3aXRob3V0IGNvcnJlc3BvbmRpbmcgdi1pZi5cIlxuXHQgICAgKTtcblx0ICB9XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGZpbmRQcmV2RWxlbWVudCAoY2hpbGRyZW4pIHtcblx0ICB2YXIgaSA9IGNoaWxkcmVuLmxlbmd0aDtcblx0ICB3aGlsZSAoaS0tKSB7XG5cdCAgICBpZiAoY2hpbGRyZW5baV0udHlwZSA9PT0gMSkge1xuXHQgICAgICByZXR1cm4gY2hpbGRyZW5baV1cblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNoaWxkcmVuW2ldLnRleHQgIT09ICcgJykge1xuXHQgICAgICAgIHdhcm4kMShcblx0ICAgICAgICAgIFwidGV4dCBcXFwiXCIgKyAoY2hpbGRyZW5baV0udGV4dC50cmltKCkpICsgXCJcXFwiIGJldHdlZW4gdi1pZiBhbmQgdi1lbHNlKC1pZikgXCIgK1xuXHQgICAgICAgICAgXCJ3aWxsIGJlIGlnbm9yZWQuXCJcblx0ICAgICAgICApO1xuXHQgICAgICB9XG5cdCAgICAgIGNoaWxkcmVuLnBvcCgpO1xuXHQgICAgfVxuXHQgIH1cblx0fVxuXHRcblx0ZnVuY3Rpb24gYWRkSWZDb25kaXRpb24gKGVsLCBjb25kaXRpb24pIHtcblx0ICBpZiAoIWVsLmlmQ29uZGl0aW9ucykge1xuXHQgICAgZWwuaWZDb25kaXRpb25zID0gW107XG5cdCAgfVxuXHQgIGVsLmlmQ29uZGl0aW9ucy5wdXNoKGNvbmRpdGlvbik7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIHByb2Nlc3NPbmNlIChlbCkge1xuXHQgIHZhciBvbmNlID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3Ytb25jZScpO1xuXHQgIGlmIChvbmNlICE9IG51bGwpIHtcblx0ICAgIGVsLm9uY2UgPSB0cnVlO1xuXHQgIH1cblx0fVxuXHRcblx0ZnVuY3Rpb24gcHJvY2Vzc1Nsb3QgKGVsKSB7XG5cdCAgaWYgKGVsLnRhZyA9PT0gJ3Nsb3QnKSB7XG5cdCAgICBlbC5zbG90TmFtZSA9IGdldEJpbmRpbmdBdHRyKGVsLCAnbmFtZScpO1xuXHQgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgZWwua2V5KSB7XG5cdCAgICAgIHdhcm4kMShcblx0ICAgICAgICBcImBrZXlgIGRvZXMgbm90IHdvcmsgb24gPHNsb3Q+IGJlY2F1c2Ugc2xvdHMgYXJlIGFic3RyYWN0IG91dGxldHMgXCIgK1xuXHQgICAgICAgIFwiYW5kIGNhbiBwb3NzaWJseSBleHBhbmQgaW50byBtdWx0aXBsZSBlbGVtZW50cy4gXCIgK1xuXHQgICAgICAgIFwiVXNlIHRoZSBrZXkgb24gYSB3cmFwcGluZyBlbGVtZW50IGluc3RlYWQuXCJcblx0ICAgICAgKTtcblx0ICAgIH1cblx0ICB9IGVsc2Uge1xuXHQgICAgdmFyIHNsb3RUYXJnZXQgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ3Nsb3QnKTtcblx0ICAgIGlmIChzbG90VGFyZ2V0KSB7XG5cdCAgICAgIGVsLnNsb3RUYXJnZXQgPSBzbG90VGFyZ2V0ID09PSAnXCJcIicgPyAnXCJkZWZhdWx0XCInIDogc2xvdFRhcmdldDtcblx0ICAgIH1cblx0ICAgIGlmIChlbC50YWcgPT09ICd0ZW1wbGF0ZScpIHtcblx0ICAgICAgZWwuc2xvdFNjb3BlID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3Njb3BlJyk7XG5cdCAgICB9XG5cdCAgfVxuXHR9XG5cdFxuXHRmdW5jdGlvbiBwcm9jZXNzQ29tcG9uZW50IChlbCkge1xuXHQgIHZhciBiaW5kaW5nO1xuXHQgIGlmICgoYmluZGluZyA9IGdldEJpbmRpbmdBdHRyKGVsLCAnaXMnKSkpIHtcblx0ICAgIGVsLmNvbXBvbmVudCA9IGJpbmRpbmc7XG5cdCAgfVxuXHQgIGlmIChnZXRBbmRSZW1vdmVBdHRyKGVsLCAnaW5saW5lLXRlbXBsYXRlJykgIT0gbnVsbCkge1xuXHQgICAgZWwuaW5saW5lVGVtcGxhdGUgPSB0cnVlO1xuXHQgIH1cblx0fVxuXHRcblx0ZnVuY3Rpb24gcHJvY2Vzc0F0dHJzIChlbCkge1xuXHQgIHZhciBsaXN0ID0gZWwuYXR0cnNMaXN0O1xuXHQgIHZhciBpLCBsLCBuYW1lLCByYXdOYW1lLCB2YWx1ZSwgYXJnLCBtb2RpZmllcnMsIGlzUHJvcDtcblx0ICBmb3IgKGkgPSAwLCBsID0gbGlzdC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0ICAgIG5hbWUgPSByYXdOYW1lID0gbGlzdFtpXS5uYW1lO1xuXHQgICAgdmFsdWUgPSBsaXN0W2ldLnZhbHVlO1xuXHQgICAgaWYgKGRpclJFLnRlc3QobmFtZSkpIHtcblx0ICAgICAgLy8gbWFyayBlbGVtZW50IGFzIGR5bmFtaWNcblx0ICAgICAgZWwuaGFzQmluZGluZ3MgPSB0cnVlO1xuXHQgICAgICAvLyBtb2RpZmllcnNcblx0ICAgICAgbW9kaWZpZXJzID0gcGFyc2VNb2RpZmllcnMobmFtZSk7XG5cdCAgICAgIGlmIChtb2RpZmllcnMpIHtcblx0ICAgICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKG1vZGlmaWVyUkUsICcnKTtcblx0ICAgICAgfVxuXHQgICAgICBpZiAoYmluZFJFLnRlc3QobmFtZSkpIHsgLy8gdi1iaW5kXG5cdCAgICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZShiaW5kUkUsICcnKTtcblx0ICAgICAgICB2YWx1ZSA9IHBhcnNlRmlsdGVycyh2YWx1ZSk7XG5cdCAgICAgICAgaXNQcm9wID0gZmFsc2U7XG5cdCAgICAgICAgaWYgKG1vZGlmaWVycykge1xuXHQgICAgICAgICAgaWYgKG1vZGlmaWVycy5wcm9wKSB7XG5cdCAgICAgICAgICAgIGlzUHJvcCA9IHRydWU7XG5cdCAgICAgICAgICAgIG5hbWUgPSBjYW1lbGl6ZShuYW1lKTtcblx0ICAgICAgICAgICAgaWYgKG5hbWUgPT09ICdpbm5lckh0bWwnKSB7IG5hbWUgPSAnaW5uZXJIVE1MJzsgfVxuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgaWYgKG1vZGlmaWVycy5jYW1lbCkge1xuXHQgICAgICAgICAgICBuYW1lID0gY2FtZWxpemUobmFtZSk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmIChpc1Byb3AgfHwgcGxhdGZvcm1NdXN0VXNlUHJvcChlbC50YWcsIGVsLmF0dHJzTWFwLnR5cGUsIG5hbWUpKSB7XG5cdCAgICAgICAgICBhZGRQcm9wKGVsLCBuYW1lLCB2YWx1ZSk7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIGFkZEF0dHIoZWwsIG5hbWUsIHZhbHVlKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0gZWxzZSBpZiAob25SRS50ZXN0KG5hbWUpKSB7IC8vIHYtb25cblx0ICAgICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKG9uUkUsICcnKTtcblx0ICAgICAgICBhZGRIYW5kbGVyKGVsLCBuYW1lLCB2YWx1ZSwgbW9kaWZpZXJzKTtcblx0ICAgICAgfSBlbHNlIHsgLy8gbm9ybWFsIGRpcmVjdGl2ZXNcblx0ICAgICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKGRpclJFLCAnJyk7XG5cdCAgICAgICAgLy8gcGFyc2UgYXJnXG5cdCAgICAgICAgdmFyIGFyZ01hdGNoID0gbmFtZS5tYXRjaChhcmdSRSk7XG5cdCAgICAgICAgaWYgKGFyZ01hdGNoICYmIChhcmcgPSBhcmdNYXRjaFsxXSkpIHtcblx0ICAgICAgICAgIG5hbWUgPSBuYW1lLnNsaWNlKDAsIC0oYXJnLmxlbmd0aCArIDEpKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgYWRkRGlyZWN0aXZlKGVsLCBuYW1lLCByYXdOYW1lLCB2YWx1ZSwgYXJnLCBtb2RpZmllcnMpO1xuXHQgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIG5hbWUgPT09ICdtb2RlbCcpIHtcblx0ICAgICAgICAgIGNoZWNrRm9yQWxpYXNNb2RlbChlbCwgdmFsdWUpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgLy8gbGl0ZXJhbCBhdHRyaWJ1dGVcblx0ICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcblx0ICAgICAgICB2YXIgZXhwcmVzc2lvbiA9IHBhcnNlVGV4dCh2YWx1ZSwgZGVsaW1pdGVycyk7XG5cdCAgICAgICAgaWYgKGV4cHJlc3Npb24pIHtcblx0ICAgICAgICAgIHdhcm4kMShcblx0ICAgICAgICAgICAgbmFtZSArIFwiPVxcXCJcIiArIHZhbHVlICsgXCJcXFwiOiBcIiArXG5cdCAgICAgICAgICAgICdJbnRlcnBvbGF0aW9uIGluc2lkZSBhdHRyaWJ1dGVzIGhhcyBiZWVuIHJlbW92ZWQuICcgK1xuXHQgICAgICAgICAgICAnVXNlIHYtYmluZCBvciB0aGUgY29sb24gc2hvcnRoYW5kIGluc3RlYWQuIEZvciBleGFtcGxlLCAnICtcblx0ICAgICAgICAgICAgJ2luc3RlYWQgb2YgPGRpdiBpZD1cInt7IHZhbCB9fVwiPiwgdXNlIDxkaXYgOmlkPVwidmFsXCI+Lidcblx0ICAgICAgICAgICk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIGFkZEF0dHIoZWwsIG5hbWUsIEpTT04uc3RyaW5naWZ5KHZhbHVlKSk7XG5cdCAgICB9XG5cdCAgfVxuXHR9XG5cdFxuXHRmdW5jdGlvbiBjaGVja0luRm9yIChlbCkge1xuXHQgIHZhciBwYXJlbnQgPSBlbDtcblx0ICB3aGlsZSAocGFyZW50KSB7XG5cdCAgICBpZiAocGFyZW50LmZvciAhPT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgIHJldHVybiB0cnVlXG5cdCAgICB9XG5cdCAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xuXHQgIH1cblx0ICByZXR1cm4gZmFsc2Vcblx0fVxuXHRcblx0ZnVuY3Rpb24gcGFyc2VNb2RpZmllcnMgKG5hbWUpIHtcblx0ICB2YXIgbWF0Y2ggPSBuYW1lLm1hdGNoKG1vZGlmaWVyUkUpO1xuXHQgIGlmIChtYXRjaCkge1xuXHQgICAgdmFyIHJldCA9IHt9O1xuXHQgICAgbWF0Y2guZm9yRWFjaChmdW5jdGlvbiAobSkgeyByZXRbbS5zbGljZSgxKV0gPSB0cnVlOyB9KTtcblx0ICAgIHJldHVybiByZXRcblx0ICB9XG5cdH1cblx0XG5cdGZ1bmN0aW9uIG1ha2VBdHRyc01hcCAoYXR0cnMpIHtcblx0ICB2YXIgbWFwID0ge307XG5cdCAgZm9yICh2YXIgaSA9IDAsIGwgPSBhdHRycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0ICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIG1hcFthdHRyc1tpXS5uYW1lXSAmJiAhaXNJRSkge1xuXHQgICAgICB3YXJuJDEoJ2R1cGxpY2F0ZSBhdHRyaWJ1dGU6ICcgKyBhdHRyc1tpXS5uYW1lKTtcblx0ICAgIH1cblx0ICAgIG1hcFthdHRyc1tpXS5uYW1lXSA9IGF0dHJzW2ldLnZhbHVlO1xuXHQgIH1cblx0ICByZXR1cm4gbWFwXG5cdH1cblx0XG5cdGZ1bmN0aW9uIGlzRm9yYmlkZGVuVGFnIChlbCkge1xuXHQgIHJldHVybiAoXG5cdCAgICBlbC50YWcgPT09ICdzdHlsZScgfHxcblx0ICAgIChlbC50YWcgPT09ICdzY3JpcHQnICYmIChcblx0ICAgICAgIWVsLmF0dHJzTWFwLnR5cGUgfHxcblx0ICAgICAgZWwuYXR0cnNNYXAudHlwZSA9PT0gJ3RleHQvamF2YXNjcmlwdCdcblx0ICAgICkpXG5cdCAgKVxuXHR9XG5cdFxuXHR2YXIgaWVOU0J1ZyA9IC9eeG1sbnM6TlNcXGQrLztcblx0dmFyIGllTlNQcmVmaXggPSAvXk5TXFxkKzovO1xuXHRcblx0LyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cblx0ZnVuY3Rpb24gZ3VhcmRJRVNWR0J1ZyAoYXR0cnMpIHtcblx0ICB2YXIgcmVzID0gW107XG5cdCAgZm9yICh2YXIgaSA9IDA7IGkgPCBhdHRycy5sZW5ndGg7IGkrKykge1xuXHQgICAgdmFyIGF0dHIgPSBhdHRyc1tpXTtcblx0ICAgIGlmICghaWVOU0J1Zy50ZXN0KGF0dHIubmFtZSkpIHtcblx0ICAgICAgYXR0ci5uYW1lID0gYXR0ci5uYW1lLnJlcGxhY2UoaWVOU1ByZWZpeCwgJycpO1xuXHQgICAgICByZXMucHVzaChhdHRyKTtcblx0ICAgIH1cblx0ICB9XG5cdCAgcmV0dXJuIHJlc1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBjaGVja0ZvckFsaWFzTW9kZWwgKGVsLCB2YWx1ZSkge1xuXHQgIHZhciBfZWwgPSBlbDtcblx0ICB3aGlsZSAoX2VsKSB7XG5cdCAgICBpZiAoX2VsLmZvciAmJiBfZWwuYWxpYXMgPT09IHZhbHVlKSB7XG5cdCAgICAgIHdhcm4kMShcblx0ICAgICAgICBcIjxcIiArIChlbC50YWcpICsgXCIgdi1tb2RlbD1cXFwiXCIgKyB2YWx1ZSArIFwiXFxcIj46IFwiICtcblx0ICAgICAgICBcIllvdSBhcmUgYmluZGluZyB2LW1vZGVsIGRpcmVjdGx5IHRvIGEgdi1mb3IgaXRlcmF0aW9uIGFsaWFzLiBcIiArXG5cdCAgICAgICAgXCJUaGlzIHdpbGwgbm90IGJlIGFibGUgdG8gbW9kaWZ5IHRoZSB2LWZvciBzb3VyY2UgYXJyYXkgYmVjYXVzZSBcIiArXG5cdCAgICAgICAgXCJ3cml0aW5nIHRvIHRoZSBhbGlhcyBpcyBsaWtlIG1vZGlmeWluZyBhIGZ1bmN0aW9uIGxvY2FsIHZhcmlhYmxlLiBcIiArXG5cdCAgICAgICAgXCJDb25zaWRlciB1c2luZyBhbiBhcnJheSBvZiBvYmplY3RzIGFuZCB1c2Ugdi1tb2RlbCBvbiBhbiBvYmplY3QgcHJvcGVydHkgaW5zdGVhZC5cIlxuXHQgICAgICApO1xuXHQgICAgfVxuXHQgICAgX2VsID0gX2VsLnBhcmVudDtcblx0ICB9XG5cdH1cblx0XG5cdC8qICAqL1xuXHRcblx0dmFyIGlzU3RhdGljS2V5O1xuXHR2YXIgaXNQbGF0Zm9ybVJlc2VydmVkVGFnO1xuXHRcblx0dmFyIGdlblN0YXRpY0tleXNDYWNoZWQgPSBjYWNoZWQoZ2VuU3RhdGljS2V5cyQxKTtcblx0XG5cdC8qKlxuXHQgKiBHb2FsIG9mIHRoZSBvcHRpbWl6ZXI6IHdhbGsgdGhlIGdlbmVyYXRlZCB0ZW1wbGF0ZSBBU1QgdHJlZVxuXHQgKiBhbmQgZGV0ZWN0IHN1Yi10cmVlcyB0aGF0IGFyZSBwdXJlbHkgc3RhdGljLCBpLmUuIHBhcnRzIG9mXG5cdCAqIHRoZSBET00gdGhhdCBuZXZlciBuZWVkcyB0byBjaGFuZ2UuXG5cdCAqXG5cdCAqIE9uY2Ugd2UgZGV0ZWN0IHRoZXNlIHN1Yi10cmVlcywgd2UgY2FuOlxuXHQgKlxuXHQgKiAxLiBIb2lzdCB0aGVtIGludG8gY29uc3RhbnRzLCBzbyB0aGF0IHdlIG5vIGxvbmdlciBuZWVkIHRvXG5cdCAqICAgIGNyZWF0ZSBmcmVzaCBub2RlcyBmb3IgdGhlbSBvbiBlYWNoIHJlLXJlbmRlcjtcblx0ICogMi4gQ29tcGxldGVseSBza2lwIHRoZW0gaW4gdGhlIHBhdGNoaW5nIHByb2Nlc3MuXG5cdCAqL1xuXHRmdW5jdGlvbiBvcHRpbWl6ZSAocm9vdCwgb3B0aW9ucykge1xuXHQgIGlmICghcm9vdCkgeyByZXR1cm4gfVxuXHQgIGlzU3RhdGljS2V5ID0gZ2VuU3RhdGljS2V5c0NhY2hlZChvcHRpb25zLnN0YXRpY0tleXMgfHwgJycpO1xuXHQgIGlzUGxhdGZvcm1SZXNlcnZlZFRhZyA9IG9wdGlvbnMuaXNSZXNlcnZlZFRhZyB8fCBubztcblx0ICAvLyBmaXJzdCBwYXNzOiBtYXJrIGFsbCBub24tc3RhdGljIG5vZGVzLlxuXHQgIG1hcmtTdGF0aWMocm9vdCk7XG5cdCAgLy8gc2Vjb25kIHBhc3M6IG1hcmsgc3RhdGljIHJvb3RzLlxuXHQgIG1hcmtTdGF0aWNSb290cyhyb290LCBmYWxzZSk7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGdlblN0YXRpY0tleXMkMSAoa2V5cykge1xuXHQgIHJldHVybiBtYWtlTWFwKFxuXHQgICAgJ3R5cGUsdGFnLGF0dHJzTGlzdCxhdHRyc01hcCxwbGFpbixwYXJlbnQsY2hpbGRyZW4sYXR0cnMnICtcblx0ICAgIChrZXlzID8gJywnICsga2V5cyA6ICcnKVxuXHQgIClcblx0fVxuXHRcblx0ZnVuY3Rpb24gbWFya1N0YXRpYyAobm9kZSkge1xuXHQgIG5vZGUuc3RhdGljID0gaXNTdGF0aWMobm9kZSk7XG5cdCAgaWYgKG5vZGUudHlwZSA9PT0gMSkge1xuXHQgICAgLy8gZG8gbm90IG1ha2UgY29tcG9uZW50IHNsb3QgY29udGVudCBzdGF0aWMuIHRoaXMgYXZvaWRzXG5cdCAgICAvLyAxLiBjb21wb25lbnRzIG5vdCBhYmxlIHRvIG11dGF0ZSBzbG90IG5vZGVzXG5cdCAgICAvLyAyLiBzdGF0aWMgc2xvdCBjb250ZW50IGZhaWxzIGZvciBob3QtcmVsb2FkaW5nXG5cdCAgICBpZiAoXG5cdCAgICAgICFpc1BsYXRmb3JtUmVzZXJ2ZWRUYWcobm9kZS50YWcpICYmXG5cdCAgICAgIG5vZGUudGFnICE9PSAnc2xvdCcgJiZcblx0ICAgICAgbm9kZS5hdHRyc01hcFsnaW5saW5lLXRlbXBsYXRlJ10gPT0gbnVsbFxuXHQgICAgKSB7XG5cdCAgICAgIHJldHVyblxuXHQgICAgfVxuXHQgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuXHQgICAgICB2YXIgY2hpbGQgPSBub2RlLmNoaWxkcmVuW2ldO1xuXHQgICAgICBtYXJrU3RhdGljKGNoaWxkKTtcblx0ICAgICAgaWYgKCFjaGlsZC5zdGF0aWMpIHtcblx0ICAgICAgICBub2RlLnN0YXRpYyA9IGZhbHNlO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfVxuXHR9XG5cdFxuXHRmdW5jdGlvbiBtYXJrU3RhdGljUm9vdHMgKG5vZGUsIGlzSW5Gb3IpIHtcblx0ICBpZiAobm9kZS50eXBlID09PSAxKSB7XG5cdCAgICBpZiAobm9kZS5zdGF0aWMgfHwgbm9kZS5vbmNlKSB7XG5cdCAgICAgIG5vZGUuc3RhdGljSW5Gb3IgPSBpc0luRm9yO1xuXHQgICAgfVxuXHQgICAgLy8gRm9yIGEgbm9kZSB0byBxdWFsaWZ5IGFzIGEgc3RhdGljIHJvb3QsIGl0IHNob3VsZCBoYXZlIGNoaWxkcmVuIHRoYXRcblx0ICAgIC8vIGFyZSBub3QganVzdCBzdGF0aWMgdGV4dC4gT3RoZXJ3aXNlIHRoZSBjb3N0IG9mIGhvaXN0aW5nIG91dCB3aWxsXG5cdCAgICAvLyBvdXR3ZWlnaCB0aGUgYmVuZWZpdHMgYW5kIGl0J3MgYmV0dGVyIG9mZiB0byBqdXN0IGFsd2F5cyByZW5kZXIgaXQgZnJlc2guXG5cdCAgICBpZiAobm9kZS5zdGF0aWMgJiYgbm9kZS5jaGlsZHJlbi5sZW5ndGggJiYgIShcblx0ICAgICAgbm9kZS5jaGlsZHJlbi5sZW5ndGggPT09IDEgJiZcblx0ICAgICAgbm9kZS5jaGlsZHJlblswXS50eXBlID09PSAzXG5cdCAgICApKSB7XG5cdCAgICAgIG5vZGUuc3RhdGljUm9vdCA9IHRydWU7XG5cdCAgICAgIHJldHVyblxuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgbm9kZS5zdGF0aWNSb290ID0gZmFsc2U7XG5cdCAgICB9XG5cdCAgICBpZiAobm9kZS5jaGlsZHJlbikge1xuXHQgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IG5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG5cdCAgICAgICAgbWFya1N0YXRpY1Jvb3RzKG5vZGUuY2hpbGRyZW5baV0sIGlzSW5Gb3IgfHwgISFub2RlLmZvcik7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICAgIGlmIChub2RlLmlmQ29uZGl0aW9ucykge1xuXHQgICAgICB3YWxrVGhyb3VnaENvbmRpdGlvbnNCbG9ja3Mobm9kZS5pZkNvbmRpdGlvbnMsIGlzSW5Gb3IpO1xuXHQgICAgfVxuXHQgIH1cblx0fVxuXHRcblx0ZnVuY3Rpb24gd2Fsa1Rocm91Z2hDb25kaXRpb25zQmxvY2tzIChjb25kaXRpb25CbG9ja3MsIGlzSW5Gb3IpIHtcblx0ICBmb3IgKHZhciBpID0gMSwgbGVuID0gY29uZGl0aW9uQmxvY2tzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG5cdCAgICBtYXJrU3RhdGljUm9vdHMoY29uZGl0aW9uQmxvY2tzW2ldLmJsb2NrLCBpc0luRm9yKTtcblx0ICB9XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGlzU3RhdGljIChub2RlKSB7XG5cdCAgaWYgKG5vZGUudHlwZSA9PT0gMikgeyAvLyBleHByZXNzaW9uXG5cdCAgICByZXR1cm4gZmFsc2Vcblx0ICB9XG5cdCAgaWYgKG5vZGUudHlwZSA9PT0gMykgeyAvLyB0ZXh0XG5cdCAgICByZXR1cm4gdHJ1ZVxuXHQgIH1cblx0ICByZXR1cm4gISEobm9kZS5wcmUgfHwgKFxuXHQgICAgIW5vZGUuaGFzQmluZGluZ3MgJiYgLy8gbm8gZHluYW1pYyBiaW5kaW5nc1xuXHQgICAgIW5vZGUuaWYgJiYgIW5vZGUuZm9yICYmIC8vIG5vdCB2LWlmIG9yIHYtZm9yIG9yIHYtZWxzZVxuXHQgICAgIWlzQnVpbHRJblRhZyhub2RlLnRhZykgJiYgLy8gbm90IGEgYnVpbHQtaW5cblx0ICAgIGlzUGxhdGZvcm1SZXNlcnZlZFRhZyhub2RlLnRhZykgJiYgLy8gbm90IGEgY29tcG9uZW50XG5cdCAgICAhaXNEaXJlY3RDaGlsZE9mVGVtcGxhdGVGb3Iobm9kZSkgJiZcblx0ICAgIE9iamVjdC5rZXlzKG5vZGUpLmV2ZXJ5KGlzU3RhdGljS2V5KVxuXHQgICkpXG5cdH1cblx0XG5cdGZ1bmN0aW9uIGlzRGlyZWN0Q2hpbGRPZlRlbXBsYXRlRm9yIChub2RlKSB7XG5cdCAgd2hpbGUgKG5vZGUucGFyZW50KSB7XG5cdCAgICBub2RlID0gbm9kZS5wYXJlbnQ7XG5cdCAgICBpZiAobm9kZS50YWcgIT09ICd0ZW1wbGF0ZScpIHtcblx0ICAgICAgcmV0dXJuIGZhbHNlXG5cdCAgICB9XG5cdCAgICBpZiAobm9kZS5mb3IpIHtcblx0ICAgICAgcmV0dXJuIHRydWVcblx0ICAgIH1cblx0ICB9XG5cdCAgcmV0dXJuIGZhbHNlXG5cdH1cblx0XG5cdC8qICAqL1xuXHRcblx0dmFyIGZuRXhwUkUgPSAvXlxccyooW1xcdyRfXSt8XFwoW14pXSo/XFwpKVxccyo9PnxeZnVuY3Rpb25cXHMqXFwoLztcblx0dmFyIHNpbXBsZVBhdGhSRSA9IC9eXFxzKltBLVphLXpfJF1bXFx3JF0qKD86XFwuW0EtWmEtel8kXVtcXHckXSp8XFxbJy4qPyddfFxcW1wiLio/XCJdfFxcW1xcZCtdfFxcW1tBLVphLXpfJF1bXFx3JF0qXSkqXFxzKiQvO1xuXHRcblx0Ly8ga2V5Q29kZSBhbGlhc2VzXG5cdHZhciBrZXlDb2RlcyA9IHtcblx0ICBlc2M6IDI3LFxuXHQgIHRhYjogOSxcblx0ICBlbnRlcjogMTMsXG5cdCAgc3BhY2U6IDMyLFxuXHQgIHVwOiAzOCxcblx0ICBsZWZ0OiAzNyxcblx0ICByaWdodDogMzksXG5cdCAgZG93bjogNDAsXG5cdCAgJ2RlbGV0ZSc6IFs4LCA0Nl1cblx0fTtcblx0XG5cdHZhciBtb2RpZmllckNvZGUgPSB7XG5cdCAgc3RvcDogJyRldmVudC5zdG9wUHJvcGFnYXRpb24oKTsnLFxuXHQgIHByZXZlbnQ6ICckZXZlbnQucHJldmVudERlZmF1bHQoKTsnLFxuXHQgIHNlbGY6ICdpZigkZXZlbnQudGFyZ2V0ICE9PSAkZXZlbnQuY3VycmVudFRhcmdldClyZXR1cm47Jyxcblx0ICBjdHJsOiAnaWYoISRldmVudC5jdHJsS2V5KXJldHVybjsnLFxuXHQgIHNoaWZ0OiAnaWYoISRldmVudC5zaGlmdEtleSlyZXR1cm47Jyxcblx0ICBhbHQ6ICdpZighJGV2ZW50LmFsdEtleSlyZXR1cm47Jyxcblx0ICBtZXRhOiAnaWYoISRldmVudC5tZXRhS2V5KXJldHVybjsnXG5cdH07XG5cdFxuXHRmdW5jdGlvbiBnZW5IYW5kbGVycyAoZXZlbnRzLCBuYXRpdmUpIHtcblx0ICB2YXIgcmVzID0gbmF0aXZlID8gJ25hdGl2ZU9uOnsnIDogJ29uOnsnO1xuXHQgIGZvciAodmFyIG5hbWUgaW4gZXZlbnRzKSB7XG5cdCAgICByZXMgKz0gXCJcXFwiXCIgKyBuYW1lICsgXCJcXFwiOlwiICsgKGdlbkhhbmRsZXIobmFtZSwgZXZlbnRzW25hbWVdKSkgKyBcIixcIjtcblx0ICB9XG5cdCAgcmV0dXJuIHJlcy5zbGljZSgwLCAtMSkgKyAnfSdcblx0fVxuXHRcblx0ZnVuY3Rpb24gZ2VuSGFuZGxlciAoXG5cdCAgbmFtZSxcblx0ICBoYW5kbGVyXG5cdCkge1xuXHQgIGlmICghaGFuZGxlcikge1xuXHQgICAgcmV0dXJuICdmdW5jdGlvbigpe30nXG5cdCAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGhhbmRsZXIpKSB7XG5cdCAgICByZXR1cm4gKFwiW1wiICsgKGhhbmRsZXIubWFwKGZ1bmN0aW9uIChoYW5kbGVyKSB7IHJldHVybiBnZW5IYW5kbGVyKG5hbWUsIGhhbmRsZXIpOyB9KS5qb2luKCcsJykpICsgXCJdXCIpXG5cdCAgfSBlbHNlIGlmICghaGFuZGxlci5tb2RpZmllcnMpIHtcblx0ICAgIHJldHVybiBmbkV4cFJFLnRlc3QoaGFuZGxlci52YWx1ZSkgfHwgc2ltcGxlUGF0aFJFLnRlc3QoaGFuZGxlci52YWx1ZSlcblx0ICAgICAgPyBoYW5kbGVyLnZhbHVlXG5cdCAgICAgIDogKFwiZnVuY3Rpb24oJGV2ZW50KXtcIiArIChoYW5kbGVyLnZhbHVlKSArIFwifVwiKVxuXHQgIH0gZWxzZSB7XG5cdCAgICB2YXIgY29kZSA9ICcnO1xuXHQgICAgdmFyIGtleXMgPSBbXTtcblx0ICAgIGZvciAodmFyIGtleSBpbiBoYW5kbGVyLm1vZGlmaWVycykge1xuXHQgICAgICBpZiAobW9kaWZpZXJDb2RlW2tleV0pIHtcblx0ICAgICAgICBjb2RlICs9IG1vZGlmaWVyQ29kZVtrZXldO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIGtleXMucHVzaChrZXkpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICBpZiAoa2V5cy5sZW5ndGgpIHtcblx0ICAgICAgY29kZSA9IGdlbktleUZpbHRlcihrZXlzKSArIGNvZGU7XG5cdCAgICB9XG5cdCAgICB2YXIgaGFuZGxlckNvZGUgPSBzaW1wbGVQYXRoUkUudGVzdChoYW5kbGVyLnZhbHVlKVxuXHQgICAgICA/IGhhbmRsZXIudmFsdWUgKyAnKCRldmVudCknXG5cdCAgICAgIDogaGFuZGxlci52YWx1ZTtcblx0ICAgIHJldHVybiAnZnVuY3Rpb24oJGV2ZW50KXsnICsgY29kZSArIGhhbmRsZXJDb2RlICsgJ30nXG5cdCAgfVxuXHR9XG5cdFxuXHRmdW5jdGlvbiBnZW5LZXlGaWx0ZXIgKGtleXMpIHtcblx0ICByZXR1cm4gKFwiaWYoXCIgKyAoa2V5cy5tYXAoZ2VuRmlsdGVyQ29kZSkuam9pbignJiYnKSkgKyBcIilyZXR1cm47XCIpXG5cdH1cblx0XG5cdGZ1bmN0aW9uIGdlbkZpbHRlckNvZGUgKGtleSkge1xuXHQgIHZhciBrZXlWYWwgPSBwYXJzZUludChrZXksIDEwKTtcblx0ICBpZiAoa2V5VmFsKSB7XG5cdCAgICByZXR1cm4gKFwiJGV2ZW50LmtleUNvZGUhPT1cIiArIGtleVZhbClcblx0ICB9XG5cdCAgdmFyIGFsaWFzID0ga2V5Q29kZXNba2V5XTtcblx0ICByZXR1cm4gKFwiX2soJGV2ZW50LmtleUNvZGUsXCIgKyAoSlNPTi5zdHJpbmdpZnkoa2V5KSkgKyAoYWxpYXMgPyAnLCcgKyBKU09OLnN0cmluZ2lmeShhbGlhcykgOiAnJykgKyBcIilcIilcblx0fVxuXHRcblx0LyogICovXG5cdFxuXHRmdW5jdGlvbiBiaW5kJDIgKGVsLCBkaXIpIHtcblx0ICBlbC53cmFwRGF0YSA9IGZ1bmN0aW9uIChjb2RlKSB7XG5cdCAgICByZXR1cm4gKFwiX2IoXCIgKyBjb2RlICsgXCIsJ1wiICsgKGVsLnRhZykgKyBcIicsXCIgKyAoZGlyLnZhbHVlKSArIChkaXIubW9kaWZpZXJzICYmIGRpci5tb2RpZmllcnMucHJvcCA/ICcsdHJ1ZScgOiAnJykgKyBcIilcIilcblx0ICB9O1xuXHR9XG5cdFxuXHQvKiAgKi9cblx0XG5cdHZhciBiYXNlRGlyZWN0aXZlcyA9IHtcblx0ICBiaW5kOiBiaW5kJDIsXG5cdCAgY2xvYWs6IG5vb3Bcblx0fTtcblx0XG5cdC8qICAqL1xuXHRcblx0Ly8gY29uZmlndXJhYmxlIHN0YXRlXG5cdHZhciB3YXJuJDI7XG5cdHZhciB0cmFuc2Zvcm1zJDE7XG5cdHZhciBkYXRhR2VuRm5zO1xuXHR2YXIgcGxhdGZvcm1EaXJlY3RpdmVzJDE7XG5cdHZhciBpc1BsYXRmb3JtUmVzZXJ2ZWRUYWckMTtcblx0dmFyIHN0YXRpY1JlbmRlckZucztcblx0dmFyIG9uY2VDb3VudDtcblx0dmFyIGN1cnJlbnRPcHRpb25zO1xuXHRcblx0ZnVuY3Rpb24gZ2VuZXJhdGUgKFxuXHQgIGFzdCxcblx0ICBvcHRpb25zXG5cdCkge1xuXHQgIC8vIHNhdmUgcHJldmlvdXMgc3RhdGljUmVuZGVyRm5zIHNvIGdlbmVyYXRlIGNhbGxzIGNhbiBiZSBuZXN0ZWRcblx0ICB2YXIgcHJldlN0YXRpY1JlbmRlckZucyA9IHN0YXRpY1JlbmRlckZucztcblx0ICB2YXIgY3VycmVudFN0YXRpY1JlbmRlckZucyA9IHN0YXRpY1JlbmRlckZucyA9IFtdO1xuXHQgIHZhciBwcmV2T25jZUNvdW50ID0gb25jZUNvdW50O1xuXHQgIG9uY2VDb3VudCA9IDA7XG5cdCAgY3VycmVudE9wdGlvbnMgPSBvcHRpb25zO1xuXHQgIHdhcm4kMiA9IG9wdGlvbnMud2FybiB8fCBiYXNlV2Fybjtcblx0ICB0cmFuc2Zvcm1zJDEgPSBwbHVja01vZHVsZUZ1bmN0aW9uKG9wdGlvbnMubW9kdWxlcywgJ3RyYW5zZm9ybUNvZGUnKTtcblx0ICBkYXRhR2VuRm5zID0gcGx1Y2tNb2R1bGVGdW5jdGlvbihvcHRpb25zLm1vZHVsZXMsICdnZW5EYXRhJyk7XG5cdCAgcGxhdGZvcm1EaXJlY3RpdmVzJDEgPSBvcHRpb25zLmRpcmVjdGl2ZXMgfHwge307XG5cdCAgaXNQbGF0Zm9ybVJlc2VydmVkVGFnJDEgPSBvcHRpb25zLmlzUmVzZXJ2ZWRUYWcgfHwgbm87XG5cdCAgdmFyIGNvZGUgPSBhc3QgPyBnZW5FbGVtZW50KGFzdCkgOiAnX2MoXCJkaXZcIiknO1xuXHQgIHN0YXRpY1JlbmRlckZucyA9IHByZXZTdGF0aWNSZW5kZXJGbnM7XG5cdCAgb25jZUNvdW50ID0gcHJldk9uY2VDb3VudDtcblx0ICByZXR1cm4ge1xuXHQgICAgcmVuZGVyOiAoXCJ3aXRoKHRoaXMpe3JldHVybiBcIiArIGNvZGUgKyBcIn1cIiksXG5cdCAgICBzdGF0aWNSZW5kZXJGbnM6IGN1cnJlbnRTdGF0aWNSZW5kZXJGbnNcblx0ICB9XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGdlbkVsZW1lbnQgKGVsKSB7XG5cdCAgaWYgKGVsLnN0YXRpY1Jvb3QgJiYgIWVsLnN0YXRpY1Byb2Nlc3NlZCkge1xuXHQgICAgcmV0dXJuIGdlblN0YXRpYyhlbClcblx0ICB9IGVsc2UgaWYgKGVsLm9uY2UgJiYgIWVsLm9uY2VQcm9jZXNzZWQpIHtcblx0ICAgIHJldHVybiBnZW5PbmNlKGVsKVxuXHQgIH0gZWxzZSBpZiAoZWwuZm9yICYmICFlbC5mb3JQcm9jZXNzZWQpIHtcblx0ICAgIHJldHVybiBnZW5Gb3IoZWwpXG5cdCAgfSBlbHNlIGlmIChlbC5pZiAmJiAhZWwuaWZQcm9jZXNzZWQpIHtcblx0ICAgIHJldHVybiBnZW5JZihlbClcblx0ICB9IGVsc2UgaWYgKGVsLnRhZyA9PT0gJ3RlbXBsYXRlJyAmJiAhZWwuc2xvdFRhcmdldCkge1xuXHQgICAgcmV0dXJuIGdlbkNoaWxkcmVuKGVsKSB8fCAndm9pZCAwJ1xuXHQgIH0gZWxzZSBpZiAoZWwudGFnID09PSAnc2xvdCcpIHtcblx0ICAgIHJldHVybiBnZW5TbG90KGVsKVxuXHQgIH0gZWxzZSB7XG5cdCAgICAvLyBjb21wb25lbnQgb3IgZWxlbWVudFxuXHQgICAgdmFyIGNvZGU7XG5cdCAgICBpZiAoZWwuY29tcG9uZW50KSB7XG5cdCAgICAgIGNvZGUgPSBnZW5Db21wb25lbnQoZWwuY29tcG9uZW50LCBlbCk7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICB2YXIgZGF0YSA9IGVsLnBsYWluID8gdW5kZWZpbmVkIDogZ2VuRGF0YShlbCk7XG5cdFxuXHQgICAgICB2YXIgY2hpbGRyZW4gPSBlbC5pbmxpbmVUZW1wbGF0ZSA/IG51bGwgOiBnZW5DaGlsZHJlbihlbCwgdHJ1ZSk7XG5cdCAgICAgIGNvZGUgPSBcIl9jKCdcIiArIChlbC50YWcpICsgXCInXCIgKyAoZGF0YSA/IChcIixcIiArIGRhdGEpIDogJycpICsgKGNoaWxkcmVuID8gKFwiLFwiICsgY2hpbGRyZW4pIDogJycpICsgXCIpXCI7XG5cdCAgICB9XG5cdCAgICAvLyBtb2R1bGUgdHJhbnNmb3Jtc1xuXHQgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0cmFuc2Zvcm1zJDEubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgY29kZSA9IHRyYW5zZm9ybXMkMVtpXShlbCwgY29kZSk7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gY29kZVxuXHQgIH1cblx0fVxuXHRcblx0Ly8gaG9pc3Qgc3RhdGljIHN1Yi10cmVlcyBvdXRcblx0ZnVuY3Rpb24gZ2VuU3RhdGljIChlbCkge1xuXHQgIGVsLnN0YXRpY1Byb2Nlc3NlZCA9IHRydWU7XG5cdCAgc3RhdGljUmVuZGVyRm5zLnB1c2goKFwid2l0aCh0aGlzKXtyZXR1cm4gXCIgKyAoZ2VuRWxlbWVudChlbCkpICsgXCJ9XCIpKTtcblx0ICByZXR1cm4gKFwiX20oXCIgKyAoc3RhdGljUmVuZGVyRm5zLmxlbmd0aCAtIDEpICsgKGVsLnN0YXRpY0luRm9yID8gJyx0cnVlJyA6ICcnKSArIFwiKVwiKVxuXHR9XG5cdFxuXHQvLyB2LW9uY2Vcblx0ZnVuY3Rpb24gZ2VuT25jZSAoZWwpIHtcblx0ICBlbC5vbmNlUHJvY2Vzc2VkID0gdHJ1ZTtcblx0ICBpZiAoZWwuaWYgJiYgIWVsLmlmUHJvY2Vzc2VkKSB7XG5cdCAgICByZXR1cm4gZ2VuSWYoZWwpXG5cdCAgfSBlbHNlIGlmIChlbC5zdGF0aWNJbkZvcikge1xuXHQgICAgdmFyIGtleSA9ICcnO1xuXHQgICAgdmFyIHBhcmVudCA9IGVsLnBhcmVudDtcblx0ICAgIHdoaWxlIChwYXJlbnQpIHtcblx0ICAgICAgaWYgKHBhcmVudC5mb3IpIHtcblx0ICAgICAgICBrZXkgPSBwYXJlbnQua2V5O1xuXHQgICAgICAgIGJyZWFrXG5cdCAgICAgIH1cblx0ICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcblx0ICAgIH1cblx0ICAgIGlmICgha2V5KSB7XG5cdCAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybiQyKFxuXHQgICAgICAgIFwidi1vbmNlIGNhbiBvbmx5IGJlIHVzZWQgaW5zaWRlIHYtZm9yIHRoYXQgaXMga2V5ZWQuIFwiXG5cdCAgICAgICk7XG5cdCAgICAgIHJldHVybiBnZW5FbGVtZW50KGVsKVxuXHQgICAgfVxuXHQgICAgcmV0dXJuIChcIl9vKFwiICsgKGdlbkVsZW1lbnQoZWwpKSArIFwiLFwiICsgKG9uY2VDb3VudCsrKSArIChrZXkgPyAoXCIsXCIgKyBrZXkpIDogXCJcIikgKyBcIilcIilcblx0ICB9IGVsc2Uge1xuXHQgICAgcmV0dXJuIGdlblN0YXRpYyhlbClcblx0ICB9XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGdlbklmIChlbCkge1xuXHQgIGVsLmlmUHJvY2Vzc2VkID0gdHJ1ZTsgLy8gYXZvaWQgcmVjdXJzaW9uXG5cdCAgcmV0dXJuIGdlbklmQ29uZGl0aW9ucyhlbC5pZkNvbmRpdGlvbnMuc2xpY2UoKSlcblx0fVxuXHRcblx0ZnVuY3Rpb24gZ2VuSWZDb25kaXRpb25zIChjb25kaXRpb25zKSB7XG5cdCAgaWYgKCFjb25kaXRpb25zLmxlbmd0aCkge1xuXHQgICAgcmV0dXJuICdfZSgpJ1xuXHQgIH1cblx0XG5cdCAgdmFyIGNvbmRpdGlvbiA9IGNvbmRpdGlvbnMuc2hpZnQoKTtcblx0ICBpZiAoY29uZGl0aW9uLmV4cCkge1xuXHQgICAgcmV0dXJuIChcIihcIiArIChjb25kaXRpb24uZXhwKSArIFwiKT9cIiArIChnZW5UZXJuYXJ5RXhwKGNvbmRpdGlvbi5ibG9jaykpICsgXCI6XCIgKyAoZ2VuSWZDb25kaXRpb25zKGNvbmRpdGlvbnMpKSlcblx0ICB9IGVsc2Uge1xuXHQgICAgcmV0dXJuIChcIlwiICsgKGdlblRlcm5hcnlFeHAoY29uZGl0aW9uLmJsb2NrKSkpXG5cdCAgfVxuXHRcblx0ICAvLyB2LWlmIHdpdGggdi1vbmNlIHNob3VsZCBnZW5lcmF0ZSBjb2RlIGxpa2UgKGEpP19tKDApOl9tKDEpXG5cdCAgZnVuY3Rpb24gZ2VuVGVybmFyeUV4cCAoZWwpIHtcblx0ICAgIHJldHVybiBlbC5vbmNlID8gZ2VuT25jZShlbCkgOiBnZW5FbGVtZW50KGVsKVxuXHQgIH1cblx0fVxuXHRcblx0ZnVuY3Rpb24gZ2VuRm9yIChlbCkge1xuXHQgIHZhciBleHAgPSBlbC5mb3I7XG5cdCAgdmFyIGFsaWFzID0gZWwuYWxpYXM7XG5cdCAgdmFyIGl0ZXJhdG9yMSA9IGVsLml0ZXJhdG9yMSA/IChcIixcIiArIChlbC5pdGVyYXRvcjEpKSA6ICcnO1xuXHQgIHZhciBpdGVyYXRvcjIgPSBlbC5pdGVyYXRvcjIgPyAoXCIsXCIgKyAoZWwuaXRlcmF0b3IyKSkgOiAnJztcblx0ICBlbC5mb3JQcm9jZXNzZWQgPSB0cnVlOyAvLyBhdm9pZCByZWN1cnNpb25cblx0ICByZXR1cm4gXCJfbCgoXCIgKyBleHAgKyBcIiksXCIgK1xuXHQgICAgXCJmdW5jdGlvbihcIiArIGFsaWFzICsgaXRlcmF0b3IxICsgaXRlcmF0b3IyICsgXCIpe1wiICtcblx0ICAgICAgXCJyZXR1cm4gXCIgKyAoZ2VuRWxlbWVudChlbCkpICtcblx0ICAgICd9KSdcblx0fVxuXHRcblx0ZnVuY3Rpb24gZ2VuRGF0YSAoZWwpIHtcblx0ICB2YXIgZGF0YSA9ICd7Jztcblx0XG5cdCAgLy8gZGlyZWN0aXZlcyBmaXJzdC5cblx0ICAvLyBkaXJlY3RpdmVzIG1heSBtdXRhdGUgdGhlIGVsJ3Mgb3RoZXIgcHJvcGVydGllcyBiZWZvcmUgdGhleSBhcmUgZ2VuZXJhdGVkLlxuXHQgIHZhciBkaXJzID0gZ2VuRGlyZWN0aXZlcyhlbCk7XG5cdCAgaWYgKGRpcnMpIHsgZGF0YSArPSBkaXJzICsgJywnOyB9XG5cdFxuXHQgIC8vIGtleVxuXHQgIGlmIChlbC5rZXkpIHtcblx0ICAgIGRhdGEgKz0gXCJrZXk6XCIgKyAoZWwua2V5KSArIFwiLFwiO1xuXHQgIH1cblx0ICAvLyByZWZcblx0ICBpZiAoZWwucmVmKSB7XG5cdCAgICBkYXRhICs9IFwicmVmOlwiICsgKGVsLnJlZikgKyBcIixcIjtcblx0ICB9XG5cdCAgaWYgKGVsLnJlZkluRm9yKSB7XG5cdCAgICBkYXRhICs9IFwicmVmSW5Gb3I6dHJ1ZSxcIjtcblx0ICB9XG5cdCAgLy8gcHJlXG5cdCAgaWYgKGVsLnByZSkge1xuXHQgICAgZGF0YSArPSBcInByZTp0cnVlLFwiO1xuXHQgIH1cblx0ICAvLyByZWNvcmQgb3JpZ2luYWwgdGFnIG5hbWUgZm9yIGNvbXBvbmVudHMgdXNpbmcgXCJpc1wiIGF0dHJpYnV0ZVxuXHQgIGlmIChlbC5jb21wb25lbnQpIHtcblx0ICAgIGRhdGEgKz0gXCJ0YWc6XFxcIlwiICsgKGVsLnRhZykgKyBcIlxcXCIsXCI7XG5cdCAgfVxuXHQgIC8vIG1vZHVsZSBkYXRhIGdlbmVyYXRpb24gZnVuY3Rpb25zXG5cdCAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhR2VuRm5zLmxlbmd0aDsgaSsrKSB7XG5cdCAgICBkYXRhICs9IGRhdGFHZW5GbnNbaV0oZWwpO1xuXHQgIH1cblx0ICAvLyBhdHRyaWJ1dGVzXG5cdCAgaWYgKGVsLmF0dHJzKSB7XG5cdCAgICBkYXRhICs9IFwiYXR0cnM6e1wiICsgKGdlblByb3BzKGVsLmF0dHJzKSkgKyBcIn0sXCI7XG5cdCAgfVxuXHQgIC8vIERPTSBwcm9wc1xuXHQgIGlmIChlbC5wcm9wcykge1xuXHQgICAgZGF0YSArPSBcImRvbVByb3BzOntcIiArIChnZW5Qcm9wcyhlbC5wcm9wcykpICsgXCJ9LFwiO1xuXHQgIH1cblx0ICAvLyBldmVudCBoYW5kbGVyc1xuXHQgIGlmIChlbC5ldmVudHMpIHtcblx0ICAgIGRhdGEgKz0gKGdlbkhhbmRsZXJzKGVsLmV2ZW50cykpICsgXCIsXCI7XG5cdCAgfVxuXHQgIGlmIChlbC5uYXRpdmVFdmVudHMpIHtcblx0ICAgIGRhdGEgKz0gKGdlbkhhbmRsZXJzKGVsLm5hdGl2ZUV2ZW50cywgdHJ1ZSkpICsgXCIsXCI7XG5cdCAgfVxuXHQgIC8vIHNsb3QgdGFyZ2V0XG5cdCAgaWYgKGVsLnNsb3RUYXJnZXQpIHtcblx0ICAgIGRhdGEgKz0gXCJzbG90OlwiICsgKGVsLnNsb3RUYXJnZXQpICsgXCIsXCI7XG5cdCAgfVxuXHQgIC8vIHNjb3BlZCBzbG90c1xuXHQgIGlmIChlbC5zY29wZWRTbG90cykge1xuXHQgICAgZGF0YSArPSAoZ2VuU2NvcGVkU2xvdHMoZWwuc2NvcGVkU2xvdHMpKSArIFwiLFwiO1xuXHQgIH1cblx0ICAvLyBpbmxpbmUtdGVtcGxhdGVcblx0ICBpZiAoZWwuaW5saW5lVGVtcGxhdGUpIHtcblx0ICAgIHZhciBpbmxpbmVUZW1wbGF0ZSA9IGdlbklubGluZVRlbXBsYXRlKGVsKTtcblx0ICAgIGlmIChpbmxpbmVUZW1wbGF0ZSkge1xuXHQgICAgICBkYXRhICs9IGlubGluZVRlbXBsYXRlICsgXCIsXCI7XG5cdCAgICB9XG5cdCAgfVxuXHQgIGRhdGEgPSBkYXRhLnJlcGxhY2UoLywkLywgJycpICsgJ30nO1xuXHQgIC8vIHYtYmluZCBkYXRhIHdyYXBcblx0ICBpZiAoZWwud3JhcERhdGEpIHtcblx0ICAgIGRhdGEgPSBlbC53cmFwRGF0YShkYXRhKTtcblx0ICB9XG5cdCAgcmV0dXJuIGRhdGFcblx0fVxuXHRcblx0ZnVuY3Rpb24gZ2VuRGlyZWN0aXZlcyAoZWwpIHtcblx0ICB2YXIgZGlycyA9IGVsLmRpcmVjdGl2ZXM7XG5cdCAgaWYgKCFkaXJzKSB7IHJldHVybiB9XG5cdCAgdmFyIHJlcyA9ICdkaXJlY3RpdmVzOlsnO1xuXHQgIHZhciBoYXNSdW50aW1lID0gZmFsc2U7XG5cdCAgdmFyIGksIGwsIGRpciwgbmVlZFJ1bnRpbWU7XG5cdCAgZm9yIChpID0gMCwgbCA9IGRpcnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG5cdCAgICBkaXIgPSBkaXJzW2ldO1xuXHQgICAgbmVlZFJ1bnRpbWUgPSB0cnVlO1xuXHQgICAgdmFyIGdlbiA9IHBsYXRmb3JtRGlyZWN0aXZlcyQxW2Rpci5uYW1lXSB8fCBiYXNlRGlyZWN0aXZlc1tkaXIubmFtZV07XG5cdCAgICBpZiAoZ2VuKSB7XG5cdCAgICAgIC8vIGNvbXBpbGUtdGltZSBkaXJlY3RpdmUgdGhhdCBtYW5pcHVsYXRlcyBBU1QuXG5cdCAgICAgIC8vIHJldHVybnMgdHJ1ZSBpZiBpdCBhbHNvIG5lZWRzIGEgcnVudGltZSBjb3VudGVycGFydC5cblx0ICAgICAgbmVlZFJ1bnRpbWUgPSAhIWdlbihlbCwgZGlyLCB3YXJuJDIpO1xuXHQgICAgfVxuXHQgICAgaWYgKG5lZWRSdW50aW1lKSB7XG5cdCAgICAgIGhhc1J1bnRpbWUgPSB0cnVlO1xuXHQgICAgICByZXMgKz0gXCJ7bmFtZTpcXFwiXCIgKyAoZGlyLm5hbWUpICsgXCJcXFwiLHJhd05hbWU6XFxcIlwiICsgKGRpci5yYXdOYW1lKSArIFwiXFxcIlwiICsgKGRpci52YWx1ZSA/IChcIix2YWx1ZTooXCIgKyAoZGlyLnZhbHVlKSArIFwiKSxleHByZXNzaW9uOlwiICsgKEpTT04uc3RyaW5naWZ5KGRpci52YWx1ZSkpKSA6ICcnKSArIChkaXIuYXJnID8gKFwiLGFyZzpcXFwiXCIgKyAoZGlyLmFyZykgKyBcIlxcXCJcIikgOiAnJykgKyAoZGlyLm1vZGlmaWVycyA/IChcIixtb2RpZmllcnM6XCIgKyAoSlNPTi5zdHJpbmdpZnkoZGlyLm1vZGlmaWVycykpKSA6ICcnKSArIFwifSxcIjtcblx0ICAgIH1cblx0ICB9XG5cdCAgaWYgKGhhc1J1bnRpbWUpIHtcblx0ICAgIHJldHVybiByZXMuc2xpY2UoMCwgLTEpICsgJ10nXG5cdCAgfVxuXHR9XG5cdFxuXHRmdW5jdGlvbiBnZW5JbmxpbmVUZW1wbGF0ZSAoZWwpIHtcblx0ICB2YXIgYXN0ID0gZWwuY2hpbGRyZW5bMF07XG5cdCAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgKFxuXHQgICAgZWwuY2hpbGRyZW4ubGVuZ3RoID4gMSB8fCBhc3QudHlwZSAhPT0gMVxuXHQgICkpIHtcblx0ICAgIHdhcm4kMignSW5saW5lLXRlbXBsYXRlIGNvbXBvbmVudHMgbXVzdCBoYXZlIGV4YWN0bHkgb25lIGNoaWxkIGVsZW1lbnQuJyk7XG5cdCAgfVxuXHQgIGlmIChhc3QudHlwZSA9PT0gMSkge1xuXHQgICAgdmFyIGlubGluZVJlbmRlckZucyA9IGdlbmVyYXRlKGFzdCwgY3VycmVudE9wdGlvbnMpO1xuXHQgICAgcmV0dXJuIChcImlubGluZVRlbXBsYXRlOntyZW5kZXI6ZnVuY3Rpb24oKXtcIiArIChpbmxpbmVSZW5kZXJGbnMucmVuZGVyKSArIFwifSxzdGF0aWNSZW5kZXJGbnM6W1wiICsgKGlubGluZVJlbmRlckZucy5zdGF0aWNSZW5kZXJGbnMubWFwKGZ1bmN0aW9uIChjb2RlKSB7IHJldHVybiAoXCJmdW5jdGlvbigpe1wiICsgY29kZSArIFwifVwiKTsgfSkuam9pbignLCcpKSArIFwiXX1cIilcblx0ICB9XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGdlblNjb3BlZFNsb3RzIChzbG90cykge1xuXHQgIHJldHVybiAoXCJzY29wZWRTbG90czp7XCIgKyAoT2JqZWN0LmtleXMoc2xvdHMpLm1hcChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBnZW5TY29wZWRTbG90KGtleSwgc2xvdHNba2V5XSk7IH0pLmpvaW4oJywnKSkgKyBcIn1cIilcblx0fVxuXHRcblx0ZnVuY3Rpb24gZ2VuU2NvcGVkU2xvdCAoa2V5LCBlbCkge1xuXHQgIHJldHVybiBrZXkgKyBcIjpmdW5jdGlvbihcIiArIChTdHJpbmcoZWwuYXR0cnNNYXAuc2NvcGUpKSArIFwiKXtcIiArXG5cdCAgICBcInJldHVybiBcIiArIChlbC50YWcgPT09ICd0ZW1wbGF0ZSdcblx0ICAgICAgPyBnZW5DaGlsZHJlbihlbCkgfHwgJ3ZvaWQgMCdcblx0ICAgICAgOiBnZW5FbGVtZW50KGVsKSkgKyBcIn1cIlxuXHR9XG5cdFxuXHRmdW5jdGlvbiBnZW5DaGlsZHJlbiAoZWwsIGNoZWNrU2tpcCkge1xuXHQgIHZhciBjaGlsZHJlbiA9IGVsLmNoaWxkcmVuO1xuXHQgIGlmIChjaGlsZHJlbi5sZW5ndGgpIHtcblx0ICAgIHZhciBlbCQxID0gY2hpbGRyZW5bMF07XG5cdCAgICAvLyBvcHRpbWl6ZSBzaW5nbGUgdi1mb3Jcblx0ICAgIGlmIChjaGlsZHJlbi5sZW5ndGggPT09IDEgJiZcblx0ICAgICAgICBlbCQxLmZvciAmJlxuXHQgICAgICAgIGVsJDEudGFnICE9PSAndGVtcGxhdGUnICYmXG5cdCAgICAgICAgZWwkMS50YWcgIT09ICdzbG90Jykge1xuXHQgICAgICByZXR1cm4gZ2VuRWxlbWVudChlbCQxKVxuXHQgICAgfVxuXHQgICAgdmFyIG5vcm1hbGl6YXRpb25UeXBlID0gZ2V0Tm9ybWFsaXphdGlvblR5cGUoY2hpbGRyZW4pO1xuXHQgICAgcmV0dXJuIChcIltcIiArIChjaGlsZHJlbi5tYXAoZ2VuTm9kZSkuam9pbignLCcpKSArIFwiXVwiICsgKGNoZWNrU2tpcFxuXHQgICAgICAgID8gbm9ybWFsaXphdGlvblR5cGUgPyAoXCIsXCIgKyBub3JtYWxpemF0aW9uVHlwZSkgOiAnJ1xuXHQgICAgICAgIDogJycpKVxuXHQgIH1cblx0fVxuXHRcblx0Ly8gZGV0ZXJtaW5lIHRoZSBub3JtYWxpemF0aW9uIG5lZWRlZCBmb3IgdGhlIGNoaWxkcmVuIGFycmF5LlxuXHQvLyAwOiBubyBub3JtYWxpemF0aW9uIG5lZWRlZFxuXHQvLyAxOiBzaW1wbGUgbm9ybWFsaXphdGlvbiBuZWVkZWQgKHBvc3NpYmxlIDEtbGV2ZWwgZGVlcCBuZXN0ZWQgYXJyYXkpXG5cdC8vIDI6IGZ1bGwgbm9ybWFsaXphdGlvbiBuZWVkZWRcblx0ZnVuY3Rpb24gZ2V0Tm9ybWFsaXphdGlvblR5cGUgKGNoaWxkcmVuKSB7XG5cdCAgdmFyIHJlcyA9IDA7XG5cdCAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuXHQgICAgdmFyIGVsID0gY2hpbGRyZW5baV07XG5cdCAgICBpZiAoZWwudHlwZSAhPT0gMSkge1xuXHQgICAgICBjb250aW51ZVxuXHQgICAgfVxuXHQgICAgaWYgKG5lZWRzTm9ybWFsaXphdGlvbihlbCkgfHxcblx0ICAgICAgICAoZWwuaWZDb25kaXRpb25zICYmIGVsLmlmQ29uZGl0aW9ucy5zb21lKGZ1bmN0aW9uIChjKSB7IHJldHVybiBuZWVkc05vcm1hbGl6YXRpb24oYy5ibG9jayk7IH0pKSkge1xuXHQgICAgICByZXMgPSAyO1xuXHQgICAgICBicmVha1xuXHQgICAgfVxuXHQgICAgaWYgKG1heWJlQ29tcG9uZW50KGVsKSB8fFxuXHQgICAgICAgIChlbC5pZkNvbmRpdGlvbnMgJiYgZWwuaWZDb25kaXRpb25zLnNvbWUoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIG1heWJlQ29tcG9uZW50KGMuYmxvY2spOyB9KSkpIHtcblx0ICAgICAgcmVzID0gMTtcblx0ICAgIH1cblx0ICB9XG5cdCAgcmV0dXJuIHJlc1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBuZWVkc05vcm1hbGl6YXRpb24gKGVsKSB7XG5cdCAgcmV0dXJuIGVsLmZvciAhPT0gdW5kZWZpbmVkIHx8IGVsLnRhZyA9PT0gJ3RlbXBsYXRlJyB8fCBlbC50YWcgPT09ICdzbG90J1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBtYXliZUNvbXBvbmVudCAoZWwpIHtcblx0ICByZXR1cm4gIWlzUGxhdGZvcm1SZXNlcnZlZFRhZyQxKGVsLnRhZylcblx0fVxuXHRcblx0ZnVuY3Rpb24gZ2VuTm9kZSAobm9kZSkge1xuXHQgIGlmIChub2RlLnR5cGUgPT09IDEpIHtcblx0ICAgIHJldHVybiBnZW5FbGVtZW50KG5vZGUpXG5cdCAgfSBlbHNlIHtcblx0ICAgIHJldHVybiBnZW5UZXh0KG5vZGUpXG5cdCAgfVxuXHR9XG5cdFxuXHRmdW5jdGlvbiBnZW5UZXh0ICh0ZXh0KSB7XG5cdCAgcmV0dXJuIChcIl92KFwiICsgKHRleHQudHlwZSA9PT0gMlxuXHQgICAgPyB0ZXh0LmV4cHJlc3Npb24gLy8gbm8gbmVlZCBmb3IgKCkgYmVjYXVzZSBhbHJlYWR5IHdyYXBwZWQgaW4gX3MoKVxuXHQgICAgOiB0cmFuc2Zvcm1TcGVjaWFsTmV3bGluZXMoSlNPTi5zdHJpbmdpZnkodGV4dC50ZXh0KSkpICsgXCIpXCIpXG5cdH1cblx0XG5cdGZ1bmN0aW9uIGdlblNsb3QgKGVsKSB7XG5cdCAgdmFyIHNsb3ROYW1lID0gZWwuc2xvdE5hbWUgfHwgJ1wiZGVmYXVsdFwiJztcblx0ICB2YXIgY2hpbGRyZW4gPSBnZW5DaGlsZHJlbihlbCk7XG5cdCAgdmFyIHJlcyA9IFwiX3QoXCIgKyBzbG90TmFtZSArIChjaGlsZHJlbiA/IChcIixcIiArIGNoaWxkcmVuKSA6ICcnKTtcblx0ICB2YXIgYXR0cnMgPSBlbC5hdHRycyAmJiAoXCJ7XCIgKyAoZWwuYXR0cnMubWFwKGZ1bmN0aW9uIChhKSB7IHJldHVybiAoKGNhbWVsaXplKGEubmFtZSkpICsgXCI6XCIgKyAoYS52YWx1ZSkpOyB9KS5qb2luKCcsJykpICsgXCJ9XCIpO1xuXHQgIHZhciBiaW5kJCQxID0gZWwuYXR0cnNNYXBbJ3YtYmluZCddO1xuXHQgIGlmICgoYXR0cnMgfHwgYmluZCQkMSkgJiYgIWNoaWxkcmVuKSB7XG5cdCAgICByZXMgKz0gXCIsbnVsbFwiO1xuXHQgIH1cblx0ICBpZiAoYXR0cnMpIHtcblx0ICAgIHJlcyArPSBcIixcIiArIGF0dHJzO1xuXHQgIH1cblx0ICBpZiAoYmluZCQkMSkge1xuXHQgICAgcmVzICs9IChhdHRycyA/ICcnIDogJyxudWxsJykgKyBcIixcIiArIGJpbmQkJDE7XG5cdCAgfVxuXHQgIHJldHVybiByZXMgKyAnKSdcblx0fVxuXHRcblx0Ly8gY29tcG9uZW50TmFtZSBpcyBlbC5jb21wb25lbnQsIHRha2UgaXQgYXMgYXJndW1lbnQgdG8gc2h1biBmbG93J3MgcGVzc2ltaXN0aWMgcmVmaW5lbWVudFxuXHRmdW5jdGlvbiBnZW5Db21wb25lbnQgKGNvbXBvbmVudE5hbWUsIGVsKSB7XG5cdCAgdmFyIGNoaWxkcmVuID0gZWwuaW5saW5lVGVtcGxhdGUgPyBudWxsIDogZ2VuQ2hpbGRyZW4oZWwsIHRydWUpO1xuXHQgIHJldHVybiAoXCJfYyhcIiArIGNvbXBvbmVudE5hbWUgKyBcIixcIiArIChnZW5EYXRhKGVsKSkgKyAoY2hpbGRyZW4gPyAoXCIsXCIgKyBjaGlsZHJlbikgOiAnJykgKyBcIilcIilcblx0fVxuXHRcblx0ZnVuY3Rpb24gZ2VuUHJvcHMgKHByb3BzKSB7XG5cdCAgdmFyIHJlcyA9ICcnO1xuXHQgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcblx0ICAgIHZhciBwcm9wID0gcHJvcHNbaV07XG5cdCAgICByZXMgKz0gXCJcXFwiXCIgKyAocHJvcC5uYW1lKSArIFwiXFxcIjpcIiArICh0cmFuc2Zvcm1TcGVjaWFsTmV3bGluZXMocHJvcC52YWx1ZSkpICsgXCIsXCI7XG5cdCAgfVxuXHQgIHJldHVybiByZXMuc2xpY2UoMCwgLTEpXG5cdH1cblx0XG5cdC8vICMzODk1LCAjNDI2OFxuXHRmdW5jdGlvbiB0cmFuc2Zvcm1TcGVjaWFsTmV3bGluZXMgKHRleHQpIHtcblx0ICByZXR1cm4gdGV4dFxuXHQgICAgLnJlcGxhY2UoL1xcdTIwMjgvZywgJ1xcXFx1MjAyOCcpXG5cdCAgICAucmVwbGFjZSgvXFx1MjAyOS9nLCAnXFxcXHUyMDI5Jylcblx0fVxuXHRcblx0LyogICovXG5cdFxuXHQvKipcblx0ICogQ29tcGlsZSBhIHRlbXBsYXRlLlxuXHQgKi9cblx0ZnVuY3Rpb24gY29tcGlsZSQxIChcblx0ICB0ZW1wbGF0ZSxcblx0ICBvcHRpb25zXG5cdCkge1xuXHQgIHZhciBhc3QgPSBwYXJzZSh0ZW1wbGF0ZS50cmltKCksIG9wdGlvbnMpO1xuXHQgIG9wdGltaXplKGFzdCwgb3B0aW9ucyk7XG5cdCAgdmFyIGNvZGUgPSBnZW5lcmF0ZShhc3QsIG9wdGlvbnMpO1xuXHQgIHJldHVybiB7XG5cdCAgICBhc3Q6IGFzdCxcblx0ICAgIHJlbmRlcjogY29kZS5yZW5kZXIsXG5cdCAgICBzdGF0aWNSZW5kZXJGbnM6IGNvZGUuc3RhdGljUmVuZGVyRm5zXG5cdCAgfVxuXHR9XG5cdFxuXHQvKiAgKi9cblx0XG5cdC8vIG9wZXJhdG9ycyBsaWtlIHR5cGVvZiwgaW5zdGFuY2VvZiBhbmQgaW4gYXJlIGFsbG93ZWRcblx0dmFyIHByb2hpYml0ZWRLZXl3b3JkUkUgPSBuZXcgUmVnRXhwKCdcXFxcYicgKyAoXG5cdCAgJ2RvLGlmLGZvcixsZXQsbmV3LHRyeSx2YXIsY2FzZSxlbHNlLHdpdGgsYXdhaXQsYnJlYWssY2F0Y2gsY2xhc3MsY29uc3QsJyArXG5cdCAgJ3N1cGVyLHRocm93LHdoaWxlLHlpZWxkLGRlbGV0ZSxleHBvcnQsaW1wb3J0LHJldHVybixzd2l0Y2gsZGVmYXVsdCwnICtcblx0ICAnZXh0ZW5kcyxmaW5hbGx5LGNvbnRpbnVlLGRlYnVnZ2VyLGZ1bmN0aW9uLGFyZ3VtZW50cydcblx0KS5zcGxpdCgnLCcpLmpvaW4oJ1xcXFxifFxcXFxiJykgKyAnXFxcXGInKTtcblx0Ly8gY2hlY2sgdmFsaWQgaWRlbnRpZmllciBmb3Igdi1mb3Jcblx0dmFyIGlkZW50UkUgPSAvW0EtWmEtel8kXVtcXHckXSovO1xuXHQvLyBzdHJpcCBzdHJpbmdzIGluIGV4cHJlc3Npb25zXG5cdHZhciBzdHJpcFN0cmluZ1JFID0gLycoPzpbXidcXFxcXXxcXFxcLikqJ3xcIig/OlteXCJcXFxcXXxcXFxcLikqXCJ8YCg/OlteYFxcXFxdfFxcXFwuKSpcXCRcXHt8XFx9KD86W15gXFxcXF18XFxcXC4pKmB8YCg/OlteYFxcXFxdfFxcXFwuKSpgL2c7XG5cdFxuXHQvLyBkZXRlY3QgcHJvYmxlbWF0aWMgZXhwcmVzc2lvbnMgaW4gYSB0ZW1wbGF0ZVxuXHRmdW5jdGlvbiBkZXRlY3RFcnJvcnMgKGFzdCkge1xuXHQgIHZhciBlcnJvcnMgPSBbXTtcblx0ICBpZiAoYXN0KSB7XG5cdCAgICBjaGVja05vZGUoYXN0LCBlcnJvcnMpO1xuXHQgIH1cblx0ICByZXR1cm4gZXJyb3JzXG5cdH1cblx0XG5cdGZ1bmN0aW9uIGNoZWNrTm9kZSAobm9kZSwgZXJyb3JzKSB7XG5cdCAgaWYgKG5vZGUudHlwZSA9PT0gMSkge1xuXHQgICAgZm9yICh2YXIgbmFtZSBpbiBub2RlLmF0dHJzTWFwKSB7XG5cdCAgICAgIGlmIChkaXJSRS50ZXN0KG5hbWUpKSB7XG5cdCAgICAgICAgdmFyIHZhbHVlID0gbm9kZS5hdHRyc01hcFtuYW1lXTtcblx0ICAgICAgICBpZiAodmFsdWUpIHtcblx0ICAgICAgICAgIGlmIChuYW1lID09PSAndi1mb3InKSB7XG5cdCAgICAgICAgICAgIGNoZWNrRm9yKG5vZGUsIChcInYtZm9yPVxcXCJcIiArIHZhbHVlICsgXCJcXFwiXCIpLCBlcnJvcnMpO1xuXHQgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgY2hlY2tFeHByZXNzaW9uKHZhbHVlLCAobmFtZSArIFwiPVxcXCJcIiArIHZhbHVlICsgXCJcXFwiXCIpLCBlcnJvcnMpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgaWYgKG5vZGUuY2hpbGRyZW4pIHtcblx0ICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgY2hlY2tOb2RlKG5vZGUuY2hpbGRyZW5baV0sIGVycm9ycyk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9IGVsc2UgaWYgKG5vZGUudHlwZSA9PT0gMikge1xuXHQgICAgY2hlY2tFeHByZXNzaW9uKG5vZGUuZXhwcmVzc2lvbiwgbm9kZS50ZXh0LCBlcnJvcnMpO1xuXHQgIH1cblx0fVxuXHRcblx0ZnVuY3Rpb24gY2hlY2tGb3IgKG5vZGUsIHRleHQsIGVycm9ycykge1xuXHQgIGNoZWNrRXhwcmVzc2lvbihub2RlLmZvciB8fCAnJywgdGV4dCwgZXJyb3JzKTtcblx0ICBjaGVja0lkZW50aWZpZXIobm9kZS5hbGlhcywgJ3YtZm9yIGFsaWFzJywgdGV4dCwgZXJyb3JzKTtcblx0ICBjaGVja0lkZW50aWZpZXIobm9kZS5pdGVyYXRvcjEsICd2LWZvciBpdGVyYXRvcicsIHRleHQsIGVycm9ycyk7XG5cdCAgY2hlY2tJZGVudGlmaWVyKG5vZGUuaXRlcmF0b3IyLCAndi1mb3IgaXRlcmF0b3InLCB0ZXh0LCBlcnJvcnMpO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBjaGVja0lkZW50aWZpZXIgKGlkZW50LCB0eXBlLCB0ZXh0LCBlcnJvcnMpIHtcblx0ICBpZiAodHlwZW9mIGlkZW50ID09PSAnc3RyaW5nJyAmJiAhaWRlbnRSRS50ZXN0KGlkZW50KSkge1xuXHQgICAgZXJyb3JzLnB1c2goKFwiLSBpbnZhbGlkIFwiICsgdHlwZSArIFwiIFxcXCJcIiArIGlkZW50ICsgXCJcXFwiIGluIGV4cHJlc3Npb246IFwiICsgdGV4dCkpO1xuXHQgIH1cblx0fVxuXHRcblx0ZnVuY3Rpb24gY2hlY2tFeHByZXNzaW9uIChleHAsIHRleHQsIGVycm9ycykge1xuXHQgIHRyeSB7XG5cdCAgICBuZXcgRnVuY3Rpb24oKFwicmV0dXJuIFwiICsgZXhwKSk7XG5cdCAgfSBjYXRjaCAoZSkge1xuXHQgICAgdmFyIGtleXdvcmRNYXRjaCA9IGV4cC5yZXBsYWNlKHN0cmlwU3RyaW5nUkUsICcnKS5tYXRjaChwcm9oaWJpdGVkS2V5d29yZFJFKTtcblx0ICAgIGlmIChrZXl3b3JkTWF0Y2gpIHtcblx0ICAgICAgZXJyb3JzLnB1c2goXG5cdCAgICAgICAgXCItIGF2b2lkIHVzaW5nIEphdmFTY3JpcHQga2V5d29yZCBhcyBwcm9wZXJ0eSBuYW1lOiBcIiArXG5cdCAgICAgICAgXCJcXFwiXCIgKyAoa2V5d29yZE1hdGNoWzBdKSArIFwiXFxcIiBpbiBleHByZXNzaW9uIFwiICsgdGV4dFxuXHQgICAgICApO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgZXJyb3JzLnB1c2goKFwiLSBpbnZhbGlkIGV4cHJlc3Npb246IFwiICsgdGV4dCkpO1xuXHQgICAgfVxuXHQgIH1cblx0fVxuXHRcblx0LyogICovXG5cdFxuXHRmdW5jdGlvbiB0cmFuc2Zvcm1Ob2RlIChlbCwgb3B0aW9ucykge1xuXHQgIHZhciB3YXJuID0gb3B0aW9ucy53YXJuIHx8IGJhc2VXYXJuO1xuXHQgIHZhciBzdGF0aWNDbGFzcyA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICdjbGFzcycpO1xuXHQgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHN0YXRpY0NsYXNzKSB7XG5cdCAgICB2YXIgZXhwcmVzc2lvbiA9IHBhcnNlVGV4dChzdGF0aWNDbGFzcywgb3B0aW9ucy5kZWxpbWl0ZXJzKTtcblx0ICAgIGlmIChleHByZXNzaW9uKSB7XG5cdCAgICAgIHdhcm4oXG5cdCAgICAgICAgXCJjbGFzcz1cXFwiXCIgKyBzdGF0aWNDbGFzcyArIFwiXFxcIjogXCIgK1xuXHQgICAgICAgICdJbnRlcnBvbGF0aW9uIGluc2lkZSBhdHRyaWJ1dGVzIGhhcyBiZWVuIHJlbW92ZWQuICcgK1xuXHQgICAgICAgICdVc2Ugdi1iaW5kIG9yIHRoZSBjb2xvbiBzaG9ydGhhbmQgaW5zdGVhZC4gRm9yIGV4YW1wbGUsICcgK1xuXHQgICAgICAgICdpbnN0ZWFkIG9mIDxkaXYgY2xhc3M9XCJ7eyB2YWwgfX1cIj4sIHVzZSA8ZGl2IDpjbGFzcz1cInZhbFwiPi4nXG5cdCAgICAgICk7XG5cdCAgICB9XG5cdCAgfVxuXHQgIGlmIChzdGF0aWNDbGFzcykge1xuXHQgICAgZWwuc3RhdGljQ2xhc3MgPSBKU09OLnN0cmluZ2lmeShzdGF0aWNDbGFzcyk7XG5cdCAgfVxuXHQgIHZhciBjbGFzc0JpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ2NsYXNzJywgZmFsc2UgLyogZ2V0U3RhdGljICovKTtcblx0ICBpZiAoY2xhc3NCaW5kaW5nKSB7XG5cdCAgICBlbC5jbGFzc0JpbmRpbmcgPSBjbGFzc0JpbmRpbmc7XG5cdCAgfVxuXHR9XG5cdFxuXHRmdW5jdGlvbiBnZW5EYXRhJDEgKGVsKSB7XG5cdCAgdmFyIGRhdGEgPSAnJztcblx0ICBpZiAoZWwuc3RhdGljQ2xhc3MpIHtcblx0ICAgIGRhdGEgKz0gXCJzdGF0aWNDbGFzczpcIiArIChlbC5zdGF0aWNDbGFzcykgKyBcIixcIjtcblx0ICB9XG5cdCAgaWYgKGVsLmNsYXNzQmluZGluZykge1xuXHQgICAgZGF0YSArPSBcImNsYXNzOlwiICsgKGVsLmNsYXNzQmluZGluZykgKyBcIixcIjtcblx0ICB9XG5cdCAgcmV0dXJuIGRhdGFcblx0fVxuXHRcblx0dmFyIGtsYXNzJDEgPSB7XG5cdCAgc3RhdGljS2V5czogWydzdGF0aWNDbGFzcyddLFxuXHQgIHRyYW5zZm9ybU5vZGU6IHRyYW5zZm9ybU5vZGUsXG5cdCAgZ2VuRGF0YTogZ2VuRGF0YSQxXG5cdH07XG5cdFxuXHQvKiAgKi9cblx0XG5cdGZ1bmN0aW9uIHRyYW5zZm9ybU5vZGUkMSAoZWwsIG9wdGlvbnMpIHtcblx0ICB2YXIgd2FybiA9IG9wdGlvbnMud2FybiB8fCBiYXNlV2Fybjtcblx0ICB2YXIgc3RhdGljU3R5bGUgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAnc3R5bGUnKTtcblx0ICBpZiAoc3RhdGljU3R5bGUpIHtcblx0ICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuXHQgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcblx0ICAgICAgdmFyIGV4cHJlc3Npb24gPSBwYXJzZVRleHQoc3RhdGljU3R5bGUsIG9wdGlvbnMuZGVsaW1pdGVycyk7XG5cdCAgICAgIGlmIChleHByZXNzaW9uKSB7XG5cdCAgICAgICAgd2Fybihcblx0ICAgICAgICAgIFwic3R5bGU9XFxcIlwiICsgc3RhdGljU3R5bGUgKyBcIlxcXCI6IFwiICtcblx0ICAgICAgICAgICdJbnRlcnBvbGF0aW9uIGluc2lkZSBhdHRyaWJ1dGVzIGhhcyBiZWVuIHJlbW92ZWQuICcgK1xuXHQgICAgICAgICAgJ1VzZSB2LWJpbmQgb3IgdGhlIGNvbG9uIHNob3J0aGFuZCBpbnN0ZWFkLiBGb3IgZXhhbXBsZSwgJyArXG5cdCAgICAgICAgICAnaW5zdGVhZCBvZiA8ZGl2IHN0eWxlPVwie3sgdmFsIH19XCI+LCB1c2UgPGRpdiA6c3R5bGU9XCJ2YWxcIj4uJ1xuXHQgICAgICAgICk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICAgIGVsLnN0YXRpY1N0eWxlID0gSlNPTi5zdHJpbmdpZnkocGFyc2VTdHlsZVRleHQoc3RhdGljU3R5bGUpKTtcblx0ICB9XG5cdFxuXHQgIHZhciBzdHlsZUJpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ3N0eWxlJywgZmFsc2UgLyogZ2V0U3RhdGljICovKTtcblx0ICBpZiAoc3R5bGVCaW5kaW5nKSB7XG5cdCAgICBlbC5zdHlsZUJpbmRpbmcgPSBzdHlsZUJpbmRpbmc7XG5cdCAgfVxuXHR9XG5cdFxuXHRmdW5jdGlvbiBnZW5EYXRhJDIgKGVsKSB7XG5cdCAgdmFyIGRhdGEgPSAnJztcblx0ICBpZiAoZWwuc3RhdGljU3R5bGUpIHtcblx0ICAgIGRhdGEgKz0gXCJzdGF0aWNTdHlsZTpcIiArIChlbC5zdGF0aWNTdHlsZSkgKyBcIixcIjtcblx0ICB9XG5cdCAgaWYgKGVsLnN0eWxlQmluZGluZykge1xuXHQgICAgZGF0YSArPSBcInN0eWxlOihcIiArIChlbC5zdHlsZUJpbmRpbmcpICsgXCIpLFwiO1xuXHQgIH1cblx0ICByZXR1cm4gZGF0YVxuXHR9XG5cdFxuXHR2YXIgc3R5bGUkMSA9IHtcblx0ICBzdGF0aWNLZXlzOiBbJ3N0YXRpY1N0eWxlJ10sXG5cdCAgdHJhbnNmb3JtTm9kZTogdHJhbnNmb3JtTm9kZSQxLFxuXHQgIGdlbkRhdGE6IGdlbkRhdGEkMlxuXHR9O1xuXHRcblx0dmFyIG1vZHVsZXMkMSA9IFtcblx0ICBrbGFzcyQxLFxuXHQgIHN0eWxlJDFcblx0XTtcblx0XG5cdC8qICAqL1xuXHRcblx0dmFyIHdhcm4kMztcblx0XG5cdGZ1bmN0aW9uIG1vZGVsJDEgKFxuXHQgIGVsLFxuXHQgIGRpcixcblx0ICBfd2FyblxuXHQpIHtcblx0ICB3YXJuJDMgPSBfd2Fybjtcblx0ICB2YXIgdmFsdWUgPSBkaXIudmFsdWU7XG5cdCAgdmFyIG1vZGlmaWVycyA9IGRpci5tb2RpZmllcnM7XG5cdCAgdmFyIHRhZyA9IGVsLnRhZztcblx0ICB2YXIgdHlwZSA9IGVsLmF0dHJzTWFwLnR5cGU7XG5cdCAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcblx0ICAgIHZhciBkeW5hbWljVHlwZSA9IGVsLmF0dHJzTWFwWyd2LWJpbmQ6dHlwZSddIHx8IGVsLmF0dHJzTWFwWyc6dHlwZSddO1xuXHQgICAgaWYgKHRhZyA9PT0gJ2lucHV0JyAmJiBkeW5hbWljVHlwZSkge1xuXHQgICAgICB3YXJuJDMoXG5cdCAgICAgICAgXCI8aW5wdXQgOnR5cGU9XFxcIlwiICsgZHluYW1pY1R5cGUgKyBcIlxcXCIgdi1tb2RlbD1cXFwiXCIgKyB2YWx1ZSArIFwiXFxcIj46XFxuXCIgK1xuXHQgICAgICAgIFwidi1tb2RlbCBkb2VzIG5vdCBzdXBwb3J0IGR5bmFtaWMgaW5wdXQgdHlwZXMuIFVzZSB2LWlmIGJyYW5jaGVzIGluc3RlYWQuXCJcblx0ICAgICAgKTtcblx0ICAgIH1cblx0ICB9XG5cdCAgaWYgKHRhZyA9PT0gJ3NlbGVjdCcpIHtcblx0ICAgIGdlblNlbGVjdChlbCwgdmFsdWUsIG1vZGlmaWVycyk7XG5cdCAgfSBlbHNlIGlmICh0YWcgPT09ICdpbnB1dCcgJiYgdHlwZSA9PT0gJ2NoZWNrYm94Jykge1xuXHQgICAgZ2VuQ2hlY2tib3hNb2RlbChlbCwgdmFsdWUsIG1vZGlmaWVycyk7XG5cdCAgfSBlbHNlIGlmICh0YWcgPT09ICdpbnB1dCcgJiYgdHlwZSA9PT0gJ3JhZGlvJykge1xuXHQgICAgZ2VuUmFkaW9Nb2RlbChlbCwgdmFsdWUsIG1vZGlmaWVycyk7XG5cdCAgfSBlbHNlIHtcblx0ICAgIGdlbkRlZmF1bHRNb2RlbChlbCwgdmFsdWUsIG1vZGlmaWVycyk7XG5cdCAgfVxuXHQgIC8vIGVuc3VyZSBydW50aW1lIGRpcmVjdGl2ZSBtZXRhZGF0YVxuXHQgIHJldHVybiB0cnVlXG5cdH1cblx0XG5cdGZ1bmN0aW9uIGdlbkNoZWNrYm94TW9kZWwgKFxuXHQgIGVsLFxuXHQgIHZhbHVlLFxuXHQgIG1vZGlmaWVyc1xuXHQpIHtcblx0ICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuXHQgICAgZWwuYXR0cnNNYXAuY2hlY2tlZCAhPSBudWxsKSB7XG5cdCAgICB3YXJuJDMoXG5cdCAgICAgIFwiPFwiICsgKGVsLnRhZykgKyBcIiB2LW1vZGVsPVxcXCJcIiArIHZhbHVlICsgXCJcXFwiIGNoZWNrZWQ+OlxcblwiICtcblx0ICAgICAgXCJpbmxpbmUgY2hlY2tlZCBhdHRyaWJ1dGVzIHdpbGwgYmUgaWdub3JlZCB3aGVuIHVzaW5nIHYtbW9kZWwuIFwiICtcblx0ICAgICAgJ0RlY2xhcmUgaW5pdGlhbCB2YWx1ZXMgaW4gdGhlIGNvbXBvbmVudFxcJ3MgZGF0YSBvcHRpb24gaW5zdGVhZC4nXG5cdCAgICApO1xuXHQgIH1cblx0ICB2YXIgbnVtYmVyID0gbW9kaWZpZXJzICYmIG1vZGlmaWVycy5udW1iZXI7XG5cdCAgdmFyIHZhbHVlQmluZGluZyA9IGdldEJpbmRpbmdBdHRyKGVsLCAndmFsdWUnKSB8fCAnbnVsbCc7XG5cdCAgdmFyIHRydWVWYWx1ZUJpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ3RydWUtdmFsdWUnKSB8fCAndHJ1ZSc7XG5cdCAgdmFyIGZhbHNlVmFsdWVCaW5kaW5nID0gZ2V0QmluZGluZ0F0dHIoZWwsICdmYWxzZS12YWx1ZScpIHx8ICdmYWxzZSc7XG5cdCAgYWRkUHJvcChlbCwgJ2NoZWNrZWQnLFxuXHQgICAgXCJBcnJheS5pc0FycmF5KFwiICsgdmFsdWUgKyBcIilcIiArXG5cdCAgICAgIFwiP19pKFwiICsgdmFsdWUgKyBcIixcIiArIHZhbHVlQmluZGluZyArIFwiKT4tMVwiICsgKFxuXHQgICAgICAgIHRydWVWYWx1ZUJpbmRpbmcgPT09ICd0cnVlJ1xuXHQgICAgICAgICAgPyAoXCI6KFwiICsgdmFsdWUgKyBcIilcIilcblx0ICAgICAgICAgIDogKFwiOl9xKFwiICsgdmFsdWUgKyBcIixcIiArIHRydWVWYWx1ZUJpbmRpbmcgKyBcIilcIilcblx0ICAgICAgKVxuXHQgICk7XG5cdCAgYWRkSGFuZGxlcihlbCwgJ2NsaWNrJyxcblx0ICAgIFwidmFyICQkYT1cIiArIHZhbHVlICsgXCIsXCIgK1xuXHQgICAgICAgICckJGVsPSRldmVudC50YXJnZXQsJyArXG5cdCAgICAgICAgXCIkJGM9JCRlbC5jaGVja2VkPyhcIiArIHRydWVWYWx1ZUJpbmRpbmcgKyBcIik6KFwiICsgZmFsc2VWYWx1ZUJpbmRpbmcgKyBcIik7XCIgK1xuXHQgICAgJ2lmKEFycmF5LmlzQXJyYXkoJCRhKSl7JyArXG5cdCAgICAgIFwidmFyICQkdj1cIiArIChudW1iZXIgPyAnX24oJyArIHZhbHVlQmluZGluZyArICcpJyA6IHZhbHVlQmluZGluZykgKyBcIixcIiArXG5cdCAgICAgICAgICAnJCRpPV9pKCQkYSwkJHYpOycgK1xuXHQgICAgICBcImlmKCQkYyl7JCRpPDAmJihcIiArIHZhbHVlICsgXCI9JCRhLmNvbmNhdCgkJHYpKX1cIiArXG5cdCAgICAgIFwiZWxzZXskJGk+LTEmJihcIiArIHZhbHVlICsgXCI9JCRhLnNsaWNlKDAsJCRpKS5jb25jYXQoJCRhLnNsaWNlKCQkaSsxKSkpfVwiICtcblx0ICAgIFwifWVsc2V7XCIgKyB2YWx1ZSArIFwiPSQkY31cIixcblx0ICAgIG51bGwsIHRydWVcblx0ICApO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBnZW5SYWRpb01vZGVsIChcblx0ICAgIGVsLFxuXHQgICAgdmFsdWUsXG5cdCAgICBtb2RpZmllcnNcblx0KSB7XG5cdCAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcblx0ICAgIGVsLmF0dHJzTWFwLmNoZWNrZWQgIT0gbnVsbCkge1xuXHQgICAgd2FybiQzKFxuXHQgICAgICBcIjxcIiArIChlbC50YWcpICsgXCIgdi1tb2RlbD1cXFwiXCIgKyB2YWx1ZSArIFwiXFxcIiBjaGVja2VkPjpcXG5cIiArXG5cdCAgICAgIFwiaW5saW5lIGNoZWNrZWQgYXR0cmlidXRlcyB3aWxsIGJlIGlnbm9yZWQgd2hlbiB1c2luZyB2LW1vZGVsLiBcIiArXG5cdCAgICAgICdEZWNsYXJlIGluaXRpYWwgdmFsdWVzIGluIHRoZSBjb21wb25lbnRcXCdzIGRhdGEgb3B0aW9uIGluc3RlYWQuJ1xuXHQgICAgKTtcblx0ICB9XG5cdCAgdmFyIG51bWJlciA9IG1vZGlmaWVycyAmJiBtb2RpZmllcnMubnVtYmVyO1xuXHQgIHZhciB2YWx1ZUJpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ3ZhbHVlJykgfHwgJ251bGwnO1xuXHQgIHZhbHVlQmluZGluZyA9IG51bWJlciA/IChcIl9uKFwiICsgdmFsdWVCaW5kaW5nICsgXCIpXCIpIDogdmFsdWVCaW5kaW5nO1xuXHQgIGFkZFByb3AoZWwsICdjaGVja2VkJywgKFwiX3EoXCIgKyB2YWx1ZSArIFwiLFwiICsgdmFsdWVCaW5kaW5nICsgXCIpXCIpKTtcblx0ICBhZGRIYW5kbGVyKGVsLCAnY2xpY2snLCBnZW5Bc3NpZ25tZW50Q29kZSh2YWx1ZSwgdmFsdWVCaW5kaW5nKSwgbnVsbCwgdHJ1ZSk7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGdlbkRlZmF1bHRNb2RlbCAoXG5cdCAgZWwsXG5cdCAgdmFsdWUsXG5cdCAgbW9kaWZpZXJzXG5cdCkge1xuXHQgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG5cdCAgICBpZiAoZWwudGFnID09PSAnaW5wdXQnICYmIGVsLmF0dHJzTWFwLnZhbHVlKSB7XG5cdCAgICAgIHdhcm4kMyhcblx0ICAgICAgICBcIjxcIiArIChlbC50YWcpICsgXCIgdi1tb2RlbD1cXFwiXCIgKyB2YWx1ZSArIFwiXFxcIiB2YWx1ZT1cXFwiXCIgKyAoZWwuYXR0cnNNYXAudmFsdWUpICsgXCJcXFwiPjpcXG5cIiArXG5cdCAgICAgICAgJ2lubGluZSB2YWx1ZSBhdHRyaWJ1dGVzIHdpbGwgYmUgaWdub3JlZCB3aGVuIHVzaW5nIHYtbW9kZWwuICcgK1xuXHQgICAgICAgICdEZWNsYXJlIGluaXRpYWwgdmFsdWVzIGluIHRoZSBjb21wb25lbnRcXCdzIGRhdGEgb3B0aW9uIGluc3RlYWQuJ1xuXHQgICAgICApO1xuXHQgICAgfVxuXHQgICAgaWYgKGVsLnRhZyA9PT0gJ3RleHRhcmVhJyAmJiBlbC5jaGlsZHJlbi5sZW5ndGgpIHtcblx0ICAgICAgd2FybiQzKFxuXHQgICAgICAgIFwiPHRleHRhcmVhIHYtbW9kZWw9XFxcIlwiICsgdmFsdWUgKyBcIlxcXCI+OlxcblwiICtcblx0ICAgICAgICAnaW5saW5lIGNvbnRlbnQgaW5zaWRlIDx0ZXh0YXJlYT4gd2lsbCBiZSBpZ25vcmVkIHdoZW4gdXNpbmcgdi1tb2RlbC4gJyArXG5cdCAgICAgICAgJ0RlY2xhcmUgaW5pdGlhbCB2YWx1ZXMgaW4gdGhlIGNvbXBvbmVudFxcJ3MgZGF0YSBvcHRpb24gaW5zdGVhZC4nXG5cdCAgICAgICk7XG5cdCAgICB9XG5cdCAgfVxuXHRcblx0ICB2YXIgdHlwZSA9IGVsLmF0dHJzTWFwLnR5cGU7XG5cdCAgdmFyIHJlZiA9IG1vZGlmaWVycyB8fCB7fTtcblx0ICB2YXIgbGF6eSA9IHJlZi5sYXp5O1xuXHQgIHZhciBudW1iZXIgPSByZWYubnVtYmVyO1xuXHQgIHZhciB0cmltID0gcmVmLnRyaW07XG5cdCAgdmFyIGV2ZW50ID0gbGF6eSB8fCAoaXNJRSAmJiB0eXBlID09PSAncmFuZ2UnKSA/ICdjaGFuZ2UnIDogJ2lucHV0Jztcblx0ICB2YXIgbmVlZENvbXBvc2l0aW9uR3VhcmQgPSAhbGF6eSAmJiB0eXBlICE9PSAncmFuZ2UnO1xuXHQgIHZhciBpc05hdGl2ZSA9IGVsLnRhZyA9PT0gJ2lucHV0JyB8fCBlbC50YWcgPT09ICd0ZXh0YXJlYSc7XG5cdFxuXHQgIHZhciB2YWx1ZUV4cHJlc3Npb24gPSBpc05hdGl2ZVxuXHQgICAgPyAoXCIkZXZlbnQudGFyZ2V0LnZhbHVlXCIgKyAodHJpbSA/ICcudHJpbSgpJyA6ICcnKSlcblx0ICAgIDogdHJpbSA/IFwiKHR5cGVvZiAkZXZlbnQgPT09ICdzdHJpbmcnID8gJGV2ZW50LnRyaW0oKSA6ICRldmVudClcIiA6IFwiJGV2ZW50XCI7XG5cdCAgdmFsdWVFeHByZXNzaW9uID0gbnVtYmVyIHx8IHR5cGUgPT09ICdudW1iZXInXG5cdCAgICA/IChcIl9uKFwiICsgdmFsdWVFeHByZXNzaW9uICsgXCIpXCIpXG5cdCAgICA6IHZhbHVlRXhwcmVzc2lvbjtcblx0XG5cdCAgdmFyIGNvZGUgPSBnZW5Bc3NpZ25tZW50Q29kZSh2YWx1ZSwgdmFsdWVFeHByZXNzaW9uKTtcblx0ICBpZiAoaXNOYXRpdmUgJiYgbmVlZENvbXBvc2l0aW9uR3VhcmQpIHtcblx0ICAgIGNvZGUgPSBcImlmKCRldmVudC50YXJnZXQuY29tcG9zaW5nKXJldHVybjtcIiArIGNvZGU7XG5cdCAgfVxuXHRcblx0ICAvLyBpbnB1dHMgd2l0aCB0eXBlPVwiZmlsZVwiIGFyZSByZWFkIG9ubHkgYW5kIHNldHRpbmcgdGhlIGlucHV0J3Ncblx0ICAvLyB2YWx1ZSB3aWxsIHRocm93IGFuIGVycm9yLlxuXHQgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG5cdCAgICAgIHR5cGUgPT09ICdmaWxlJykge1xuXHQgICAgd2FybiQzKFxuXHQgICAgICBcIjxcIiArIChlbC50YWcpICsgXCIgdi1tb2RlbD1cXFwiXCIgKyB2YWx1ZSArIFwiXFxcIiB0eXBlPVxcXCJmaWxlXFxcIj46XFxuXCIgK1xuXHQgICAgICBcIkZpbGUgaW5wdXRzIGFyZSByZWFkIG9ubHkuIFVzZSBhIHYtb246Y2hhbmdlIGxpc3RlbmVyIGluc3RlYWQuXCJcblx0ICAgICk7XG5cdCAgfVxuXHRcblx0ICBhZGRQcm9wKGVsLCAndmFsdWUnLCBpc05hdGl2ZSA/IChcIl9zKFwiICsgdmFsdWUgKyBcIilcIikgOiAoXCIoXCIgKyB2YWx1ZSArIFwiKVwiKSk7XG5cdCAgYWRkSGFuZGxlcihlbCwgZXZlbnQsIGNvZGUsIG51bGwsIHRydWUpO1xuXHQgIGlmICh0cmltIHx8IG51bWJlciB8fCB0eXBlID09PSAnbnVtYmVyJykge1xuXHQgICAgYWRkSGFuZGxlcihlbCwgJ2JsdXInLCAnJGZvcmNlVXBkYXRlKCknKTtcblx0ICB9XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGdlblNlbGVjdCAoXG5cdCAgICBlbCxcblx0ICAgIHZhbHVlLFxuXHQgICAgbW9kaWZpZXJzXG5cdCkge1xuXHQgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG5cdCAgICBlbC5jaGlsZHJlbi5zb21lKGNoZWNrT3B0aW9uV2FybmluZyk7XG5cdCAgfVxuXHRcblx0ICB2YXIgbnVtYmVyID0gbW9kaWZpZXJzICYmIG1vZGlmaWVycy5udW1iZXI7XG5cdCAgdmFyIGFzc2lnbm1lbnQgPSBcIkFycmF5LnByb3RvdHlwZS5maWx0ZXJcIiArXG5cdCAgICBcIi5jYWxsKCRldmVudC50YXJnZXQub3B0aW9ucyxmdW5jdGlvbihvKXtyZXR1cm4gby5zZWxlY3RlZH0pXCIgK1xuXHQgICAgXCIubWFwKGZ1bmN0aW9uKG8pe3ZhciB2YWwgPSBcXFwiX3ZhbHVlXFxcIiBpbiBvID8gby5fdmFsdWUgOiBvLnZhbHVlO1wiICtcblx0ICAgIFwicmV0dXJuIFwiICsgKG51bWJlciA/ICdfbih2YWwpJyA6ICd2YWwnKSArIFwifSlcIiArXG5cdCAgICAoZWwuYXR0cnNNYXAubXVsdGlwbGUgPT0gbnVsbCA/ICdbMF0nIDogJycpO1xuXHRcblx0ICB2YXIgY29kZSA9IGdlbkFzc2lnbm1lbnRDb2RlKHZhbHVlLCBhc3NpZ25tZW50KTtcblx0ICBhZGRIYW5kbGVyKGVsLCAnY2hhbmdlJywgY29kZSwgbnVsbCwgdHJ1ZSk7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGNoZWNrT3B0aW9uV2FybmluZyAob3B0aW9uKSB7XG5cdCAgaWYgKG9wdGlvbi50eXBlID09PSAxICYmXG5cdCAgICBvcHRpb24udGFnID09PSAnb3B0aW9uJyAmJlxuXHQgICAgb3B0aW9uLmF0dHJzTWFwLnNlbGVjdGVkICE9IG51bGwpIHtcblx0ICAgIHdhcm4kMyhcblx0ICAgICAgXCI8c2VsZWN0IHYtbW9kZWw9XFxcIlwiICsgKG9wdGlvbi5wYXJlbnQuYXR0cnNNYXBbJ3YtbW9kZWwnXSkgKyBcIlxcXCI+OlxcblwiICtcblx0ICAgICAgJ2lubGluZSBzZWxlY3RlZCBhdHRyaWJ1dGVzIG9uIDxvcHRpb24+IHdpbGwgYmUgaWdub3JlZCB3aGVuIHVzaW5nIHYtbW9kZWwuICcgK1xuXHQgICAgICAnRGVjbGFyZSBpbml0aWFsIHZhbHVlcyBpbiB0aGUgY29tcG9uZW50XFwncyBkYXRhIG9wdGlvbiBpbnN0ZWFkLidcblx0ICAgICk7XG5cdCAgICByZXR1cm4gdHJ1ZVxuXHQgIH1cblx0ICByZXR1cm4gZmFsc2Vcblx0fVxuXHRcblx0ZnVuY3Rpb24gZ2VuQXNzaWdubWVudENvZGUgKHZhbHVlLCBhc3NpZ25tZW50KSB7XG5cdCAgdmFyIG1vZGVsUnMgPSBwYXJzZU1vZGVsKHZhbHVlKTtcblx0ICBpZiAobW9kZWxScy5pZHggPT09IG51bGwpIHtcblx0ICAgIHJldHVybiAodmFsdWUgKyBcIj1cIiArIGFzc2lnbm1lbnQpXG5cdCAgfSBlbHNlIHtcblx0ICAgIHJldHVybiBcInZhciAkJGV4cCA9IFwiICsgKG1vZGVsUnMuZXhwKSArIFwiLCAkJGlkeCA9IFwiICsgKG1vZGVsUnMuaWR4KSArIFwiO1wiICtcblx0ICAgICAgXCJpZiAoIUFycmF5LmlzQXJyYXkoJCRleHApKXtcIiArXG5cdCAgICAgICAgdmFsdWUgKyBcIj1cIiArIGFzc2lnbm1lbnQgKyBcIn1cIiArXG5cdCAgICAgIFwiZWxzZXskJGV4cC5zcGxpY2UoJCRpZHgsIDEsIFwiICsgYXNzaWdubWVudCArIFwiKX1cIlxuXHQgIH1cblx0fVxuXHRcblx0LyogICovXG5cdFxuXHRmdW5jdGlvbiB0ZXh0IChlbCwgZGlyKSB7XG5cdCAgaWYgKGRpci52YWx1ZSkge1xuXHQgICAgYWRkUHJvcChlbCwgJ3RleHRDb250ZW50JywgKFwiX3MoXCIgKyAoZGlyLnZhbHVlKSArIFwiKVwiKSk7XG5cdCAgfVxuXHR9XG5cdFxuXHQvKiAgKi9cblx0XG5cdGZ1bmN0aW9uIGh0bWwgKGVsLCBkaXIpIHtcblx0ICBpZiAoZGlyLnZhbHVlKSB7XG5cdCAgICBhZGRQcm9wKGVsLCAnaW5uZXJIVE1MJywgKFwiX3MoXCIgKyAoZGlyLnZhbHVlKSArIFwiKVwiKSk7XG5cdCAgfVxuXHR9XG5cdFxuXHR2YXIgZGlyZWN0aXZlcyQxID0ge1xuXHQgIG1vZGVsOiBtb2RlbCQxLFxuXHQgIHRleHQ6IHRleHQsXG5cdCAgaHRtbDogaHRtbFxuXHR9O1xuXHRcblx0LyogICovXG5cdFxuXHR2YXIgY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXHRcblx0dmFyIGJhc2VPcHRpb25zID0ge1xuXHQgIGV4cGVjdEhUTUw6IHRydWUsXG5cdCAgbW9kdWxlczogbW9kdWxlcyQxLFxuXHQgIHN0YXRpY0tleXM6IGdlblN0YXRpY0tleXMobW9kdWxlcyQxKSxcblx0ICBkaXJlY3RpdmVzOiBkaXJlY3RpdmVzJDEsXG5cdCAgaXNSZXNlcnZlZFRhZzogaXNSZXNlcnZlZFRhZyxcblx0ICBpc1VuYXJ5VGFnOiBpc1VuYXJ5VGFnLFxuXHQgIG11c3RVc2VQcm9wOiBtdXN0VXNlUHJvcCxcblx0ICBnZXRUYWdOYW1lc3BhY2U6IGdldFRhZ05hbWVzcGFjZSxcblx0ICBpc1ByZVRhZzogaXNQcmVUYWdcblx0fTtcblx0XG5cdGZ1bmN0aW9uIGNvbXBpbGUkJDEgKFxuXHQgIHRlbXBsYXRlLFxuXHQgIG9wdGlvbnNcblx0KSB7XG5cdCAgb3B0aW9ucyA9IG9wdGlvbnNcblx0ICAgID8gZXh0ZW5kKGV4dGVuZCh7fSwgYmFzZU9wdGlvbnMpLCBvcHRpb25zKVxuXHQgICAgOiBiYXNlT3B0aW9ucztcblx0ICByZXR1cm4gY29tcGlsZSQxKHRlbXBsYXRlLCBvcHRpb25zKVxuXHR9XG5cdFxuXHRmdW5jdGlvbiBjb21waWxlVG9GdW5jdGlvbnMgKFxuXHQgIHRlbXBsYXRlLFxuXHQgIG9wdGlvbnMsXG5cdCAgdm1cblx0KSB7XG5cdCAgdmFyIF93YXJuID0gKG9wdGlvbnMgJiYgb3B0aW9ucy53YXJuKSB8fCB3YXJuO1xuXHQgIC8vIGRldGVjdCBwb3NzaWJsZSBDU1AgcmVzdHJpY3Rpb25cblx0ICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cblx0ICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuXHQgICAgdHJ5IHtcblx0ICAgICAgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gMScpO1xuXHQgICAgfSBjYXRjaCAoZSkge1xuXHQgICAgICBpZiAoZS50b1N0cmluZygpLm1hdGNoKC91bnNhZmUtZXZhbHxDU1AvKSkge1xuXHQgICAgICAgIF93YXJuKFxuXHQgICAgICAgICAgJ0l0IHNlZW1zIHlvdSBhcmUgdXNpbmcgdGhlIHN0YW5kYWxvbmUgYnVpbGQgb2YgVnVlLmpzIGluIGFuICcgK1xuXHQgICAgICAgICAgJ2Vudmlyb25tZW50IHdpdGggQ29udGVudCBTZWN1cml0eSBQb2xpY3kgdGhhdCBwcm9oaWJpdHMgdW5zYWZlLWV2YWwuICcgK1xuXHQgICAgICAgICAgJ1RoZSB0ZW1wbGF0ZSBjb21waWxlciBjYW5ub3Qgd29yayBpbiB0aGlzIGVudmlyb25tZW50LiBDb25zaWRlciAnICtcblx0ICAgICAgICAgICdyZWxheGluZyB0aGUgcG9saWN5IHRvIGFsbG93IHVuc2FmZS1ldmFsIG9yIHByZS1jb21waWxpbmcgeW91ciAnICtcblx0ICAgICAgICAgICd0ZW1wbGF0ZXMgaW50byByZW5kZXIgZnVuY3Rpb25zLidcblx0ICAgICAgICApO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfVxuXHQgIHZhciBrZXkgPSBvcHRpb25zICYmIG9wdGlvbnMuZGVsaW1pdGVyc1xuXHQgICAgPyBTdHJpbmcob3B0aW9ucy5kZWxpbWl0ZXJzKSArIHRlbXBsYXRlXG5cdCAgICA6IHRlbXBsYXRlO1xuXHQgIGlmIChjYWNoZVtrZXldKSB7XG5cdCAgICByZXR1cm4gY2FjaGVba2V5XVxuXHQgIH1cblx0ICB2YXIgcmVzID0ge307XG5cdCAgdmFyIGNvbXBpbGVkID0gY29tcGlsZSQkMSh0ZW1wbGF0ZSwgb3B0aW9ucyk7XG5cdCAgcmVzLnJlbmRlciA9IG1ha2VGdW5jdGlvbihjb21waWxlZC5yZW5kZXIpO1xuXHQgIHZhciBsID0gY29tcGlsZWQuc3RhdGljUmVuZGVyRm5zLmxlbmd0aDtcblx0ICByZXMuc3RhdGljUmVuZGVyRm5zID0gbmV3IEFycmF5KGwpO1xuXHQgIGZvciAodmFyIGkgPSAwOyBpIDwgbDsgaSsrKSB7XG5cdCAgICByZXMuc3RhdGljUmVuZGVyRm5zW2ldID0gbWFrZUZ1bmN0aW9uKGNvbXBpbGVkLnN0YXRpY1JlbmRlckZuc1tpXSk7XG5cdCAgfVxuXHQgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG5cdCAgICBpZiAocmVzLnJlbmRlciA9PT0gbm9vcCB8fCByZXMuc3RhdGljUmVuZGVyRm5zLnNvbWUoZnVuY3Rpb24gKGZuKSB7IHJldHVybiBmbiA9PT0gbm9vcDsgfSkpIHtcblx0ICAgICAgX3dhcm4oXG5cdCAgICAgICAgXCJmYWlsZWQgdG8gY29tcGlsZSB0ZW1wbGF0ZTpcXG5cXG5cIiArIHRlbXBsYXRlICsgXCJcXG5cXG5cIiArXG5cdCAgICAgICAgZGV0ZWN0RXJyb3JzKGNvbXBpbGVkLmFzdCkuam9pbignXFxuJykgK1xuXHQgICAgICAgICdcXG5cXG4nLFxuXHQgICAgICAgIHZtXG5cdCAgICAgICk7XG5cdCAgICB9XG5cdCAgfVxuXHQgIHJldHVybiAoY2FjaGVba2V5XSA9IHJlcylcblx0fVxuXHRcblx0ZnVuY3Rpb24gbWFrZUZ1bmN0aW9uIChjb2RlKSB7XG5cdCAgdHJ5IHtcblx0ICAgIHJldHVybiBuZXcgRnVuY3Rpb24oY29kZSlcblx0ICB9IGNhdGNoIChlKSB7XG5cdCAgICByZXR1cm4gbm9vcFxuXHQgIH1cblx0fVxuXHRcblx0LyogICovXG5cdFxuXHR2YXIgaWRUb1RlbXBsYXRlID0gY2FjaGVkKGZ1bmN0aW9uIChpZCkge1xuXHQgIHZhciBlbCA9IHF1ZXJ5KGlkKTtcblx0ICByZXR1cm4gZWwgJiYgZWwuaW5uZXJIVE1MXG5cdH0pO1xuXHRcblx0dmFyIG1vdW50ID0gVnVlJDMucHJvdG90eXBlLiRtb3VudDtcblx0VnVlJDMucHJvdG90eXBlLiRtb3VudCA9IGZ1bmN0aW9uIChcblx0ICBlbCxcblx0ICBoeWRyYXRpbmdcblx0KSB7XG5cdCAgZWwgPSBlbCAmJiBxdWVyeShlbCk7XG5cdFxuXHQgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuXHQgIGlmIChlbCA9PT0gZG9jdW1lbnQuYm9keSB8fCBlbCA9PT0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSB7XG5cdCAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG5cdCAgICAgIFwiRG8gbm90IG1vdW50IFZ1ZSB0byA8aHRtbD4gb3IgPGJvZHk+IC0gbW91bnQgdG8gbm9ybWFsIGVsZW1lbnRzIGluc3RlYWQuXCJcblx0ICAgICk7XG5cdCAgICByZXR1cm4gdGhpc1xuXHQgIH1cblx0XG5cdCAgdmFyIG9wdGlvbnMgPSB0aGlzLiRvcHRpb25zO1xuXHQgIC8vIHJlc29sdmUgdGVtcGxhdGUvZWwgYW5kIGNvbnZlcnQgdG8gcmVuZGVyIGZ1bmN0aW9uXG5cdCAgaWYgKCFvcHRpb25zLnJlbmRlcikge1xuXHQgICAgdmFyIHRlbXBsYXRlID0gb3B0aW9ucy50ZW1wbGF0ZTtcblx0ICAgIGlmICh0ZW1wbGF0ZSkge1xuXHQgICAgICBpZiAodHlwZW9mIHRlbXBsYXRlID09PSAnc3RyaW5nJykge1xuXHQgICAgICAgIGlmICh0ZW1wbGF0ZS5jaGFyQXQoMCkgPT09ICcjJykge1xuXHQgICAgICAgICAgdGVtcGxhdGUgPSBpZFRvVGVtcGxhdGUodGVtcGxhdGUpO1xuXHQgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG5cdCAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhdGVtcGxhdGUpIHtcblx0ICAgICAgICAgICAgd2Fybihcblx0ICAgICAgICAgICAgICAoXCJUZW1wbGF0ZSBlbGVtZW50IG5vdCBmb3VuZCBvciBpcyBlbXB0eTogXCIgKyAob3B0aW9ucy50ZW1wbGF0ZSkpLFxuXHQgICAgICAgICAgICAgIHRoaXNcblx0ICAgICAgICAgICAgKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgIH0gZWxzZSBpZiAodGVtcGxhdGUubm9kZVR5cGUpIHtcblx0ICAgICAgICB0ZW1wbGF0ZSA9IHRlbXBsYXRlLmlubmVySFRNTDtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuXHQgICAgICAgICAgd2FybignaW52YWxpZCB0ZW1wbGF0ZSBvcHRpb246JyArIHRlbXBsYXRlLCB0aGlzKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHRoaXNcblx0ICAgICAgfVxuXHQgICAgfSBlbHNlIGlmIChlbCkge1xuXHQgICAgICB0ZW1wbGF0ZSA9IGdldE91dGVySFRNTChlbCk7XG5cdCAgICB9XG5cdCAgICBpZiAodGVtcGxhdGUpIHtcblx0ICAgICAgdmFyIHJlZiA9IGNvbXBpbGVUb0Z1bmN0aW9ucyh0ZW1wbGF0ZSwge1xuXHQgICAgICAgIHdhcm46IHdhcm4sXG5cdCAgICAgICAgc2hvdWxkRGVjb2RlTmV3bGluZXM6IHNob3VsZERlY29kZU5ld2xpbmVzLFxuXHQgICAgICAgIGRlbGltaXRlcnM6IG9wdGlvbnMuZGVsaW1pdGVyc1xuXHQgICAgICB9LCB0aGlzKTtcblx0ICAgICAgdmFyIHJlbmRlciA9IHJlZi5yZW5kZXI7XG5cdCAgICAgIHZhciBzdGF0aWNSZW5kZXJGbnMgPSByZWYuc3RhdGljUmVuZGVyRm5zO1xuXHQgICAgICBvcHRpb25zLnJlbmRlciA9IHJlbmRlcjtcblx0ICAgICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBzdGF0aWNSZW5kZXJGbnM7XG5cdCAgICB9XG5cdCAgfVxuXHQgIHJldHVybiBtb3VudC5jYWxsKHRoaXMsIGVsLCBoeWRyYXRpbmcpXG5cdH07XG5cdFxuXHQvKipcblx0ICogR2V0IG91dGVySFRNTCBvZiBlbGVtZW50cywgdGFraW5nIGNhcmVcblx0ICogb2YgU1ZHIGVsZW1lbnRzIGluIElFIGFzIHdlbGwuXG5cdCAqL1xuXHRmdW5jdGlvbiBnZXRPdXRlckhUTUwgKGVsKSB7XG5cdCAgaWYgKGVsLm91dGVySFRNTCkge1xuXHQgICAgcmV0dXJuIGVsLm91dGVySFRNTFxuXHQgIH0gZWxzZSB7XG5cdCAgICB2YXIgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cdCAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZWwuY2xvbmVOb2RlKHRydWUpKTtcblx0ICAgIHJldHVybiBjb250YWluZXIuaW5uZXJIVE1MXG5cdCAgfVxuXHR9XG5cdFxuXHRWdWUkMy5jb21waWxlID0gY29tcGlsZVRvRnVuY3Rpb25zO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBWdWUkMztcblx0XG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpLCAoZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KCkpKSlcblxuLyoqKi8gfSxcbi8qIDIgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdC8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxuXHR2YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cdFxuXHQvLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcblx0Ly8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG5cdC8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcblx0Ly8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblx0XG5cdHZhciBjYWNoZWRTZXRUaW1lb3V0O1xuXHR2YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXHRcblx0ZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcblx0ICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xuXHR9XG5cdGZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuXHQgICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcblx0fVxuXHQoZnVuY3Rpb24gKCkge1xuXHQgICAgdHJ5IHtcblx0ICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcblx0ICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG5cdCAgICAgICAgfVxuXHQgICAgfSBjYXRjaCAoZSkge1xuXHQgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuXHQgICAgfVxuXHQgICAgdHJ5IHtcblx0ICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcblx0ICAgICAgICB9XG5cdCAgICB9IGNhdGNoIChlKSB7XG5cdCAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcblx0ICAgIH1cblx0fSAoKSlcblx0ZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcblx0ICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG5cdCAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG5cdCAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcblx0ICAgIH1cblx0ICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG5cdCAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcblx0ICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcblx0ICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuXHQgICAgfVxuXHQgICAgdHJ5IHtcblx0ICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG5cdCAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcblx0ICAgIH0gY2F0Y2goZSl7XG5cdCAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG5cdCAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcblx0ICAgICAgICB9IGNhdGNoKGUpe1xuXHQgICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuXHQgICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHRcblx0XG5cdH1cblx0ZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuXHQgICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG5cdCAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG5cdCAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuXHQgICAgfVxuXHQgICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuXHQgICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG5cdCAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuXHQgICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcblx0ICAgIH1cblx0ICAgIHRyeSB7XG5cdCAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuXHQgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcblx0ICAgIH0gY2F0Y2ggKGUpe1xuXHQgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcblx0ICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG5cdCAgICAgICAgfSBjYXRjaCAoZSl7XG5cdCAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuXHQgICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG5cdCAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0XG5cdFxuXHRcblx0fVxuXHR2YXIgcXVldWUgPSBbXTtcblx0dmFyIGRyYWluaW5nID0gZmFsc2U7XG5cdHZhciBjdXJyZW50UXVldWU7XG5cdHZhciBxdWV1ZUluZGV4ID0gLTE7XG5cdFxuXHRmdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG5cdCAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcblx0ICAgICAgICByZXR1cm47XG5cdCAgICB9XG5cdCAgICBkcmFpbmluZyA9IGZhbHNlO1xuXHQgICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcblx0ICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG5cdCAgICB9XG5cdCAgICBpZiAocXVldWUubGVuZ3RoKSB7XG5cdCAgICAgICAgZHJhaW5RdWV1ZSgpO1xuXHQgICAgfVxuXHR9XG5cdFxuXHRmdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuXHQgICAgaWYgKGRyYWluaW5nKSB7XG5cdCAgICAgICAgcmV0dXJuO1xuXHQgICAgfVxuXHQgICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG5cdCAgICBkcmFpbmluZyA9IHRydWU7XG5cdFxuXHQgICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcblx0ICAgIHdoaWxlKGxlbikge1xuXHQgICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuXHQgICAgICAgIHF1ZXVlID0gW107XG5cdCAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuXHQgICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG5cdCAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuXHQgICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcblx0ICAgIH1cblx0ICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG5cdCAgICBkcmFpbmluZyA9IGZhbHNlO1xuXHQgICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuXHR9XG5cdFxuXHRwcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuXHQgICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuXHQgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHQgICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcblx0ICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG5cdCAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcblx0ICAgIH1cblx0fTtcblx0XG5cdC8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcblx0ZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG5cdCAgICB0aGlzLmZ1biA9IGZ1bjtcblx0ICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcblx0fVxuXHRJdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG5cdCAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcblx0fTtcblx0cHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcblx0cHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcblx0cHJvY2Vzcy5lbnYgPSB7fTtcblx0cHJvY2Vzcy5hcmd2ID0gW107XG5cdHByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xuXHRwcm9jZXNzLnZlcnNpb25zID0ge307XG5cdFxuXHRmdW5jdGlvbiBub29wKCkge31cblx0XG5cdHByb2Nlc3Mub24gPSBub29wO1xuXHRwcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcblx0cHJvY2Vzcy5vbmNlID0gbm9vcDtcblx0cHJvY2Vzcy5vZmYgPSBub29wO1xuXHRwcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcblx0cHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xuXHRwcm9jZXNzLmVtaXQgPSBub29wO1xuXHRcblx0cHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcblx0ICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcblx0fTtcblx0XG5cdHByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5cdHByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG5cdCAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xuXHR9O1xuXHRwcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuXG5cbi8qKiovIH1cbi8qKioqKiovIF0pO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBteS1jb20uanMiLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSlcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcblxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0ZXhwb3J0czoge30sXG4gXHRcdFx0aWQ6IG1vZHVsZUlkLFxuIFx0XHRcdGxvYWRlZDogZmFsc2VcbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyB3ZWJwYWNrL2Jvb3RzdHJhcCBiYjIwYzVkODA2ZWFjMDMxZWRmOSIsImltcG9ydCBWdWUgZnJvbSAndnVlJztcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2pzL2xheW91dC5qcyIsIi8qIVxuICogVnVlLmpzIHYyLjEuMTBcbiAqIChjKSAyMDE0LTIwMTcgRXZhbiBZb3VcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG4vKiAgKi9cblxuLyoqXG4gKiBDb252ZXJ0IGEgdmFsdWUgdG8gYSBzdHJpbmcgdGhhdCBpcyBhY3R1YWxseSByZW5kZXJlZC5cbiAqL1xuZnVuY3Rpb24gX3RvU3RyaW5nICh2YWwpIHtcbiAgcmV0dXJuIHZhbCA9PSBudWxsXG4gICAgPyAnJ1xuICAgIDogdHlwZW9mIHZhbCA9PT0gJ29iamVjdCdcbiAgICAgID8gSlNPTi5zdHJpbmdpZnkodmFsLCBudWxsLCAyKVxuICAgICAgOiBTdHJpbmcodmFsKVxufVxuXG4vKipcbiAqIENvbnZlcnQgYSBpbnB1dCB2YWx1ZSB0byBhIG51bWJlciBmb3IgcGVyc2lzdGVuY2UuXG4gKiBJZiB0aGUgY29udmVyc2lvbiBmYWlscywgcmV0dXJuIG9yaWdpbmFsIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gdG9OdW1iZXIgKHZhbCkge1xuICB2YXIgbiA9IHBhcnNlRmxvYXQodmFsKTtcbiAgcmV0dXJuIGlzTmFOKG4pID8gdmFsIDogblxufVxuXG4vKipcbiAqIE1ha2UgYSBtYXAgYW5kIHJldHVybiBhIGZ1bmN0aW9uIGZvciBjaGVja2luZyBpZiBhIGtleVxuICogaXMgaW4gdGhhdCBtYXAuXG4gKi9cbmZ1bmN0aW9uIG1ha2VNYXAgKFxuICBzdHIsXG4gIGV4cGVjdHNMb3dlckNhc2Vcbikge1xuICB2YXIgbWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIGxpc3QgPSBzdHIuc3BsaXQoJywnKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgbWFwW2xpc3RbaV1dID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZXhwZWN0c0xvd2VyQ2FzZVxuICAgID8gZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gbWFwW3ZhbC50b0xvd2VyQ2FzZSgpXTsgfVxuICAgIDogZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gbWFwW3ZhbF07IH1cbn1cblxuLyoqXG4gKiBDaGVjayBpZiBhIHRhZyBpcyBhIGJ1aWx0LWluIHRhZy5cbiAqL1xudmFyIGlzQnVpbHRJblRhZyA9IG1ha2VNYXAoJ3Nsb3QsY29tcG9uZW50JywgdHJ1ZSk7XG5cbi8qKlxuICogUmVtb3ZlIGFuIGl0ZW0gZnJvbSBhbiBhcnJheVxuICovXG5mdW5jdGlvbiByZW1vdmUkMSAoYXJyLCBpdGVtKSB7XG4gIGlmIChhcnIubGVuZ3RoKSB7XG4gICAgdmFyIGluZGV4ID0gYXJyLmluZGV4T2YoaXRlbSk7XG4gICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgIHJldHVybiBhcnIuc3BsaWNlKGluZGV4LCAxKVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIENoZWNrIHdoZXRoZXIgdGhlIG9iamVjdCBoYXMgdGhlIHByb3BlcnR5LlxuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuZnVuY3Rpb24gaGFzT3duIChvYmosIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSlcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB2YWx1ZSBpcyBwcmltaXRpdmVcbiAqL1xuZnVuY3Rpb24gaXNQcmltaXRpdmUgKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcidcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBjYWNoZWQgdmVyc2lvbiBvZiBhIHB1cmUgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNhY2hlZCAoZm4pIHtcbiAgdmFyIGNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgcmV0dXJuIChmdW5jdGlvbiBjYWNoZWRGbiAoc3RyKSB7XG4gICAgdmFyIGhpdCA9IGNhY2hlW3N0cl07XG4gICAgcmV0dXJuIGhpdCB8fCAoY2FjaGVbc3RyXSA9IGZuKHN0cikpXG4gIH0pXG59XG5cbi8qKlxuICogQ2FtZWxpemUgYSBoeXBoZW4tZGVsaW1pdGVkIHN0cmluZy5cbiAqL1xudmFyIGNhbWVsaXplUkUgPSAvLShcXHcpL2c7XG52YXIgY2FtZWxpemUgPSBjYWNoZWQoZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoY2FtZWxpemVSRSwgZnVuY3Rpb24gKF8sIGMpIHsgcmV0dXJuIGMgPyBjLnRvVXBwZXJDYXNlKCkgOiAnJzsgfSlcbn0pO1xuXG4vKipcbiAqIENhcGl0YWxpemUgYSBzdHJpbmcuXG4gKi9cbnZhciBjYXBpdGFsaXplID0gY2FjaGVkKGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKVxufSk7XG5cbi8qKlxuICogSHlwaGVuYXRlIGEgY2FtZWxDYXNlIHN0cmluZy5cbiAqL1xudmFyIGh5cGhlbmF0ZVJFID0gLyhbXi1dKShbQS1aXSkvZztcbnZhciBoeXBoZW5hdGUgPSBjYWNoZWQoZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gc3RyXG4gICAgLnJlcGxhY2UoaHlwaGVuYXRlUkUsICckMS0kMicpXG4gICAgLnJlcGxhY2UoaHlwaGVuYXRlUkUsICckMS0kMicpXG4gICAgLnRvTG93ZXJDYXNlKClcbn0pO1xuXG4vKipcbiAqIFNpbXBsZSBiaW5kLCBmYXN0ZXIgdGhhbiBuYXRpdmVcbiAqL1xuZnVuY3Rpb24gYmluZCQxIChmbiwgY3R4KSB7XG4gIGZ1bmN0aW9uIGJvdW5kRm4gKGEpIHtcbiAgICB2YXIgbCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgcmV0dXJuIGxcbiAgICAgID8gbCA+IDFcbiAgICAgICAgPyBmbi5hcHBseShjdHgsIGFyZ3VtZW50cylcbiAgICAgICAgOiBmbi5jYWxsKGN0eCwgYSlcbiAgICAgIDogZm4uY2FsbChjdHgpXG4gIH1cbiAgLy8gcmVjb3JkIG9yaWdpbmFsIGZuIGxlbmd0aFxuICBib3VuZEZuLl9sZW5ndGggPSBmbi5sZW5ndGg7XG4gIHJldHVybiBib3VuZEZuXG59XG5cbi8qKlxuICogQ29udmVydCBhbiBBcnJheS1saWtlIG9iamVjdCB0byBhIHJlYWwgQXJyYXkuXG4gKi9cbmZ1bmN0aW9uIHRvQXJyYXkgKGxpc3QsIHN0YXJ0KSB7XG4gIHN0YXJ0ID0gc3RhcnQgfHwgMDtcbiAgdmFyIGkgPSBsaXN0Lmxlbmd0aCAtIHN0YXJ0O1xuICB2YXIgcmV0ID0gbmV3IEFycmF5KGkpO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgcmV0W2ldID0gbGlzdFtpICsgc3RhcnRdO1xuICB9XG4gIHJldHVybiByZXRcbn1cblxuLyoqXG4gKiBNaXggcHJvcGVydGllcyBpbnRvIHRhcmdldCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZCAodG8sIF9mcm9tKSB7XG4gIGZvciAodmFyIGtleSBpbiBfZnJvbSkge1xuICAgIHRvW2tleV0gPSBfZnJvbVtrZXldO1xuICB9XG4gIHJldHVybiB0b1xufVxuXG4vKipcbiAqIFF1aWNrIG9iamVjdCBjaGVjayAtIHRoaXMgaXMgcHJpbWFyaWx5IHVzZWQgdG8gdGVsbFxuICogT2JqZWN0cyBmcm9tIHByaW1pdGl2ZSB2YWx1ZXMgd2hlbiB3ZSBrbm93IHRoZSB2YWx1ZVxuICogaXMgYSBKU09OLWNvbXBsaWFudCB0eXBlLlxuICovXG5mdW5jdGlvbiBpc09iamVjdCAob2JqKSB7XG4gIHJldHVybiBvYmogIT09IG51bGwgJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCdcbn1cblxuLyoqXG4gKiBTdHJpY3Qgb2JqZWN0IHR5cGUgY2hlY2suIE9ubHkgcmV0dXJucyB0cnVlXG4gKiBmb3IgcGxhaW4gSmF2YVNjcmlwdCBvYmplY3RzLlxuICovXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIE9CSkVDVF9TVFJJTkcgPSAnW29iamVjdCBPYmplY3RdJztcbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QgKG9iaikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChvYmopID09PSBPQkpFQ1RfU1RSSU5HXG59XG5cbi8qKlxuICogTWVyZ2UgYW4gQXJyYXkgb2YgT2JqZWN0cyBpbnRvIGEgc2luZ2xlIE9iamVjdC5cbiAqL1xuZnVuY3Rpb24gdG9PYmplY3QgKGFycikge1xuICB2YXIgcmVzID0ge307XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGFycltpXSkge1xuICAgICAgZXh0ZW5kKHJlcywgYXJyW2ldKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKipcbiAqIFBlcmZvcm0gbm8gb3BlcmF0aW9uLlxuICovXG5mdW5jdGlvbiBub29wICgpIHt9XG5cbi8qKlxuICogQWx3YXlzIHJldHVybiBmYWxzZS5cbiAqL1xudmFyIG5vID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gZmFsc2U7IH07XG5cbi8qKlxuICogUmV0dXJuIHNhbWUgdmFsdWVcbiAqL1xudmFyIGlkZW50aXR5ID0gZnVuY3Rpb24gKF8pIHsgcmV0dXJuIF87IH07XG5cbi8qKlxuICogR2VuZXJhdGUgYSBzdGF0aWMga2V5cyBzdHJpbmcgZnJvbSBjb21waWxlciBtb2R1bGVzLlxuICovXG5mdW5jdGlvbiBnZW5TdGF0aWNLZXlzIChtb2R1bGVzKSB7XG4gIHJldHVybiBtb2R1bGVzLnJlZHVjZShmdW5jdGlvbiAoa2V5cywgbSkge1xuICAgIHJldHVybiBrZXlzLmNvbmNhdChtLnN0YXRpY0tleXMgfHwgW10pXG4gIH0sIFtdKS5qb2luKCcsJylcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB0d28gdmFsdWVzIGFyZSBsb29zZWx5IGVxdWFsIC0gdGhhdCBpcyxcbiAqIGlmIHRoZXkgYXJlIHBsYWluIG9iamVjdHMsIGRvIHRoZXkgaGF2ZSB0aGUgc2FtZSBzaGFwZT9cbiAqL1xuZnVuY3Rpb24gbG9vc2VFcXVhbCAoYSwgYikge1xuICB2YXIgaXNPYmplY3RBID0gaXNPYmplY3QoYSk7XG4gIHZhciBpc09iamVjdEIgPSBpc09iamVjdChiKTtcbiAgaWYgKGlzT2JqZWN0QSAmJiBpc09iamVjdEIpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoYSkgPT09IEpTT04uc3RyaW5naWZ5KGIpXG4gIH0gZWxzZSBpZiAoIWlzT2JqZWN0QSAmJiAhaXNPYmplY3RCKSB7XG4gICAgcmV0dXJuIFN0cmluZyhhKSA9PT0gU3RyaW5nKGIpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuZnVuY3Rpb24gbG9vc2VJbmRleE9mIChhcnIsIHZhbCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgIGlmIChsb29zZUVxdWFsKGFycltpXSwgdmFsKSkgeyByZXR1cm4gaSB9XG4gIH1cbiAgcmV0dXJuIC0xXG59XG5cbi8qICAqL1xuXG52YXIgY29uZmlnID0ge1xuICAvKipcbiAgICogT3B0aW9uIG1lcmdlIHN0cmF0ZWdpZXMgKHVzZWQgaW4gY29yZS91dGlsL29wdGlvbnMpXG4gICAqL1xuICBvcHRpb25NZXJnZVN0cmF0ZWdpZXM6IE9iamVjdC5jcmVhdGUobnVsbCksXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gc3VwcHJlc3Mgd2FybmluZ3MuXG4gICAqL1xuICBzaWxlbnQ6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIGVuYWJsZSBkZXZ0b29sc1xuICAgKi9cbiAgZGV2dG9vbHM6IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicsXG5cbiAgLyoqXG4gICAqIEVycm9yIGhhbmRsZXIgZm9yIHdhdGNoZXIgZXJyb3JzXG4gICAqL1xuICBlcnJvckhhbmRsZXI6IG51bGwsXG5cbiAgLyoqXG4gICAqIElnbm9yZSBjZXJ0YWluIGN1c3RvbSBlbGVtZW50c1xuICAgKi9cbiAgaWdub3JlZEVsZW1lbnRzOiBbXSxcblxuICAvKipcbiAgICogQ3VzdG9tIHVzZXIga2V5IGFsaWFzZXMgZm9yIHYtb25cbiAgICovXG4gIGtleUNvZGVzOiBPYmplY3QuY3JlYXRlKG51bGwpLFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhIHRhZyBpcyByZXNlcnZlZCBzbyB0aGF0IGl0IGNhbm5vdCBiZSByZWdpc3RlcmVkIGFzIGFcbiAgICogY29tcG9uZW50LiBUaGlzIGlzIHBsYXRmb3JtLWRlcGVuZGVudCBhbmQgbWF5IGJlIG92ZXJ3cml0dGVuLlxuICAgKi9cbiAgaXNSZXNlcnZlZFRhZzogbm8sXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGEgdGFnIGlzIGFuIHVua25vd24gZWxlbWVudC5cbiAgICogUGxhdGZvcm0tZGVwZW5kZW50LlxuICAgKi9cbiAgaXNVbmtub3duRWxlbWVudDogbm8sXG5cbiAgLyoqXG4gICAqIEdldCB0aGUgbmFtZXNwYWNlIG9mIGFuIGVsZW1lbnRcbiAgICovXG4gIGdldFRhZ05hbWVzcGFjZTogbm9vcCxcblxuICAvKipcbiAgICogUGFyc2UgdGhlIHJlYWwgdGFnIG5hbWUgZm9yIHRoZSBzcGVjaWZpYyBwbGF0Zm9ybS5cbiAgICovXG4gIHBhcnNlUGxhdGZvcm1UYWdOYW1lOiBpZGVudGl0eSxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYW4gYXR0cmlidXRlIG11c3QgYmUgYm91bmQgdXNpbmcgcHJvcGVydHksIGUuZy4gdmFsdWVcbiAgICogUGxhdGZvcm0tZGVwZW5kZW50LlxuICAgKi9cbiAgbXVzdFVzZVByb3A6IG5vLFxuXG4gIC8qKlxuICAgKiBMaXN0IG9mIGFzc2V0IHR5cGVzIHRoYXQgYSBjb21wb25lbnQgY2FuIG93bi5cbiAgICovXG4gIF9hc3NldFR5cGVzOiBbXG4gICAgJ2NvbXBvbmVudCcsXG4gICAgJ2RpcmVjdGl2ZScsXG4gICAgJ2ZpbHRlcidcbiAgXSxcblxuICAvKipcbiAgICogTGlzdCBvZiBsaWZlY3ljbGUgaG9va3MuXG4gICAqL1xuICBfbGlmZWN5Y2xlSG9va3M6IFtcbiAgICAnYmVmb3JlQ3JlYXRlJyxcbiAgICAnY3JlYXRlZCcsXG4gICAgJ2JlZm9yZU1vdW50JyxcbiAgICAnbW91bnRlZCcsXG4gICAgJ2JlZm9yZVVwZGF0ZScsXG4gICAgJ3VwZGF0ZWQnLFxuICAgICdiZWZvcmVEZXN0cm95JyxcbiAgICAnZGVzdHJveWVkJyxcbiAgICAnYWN0aXZhdGVkJyxcbiAgICAnZGVhY3RpdmF0ZWQnXG4gIF0sXG5cbiAgLyoqXG4gICAqIE1heCBjaXJjdWxhciB1cGRhdGVzIGFsbG93ZWQgaW4gYSBzY2hlZHVsZXIgZmx1c2ggY3ljbGUuXG4gICAqL1xuICBfbWF4VXBkYXRlQ291bnQ6IDEwMFxufTtcblxuLyogICovXG5cbi8qKlxuICogQ2hlY2sgaWYgYSBzdHJpbmcgc3RhcnRzIHdpdGggJCBvciBfXG4gKi9cbmZ1bmN0aW9uIGlzUmVzZXJ2ZWQgKHN0cikge1xuICB2YXIgYyA9IChzdHIgKyAnJykuY2hhckNvZGVBdCgwKTtcbiAgcmV0dXJuIGMgPT09IDB4MjQgfHwgYyA9PT0gMHg1RlxufVxuXG4vKipcbiAqIERlZmluZSBhIHByb3BlcnR5LlxuICovXG5mdW5jdGlvbiBkZWYgKG9iaiwga2V5LCB2YWwsIGVudW1lcmFibGUpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgdmFsdWU6IHZhbCxcbiAgICBlbnVtZXJhYmxlOiAhIWVudW1lcmFibGUsXG4gICAgd3JpdGFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xufVxuXG4vKipcbiAqIFBhcnNlIHNpbXBsZSBwYXRoLlxuICovXG52YXIgYmFpbFJFID0gL1teXFx3LiRdLztcbmZ1bmN0aW9uIHBhcnNlUGF0aCAocGF0aCkge1xuICBpZiAoYmFpbFJFLnRlc3QocGF0aCkpIHtcbiAgICByZXR1cm5cbiAgfSBlbHNlIHtcbiAgICB2YXIgc2VnbWVudHMgPSBwYXRoLnNwbGl0KCcuJyk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChvYmopIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VnbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKCFvYmopIHsgcmV0dXJuIH1cbiAgICAgICAgb2JqID0gb2JqW3NlZ21lbnRzW2ldXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmpcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG4vKiBnbG9iYWxzIE11dGF0aW9uT2JzZXJ2ZXIgKi9cblxuLy8gY2FuIHdlIHVzZSBfX3Byb3RvX18/XG52YXIgaGFzUHJvdG8gPSAnX19wcm90b19fJyBpbiB7fTtcblxuLy8gQnJvd3NlciBlbnZpcm9ubWVudCBzbmlmZmluZ1xudmFyIGluQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xudmFyIFVBID0gaW5Ccm93c2VyICYmIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCk7XG52YXIgaXNJRSA9IFVBICYmIC9tc2llfHRyaWRlbnQvLnRlc3QoVUEpO1xudmFyIGlzSUU5ID0gVUEgJiYgVUEuaW5kZXhPZignbXNpZSA5LjAnKSA+IDA7XG52YXIgaXNFZGdlID0gVUEgJiYgVUEuaW5kZXhPZignZWRnZS8nKSA+IDA7XG52YXIgaXNBbmRyb2lkID0gVUEgJiYgVUEuaW5kZXhPZignYW5kcm9pZCcpID4gMDtcbnZhciBpc0lPUyA9IFVBICYmIC9pcGhvbmV8aXBhZHxpcG9kfGlvcy8udGVzdChVQSk7XG5cbi8vIHRoaXMgbmVlZHMgdG8gYmUgbGF6eS1ldmFsZWQgYmVjYXVzZSB2dWUgbWF5IGJlIHJlcXVpcmVkIGJlZm9yZVxuLy8gdnVlLXNlcnZlci1yZW5kZXJlciBjYW4gc2V0IFZVRV9FTlZcbnZhciBfaXNTZXJ2ZXI7XG52YXIgaXNTZXJ2ZXJSZW5kZXJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIGlmIChfaXNTZXJ2ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghaW5Ccm93c2VyICYmIHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBkZXRlY3QgcHJlc2VuY2Ugb2YgdnVlLXNlcnZlci1yZW5kZXJlciBhbmQgYXZvaWRcbiAgICAgIC8vIFdlYnBhY2sgc2hpbW1pbmcgdGhlIHByb2Nlc3NcbiAgICAgIF9pc1NlcnZlciA9IGdsb2JhbFsncHJvY2VzcyddLmVudi5WVUVfRU5WID09PSAnc2VydmVyJztcbiAgICB9IGVsc2Uge1xuICAgICAgX2lzU2VydmVyID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiBfaXNTZXJ2ZXJcbn07XG5cbi8vIGRldGVjdCBkZXZ0b29sc1xudmFyIGRldnRvb2xzID0gaW5Ccm93c2VyICYmIHdpbmRvdy5fX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gaXNOYXRpdmUgKEN0b3IpIHtcbiAgcmV0dXJuIC9uYXRpdmUgY29kZS8udGVzdChDdG9yLnRvU3RyaW5nKCkpXG59XG5cbi8qKlxuICogRGVmZXIgYSB0YXNrIHRvIGV4ZWN1dGUgaXQgYXN5bmNocm9ub3VzbHkuXG4gKi9cbnZhciBuZXh0VGljayA9IChmdW5jdGlvbiAoKSB7XG4gIHZhciBjYWxsYmFja3MgPSBbXTtcbiAgdmFyIHBlbmRpbmcgPSBmYWxzZTtcbiAgdmFyIHRpbWVyRnVuYztcblxuICBmdW5jdGlvbiBuZXh0VGlja0hhbmRsZXIgKCkge1xuICAgIHBlbmRpbmcgPSBmYWxzZTtcbiAgICB2YXIgY29waWVzID0gY2FsbGJhY2tzLnNsaWNlKDApO1xuICAgIGNhbGxiYWNrcy5sZW5ndGggPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29waWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb3BpZXNbaV0oKTtcbiAgICB9XG4gIH1cblxuICAvLyB0aGUgbmV4dFRpY2sgYmVoYXZpb3IgbGV2ZXJhZ2VzIHRoZSBtaWNyb3Rhc2sgcXVldWUsIHdoaWNoIGNhbiBiZSBhY2Nlc3NlZFxuICAvLyB2aWEgZWl0aGVyIG5hdGl2ZSBQcm9taXNlLnRoZW4gb3IgTXV0YXRpb25PYnNlcnZlci5cbiAgLy8gTXV0YXRpb25PYnNlcnZlciBoYXMgd2lkZXIgc3VwcG9ydCwgaG93ZXZlciBpdCBpcyBzZXJpb3VzbHkgYnVnZ2VkIGluXG4gIC8vIFVJV2ViVmlldyBpbiBpT1MgPj0gOS4zLjMgd2hlbiB0cmlnZ2VyZWQgaW4gdG91Y2ggZXZlbnQgaGFuZGxlcnMuIEl0XG4gIC8vIGNvbXBsZXRlbHkgc3RvcHMgd29ya2luZyBhZnRlciB0cmlnZ2VyaW5nIGEgZmV3IHRpbWVzLi4uIHNvLCBpZiBuYXRpdmVcbiAgLy8gUHJvbWlzZSBpcyBhdmFpbGFibGUsIHdlIHdpbGwgdXNlIGl0OlxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShQcm9taXNlKSkge1xuICAgIHZhciBwID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgdmFyIGxvZ0Vycm9yID0gZnVuY3Rpb24gKGVycikgeyBjb25zb2xlLmVycm9yKGVycik7IH07XG4gICAgdGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgICAgcC50aGVuKG5leHRUaWNrSGFuZGxlcikuY2F0Y2gobG9nRXJyb3IpO1xuICAgICAgLy8gaW4gcHJvYmxlbWF0aWMgVUlXZWJWaWV3cywgUHJvbWlzZS50aGVuIGRvZXNuJ3QgY29tcGxldGVseSBicmVhaywgYnV0XG4gICAgICAvLyBpdCBjYW4gZ2V0IHN0dWNrIGluIGEgd2VpcmQgc3RhdGUgd2hlcmUgY2FsbGJhY2tzIGFyZSBwdXNoZWQgaW50byB0aGVcbiAgICAgIC8vIG1pY3JvdGFzayBxdWV1ZSBidXQgdGhlIHF1ZXVlIGlzbid0IGJlaW5nIGZsdXNoZWQsIHVudGlsIHRoZSBicm93c2VyXG4gICAgICAvLyBuZWVkcyB0byBkbyBzb21lIG90aGVyIHdvcmssIGUuZy4gaGFuZGxlIGEgdGltZXIuIFRoZXJlZm9yZSB3ZSBjYW5cbiAgICAgIC8vIFwiZm9yY2VcIiB0aGUgbWljcm90YXNrIHF1ZXVlIHRvIGJlIGZsdXNoZWQgYnkgYWRkaW5nIGFuIGVtcHR5IHRpbWVyLlxuICAgICAgaWYgKGlzSU9TKSB7IHNldFRpbWVvdXQobm9vcCk7IH1cbiAgICB9O1xuICB9IGVsc2UgaWYgKHR5cGVvZiBNdXRhdGlvbk9ic2VydmVyICE9PSAndW5kZWZpbmVkJyAmJiAoXG4gICAgaXNOYXRpdmUoTXV0YXRpb25PYnNlcnZlcikgfHxcbiAgICAvLyBQaGFudG9tSlMgYW5kIGlPUyA3LnhcbiAgICBNdXRhdGlvbk9ic2VydmVyLnRvU3RyaW5nKCkgPT09ICdbb2JqZWN0IE11dGF0aW9uT2JzZXJ2ZXJDb25zdHJ1Y3Rvcl0nXG4gICkpIHtcbiAgICAvLyB1c2UgTXV0YXRpb25PYnNlcnZlciB3aGVyZSBuYXRpdmUgUHJvbWlzZSBpcyBub3QgYXZhaWxhYmxlLFxuICAgIC8vIGUuZy4gUGhhbnRvbUpTIElFMTEsIGlPUzcsIEFuZHJvaWQgNC40XG4gICAgdmFyIGNvdW50ZXIgPSAxO1xuICAgIHZhciBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKG5leHRUaWNrSGFuZGxlcik7XG4gICAgdmFyIHRleHROb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoU3RyaW5nKGNvdW50ZXIpKTtcbiAgICBvYnNlcnZlci5vYnNlcnZlKHRleHROb2RlLCB7XG4gICAgICBjaGFyYWN0ZXJEYXRhOiB0cnVlXG4gICAgfSk7XG4gICAgdGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgICAgY291bnRlciA9IChjb3VudGVyICsgMSkgJSAyO1xuICAgICAgdGV4dE5vZGUuZGF0YSA9IFN0cmluZyhjb3VudGVyKTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIC8vIGZhbGxiYWNrIHRvIHNldFRpbWVvdXRcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHRpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHNldFRpbWVvdXQobmV4dFRpY2tIYW5kbGVyLCAwKTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHF1ZXVlTmV4dFRpY2sgKGNiLCBjdHgpIHtcbiAgICB2YXIgX3Jlc29sdmU7XG4gICAgY2FsbGJhY2tzLnB1c2goZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGNiKSB7IGNiLmNhbGwoY3R4KTsgfVxuICAgICAgaWYgKF9yZXNvbHZlKSB7IF9yZXNvbHZlKGN0eCk7IH1cbiAgICB9KTtcbiAgICBpZiAoIXBlbmRpbmcpIHtcbiAgICAgIHBlbmRpbmcgPSB0cnVlO1xuICAgICAgdGltZXJGdW5jKCk7XG4gICAgfVxuICAgIGlmICghY2IgJiYgdHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgX3Jlc29sdmUgPSByZXNvbHZlO1xuICAgICAgfSlcbiAgICB9XG4gIH1cbn0pKCk7XG5cbnZhciBfU2V0O1xuLyogaXN0YW5idWwgaWdub3JlIGlmICovXG5pZiAodHlwZW9mIFNldCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoU2V0KSkge1xuICAvLyB1c2UgbmF0aXZlIFNldCB3aGVuIGF2YWlsYWJsZS5cbiAgX1NldCA9IFNldDtcbn0gZWxzZSB7XG4gIC8vIGEgbm9uLXN0YW5kYXJkIFNldCBwb2x5ZmlsbCB0aGF0IG9ubHkgd29ya3Mgd2l0aCBwcmltaXRpdmUga2V5cy5cbiAgX1NldCA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2V0ICgpIHtcbiAgICAgIHRoaXMuc2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB9XG4gICAgU2V0LnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiBoYXMgKGtleSkge1xuICAgICAgcmV0dXJuIHRoaXMuc2V0W2tleV0gPT09IHRydWVcbiAgICB9O1xuICAgIFNldC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkIChrZXkpIHtcbiAgICAgIHRoaXMuc2V0W2tleV0gPSB0cnVlO1xuICAgIH07XG4gICAgU2V0LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyICgpIHtcbiAgICAgIHRoaXMuc2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFNldDtcbiAgfSgpKTtcbn1cblxudmFyIHdhcm4gPSBub29wO1xudmFyIGZvcm1hdENvbXBvbmVudE5hbWU7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBoYXNDb25zb2xlID0gdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnO1xuXG4gIHdhcm4gPSBmdW5jdGlvbiAobXNnLCB2bSkge1xuICAgIGlmIChoYXNDb25zb2xlICYmICghY29uZmlnLnNpbGVudCkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJbVnVlIHdhcm5dOiBcIiArIG1zZyArIFwiIFwiICsgKFxuICAgICAgICB2bSA/IGZvcm1hdExvY2F0aW9uKGZvcm1hdENvbXBvbmVudE5hbWUodm0pKSA6ICcnXG4gICAgICApKTtcbiAgICB9XG4gIH07XG5cbiAgZm9ybWF0Q29tcG9uZW50TmFtZSA9IGZ1bmN0aW9uICh2bSkge1xuICAgIGlmICh2bS4kcm9vdCA9PT0gdm0pIHtcbiAgICAgIHJldHVybiAncm9vdCBpbnN0YW5jZSdcbiAgICB9XG4gICAgdmFyIG5hbWUgPSB2bS5faXNWdWVcbiAgICAgID8gdm0uJG9wdGlvbnMubmFtZSB8fCB2bS4kb3B0aW9ucy5fY29tcG9uZW50VGFnXG4gICAgICA6IHZtLm5hbWU7XG4gICAgcmV0dXJuIChcbiAgICAgIChuYW1lID8gKFwiY29tcG9uZW50IDxcIiArIG5hbWUgKyBcIj5cIikgOiBcImFub255bW91cyBjb21wb25lbnRcIikgK1xuICAgICAgKHZtLl9pc1Z1ZSAmJiB2bS4kb3B0aW9ucy5fX2ZpbGUgPyAoXCIgYXQgXCIgKyAodm0uJG9wdGlvbnMuX19maWxlKSkgOiAnJylcbiAgICApXG4gIH07XG5cbiAgdmFyIGZvcm1hdExvY2F0aW9uID0gZnVuY3Rpb24gKHN0cikge1xuICAgIGlmIChzdHIgPT09ICdhbm9ueW1vdXMgY29tcG9uZW50Jykge1xuICAgICAgc3RyICs9IFwiIC0gdXNlIHRoZSBcXFwibmFtZVxcXCIgb3B0aW9uIGZvciBiZXR0ZXIgZGVidWdnaW5nIG1lc3NhZ2VzLlwiO1xuICAgIH1cbiAgICByZXR1cm4gKFwiXFxuKGZvdW5kIGluIFwiICsgc3RyICsgXCIpXCIpXG4gIH07XG59XG5cbi8qICAqL1xuXG5cbnZhciB1aWQkMSA9IDA7XG5cbi8qKlxuICogQSBkZXAgaXMgYW4gb2JzZXJ2YWJsZSB0aGF0IGNhbiBoYXZlIG11bHRpcGxlXG4gKiBkaXJlY3RpdmVzIHN1YnNjcmliaW5nIHRvIGl0LlxuICovXG52YXIgRGVwID0gZnVuY3Rpb24gRGVwICgpIHtcbiAgdGhpcy5pZCA9IHVpZCQxKys7XG4gIHRoaXMuc3VicyA9IFtdO1xufTtcblxuRGVwLnByb3RvdHlwZS5hZGRTdWIgPSBmdW5jdGlvbiBhZGRTdWIgKHN1Yikge1xuICB0aGlzLnN1YnMucHVzaChzdWIpO1xufTtcblxuRGVwLnByb3RvdHlwZS5yZW1vdmVTdWIgPSBmdW5jdGlvbiByZW1vdmVTdWIgKHN1Yikge1xuICByZW1vdmUkMSh0aGlzLnN1YnMsIHN1Yik7XG59O1xuXG5EZXAucHJvdG90eXBlLmRlcGVuZCA9IGZ1bmN0aW9uIGRlcGVuZCAoKSB7XG4gIGlmIChEZXAudGFyZ2V0KSB7XG4gICAgRGVwLnRhcmdldC5hZGREZXAodGhpcyk7XG4gIH1cbn07XG5cbkRlcC5wcm90b3R5cGUubm90aWZ5ID0gZnVuY3Rpb24gbm90aWZ5ICgpIHtcbiAgLy8gc3RhYmxpemUgdGhlIHN1YnNjcmliZXIgbGlzdCBmaXJzdFxuICB2YXIgc3VicyA9IHRoaXMuc3Vicy5zbGljZSgpO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHN1YnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgc3Vic1tpXS51cGRhdGUoKTtcbiAgfVxufTtcblxuLy8gdGhlIGN1cnJlbnQgdGFyZ2V0IHdhdGNoZXIgYmVpbmcgZXZhbHVhdGVkLlxuLy8gdGhpcyBpcyBnbG9iYWxseSB1bmlxdWUgYmVjYXVzZSB0aGVyZSBjb3VsZCBiZSBvbmx5IG9uZVxuLy8gd2F0Y2hlciBiZWluZyBldmFsdWF0ZWQgYXQgYW55IHRpbWUuXG5EZXAudGFyZ2V0ID0gbnVsbDtcbnZhciB0YXJnZXRTdGFjayA9IFtdO1xuXG5mdW5jdGlvbiBwdXNoVGFyZ2V0IChfdGFyZ2V0KSB7XG4gIGlmIChEZXAudGFyZ2V0KSB7IHRhcmdldFN0YWNrLnB1c2goRGVwLnRhcmdldCk7IH1cbiAgRGVwLnRhcmdldCA9IF90YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIHBvcFRhcmdldCAoKSB7XG4gIERlcC50YXJnZXQgPSB0YXJnZXRTdGFjay5wb3AoKTtcbn1cblxuLypcbiAqIG5vdCB0eXBlIGNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGZsb3cgZG9lc24ndCBwbGF5IHdlbGwgd2l0aFxuICogZHluYW1pY2FsbHkgYWNjZXNzaW5nIG1ldGhvZHMgb24gQXJyYXkgcHJvdG90eXBlXG4gKi9cblxudmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG52YXIgYXJyYXlNZXRob2RzID0gT2JqZWN0LmNyZWF0ZShhcnJheVByb3RvKTtbXG4gICdwdXNoJyxcbiAgJ3BvcCcsXG4gICdzaGlmdCcsXG4gICd1bnNoaWZ0JyxcbiAgJ3NwbGljZScsXG4gICdzb3J0JyxcbiAgJ3JldmVyc2UnXG5dXG4uZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kKSB7XG4gIC8vIGNhY2hlIG9yaWdpbmFsIG1ldGhvZFxuICB2YXIgb3JpZ2luYWwgPSBhcnJheVByb3RvW21ldGhvZF07XG4gIGRlZihhcnJheU1ldGhvZHMsIG1ldGhvZCwgZnVuY3Rpb24gbXV0YXRvciAoKSB7XG4gICAgdmFyIGFyZ3VtZW50cyQxID0gYXJndW1lbnRzO1xuXG4gICAgLy8gYXZvaWQgbGVha2luZyBhcmd1bWVudHM6XG4gICAgLy8gaHR0cDovL2pzcGVyZi5jb20vY2xvc3VyZS13aXRoLWFyZ3VtZW50c1xuICAgIHZhciBpID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShpKTtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzJDFbaV07XG4gICAgfVxuICAgIHZhciByZXN1bHQgPSBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB2YXIgb2IgPSB0aGlzLl9fb2JfXztcbiAgICB2YXIgaW5zZXJ0ZWQ7XG4gICAgc3dpdGNoIChtZXRob2QpIHtcbiAgICAgIGNhc2UgJ3B1c2gnOlxuICAgICAgICBpbnNlcnRlZCA9IGFyZ3M7XG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICd1bnNoaWZ0JzpcbiAgICAgICAgaW5zZXJ0ZWQgPSBhcmdzO1xuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnc3BsaWNlJzpcbiAgICAgICAgaW5zZXJ0ZWQgPSBhcmdzLnNsaWNlKDIpO1xuICAgICAgICBicmVha1xuICAgIH1cbiAgICBpZiAoaW5zZXJ0ZWQpIHsgb2Iub2JzZXJ2ZUFycmF5KGluc2VydGVkKTsgfVxuICAgIC8vIG5vdGlmeSBjaGFuZ2VcbiAgICBvYi5kZXAubm90aWZ5KCk7XG4gICAgcmV0dXJuIHJlc3VsdFxuICB9KTtcbn0pO1xuXG4vKiAgKi9cblxudmFyIGFycmF5S2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGFycmF5TWV0aG9kcyk7XG5cbi8qKlxuICogQnkgZGVmYXVsdCwgd2hlbiBhIHJlYWN0aXZlIHByb3BlcnR5IGlzIHNldCwgdGhlIG5ldyB2YWx1ZSBpc1xuICogYWxzbyBjb252ZXJ0ZWQgdG8gYmVjb21lIHJlYWN0aXZlLiBIb3dldmVyIHdoZW4gcGFzc2luZyBkb3duIHByb3BzLFxuICogd2UgZG9uJ3Qgd2FudCB0byBmb3JjZSBjb252ZXJzaW9uIGJlY2F1c2UgdGhlIHZhbHVlIG1heSBiZSBhIG5lc3RlZCB2YWx1ZVxuICogdW5kZXIgYSBmcm96ZW4gZGF0YSBzdHJ1Y3R1cmUuIENvbnZlcnRpbmcgaXQgd291bGQgZGVmZWF0IHRoZSBvcHRpbWl6YXRpb24uXG4gKi9cbnZhciBvYnNlcnZlclN0YXRlID0ge1xuICBzaG91bGRDb252ZXJ0OiB0cnVlLFxuICBpc1NldHRpbmdQcm9wczogZmFsc2Vcbn07XG5cbi8qKlxuICogT2JzZXJ2ZXIgY2xhc3MgdGhhdCBhcmUgYXR0YWNoZWQgdG8gZWFjaCBvYnNlcnZlZFxuICogb2JqZWN0LiBPbmNlIGF0dGFjaGVkLCB0aGUgb2JzZXJ2ZXIgY29udmVydHMgdGFyZ2V0XG4gKiBvYmplY3QncyBwcm9wZXJ0eSBrZXlzIGludG8gZ2V0dGVyL3NldHRlcnMgdGhhdFxuICogY29sbGVjdCBkZXBlbmRlbmNpZXMgYW5kIGRpc3BhdGNoZXMgdXBkYXRlcy5cbiAqL1xudmFyIE9ic2VydmVyID0gZnVuY3Rpb24gT2JzZXJ2ZXIgKHZhbHVlKSB7XG4gIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgdGhpcy5kZXAgPSBuZXcgRGVwKCk7XG4gIHRoaXMudm1Db3VudCA9IDA7XG4gIGRlZih2YWx1ZSwgJ19fb2JfXycsIHRoaXMpO1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICB2YXIgYXVnbWVudCA9IGhhc1Byb3RvXG4gICAgICA/IHByb3RvQXVnbWVudFxuICAgICAgOiBjb3B5QXVnbWVudDtcbiAgICBhdWdtZW50KHZhbHVlLCBhcnJheU1ldGhvZHMsIGFycmF5S2V5cyk7XG4gICAgdGhpcy5vYnNlcnZlQXJyYXkodmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMud2Fsayh2YWx1ZSk7XG4gIH1cbn07XG5cbi8qKlxuICogV2FsayB0aHJvdWdoIGVhY2ggcHJvcGVydHkgYW5kIGNvbnZlcnQgdGhlbSBpbnRvXG4gKiBnZXR0ZXIvc2V0dGVycy4gVGhpcyBtZXRob2Qgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIHdoZW5cbiAqIHZhbHVlIHR5cGUgaXMgT2JqZWN0LlxuICovXG5PYnNlcnZlci5wcm90b3R5cGUud2FsayA9IGZ1bmN0aW9uIHdhbGsgKG9iaikge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKG9iaiwga2V5c1tpXSwgb2JqW2tleXNbaV1dKTtcbiAgfVxufTtcblxuLyoqXG4gKiBPYnNlcnZlIGEgbGlzdCBvZiBBcnJheSBpdGVtcy5cbiAqL1xuT2JzZXJ2ZXIucHJvdG90eXBlLm9ic2VydmVBcnJheSA9IGZ1bmN0aW9uIG9ic2VydmVBcnJheSAoaXRlbXMpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBpdGVtcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBvYnNlcnZlKGl0ZW1zW2ldKTtcbiAgfVxufTtcblxuLy8gaGVscGVyc1xuXG4vKipcbiAqIEF1Z21lbnQgYW4gdGFyZ2V0IE9iamVjdCBvciBBcnJheSBieSBpbnRlcmNlcHRpbmdcbiAqIHRoZSBwcm90b3R5cGUgY2hhaW4gdXNpbmcgX19wcm90b19fXG4gKi9cbmZ1bmN0aW9uIHByb3RvQXVnbWVudCAodGFyZ2V0LCBzcmMpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbiAgdGFyZ2V0Ll9fcHJvdG9fXyA9IHNyYztcbiAgLyogZXNsaW50LWVuYWJsZSBuby1wcm90byAqL1xufVxuXG4vKipcbiAqIEF1Z21lbnQgYW4gdGFyZ2V0IE9iamVjdCBvciBBcnJheSBieSBkZWZpbmluZ1xuICogaGlkZGVuIHByb3BlcnRpZXMuXG4gKi9cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBjb3B5QXVnbWVudCAodGFyZ2V0LCBzcmMsIGtleXMpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIGRlZih0YXJnZXQsIGtleSwgc3JjW2tleV0pO1xuICB9XG59XG5cbi8qKlxuICogQXR0ZW1wdCB0byBjcmVhdGUgYW4gb2JzZXJ2ZXIgaW5zdGFuY2UgZm9yIGEgdmFsdWUsXG4gKiByZXR1cm5zIHRoZSBuZXcgb2JzZXJ2ZXIgaWYgc3VjY2Vzc2Z1bGx5IG9ic2VydmVkLFxuICogb3IgdGhlIGV4aXN0aW5nIG9ic2VydmVyIGlmIHRoZSB2YWx1ZSBhbHJlYWR5IGhhcyBvbmUuXG4gKi9cbmZ1bmN0aW9uIG9ic2VydmUgKHZhbHVlLCBhc1Jvb3REYXRhKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIG9iO1xuICBpZiAoaGFzT3duKHZhbHVlLCAnX19vYl9fJykgJiYgdmFsdWUuX19vYl9fIGluc3RhbmNlb2YgT2JzZXJ2ZXIpIHtcbiAgICBvYiA9IHZhbHVlLl9fb2JfXztcbiAgfSBlbHNlIGlmIChcbiAgICBvYnNlcnZlclN0YXRlLnNob3VsZENvbnZlcnQgJiZcbiAgICAhaXNTZXJ2ZXJSZW5kZXJpbmcoKSAmJlxuICAgIChBcnJheS5pc0FycmF5KHZhbHVlKSB8fCBpc1BsYWluT2JqZWN0KHZhbHVlKSkgJiZcbiAgICBPYmplY3QuaXNFeHRlbnNpYmxlKHZhbHVlKSAmJlxuICAgICF2YWx1ZS5faXNWdWVcbiAgKSB7XG4gICAgb2IgPSBuZXcgT2JzZXJ2ZXIodmFsdWUpO1xuICB9XG4gIGlmIChhc1Jvb3REYXRhICYmIG9iKSB7XG4gICAgb2Iudm1Db3VudCsrO1xuICB9XG4gIHJldHVybiBvYlxufVxuXG4vKipcbiAqIERlZmluZSBhIHJlYWN0aXZlIHByb3BlcnR5IG9uIGFuIE9iamVjdC5cbiAqL1xuZnVuY3Rpb24gZGVmaW5lUmVhY3RpdmUkJDEgKFxuICBvYmosXG4gIGtleSxcbiAgdmFsLFxuICBjdXN0b21TZXR0ZXJcbikge1xuICB2YXIgZGVwID0gbmV3IERlcCgpO1xuXG4gIHZhciBwcm9wZXJ0eSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpO1xuICBpZiAocHJvcGVydHkgJiYgcHJvcGVydHkuY29uZmlndXJhYmxlID09PSBmYWxzZSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLy8gY2F0ZXIgZm9yIHByZS1kZWZpbmVkIGdldHRlci9zZXR0ZXJzXG4gIHZhciBnZXR0ZXIgPSBwcm9wZXJ0eSAmJiBwcm9wZXJ0eS5nZXQ7XG4gIHZhciBzZXR0ZXIgPSBwcm9wZXJ0eSAmJiBwcm9wZXJ0eS5zZXQ7XG5cbiAgdmFyIGNoaWxkT2IgPSBvYnNlcnZlKHZhbCk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gcmVhY3RpdmVHZXR0ZXIgKCkge1xuICAgICAgdmFyIHZhbHVlID0gZ2V0dGVyID8gZ2V0dGVyLmNhbGwob2JqKSA6IHZhbDtcbiAgICAgIGlmIChEZXAudGFyZ2V0KSB7XG4gICAgICAgIGRlcC5kZXBlbmQoKTtcbiAgICAgICAgaWYgKGNoaWxkT2IpIHtcbiAgICAgICAgICBjaGlsZE9iLmRlcC5kZXBlbmQoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICBkZXBlbmRBcnJheSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZVxuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiByZWFjdGl2ZVNldHRlciAobmV3VmFsKSB7XG4gICAgICB2YXIgdmFsdWUgPSBnZXR0ZXIgPyBnZXR0ZXIuY2FsbChvYmopIDogdmFsO1xuICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tc2VsZi1jb21wYXJlICovXG4gICAgICBpZiAobmV3VmFsID09PSB2YWx1ZSB8fCAobmV3VmFsICE9PSBuZXdWYWwgJiYgdmFsdWUgIT09IHZhbHVlKSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIC8qIGVzbGludC1lbmFibGUgbm8tc2VsZi1jb21wYXJlICovXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjdXN0b21TZXR0ZXIpIHtcbiAgICAgICAgY3VzdG9tU2V0dGVyKCk7XG4gICAgICB9XG4gICAgICBpZiAoc2V0dGVyKSB7XG4gICAgICAgIHNldHRlci5jYWxsKG9iaiwgbmV3VmFsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCA9IG5ld1ZhbDtcbiAgICAgIH1cbiAgICAgIGNoaWxkT2IgPSBvYnNlcnZlKG5ld1ZhbCk7XG4gICAgICBkZXAubm90aWZ5KCk7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBTZXQgYSBwcm9wZXJ0eSBvbiBhbiBvYmplY3QuIEFkZHMgdGhlIG5ldyBwcm9wZXJ0eSBhbmRcbiAqIHRyaWdnZXJzIGNoYW5nZSBub3RpZmljYXRpb24gaWYgdGhlIHByb3BlcnR5IGRvZXNuJ3RcbiAqIGFscmVhZHkgZXhpc3QuXG4gKi9cbmZ1bmN0aW9uIHNldCQxIChvYmosIGtleSwgdmFsKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICBvYmoubGVuZ3RoID0gTWF0aC5tYXgob2JqLmxlbmd0aCwga2V5KTtcbiAgICBvYmouc3BsaWNlKGtleSwgMSwgdmFsKTtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgaWYgKGhhc093bihvYmosIGtleSkpIHtcbiAgICBvYmpba2V5XSA9IHZhbDtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgb2IgPSBvYmouX19vYl9fO1xuICBpZiAob2JqLl9pc1Z1ZSB8fCAob2IgJiYgb2Iudm1Db3VudCkpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAnQXZvaWQgYWRkaW5nIHJlYWN0aXZlIHByb3BlcnRpZXMgdG8gYSBWdWUgaW5zdGFuY2Ugb3IgaXRzIHJvb3QgJGRhdGEgJyArXG4gICAgICAnYXQgcnVudGltZSAtIGRlY2xhcmUgaXQgdXBmcm9udCBpbiB0aGUgZGF0YSBvcHRpb24uJ1xuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKCFvYikge1xuICAgIG9ialtrZXldID0gdmFsO1xuICAgIHJldHVyblxuICB9XG4gIGRlZmluZVJlYWN0aXZlJCQxKG9iLnZhbHVlLCBrZXksIHZhbCk7XG4gIG9iLmRlcC5ub3RpZnkoKTtcbiAgcmV0dXJuIHZhbFxufVxuXG4vKipcbiAqIERlbGV0ZSBhIHByb3BlcnR5IGFuZCB0cmlnZ2VyIGNoYW5nZSBpZiBuZWNlc3NhcnkuXG4gKi9cbmZ1bmN0aW9uIGRlbCAob2JqLCBrZXkpIHtcbiAgdmFyIG9iID0gb2JqLl9fb2JfXztcbiAgaWYgKG9iai5faXNWdWUgfHwgKG9iICYmIG9iLnZtQ291bnQpKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgJ0F2b2lkIGRlbGV0aW5nIHByb3BlcnRpZXMgb24gYSBWdWUgaW5zdGFuY2Ugb3IgaXRzIHJvb3QgJGRhdGEgJyArXG4gICAgICAnLSBqdXN0IHNldCBpdCB0byBudWxsLidcbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIGlmICghaGFzT3duKG9iaiwga2V5KSkge1xuICAgIHJldHVyblxuICB9XG4gIGRlbGV0ZSBvYmpba2V5XTtcbiAgaWYgKCFvYikge1xuICAgIHJldHVyblxuICB9XG4gIG9iLmRlcC5ub3RpZnkoKTtcbn1cblxuLyoqXG4gKiBDb2xsZWN0IGRlcGVuZGVuY2llcyBvbiBhcnJheSBlbGVtZW50cyB3aGVuIHRoZSBhcnJheSBpcyB0b3VjaGVkLCBzaW5jZVxuICogd2UgY2Fubm90IGludGVyY2VwdCBhcnJheSBlbGVtZW50IGFjY2VzcyBsaWtlIHByb3BlcnR5IGdldHRlcnMuXG4gKi9cbmZ1bmN0aW9uIGRlcGVuZEFycmF5ICh2YWx1ZSkge1xuICBmb3IgKHZhciBlID0gKHZvaWQgMCksIGkgPSAwLCBsID0gdmFsdWUubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZSA9IHZhbHVlW2ldO1xuICAgIGUgJiYgZS5fX29iX18gJiYgZS5fX29iX18uZGVwLmRlcGVuZCgpO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGUpKSB7XG4gICAgICBkZXBlbmRBcnJheShlKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbi8qKlxuICogT3B0aW9uIG92ZXJ3cml0aW5nIHN0cmF0ZWdpZXMgYXJlIGZ1bmN0aW9ucyB0aGF0IGhhbmRsZVxuICogaG93IHRvIG1lcmdlIGEgcGFyZW50IG9wdGlvbiB2YWx1ZSBhbmQgYSBjaGlsZCBvcHRpb25cbiAqIHZhbHVlIGludG8gdGhlIGZpbmFsIHZhbHVlLlxuICovXG52YXIgc3RyYXRzID0gY29uZmlnLm9wdGlvbk1lcmdlU3RyYXRlZ2llcztcblxuLyoqXG4gKiBPcHRpb25zIHdpdGggcmVzdHJpY3Rpb25zXG4gKi9cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHN0cmF0cy5lbCA9IHN0cmF0cy5wcm9wc0RhdGEgPSBmdW5jdGlvbiAocGFyZW50LCBjaGlsZCwgdm0sIGtleSkge1xuICAgIGlmICghdm0pIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIFwib3B0aW9uIFxcXCJcIiArIGtleSArIFwiXFxcIiBjYW4gb25seSBiZSB1c2VkIGR1cmluZyBpbnN0YW5jZSBcIiArXG4gICAgICAgICdjcmVhdGlvbiB3aXRoIHRoZSBgbmV3YCBrZXl3b3JkLidcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBkZWZhdWx0U3RyYXQocGFyZW50LCBjaGlsZClcbiAgfTtcbn1cblxuLyoqXG4gKiBIZWxwZXIgdGhhdCByZWN1cnNpdmVseSBtZXJnZXMgdHdvIGRhdGEgb2JqZWN0cyB0b2dldGhlci5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VEYXRhICh0bywgZnJvbSkge1xuICBpZiAoIWZyb20pIHsgcmV0dXJuIHRvIH1cbiAgdmFyIGtleSwgdG9WYWwsIGZyb21WYWw7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZnJvbSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IGtleXNbaV07XG4gICAgdG9WYWwgPSB0b1trZXldO1xuICAgIGZyb21WYWwgPSBmcm9tW2tleV07XG4gICAgaWYgKCFoYXNPd24odG8sIGtleSkpIHtcbiAgICAgIHNldCQxKHRvLCBrZXksIGZyb21WYWwpO1xuICAgIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdCh0b1ZhbCkgJiYgaXNQbGFpbk9iamVjdChmcm9tVmFsKSkge1xuICAgICAgbWVyZ2VEYXRhKHRvVmFsLCBmcm9tVmFsKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRvXG59XG5cbi8qKlxuICogRGF0YVxuICovXG5zdHJhdHMuZGF0YSA9IGZ1bmN0aW9uIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm1cbikge1xuICBpZiAoIXZtKSB7XG4gICAgLy8gaW4gYSBWdWUuZXh0ZW5kIG1lcmdlLCBib3RoIHNob3VsZCBiZSBmdW5jdGlvbnNcbiAgICBpZiAoIWNoaWxkVmFsKSB7XG4gICAgICByZXR1cm4gcGFyZW50VmFsXG4gICAgfVxuICAgIGlmICh0eXBlb2YgY2hpbGRWYWwgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgJ1RoZSBcImRhdGFcIiBvcHRpb24gc2hvdWxkIGJlIGEgZnVuY3Rpb24gJyArXG4gICAgICAgICd0aGF0IHJldHVybnMgYSBwZXItaW5zdGFuY2UgdmFsdWUgaW4gY29tcG9uZW50ICcgK1xuICAgICAgICAnZGVmaW5pdGlvbnMuJyxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgICByZXR1cm4gcGFyZW50VmFsXG4gICAgfVxuICAgIGlmICghcGFyZW50VmFsKSB7XG4gICAgICByZXR1cm4gY2hpbGRWYWxcbiAgICB9XG4gICAgLy8gd2hlbiBwYXJlbnRWYWwgJiBjaGlsZFZhbCBhcmUgYm90aCBwcmVzZW50LFxuICAgIC8vIHdlIG5lZWQgdG8gcmV0dXJuIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZVxuICAgIC8vIG1lcmdlZCByZXN1bHQgb2YgYm90aCBmdW5jdGlvbnMuLi4gbm8gbmVlZCB0b1xuICAgIC8vIGNoZWNrIGlmIHBhcmVudFZhbCBpcyBhIGZ1bmN0aW9uIGhlcmUgYmVjYXVzZVxuICAgIC8vIGl0IGhhcyB0byBiZSBhIGZ1bmN0aW9uIHRvIHBhc3MgcHJldmlvdXMgbWVyZ2VzLlxuICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZWREYXRhRm4gKCkge1xuICAgICAgcmV0dXJuIG1lcmdlRGF0YShcbiAgICAgICAgY2hpbGRWYWwuY2FsbCh0aGlzKSxcbiAgICAgICAgcGFyZW50VmFsLmNhbGwodGhpcylcbiAgICAgIClcbiAgICB9XG4gIH0gZWxzZSBpZiAocGFyZW50VmFsIHx8IGNoaWxkVmFsKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlZEluc3RhbmNlRGF0YUZuICgpIHtcbiAgICAgIC8vIGluc3RhbmNlIG1lcmdlXG4gICAgICB2YXIgaW5zdGFuY2VEYXRhID0gdHlwZW9mIGNoaWxkVmFsID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gY2hpbGRWYWwuY2FsbCh2bSlcbiAgICAgICAgOiBjaGlsZFZhbDtcbiAgICAgIHZhciBkZWZhdWx0RGF0YSA9IHR5cGVvZiBwYXJlbnRWYWwgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBwYXJlbnRWYWwuY2FsbCh2bSlcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICBpZiAoaW5zdGFuY2VEYXRhKSB7XG4gICAgICAgIHJldHVybiBtZXJnZURhdGEoaW5zdGFuY2VEYXRhLCBkZWZhdWx0RGF0YSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0RGF0YVxuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBIb29rcyBhbmQgcGFyYW0gYXR0cmlidXRlcyBhcmUgbWVyZ2VkIGFzIGFycmF5cy5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VIb29rIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbFxuKSB7XG4gIHJldHVybiBjaGlsZFZhbFxuICAgID8gcGFyZW50VmFsXG4gICAgICA/IHBhcmVudFZhbC5jb25jYXQoY2hpbGRWYWwpXG4gICAgICA6IEFycmF5LmlzQXJyYXkoY2hpbGRWYWwpXG4gICAgICAgID8gY2hpbGRWYWxcbiAgICAgICAgOiBbY2hpbGRWYWxdXG4gICAgOiBwYXJlbnRWYWxcbn1cblxuY29uZmlnLl9saWZlY3ljbGVIb29rcy5mb3JFYWNoKGZ1bmN0aW9uIChob29rKSB7XG4gIHN0cmF0c1tob29rXSA9IG1lcmdlSG9vaztcbn0pO1xuXG4vKipcbiAqIEFzc2V0c1xuICpcbiAqIFdoZW4gYSB2bSBpcyBwcmVzZW50IChpbnN0YW5jZSBjcmVhdGlvbiksIHdlIG5lZWQgdG8gZG9cbiAqIGEgdGhyZWUtd2F5IG1lcmdlIGJldHdlZW4gY29uc3RydWN0b3Igb3B0aW9ucywgaW5zdGFuY2VcbiAqIG9wdGlvbnMgYW5kIHBhcmVudCBvcHRpb25zLlxuICovXG5mdW5jdGlvbiBtZXJnZUFzc2V0cyAocGFyZW50VmFsLCBjaGlsZFZhbCkge1xuICB2YXIgcmVzID0gT2JqZWN0LmNyZWF0ZShwYXJlbnRWYWwgfHwgbnVsbCk7XG4gIHJldHVybiBjaGlsZFZhbFxuICAgID8gZXh0ZW5kKHJlcywgY2hpbGRWYWwpXG4gICAgOiByZXNcbn1cblxuY29uZmlnLl9hc3NldFR5cGVzLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgc3RyYXRzW3R5cGUgKyAncyddID0gbWVyZ2VBc3NldHM7XG59KTtcblxuLyoqXG4gKiBXYXRjaGVycy5cbiAqXG4gKiBXYXRjaGVycyBoYXNoZXMgc2hvdWxkIG5vdCBvdmVyd3JpdGUgb25lXG4gKiBhbm90aGVyLCBzbyB3ZSBtZXJnZSB0aGVtIGFzIGFycmF5cy5cbiAqL1xuc3RyYXRzLndhdGNoID0gZnVuY3Rpb24gKHBhcmVudFZhbCwgY2hpbGRWYWwpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghY2hpbGRWYWwpIHsgcmV0dXJuIHBhcmVudFZhbCB9XG4gIGlmICghcGFyZW50VmFsKSB7IHJldHVybiBjaGlsZFZhbCB9XG4gIHZhciByZXQgPSB7fTtcbiAgZXh0ZW5kKHJldCwgcGFyZW50VmFsKTtcbiAgZm9yICh2YXIga2V5IGluIGNoaWxkVmFsKSB7XG4gICAgdmFyIHBhcmVudCA9IHJldFtrZXldO1xuICAgIHZhciBjaGlsZCA9IGNoaWxkVmFsW2tleV07XG4gICAgaWYgKHBhcmVudCAmJiAhQXJyYXkuaXNBcnJheShwYXJlbnQpKSB7XG4gICAgICBwYXJlbnQgPSBbcGFyZW50XTtcbiAgICB9XG4gICAgcmV0W2tleV0gPSBwYXJlbnRcbiAgICAgID8gcGFyZW50LmNvbmNhdChjaGlsZClcbiAgICAgIDogW2NoaWxkXTtcbiAgfVxuICByZXR1cm4gcmV0XG59O1xuXG4vKipcbiAqIE90aGVyIG9iamVjdCBoYXNoZXMuXG4gKi9cbnN0cmF0cy5wcm9wcyA9XG5zdHJhdHMubWV0aG9kcyA9XG5zdHJhdHMuY29tcHV0ZWQgPSBmdW5jdGlvbiAocGFyZW50VmFsLCBjaGlsZFZhbCkge1xuICBpZiAoIWNoaWxkVmFsKSB7IHJldHVybiBwYXJlbnRWYWwgfVxuICBpZiAoIXBhcmVudFZhbCkgeyByZXR1cm4gY2hpbGRWYWwgfVxuICB2YXIgcmV0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgZXh0ZW5kKHJldCwgcGFyZW50VmFsKTtcbiAgZXh0ZW5kKHJldCwgY2hpbGRWYWwpO1xuICByZXR1cm4gcmV0XG59O1xuXG4vKipcbiAqIERlZmF1bHQgc3RyYXRlZ3kuXG4gKi9cbnZhciBkZWZhdWx0U3RyYXQgPSBmdW5jdGlvbiAocGFyZW50VmFsLCBjaGlsZFZhbCkge1xuICByZXR1cm4gY2hpbGRWYWwgPT09IHVuZGVmaW5lZFxuICAgID8gcGFyZW50VmFsXG4gICAgOiBjaGlsZFZhbFxufTtcblxuLyoqXG4gKiBWYWxpZGF0ZSBjb21wb25lbnQgbmFtZXNcbiAqL1xuZnVuY3Rpb24gY2hlY2tDb21wb25lbnRzIChvcHRpb25zKSB7XG4gIGZvciAodmFyIGtleSBpbiBvcHRpb25zLmNvbXBvbmVudHMpIHtcbiAgICB2YXIgbG93ZXIgPSBrZXkudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAoaXNCdWlsdEluVGFnKGxvd2VyKSB8fCBjb25maWcuaXNSZXNlcnZlZFRhZyhsb3dlcikpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdEbyBub3QgdXNlIGJ1aWx0LWluIG9yIHJlc2VydmVkIEhUTUwgZWxlbWVudHMgYXMgY29tcG9uZW50ICcgK1xuICAgICAgICAnaWQ6ICcgKyBrZXlcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogRW5zdXJlIGFsbCBwcm9wcyBvcHRpb24gc3ludGF4IGFyZSBub3JtYWxpemVkIGludG8gdGhlXG4gKiBPYmplY3QtYmFzZWQgZm9ybWF0LlxuICovXG5mdW5jdGlvbiBub3JtYWxpemVQcm9wcyAob3B0aW9ucykge1xuICB2YXIgcHJvcHMgPSBvcHRpb25zLnByb3BzO1xuICBpZiAoIXByb3BzKSB7IHJldHVybiB9XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIGksIHZhbCwgbmFtZTtcbiAgaWYgKEFycmF5LmlzQXJyYXkocHJvcHMpKSB7XG4gICAgaSA9IHByb3BzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB2YWwgPSBwcm9wc1tpXTtcbiAgICAgIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgICAgICBuYW1lID0gY2FtZWxpemUodmFsKTtcbiAgICAgICAgcmVzW25hbWVdID0geyB0eXBlOiBudWxsIH07XG4gICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgd2FybigncHJvcHMgbXVzdCBiZSBzdHJpbmdzIHdoZW4gdXNpbmcgYXJyYXkgc3ludGF4LicpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHByb3BzKSkge1xuICAgIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgICAgdmFsID0gcHJvcHNba2V5XTtcbiAgICAgIG5hbWUgPSBjYW1lbGl6ZShrZXkpO1xuICAgICAgcmVzW25hbWVdID0gaXNQbGFpbk9iamVjdCh2YWwpXG4gICAgICAgID8gdmFsXG4gICAgICAgIDogeyB0eXBlOiB2YWwgfTtcbiAgICB9XG4gIH1cbiAgb3B0aW9ucy5wcm9wcyA9IHJlcztcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgcmF3IGZ1bmN0aW9uIGRpcmVjdGl2ZXMgaW50byBvYmplY3QgZm9ybWF0LlxuICovXG5mdW5jdGlvbiBub3JtYWxpemVEaXJlY3RpdmVzIChvcHRpb25zKSB7XG4gIHZhciBkaXJzID0gb3B0aW9ucy5kaXJlY3RpdmVzO1xuICBpZiAoZGlycykge1xuICAgIGZvciAodmFyIGtleSBpbiBkaXJzKSB7XG4gICAgICB2YXIgZGVmID0gZGlyc1trZXldO1xuICAgICAgaWYgKHR5cGVvZiBkZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZGlyc1trZXldID0geyBiaW5kOiBkZWYsIHVwZGF0ZTogZGVmIH07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogTWVyZ2UgdHdvIG9wdGlvbiBvYmplY3RzIGludG8gYSBuZXcgb25lLlxuICogQ29yZSB1dGlsaXR5IHVzZWQgaW4gYm90aCBpbnN0YW50aWF0aW9uIGFuZCBpbmhlcml0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VPcHRpb25zIChcbiAgcGFyZW50LFxuICBjaGlsZCxcbiAgdm1cbikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNoZWNrQ29tcG9uZW50cyhjaGlsZCk7XG4gIH1cbiAgbm9ybWFsaXplUHJvcHMoY2hpbGQpO1xuICBub3JtYWxpemVEaXJlY3RpdmVzKGNoaWxkKTtcbiAgdmFyIGV4dGVuZHNGcm9tID0gY2hpbGQuZXh0ZW5kcztcbiAgaWYgKGV4dGVuZHNGcm9tKSB7XG4gICAgcGFyZW50ID0gdHlwZW9mIGV4dGVuZHNGcm9tID09PSAnZnVuY3Rpb24nXG4gICAgICA/IG1lcmdlT3B0aW9ucyhwYXJlbnQsIGV4dGVuZHNGcm9tLm9wdGlvbnMsIHZtKVxuICAgICAgOiBtZXJnZU9wdGlvbnMocGFyZW50LCBleHRlbmRzRnJvbSwgdm0pO1xuICB9XG4gIGlmIChjaGlsZC5taXhpbnMpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGNoaWxkLm1peGlucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBtaXhpbiA9IGNoaWxkLm1peGluc1tpXTtcbiAgICAgIGlmIChtaXhpbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBWdWUkMykge1xuICAgICAgICBtaXhpbiA9IG1peGluLm9wdGlvbnM7XG4gICAgICB9XG4gICAgICBwYXJlbnQgPSBtZXJnZU9wdGlvbnMocGFyZW50LCBtaXhpbiwgdm0pO1xuICAgIH1cbiAgfVxuICB2YXIgb3B0aW9ucyA9IHt9O1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBwYXJlbnQpIHtcbiAgICBtZXJnZUZpZWxkKGtleSk7XG4gIH1cbiAgZm9yIChrZXkgaW4gY2hpbGQpIHtcbiAgICBpZiAoIWhhc093bihwYXJlbnQsIGtleSkpIHtcbiAgICAgIG1lcmdlRmllbGQoa2V5KTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gbWVyZ2VGaWVsZCAoa2V5KSB7XG4gICAgdmFyIHN0cmF0ID0gc3RyYXRzW2tleV0gfHwgZGVmYXVsdFN0cmF0O1xuICAgIG9wdGlvbnNba2V5XSA9IHN0cmF0KHBhcmVudFtrZXldLCBjaGlsZFtrZXldLCB2bSwga2V5KTtcbiAgfVxuICByZXR1cm4gb3B0aW9uc1xufVxuXG4vKipcbiAqIFJlc29sdmUgYW4gYXNzZXQuXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgYmVjYXVzZSBjaGlsZCBpbnN0YW5jZXMgbmVlZCBhY2Nlc3NcbiAqIHRvIGFzc2V0cyBkZWZpbmVkIGluIGl0cyBhbmNlc3RvciBjaGFpbi5cbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZUFzc2V0IChcbiAgb3B0aW9ucyxcbiAgdHlwZSxcbiAgaWQsXG4gIHdhcm5NaXNzaW5nXG4pIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICh0eXBlb2YgaWQgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIGFzc2V0cyA9IG9wdGlvbnNbdHlwZV07XG4gIC8vIGNoZWNrIGxvY2FsIHJlZ2lzdHJhdGlvbiB2YXJpYXRpb25zIGZpcnN0XG4gIGlmIChoYXNPd24oYXNzZXRzLCBpZCkpIHsgcmV0dXJuIGFzc2V0c1tpZF0gfVxuICB2YXIgY2FtZWxpemVkSWQgPSBjYW1lbGl6ZShpZCk7XG4gIGlmIChoYXNPd24oYXNzZXRzLCBjYW1lbGl6ZWRJZCkpIHsgcmV0dXJuIGFzc2V0c1tjYW1lbGl6ZWRJZF0gfVxuICB2YXIgUGFzY2FsQ2FzZUlkID0gY2FwaXRhbGl6ZShjYW1lbGl6ZWRJZCk7XG4gIGlmIChoYXNPd24oYXNzZXRzLCBQYXNjYWxDYXNlSWQpKSB7IHJldHVybiBhc3NldHNbUGFzY2FsQ2FzZUlkXSB9XG4gIC8vIGZhbGxiYWNrIHRvIHByb3RvdHlwZSBjaGFpblxuICB2YXIgcmVzID0gYXNzZXRzW2lkXSB8fCBhc3NldHNbY2FtZWxpemVkSWRdIHx8IGFzc2V0c1tQYXNjYWxDYXNlSWRdO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuTWlzc2luZyAmJiAhcmVzKSB7XG4gICAgd2FybihcbiAgICAgICdGYWlsZWQgdG8gcmVzb2x2ZSAnICsgdHlwZS5zbGljZSgwLCAtMSkgKyAnOiAnICsgaWQsXG4gICAgICBvcHRpb25zXG4gICAgKTtcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiB2YWxpZGF0ZVByb3AgKFxuICBrZXksXG4gIHByb3BPcHRpb25zLFxuICBwcm9wc0RhdGEsXG4gIHZtXG4pIHtcbiAgdmFyIHByb3AgPSBwcm9wT3B0aW9uc1trZXldO1xuICB2YXIgYWJzZW50ID0gIWhhc093bihwcm9wc0RhdGEsIGtleSk7XG4gIHZhciB2YWx1ZSA9IHByb3BzRGF0YVtrZXldO1xuICAvLyBoYW5kbGUgYm9vbGVhbiBwcm9wc1xuICBpZiAoaXNUeXBlKEJvb2xlYW4sIHByb3AudHlwZSkpIHtcbiAgICBpZiAoYWJzZW50ICYmICFoYXNPd24ocHJvcCwgJ2RlZmF1bHQnKSkge1xuICAgICAgdmFsdWUgPSBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKCFpc1R5cGUoU3RyaW5nLCBwcm9wLnR5cGUpICYmICh2YWx1ZSA9PT0gJycgfHwgdmFsdWUgPT09IGh5cGhlbmF0ZShrZXkpKSkge1xuICAgICAgdmFsdWUgPSB0cnVlO1xuICAgIH1cbiAgfVxuICAvLyBjaGVjayBkZWZhdWx0IHZhbHVlXG4gIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdmFsdWUgPSBnZXRQcm9wRGVmYXVsdFZhbHVlKHZtLCBwcm9wLCBrZXkpO1xuICAgIC8vIHNpbmNlIHRoZSBkZWZhdWx0IHZhbHVlIGlzIGEgZnJlc2ggY29weSxcbiAgICAvLyBtYWtlIHN1cmUgdG8gb2JzZXJ2ZSBpdC5cbiAgICB2YXIgcHJldlNob3VsZENvbnZlcnQgPSBvYnNlcnZlclN0YXRlLnNob3VsZENvbnZlcnQ7XG4gICAgb2JzZXJ2ZXJTdGF0ZS5zaG91bGRDb252ZXJ0ID0gdHJ1ZTtcbiAgICBvYnNlcnZlKHZhbHVlKTtcbiAgICBvYnNlcnZlclN0YXRlLnNob3VsZENvbnZlcnQgPSBwcmV2U2hvdWxkQ29udmVydDtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydFByb3AocHJvcCwga2V5LCB2YWx1ZSwgdm0sIGFic2VudCk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlXG59XG5cbi8qKlxuICogR2V0IHRoZSBkZWZhdWx0IHZhbHVlIG9mIGEgcHJvcC5cbiAqL1xuZnVuY3Rpb24gZ2V0UHJvcERlZmF1bHRWYWx1ZSAodm0sIHByb3AsIGtleSkge1xuICAvLyBubyBkZWZhdWx0LCByZXR1cm4gdW5kZWZpbmVkXG4gIGlmICghaGFzT3duKHByb3AsICdkZWZhdWx0JykpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cbiAgdmFyIGRlZiA9IHByb3AuZGVmYXVsdDtcbiAgLy8gd2FybiBhZ2FpbnN0IG5vbi1mYWN0b3J5IGRlZmF1bHRzIGZvciBPYmplY3QgJiBBcnJheVxuICBpZiAoaXNPYmplY3QoZGVmKSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICdJbnZhbGlkIGRlZmF1bHQgdmFsdWUgZm9yIHByb3AgXCInICsga2V5ICsgJ1wiOiAnICtcbiAgICAgICdQcm9wcyB3aXRoIHR5cGUgT2JqZWN0L0FycmF5IG11c3QgdXNlIGEgZmFjdG9yeSBmdW5jdGlvbiAnICtcbiAgICAgICd0byByZXR1cm4gdGhlIGRlZmF1bHQgdmFsdWUuJyxcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxuICAvLyB0aGUgcmF3IHByb3AgdmFsdWUgd2FzIGFsc28gdW5kZWZpbmVkIGZyb20gcHJldmlvdXMgcmVuZGVyLFxuICAvLyByZXR1cm4gcHJldmlvdXMgZGVmYXVsdCB2YWx1ZSB0byBhdm9pZCB1bm5lY2Vzc2FyeSB3YXRjaGVyIHRyaWdnZXJcbiAgaWYgKHZtICYmIHZtLiRvcHRpb25zLnByb3BzRGF0YSAmJlxuICAgIHZtLiRvcHRpb25zLnByb3BzRGF0YVtrZXldID09PSB1bmRlZmluZWQgJiZcbiAgICB2bVtrZXldICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gdm1ba2V5XVxuICB9XG4gIC8vIGNhbGwgZmFjdG9yeSBmdW5jdGlvbiBmb3Igbm9uLUZ1bmN0aW9uIHR5cGVzXG4gIHJldHVybiB0eXBlb2YgZGVmID09PSAnZnVuY3Rpb24nICYmIHByb3AudHlwZSAhPT0gRnVuY3Rpb25cbiAgICA/IGRlZi5jYWxsKHZtKVxuICAgIDogZGVmXG59XG5cbi8qKlxuICogQXNzZXJ0IHdoZXRoZXIgYSBwcm9wIGlzIHZhbGlkLlxuICovXG5mdW5jdGlvbiBhc3NlcnRQcm9wIChcbiAgcHJvcCxcbiAgbmFtZSxcbiAgdmFsdWUsXG4gIHZtLFxuICBhYnNlbnRcbikge1xuICBpZiAocHJvcC5yZXF1aXJlZCAmJiBhYnNlbnQpIHtcbiAgICB3YXJuKFxuICAgICAgJ01pc3NpbmcgcmVxdWlyZWQgcHJvcDogXCInICsgbmFtZSArICdcIicsXG4gICAgICB2bVxuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKHZhbHVlID09IG51bGwgJiYgIXByb3AucmVxdWlyZWQpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgdHlwZSA9IHByb3AudHlwZTtcbiAgdmFyIHZhbGlkID0gIXR5cGUgfHwgdHlwZSA9PT0gdHJ1ZTtcbiAgdmFyIGV4cGVjdGVkVHlwZXMgPSBbXTtcbiAgaWYgKHR5cGUpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkodHlwZSkpIHtcbiAgICAgIHR5cGUgPSBbdHlwZV07XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHlwZS5sZW5ndGggJiYgIXZhbGlkOyBpKyspIHtcbiAgICAgIHZhciBhc3NlcnRlZFR5cGUgPSBhc3NlcnRUeXBlKHZhbHVlLCB0eXBlW2ldKTtcbiAgICAgIGV4cGVjdGVkVHlwZXMucHVzaChhc3NlcnRlZFR5cGUuZXhwZWN0ZWRUeXBlIHx8ICcnKTtcbiAgICAgIHZhbGlkID0gYXNzZXJ0ZWRUeXBlLnZhbGlkO1xuICAgIH1cbiAgfVxuICBpZiAoIXZhbGlkKSB7XG4gICAgd2FybihcbiAgICAgICdJbnZhbGlkIHByb3A6IHR5cGUgY2hlY2sgZmFpbGVkIGZvciBwcm9wIFwiJyArIG5hbWUgKyAnXCIuJyArXG4gICAgICAnIEV4cGVjdGVkICcgKyBleHBlY3RlZFR5cGVzLm1hcChjYXBpdGFsaXplKS5qb2luKCcsICcpICtcbiAgICAgICcsIGdvdCAnICsgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKS5zbGljZSg4LCAtMSkgKyAnLicsXG4gICAgICB2bVxuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHZhbGlkYXRvciA9IHByb3AudmFsaWRhdG9yO1xuICBpZiAodmFsaWRhdG9yKSB7XG4gICAgaWYgKCF2YWxpZGF0b3IodmFsdWUpKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnSW52YWxpZCBwcm9wOiBjdXN0b20gdmFsaWRhdG9yIGNoZWNrIGZhaWxlZCBmb3IgcHJvcCBcIicgKyBuYW1lICsgJ1wiLicsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFzc2VydCB0aGUgdHlwZSBvZiBhIHZhbHVlXG4gKi9cbmZ1bmN0aW9uIGFzc2VydFR5cGUgKHZhbHVlLCB0eXBlKSB7XG4gIHZhciB2YWxpZDtcbiAgdmFyIGV4cGVjdGVkVHlwZSA9IGdldFR5cGUodHlwZSk7XG4gIGlmIChleHBlY3RlZFR5cGUgPT09ICdTdHJpbmcnKSB7XG4gICAgdmFsaWQgPSB0eXBlb2YgdmFsdWUgPT09IChleHBlY3RlZFR5cGUgPSAnc3RyaW5nJyk7XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSAnTnVtYmVyJykge1xuICAgIHZhbGlkID0gdHlwZW9mIHZhbHVlID09PSAoZXhwZWN0ZWRUeXBlID0gJ251bWJlcicpO1xuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ0Jvb2xlYW4nKSB7XG4gICAgdmFsaWQgPSB0eXBlb2YgdmFsdWUgPT09IChleHBlY3RlZFR5cGUgPSAnYm9vbGVhbicpO1xuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ0Z1bmN0aW9uJykge1xuICAgIHZhbGlkID0gdHlwZW9mIHZhbHVlID09PSAoZXhwZWN0ZWRUeXBlID0gJ2Z1bmN0aW9uJyk7XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSAnT2JqZWN0Jykge1xuICAgIHZhbGlkID0gaXNQbGFpbk9iamVjdCh2YWx1ZSk7XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSAnQXJyYXknKSB7XG4gICAgdmFsaWQgPSBBcnJheS5pc0FycmF5KHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICB2YWxpZCA9IHZhbHVlIGluc3RhbmNlb2YgdHlwZTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHZhbGlkOiB2YWxpZCxcbiAgICBleHBlY3RlZFR5cGU6IGV4cGVjdGVkVHlwZVxuICB9XG59XG5cbi8qKlxuICogVXNlIGZ1bmN0aW9uIHN0cmluZyBuYW1lIHRvIGNoZWNrIGJ1aWx0LWluIHR5cGVzLFxuICogYmVjYXVzZSBhIHNpbXBsZSBlcXVhbGl0eSBjaGVjayB3aWxsIGZhaWwgd2hlbiBydW5uaW5nXG4gKiBhY3Jvc3MgZGlmZmVyZW50IHZtcyAvIGlmcmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGdldFR5cGUgKGZuKSB7XG4gIHZhciBtYXRjaCA9IGZuICYmIGZuLnRvU3RyaW5nKCkubWF0Y2goL15cXHMqZnVuY3Rpb24gKFxcdyspLyk7XG4gIHJldHVybiBtYXRjaCAmJiBtYXRjaFsxXVxufVxuXG5mdW5jdGlvbiBpc1R5cGUgKHR5cGUsIGZuKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShmbikpIHtcbiAgICByZXR1cm4gZ2V0VHlwZShmbikgPT09IGdldFR5cGUodHlwZSlcbiAgfVxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gZm4ubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoZ2V0VHlwZShmbltpXSkgPT09IGdldFR5cGUodHlwZSkpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHJldHVybiBmYWxzZVxufVxuXG5cblxudmFyIHV0aWwgPSBPYmplY3QuZnJlZXplKHtcblx0ZGVmaW5lUmVhY3RpdmU6IGRlZmluZVJlYWN0aXZlJCQxLFxuXHRfdG9TdHJpbmc6IF90b1N0cmluZyxcblx0dG9OdW1iZXI6IHRvTnVtYmVyLFxuXHRtYWtlTWFwOiBtYWtlTWFwLFxuXHRpc0J1aWx0SW5UYWc6IGlzQnVpbHRJblRhZyxcblx0cmVtb3ZlOiByZW1vdmUkMSxcblx0aGFzT3duOiBoYXNPd24sXG5cdGlzUHJpbWl0aXZlOiBpc1ByaW1pdGl2ZSxcblx0Y2FjaGVkOiBjYWNoZWQsXG5cdGNhbWVsaXplOiBjYW1lbGl6ZSxcblx0Y2FwaXRhbGl6ZTogY2FwaXRhbGl6ZSxcblx0aHlwaGVuYXRlOiBoeXBoZW5hdGUsXG5cdGJpbmQ6IGJpbmQkMSxcblx0dG9BcnJheTogdG9BcnJheSxcblx0ZXh0ZW5kOiBleHRlbmQsXG5cdGlzT2JqZWN0OiBpc09iamVjdCxcblx0aXNQbGFpbk9iamVjdDogaXNQbGFpbk9iamVjdCxcblx0dG9PYmplY3Q6IHRvT2JqZWN0LFxuXHRub29wOiBub29wLFxuXHRubzogbm8sXG5cdGlkZW50aXR5OiBpZGVudGl0eSxcblx0Z2VuU3RhdGljS2V5czogZ2VuU3RhdGljS2V5cyxcblx0bG9vc2VFcXVhbDogbG9vc2VFcXVhbCxcblx0bG9vc2VJbmRleE9mOiBsb29zZUluZGV4T2YsXG5cdGlzUmVzZXJ2ZWQ6IGlzUmVzZXJ2ZWQsXG5cdGRlZjogZGVmLFxuXHRwYXJzZVBhdGg6IHBhcnNlUGF0aCxcblx0aGFzUHJvdG86IGhhc1Byb3RvLFxuXHRpbkJyb3dzZXI6IGluQnJvd3Nlcixcblx0VUE6IFVBLFxuXHRpc0lFOiBpc0lFLFxuXHRpc0lFOTogaXNJRTksXG5cdGlzRWRnZTogaXNFZGdlLFxuXHRpc0FuZHJvaWQ6IGlzQW5kcm9pZCxcblx0aXNJT1M6IGlzSU9TLFxuXHRpc1NlcnZlclJlbmRlcmluZzogaXNTZXJ2ZXJSZW5kZXJpbmcsXG5cdGRldnRvb2xzOiBkZXZ0b29scyxcblx0bmV4dFRpY2s6IG5leHRUaWNrLFxuXHRnZXQgX1NldCAoKSB7IHJldHVybiBfU2V0OyB9LFxuXHRtZXJnZU9wdGlvbnM6IG1lcmdlT3B0aW9ucyxcblx0cmVzb2x2ZUFzc2V0OiByZXNvbHZlQXNzZXQsXG5cdGdldCB3YXJuICgpIHsgcmV0dXJuIHdhcm47IH0sXG5cdGdldCBmb3JtYXRDb21wb25lbnROYW1lICgpIHsgcmV0dXJuIGZvcm1hdENvbXBvbmVudE5hbWU7IH0sXG5cdHZhbGlkYXRlUHJvcDogdmFsaWRhdGVQcm9wXG59KTtcblxuLyogbm90IHR5cGUgY2hlY2tpbmcgdGhpcyBmaWxlIGJlY2F1c2UgZmxvdyBkb2Vzbid0IHBsYXkgd2VsbCB3aXRoIFByb3h5ICovXG5cbnZhciBpbml0UHJveHk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBhbGxvd2VkR2xvYmFscyA9IG1ha2VNYXAoXG4gICAgJ0luZmluaXR5LHVuZGVmaW5lZCxOYU4saXNGaW5pdGUsaXNOYU4sJyArXG4gICAgJ3BhcnNlRmxvYXQscGFyc2VJbnQsZGVjb2RlVVJJLGRlY29kZVVSSUNvbXBvbmVudCxlbmNvZGVVUkksZW5jb2RlVVJJQ29tcG9uZW50LCcgK1xuICAgICdNYXRoLE51bWJlcixEYXRlLEFycmF5LE9iamVjdCxCb29sZWFuLFN0cmluZyxSZWdFeHAsTWFwLFNldCxKU09OLEludGwsJyArXG4gICAgJ3JlcXVpcmUnIC8vIGZvciBXZWJwYWNrL0Jyb3dzZXJpZnlcbiAgKTtcblxuICB2YXIgd2Fybk5vblByZXNlbnQgPSBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHtcbiAgICB3YXJuKFxuICAgICAgXCJQcm9wZXJ0eSBvciBtZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIG5vdCBkZWZpbmVkIG9uIHRoZSBpbnN0YW5jZSBidXQgXCIgK1xuICAgICAgXCJyZWZlcmVuY2VkIGR1cmluZyByZW5kZXIuIE1ha2Ugc3VyZSB0byBkZWNsYXJlIHJlYWN0aXZlIGRhdGEgXCIgK1xuICAgICAgXCJwcm9wZXJ0aWVzIGluIHRoZSBkYXRhIG9wdGlvbi5cIixcbiAgICAgIHRhcmdldFxuICAgICk7XG4gIH07XG5cbiAgdmFyIGhhc1Byb3h5ID1cbiAgICB0eXBlb2YgUHJveHkgIT09ICd1bmRlZmluZWQnICYmXG4gICAgUHJveHkudG9TdHJpbmcoKS5tYXRjaCgvbmF0aXZlIGNvZGUvKTtcblxuICBpZiAoaGFzUHJveHkpIHtcbiAgICB2YXIgaXNCdWlsdEluTW9kaWZpZXIgPSBtYWtlTWFwKCdzdG9wLHByZXZlbnQsc2VsZixjdHJsLHNoaWZ0LGFsdCxtZXRhJyk7XG4gICAgY29uZmlnLmtleUNvZGVzID0gbmV3IFByb3h5KGNvbmZpZy5rZXlDb2Rlcywge1xuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQgKHRhcmdldCwga2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAoaXNCdWlsdEluTW9kaWZpZXIoa2V5KSkge1xuICAgICAgICAgIHdhcm4oKFwiQXZvaWQgb3ZlcndyaXRpbmcgYnVpbHQtaW4gbW9kaWZpZXIgaW4gY29uZmlnLmtleUNvZGVzOiAuXCIgKyBrZXkpKTtcbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHZhbHVlO1xuICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHZhciBoYXNIYW5kbGVyID0ge1xuICAgIGhhczogZnVuY3Rpb24gaGFzICh0YXJnZXQsIGtleSkge1xuICAgICAgdmFyIGhhcyA9IGtleSBpbiB0YXJnZXQ7XG4gICAgICB2YXIgaXNBbGxvd2VkID0gYWxsb3dlZEdsb2JhbHMoa2V5KSB8fCBrZXkuY2hhckF0KDApID09PSAnXyc7XG4gICAgICBpZiAoIWhhcyAmJiAhaXNBbGxvd2VkKSB7XG4gICAgICAgIHdhcm5Ob25QcmVzZW50KHRhcmdldCwga2V5KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBoYXMgfHwgIWlzQWxsb3dlZFxuICAgIH1cbiAgfTtcblxuICB2YXIgZ2V0SGFuZGxlciA9IHtcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCAodGFyZ2V0LCBrZXkpIHtcbiAgICAgIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiAhKGtleSBpbiB0YXJnZXQpKSB7XG4gICAgICAgIHdhcm5Ob25QcmVzZW50KHRhcmdldCwga2V5KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0YXJnZXRba2V5XVxuICAgIH1cbiAgfTtcblxuICBpbml0UHJveHkgPSBmdW5jdGlvbiBpbml0UHJveHkgKHZtKSB7XG4gICAgaWYgKGhhc1Byb3h5KSB7XG4gICAgICAvLyBkZXRlcm1pbmUgd2hpY2ggcHJveHkgaGFuZGxlciB0byB1c2VcbiAgICAgIHZhciBvcHRpb25zID0gdm0uJG9wdGlvbnM7XG4gICAgICB2YXIgaGFuZGxlcnMgPSBvcHRpb25zLnJlbmRlciAmJiBvcHRpb25zLnJlbmRlci5fd2l0aFN0cmlwcGVkXG4gICAgICAgID8gZ2V0SGFuZGxlclxuICAgICAgICA6IGhhc0hhbmRsZXI7XG4gICAgICB2bS5fcmVuZGVyUHJveHkgPSBuZXcgUHJveHkodm0sIGhhbmRsZXJzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdm0uX3JlbmRlclByb3h5ID0gdm07XG4gICAgfVxuICB9O1xufVxuXG4vKiAgKi9cblxudmFyIFZOb2RlID0gZnVuY3Rpb24gVk5vZGUgKFxuICB0YWcsXG4gIGRhdGEsXG4gIGNoaWxkcmVuLFxuICB0ZXh0LFxuICBlbG0sXG4gIGNvbnRleHQsXG4gIGNvbXBvbmVudE9wdGlvbnNcbikge1xuICB0aGlzLnRhZyA9IHRhZztcbiAgdGhpcy5kYXRhID0gZGF0YTtcbiAgdGhpcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICB0aGlzLnRleHQgPSB0ZXh0O1xuICB0aGlzLmVsbSA9IGVsbTtcbiAgdGhpcy5ucyA9IHVuZGVmaW5lZDtcbiAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5mdW5jdGlvbmFsQ29udGV4dCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5rZXkgPSBkYXRhICYmIGRhdGEua2V5O1xuICB0aGlzLmNvbXBvbmVudE9wdGlvbnMgPSBjb21wb25lbnRPcHRpb25zO1xuICB0aGlzLmNvbXBvbmVudEluc3RhbmNlID0gdW5kZWZpbmVkO1xuICB0aGlzLnBhcmVudCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5yYXcgPSBmYWxzZTtcbiAgdGhpcy5pc1N0YXRpYyA9IGZhbHNlO1xuICB0aGlzLmlzUm9vdEluc2VydCA9IHRydWU7XG4gIHRoaXMuaXNDb21tZW50ID0gZmFsc2U7XG4gIHRoaXMuaXNDbG9uZWQgPSBmYWxzZTtcbiAgdGhpcy5pc09uY2UgPSBmYWxzZTtcbn07XG5cbnZhciBwcm90b3R5cGVBY2Nlc3NvcnMgPSB7IGNoaWxkOiB7fSB9O1xuXG4vLyBERVBSRUNBVEVEOiBhbGlhcyBmb3IgY29tcG9uZW50SW5zdGFuY2UgZm9yIGJhY2t3YXJkcyBjb21wYXQuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xucHJvdG90eXBlQWNjZXNzb3JzLmNoaWxkLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuY29tcG9uZW50SW5zdGFuY2Vcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBWTm9kZS5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyApO1xuXG52YXIgY3JlYXRlRW1wdHlWTm9kZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIG5vZGUgPSBuZXcgVk5vZGUoKTtcbiAgbm9kZS50ZXh0ID0gJyc7XG4gIG5vZGUuaXNDb21tZW50ID0gdHJ1ZTtcbiAgcmV0dXJuIG5vZGVcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZVRleHRWTm9kZSAodmFsKSB7XG4gIHJldHVybiBuZXcgVk5vZGUodW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgU3RyaW5nKHZhbCkpXG59XG5cbi8vIG9wdGltaXplZCBzaGFsbG93IGNsb25lXG4vLyB1c2VkIGZvciBzdGF0aWMgbm9kZXMgYW5kIHNsb3Qgbm9kZXMgYmVjYXVzZSB0aGV5IG1heSBiZSByZXVzZWQgYWNyb3NzXG4vLyBtdWx0aXBsZSByZW5kZXJzLCBjbG9uaW5nIHRoZW0gYXZvaWRzIGVycm9ycyB3aGVuIERPTSBtYW5pcHVsYXRpb25zIHJlbHlcbi8vIG9uIHRoZWlyIGVsbSByZWZlcmVuY2UuXG5mdW5jdGlvbiBjbG9uZVZOb2RlICh2bm9kZSkge1xuICB2YXIgY2xvbmVkID0gbmV3IFZOb2RlKFxuICAgIHZub2RlLnRhZyxcbiAgICB2bm9kZS5kYXRhLFxuICAgIHZub2RlLmNoaWxkcmVuLFxuICAgIHZub2RlLnRleHQsXG4gICAgdm5vZGUuZWxtLFxuICAgIHZub2RlLmNvbnRleHQsXG4gICAgdm5vZGUuY29tcG9uZW50T3B0aW9uc1xuICApO1xuICBjbG9uZWQubnMgPSB2bm9kZS5ucztcbiAgY2xvbmVkLmlzU3RhdGljID0gdm5vZGUuaXNTdGF0aWM7XG4gIGNsb25lZC5rZXkgPSB2bm9kZS5rZXk7XG4gIGNsb25lZC5pc0Nsb25lZCA9IHRydWU7XG4gIHJldHVybiBjbG9uZWRcbn1cblxuZnVuY3Rpb24gY2xvbmVWTm9kZXMgKHZub2Rlcykge1xuICB2YXIgcmVzID0gbmV3IEFycmF5KHZub2Rlcy5sZW5ndGgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHZub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgIHJlc1tpXSA9IGNsb25lVk5vZGUodm5vZGVzW2ldKTtcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG52YXIgaG9va3MgPSB7IGluaXQ6IGluaXQsIHByZXBhdGNoOiBwcmVwYXRjaCwgaW5zZXJ0OiBpbnNlcnQsIGRlc3Ryb3k6IGRlc3Ryb3kkMSB9O1xudmFyIGhvb2tzVG9NZXJnZSA9IE9iamVjdC5rZXlzKGhvb2tzKTtcblxuZnVuY3Rpb24gY3JlYXRlQ29tcG9uZW50IChcbiAgQ3RvcixcbiAgZGF0YSxcbiAgY29udGV4dCxcbiAgY2hpbGRyZW4sXG4gIHRhZ1xuKSB7XG4gIGlmICghQ3Rvcikge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGJhc2VDdG9yID0gY29udGV4dC4kb3B0aW9ucy5fYmFzZTtcbiAgaWYgKGlzT2JqZWN0KEN0b3IpKSB7XG4gICAgQ3RvciA9IGJhc2VDdG9yLmV4dGVuZChDdG9yKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgQ3RvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB3YXJuKChcIkludmFsaWQgQ29tcG9uZW50IGRlZmluaXRpb246IFwiICsgKFN0cmluZyhDdG9yKSkpLCBjb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuXG4gIH1cblxuICAvLyBhc3luYyBjb21wb25lbnRcbiAgaWYgKCFDdG9yLmNpZCkge1xuICAgIGlmIChDdG9yLnJlc29sdmVkKSB7XG4gICAgICBDdG9yID0gQ3Rvci5yZXNvbHZlZDtcbiAgICB9IGVsc2Uge1xuICAgICAgQ3RvciA9IHJlc29sdmVBc3luY0NvbXBvbmVudChDdG9yLCBiYXNlQ3RvciwgZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBpdCdzIG9rIHRvIHF1ZXVlIHRoaXMgb24gZXZlcnkgcmVuZGVyIGJlY2F1c2VcbiAgICAgICAgLy8gJGZvcmNlVXBkYXRlIGlzIGJ1ZmZlcmVkIGJ5IHRoZSBzY2hlZHVsZXIuXG4gICAgICAgIGNvbnRleHQuJGZvcmNlVXBkYXRlKCk7XG4gICAgICB9KTtcbiAgICAgIGlmICghQ3Rvcikge1xuICAgICAgICAvLyByZXR1cm4gbm90aGluZyBpZiB0aGlzIGlzIGluZGVlZCBhbiBhc3luYyBjb21wb25lbnRcbiAgICAgICAgLy8gd2FpdCBmb3IgdGhlIGNhbGxiYWNrIHRvIHRyaWdnZXIgcGFyZW50IHVwZGF0ZS5cbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gcmVzb2x2ZSBjb25zdHJ1Y3RvciBvcHRpb25zIGluIGNhc2UgZ2xvYmFsIG1peGlucyBhcmUgYXBwbGllZCBhZnRlclxuICAvLyBjb21wb25lbnQgY29uc3RydWN0b3IgY3JlYXRpb25cbiAgcmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyhDdG9yKTtcblxuICBkYXRhID0gZGF0YSB8fCB7fTtcblxuICAvLyBleHRyYWN0IHByb3BzXG4gIHZhciBwcm9wc0RhdGEgPSBleHRyYWN0UHJvcHMoZGF0YSwgQ3Rvcik7XG5cbiAgLy8gZnVuY3Rpb25hbCBjb21wb25lbnRcbiAgaWYgKEN0b3Iub3B0aW9ucy5mdW5jdGlvbmFsKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUZ1bmN0aW9uYWxDb21wb25lbnQoQ3RvciwgcHJvcHNEYXRhLCBkYXRhLCBjb250ZXh0LCBjaGlsZHJlbilcbiAgfVxuXG4gIC8vIGV4dHJhY3QgbGlzdGVuZXJzLCBzaW5jZSB0aGVzZSBuZWVkcyB0byBiZSB0cmVhdGVkIGFzXG4gIC8vIGNoaWxkIGNvbXBvbmVudCBsaXN0ZW5lcnMgaW5zdGVhZCBvZiBET00gbGlzdGVuZXJzXG4gIHZhciBsaXN0ZW5lcnMgPSBkYXRhLm9uO1xuICAvLyByZXBsYWNlIHdpdGggbGlzdGVuZXJzIHdpdGggLm5hdGl2ZSBtb2RpZmllclxuICBkYXRhLm9uID0gZGF0YS5uYXRpdmVPbjtcblxuICBpZiAoQ3Rvci5vcHRpb25zLmFic3RyYWN0KSB7XG4gICAgLy8gYWJzdHJhY3QgY29tcG9uZW50cyBkbyBub3Qga2VlcCBhbnl0aGluZ1xuICAgIC8vIG90aGVyIHRoYW4gcHJvcHMgJiBsaXN0ZW5lcnNcbiAgICBkYXRhID0ge307XG4gIH1cblxuICAvLyBtZXJnZSBjb21wb25lbnQgbWFuYWdlbWVudCBob29rcyBvbnRvIHRoZSBwbGFjZWhvbGRlciBub2RlXG4gIG1lcmdlSG9va3MoZGF0YSk7XG5cbiAgLy8gcmV0dXJuIGEgcGxhY2Vob2xkZXIgdm5vZGVcbiAgdmFyIG5hbWUgPSBDdG9yLm9wdGlvbnMubmFtZSB8fCB0YWc7XG4gIHZhciB2bm9kZSA9IG5ldyBWTm9kZShcbiAgICAoXCJ2dWUtY29tcG9uZW50LVwiICsgKEN0b3IuY2lkKSArIChuYW1lID8gKFwiLVwiICsgbmFtZSkgOiAnJykpLFxuICAgIGRhdGEsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbnRleHQsXG4gICAgeyBDdG9yOiBDdG9yLCBwcm9wc0RhdGE6IHByb3BzRGF0YSwgbGlzdGVuZXJzOiBsaXN0ZW5lcnMsIHRhZzogdGFnLCBjaGlsZHJlbjogY2hpbGRyZW4gfVxuICApO1xuICByZXR1cm4gdm5vZGVcbn1cblxuZnVuY3Rpb24gY3JlYXRlRnVuY3Rpb25hbENvbXBvbmVudCAoXG4gIEN0b3IsXG4gIHByb3BzRGF0YSxcbiAgZGF0YSxcbiAgY29udGV4dCxcbiAgY2hpbGRyZW5cbikge1xuICB2YXIgcHJvcHMgPSB7fTtcbiAgdmFyIHByb3BPcHRpb25zID0gQ3Rvci5vcHRpb25zLnByb3BzO1xuICBpZiAocHJvcE9wdGlvbnMpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcE9wdGlvbnMpIHtcbiAgICAgIHByb3BzW2tleV0gPSB2YWxpZGF0ZVByb3Aoa2V5LCBwcm9wT3B0aW9ucywgcHJvcHNEYXRhKTtcbiAgICB9XG4gIH1cbiAgLy8gZW5zdXJlIHRoZSBjcmVhdGVFbGVtZW50IGZ1bmN0aW9uIGluIGZ1bmN0aW9uYWwgY29tcG9uZW50c1xuICAvLyBnZXRzIGEgdW5pcXVlIGNvbnRleHQgLSB0aGlzIGlzIG5lY2Vzc2FyeSBmb3IgY29ycmVjdCBuYW1lZCBzbG90IGNoZWNrXG4gIHZhciBfY29udGV4dCA9IE9iamVjdC5jcmVhdGUoY29udGV4dCk7XG4gIHZhciBoID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHsgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoX2NvbnRleHQsIGEsIGIsIGMsIGQsIHRydWUpOyB9O1xuICB2YXIgdm5vZGUgPSBDdG9yLm9wdGlvbnMucmVuZGVyLmNhbGwobnVsbCwgaCwge1xuICAgIHByb3BzOiBwcm9wcyxcbiAgICBkYXRhOiBkYXRhLFxuICAgIHBhcmVudDogY29udGV4dCxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgc2xvdHM6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlc29sdmVTbG90cyhjaGlsZHJlbiwgY29udGV4dCk7IH1cbiAgfSk7XG4gIGlmICh2bm9kZSBpbnN0YW5jZW9mIFZOb2RlKSB7XG4gICAgdm5vZGUuZnVuY3Rpb25hbENvbnRleHQgPSBjb250ZXh0O1xuICAgIGlmIChkYXRhLnNsb3QpIHtcbiAgICAgICh2bm9kZS5kYXRhIHx8ICh2bm9kZS5kYXRhID0ge30pKS5zbG90ID0gZGF0YS5zbG90O1xuICAgIH1cbiAgfVxuICByZXR1cm4gdm5vZGVcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29tcG9uZW50SW5zdGFuY2VGb3JWbm9kZSAoXG4gIHZub2RlLCAvLyB3ZSBrbm93IGl0J3MgTW91bnRlZENvbXBvbmVudFZOb2RlIGJ1dCBmbG93IGRvZXNuJ3RcbiAgcGFyZW50LCAvLyBhY3RpdmVJbnN0YW5jZSBpbiBsaWZlY3ljbGUgc3RhdGVcbiAgcGFyZW50RWxtLFxuICByZWZFbG1cbikge1xuICB2YXIgdm5vZGVDb21wb25lbnRPcHRpb25zID0gdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgdmFyIG9wdGlvbnMgPSB7XG4gICAgX2lzQ29tcG9uZW50OiB0cnVlLFxuICAgIHBhcmVudDogcGFyZW50LFxuICAgIHByb3BzRGF0YTogdm5vZGVDb21wb25lbnRPcHRpb25zLnByb3BzRGF0YSxcbiAgICBfY29tcG9uZW50VGFnOiB2bm9kZUNvbXBvbmVudE9wdGlvbnMudGFnLFxuICAgIF9wYXJlbnRWbm9kZTogdm5vZGUsXG4gICAgX3BhcmVudExpc3RlbmVyczogdm5vZGVDb21wb25lbnRPcHRpb25zLmxpc3RlbmVycyxcbiAgICBfcmVuZGVyQ2hpbGRyZW46IHZub2RlQ29tcG9uZW50T3B0aW9ucy5jaGlsZHJlbixcbiAgICBfcGFyZW50RWxtOiBwYXJlbnRFbG0gfHwgbnVsbCxcbiAgICBfcmVmRWxtOiByZWZFbG0gfHwgbnVsbFxuICB9O1xuICAvLyBjaGVjayBpbmxpbmUtdGVtcGxhdGUgcmVuZGVyIGZ1bmN0aW9uc1xuICB2YXIgaW5saW5lVGVtcGxhdGUgPSB2bm9kZS5kYXRhLmlubGluZVRlbXBsYXRlO1xuICBpZiAoaW5saW5lVGVtcGxhdGUpIHtcbiAgICBvcHRpb25zLnJlbmRlciA9IGlubGluZVRlbXBsYXRlLnJlbmRlcjtcbiAgICBvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IGlubGluZVRlbXBsYXRlLnN0YXRpY1JlbmRlckZucztcbiAgfVxuICByZXR1cm4gbmV3IHZub2RlQ29tcG9uZW50T3B0aW9ucy5DdG9yKG9wdGlvbnMpXG59XG5cbmZ1bmN0aW9uIGluaXQgKFxuICB2bm9kZSxcbiAgaHlkcmF0aW5nLFxuICBwYXJlbnRFbG0sXG4gIHJlZkVsbVxuKSB7XG4gIGlmICghdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgfHwgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX2lzRGVzdHJveWVkKSB7XG4gICAgdmFyIGNoaWxkID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBjcmVhdGVDb21wb25lbnRJbnN0YW5jZUZvclZub2RlKFxuICAgICAgdm5vZGUsXG4gICAgICBhY3RpdmVJbnN0YW5jZSxcbiAgICAgIHBhcmVudEVsbSxcbiAgICAgIHJlZkVsbVxuICAgICk7XG4gICAgY2hpbGQuJG1vdW50KGh5ZHJhdGluZyA/IHZub2RlLmVsbSA6IHVuZGVmaW5lZCwgaHlkcmF0aW5nKTtcbiAgfSBlbHNlIGlmICh2bm9kZS5kYXRhLmtlZXBBbGl2ZSkge1xuICAgIC8vIGtlcHQtYWxpdmUgY29tcG9uZW50cywgdHJlYXQgYXMgYSBwYXRjaFxuICAgIHZhciBtb3VudGVkTm9kZSA9IHZub2RlOyAvLyB3b3JrIGFyb3VuZCBmbG93XG4gICAgcHJlcGF0Y2gobW91bnRlZE5vZGUsIG1vdW50ZWROb2RlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcmVwYXRjaCAoXG4gIG9sZFZub2RlLFxuICB2bm9kZVxuKSB7XG4gIHZhciBvcHRpb25zID0gdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgdmFyIGNoaWxkID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBvbGRWbm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgY2hpbGQuX3VwZGF0ZUZyb21QYXJlbnQoXG4gICAgb3B0aW9ucy5wcm9wc0RhdGEsIC8vIHVwZGF0ZWQgcHJvcHNcbiAgICBvcHRpb25zLmxpc3RlbmVycywgLy8gdXBkYXRlZCBsaXN0ZW5lcnNcbiAgICB2bm9kZSwgLy8gbmV3IHBhcmVudCB2bm9kZVxuICAgIG9wdGlvbnMuY2hpbGRyZW4gLy8gbmV3IGNoaWxkcmVuXG4gICk7XG59XG5cbmZ1bmN0aW9uIGluc2VydCAodm5vZGUpIHtcbiAgaWYgKCF2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5faXNNb3VudGVkKSB7XG4gICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX2lzTW91bnRlZCA9IHRydWU7XG4gICAgY2FsbEhvb2sodm5vZGUuY29tcG9uZW50SW5zdGFuY2UsICdtb3VudGVkJyk7XG4gIH1cbiAgaWYgKHZub2RlLmRhdGEua2VlcEFsaXZlKSB7XG4gICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX2luYWN0aXZlID0gZmFsc2U7XG4gICAgY2FsbEhvb2sodm5vZGUuY29tcG9uZW50SW5zdGFuY2UsICdhY3RpdmF0ZWQnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkZXN0cm95JDEgKHZub2RlKSB7XG4gIGlmICghdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX2lzRGVzdHJveWVkKSB7XG4gICAgaWYgKCF2bm9kZS5kYXRhLmtlZXBBbGl2ZSkge1xuICAgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuJGRlc3Ryb3koKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX2luYWN0aXZlID0gdHJ1ZTtcbiAgICAgIGNhbGxIb29rKHZub2RlLmNvbXBvbmVudEluc3RhbmNlLCAnZGVhY3RpdmF0ZWQnKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzb2x2ZUFzeW5jQ29tcG9uZW50IChcbiAgZmFjdG9yeSxcbiAgYmFzZUN0b3IsXG4gIGNiXG4pIHtcbiAgaWYgKGZhY3RvcnkucmVxdWVzdGVkKSB7XG4gICAgLy8gcG9vbCBjYWxsYmFja3NcbiAgICBmYWN0b3J5LnBlbmRpbmdDYWxsYmFja3MucHVzaChjYik7XG4gIH0gZWxzZSB7XG4gICAgZmFjdG9yeS5yZXF1ZXN0ZWQgPSB0cnVlO1xuICAgIHZhciBjYnMgPSBmYWN0b3J5LnBlbmRpbmdDYWxsYmFja3MgPSBbY2JdO1xuICAgIHZhciBzeW5jID0gdHJ1ZTtcblxuICAgIHZhciByZXNvbHZlID0gZnVuY3Rpb24gKHJlcykge1xuICAgICAgaWYgKGlzT2JqZWN0KHJlcykpIHtcbiAgICAgICAgcmVzID0gYmFzZUN0b3IuZXh0ZW5kKHJlcyk7XG4gICAgICB9XG4gICAgICAvLyBjYWNoZSByZXNvbHZlZFxuICAgICAgZmFjdG9yeS5yZXNvbHZlZCA9IHJlcztcbiAgICAgIC8vIGludm9rZSBjYWxsYmFja3Mgb25seSBpZiB0aGlzIGlzIG5vdCBhIHN5bmNocm9ub3VzIHJlc29sdmVcbiAgICAgIC8vIChhc3luYyByZXNvbHZlcyBhcmUgc2hpbW1lZCBhcyBzeW5jaHJvbm91cyBkdXJpbmcgU1NSKVxuICAgICAgaWYgKCFzeW5jKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gY2JzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgIGNic1tpXShyZXMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciByZWplY3QgPSBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgIFwiRmFpbGVkIHRvIHJlc29sdmUgYXN5bmMgY29tcG9uZW50OiBcIiArIChTdHJpbmcoZmFjdG9yeSkpICtcbiAgICAgICAgKHJlYXNvbiA/IChcIlxcblJlYXNvbjogXCIgKyByZWFzb24pIDogJycpXG4gICAgICApO1xuICAgIH07XG5cbiAgICB2YXIgcmVzID0gZmFjdG9yeShyZXNvbHZlLCByZWplY3QpO1xuXG4gICAgLy8gaGFuZGxlIHByb21pc2VcbiAgICBpZiAocmVzICYmIHR5cGVvZiByZXMudGhlbiA9PT0gJ2Z1bmN0aW9uJyAmJiAhZmFjdG9yeS5yZXNvbHZlZCkge1xuICAgICAgcmVzLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICB9XG5cbiAgICBzeW5jID0gZmFsc2U7XG4gICAgLy8gcmV0dXJuIGluIGNhc2UgcmVzb2x2ZWQgc3luY2hyb25vdXNseVxuICAgIHJldHVybiBmYWN0b3J5LnJlc29sdmVkXG4gIH1cbn1cblxuZnVuY3Rpb24gZXh0cmFjdFByb3BzIChkYXRhLCBDdG9yKSB7XG4gIC8vIHdlIGFyZSBvbmx5IGV4dHJhY3RpbmcgcmF3IHZhbHVlcyBoZXJlLlxuICAvLyB2YWxpZGF0aW9uIGFuZCBkZWZhdWx0IHZhbHVlcyBhcmUgaGFuZGxlZCBpbiB0aGUgY2hpbGRcbiAgLy8gY29tcG9uZW50IGl0c2VsZi5cbiAgdmFyIHByb3BPcHRpb25zID0gQ3Rvci5vcHRpb25zLnByb3BzO1xuICBpZiAoIXByb3BPcHRpb25zKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHJlcyA9IHt9O1xuICB2YXIgYXR0cnMgPSBkYXRhLmF0dHJzO1xuICB2YXIgcHJvcHMgPSBkYXRhLnByb3BzO1xuICB2YXIgZG9tUHJvcHMgPSBkYXRhLmRvbVByb3BzO1xuICBpZiAoYXR0cnMgfHwgcHJvcHMgfHwgZG9tUHJvcHMpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcE9wdGlvbnMpIHtcbiAgICAgIHZhciBhbHRLZXkgPSBoeXBoZW5hdGUoa2V5KTtcbiAgICAgIGNoZWNrUHJvcChyZXMsIHByb3BzLCBrZXksIGFsdEtleSwgdHJ1ZSkgfHxcbiAgICAgIGNoZWNrUHJvcChyZXMsIGF0dHJzLCBrZXksIGFsdEtleSkgfHxcbiAgICAgIGNoZWNrUHJvcChyZXMsIGRvbVByb3BzLCBrZXksIGFsdEtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gY2hlY2tQcm9wIChcbiAgcmVzLFxuICBoYXNoLFxuICBrZXksXG4gIGFsdEtleSxcbiAgcHJlc2VydmVcbikge1xuICBpZiAoaGFzaCkge1xuICAgIGlmIChoYXNPd24oaGFzaCwga2V5KSkge1xuICAgICAgcmVzW2tleV0gPSBoYXNoW2tleV07XG4gICAgICBpZiAoIXByZXNlcnZlKSB7XG4gICAgICAgIGRlbGV0ZSBoYXNoW2tleV07XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH0gZWxzZSBpZiAoaGFzT3duKGhhc2gsIGFsdEtleSkpIHtcbiAgICAgIHJlc1trZXldID0gaGFzaFthbHRLZXldO1xuICAgICAgaWYgKCFwcmVzZXJ2ZSkge1xuICAgICAgICBkZWxldGUgaGFzaFthbHRLZXldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIG1lcmdlSG9va3MgKGRhdGEpIHtcbiAgaWYgKCFkYXRhLmhvb2spIHtcbiAgICBkYXRhLmhvb2sgPSB7fTtcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGhvb2tzVG9NZXJnZS5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSBob29rc1RvTWVyZ2VbaV07XG4gICAgdmFyIGZyb21QYXJlbnQgPSBkYXRhLmhvb2tba2V5XTtcbiAgICB2YXIgb3VycyA9IGhvb2tzW2tleV07XG4gICAgZGF0YS5ob29rW2tleV0gPSBmcm9tUGFyZW50ID8gbWVyZ2VIb29rJDEob3VycywgZnJvbVBhcmVudCkgOiBvdXJzO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1lcmdlSG9vayQxIChvbmUsIHR3bykge1xuICByZXR1cm4gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHtcbiAgICBvbmUoYSwgYiwgYywgZCk7XG4gICAgdHdvKGEsIGIsIGMsIGQpO1xuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBtZXJnZVZOb2RlSG9vayAoZGVmLCBob29rS2V5LCBob29rLCBrZXkpIHtcbiAga2V5ID0ga2V5ICsgaG9va0tleTtcbiAgdmFyIGluamVjdGVkSGFzaCA9IGRlZi5fX2luamVjdGVkIHx8IChkZWYuX19pbmplY3RlZCA9IHt9KTtcbiAgaWYgKCFpbmplY3RlZEhhc2hba2V5XSkge1xuICAgIGluamVjdGVkSGFzaFtrZXldID0gdHJ1ZTtcbiAgICB2YXIgb2xkSG9vayA9IGRlZltob29rS2V5XTtcbiAgICBpZiAob2xkSG9vaykge1xuICAgICAgZGVmW2hvb2tLZXldID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBvbGRIb29rLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIGhvb2suYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlZltob29rS2V5XSA9IGhvb2s7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgbm9ybWFsaXplRXZlbnQgPSBjYWNoZWQoZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyIG9uY2UgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJ34nOyAvLyBQcmVmaXhlZCBsYXN0LCBjaGVja2VkIGZpcnN0XG4gIG5hbWUgPSBvbmNlID8gbmFtZS5zbGljZSgxKSA6IG5hbWU7XG4gIHZhciBjYXB0dXJlID0gbmFtZS5jaGFyQXQoMCkgPT09ICchJztcbiAgbmFtZSA9IGNhcHR1cmUgPyBuYW1lLnNsaWNlKDEpIDogbmFtZTtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBuYW1lLFxuICAgIG9uY2U6IG9uY2UsXG4gICAgY2FwdHVyZTogY2FwdHVyZVxuICB9XG59KTtcblxuZnVuY3Rpb24gY3JlYXRlRXZlbnRIYW5kbGUgKGZuKSB7XG4gIHZhciBoYW5kbGUgPSB7XG4gICAgZm46IGZuLFxuICAgIGludm9rZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBhcmd1bWVudHMkMSA9IGFyZ3VtZW50cztcblxuICAgICAgdmFyIGZuID0gaGFuZGxlLmZuO1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZm4pKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZm4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBmbltpXS5hcHBseShudWxsLCBhcmd1bWVudHMkMSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZuLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICByZXR1cm4gaGFuZGxlXG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUxpc3RlbmVycyAoXG4gIG9uLFxuICBvbGRPbixcbiAgYWRkLFxuICByZW1vdmUkJDEsXG4gIHZtXG4pIHtcbiAgdmFyIG5hbWUsIGN1ciwgb2xkLCBldmVudDtcbiAgZm9yIChuYW1lIGluIG9uKSB7XG4gICAgY3VyID0gb25bbmFtZV07XG4gICAgb2xkID0gb2xkT25bbmFtZV07XG4gICAgZXZlbnQgPSBub3JtYWxpemVFdmVudChuYW1lKTtcbiAgICBpZiAoIWN1cikge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIkludmFsaWQgaGFuZGxlciBmb3IgZXZlbnQgXFxcIlwiICsgKGV2ZW50Lm5hbWUpICsgXCJcXFwiOiBnb3QgXCIgKyBTdHJpbmcoY3VyKSxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfSBlbHNlIGlmICghb2xkKSB7XG4gICAgICBpZiAoIWN1ci5pbnZva2VyKSB7XG4gICAgICAgIGN1ciA9IG9uW25hbWVdID0gY3JlYXRlRXZlbnRIYW5kbGUoY3VyKTtcbiAgICAgIH1cbiAgICAgIGFkZChldmVudC5uYW1lLCBjdXIuaW52b2tlciwgZXZlbnQub25jZSwgZXZlbnQuY2FwdHVyZSk7XG4gICAgfSBlbHNlIGlmIChjdXIgIT09IG9sZCkge1xuICAgICAgb2xkLmZuID0gY3VyO1xuICAgICAgb25bbmFtZV0gPSBvbGQ7XG4gICAgfVxuICB9XG4gIGZvciAobmFtZSBpbiBvbGRPbikge1xuICAgIGlmICghb25bbmFtZV0pIHtcbiAgICAgIGV2ZW50ID0gbm9ybWFsaXplRXZlbnQobmFtZSk7XG4gICAgICByZW1vdmUkJDEoZXZlbnQubmFtZSwgb2xkT25bbmFtZV0uaW52b2tlciwgZXZlbnQuY2FwdHVyZSk7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG4vLyBUaGUgdGVtcGxhdGUgY29tcGlsZXIgYXR0ZW1wdHMgdG8gbWluaW1pemUgdGhlIG5lZWQgZm9yIG5vcm1hbGl6YXRpb24gYnlcbi8vIHN0YXRpY2FsbHkgYW5hbHl6aW5nIHRoZSB0ZW1wbGF0ZSBhdCBjb21waWxlIHRpbWUuXG4vL1xuLy8gRm9yIHBsYWluIEhUTUwgbWFya3VwLCBub3JtYWxpemF0aW9uIGNhbiBiZSBjb21wbGV0ZWx5IHNraXBwZWQgYmVjYXVzZSB0aGVcbi8vIGdlbmVyYXRlZCByZW5kZXIgZnVuY3Rpb24gaXMgZ3VhcmFudGVlZCB0byByZXR1cm4gQXJyYXk8Vk5vZGU+LiBUaGVyZSBhcmVcbi8vIHR3byBjYXNlcyB3aGVyZSBleHRyYSBub3JtYWxpemF0aW9uIGlzIG5lZWRlZDpcblxuLy8gMS4gV2hlbiB0aGUgY2hpbGRyZW4gY29udGFpbnMgY29tcG9uZW50cyAtIGJlY2F1c2UgYSBmdW5jdGlvbmFsIGNvbXBvbmVudFxuLy8gbWF5IHJldHVybiBhbiBBcnJheSBpbnN0ZWFkIG9mIGEgc2luZ2xlIHJvb3QuIEluIHRoaXMgY2FzZSwganVzdCBhIHNpbXBsZVxuLy8gbm9tcmFsaXphdGlvbiBpcyBuZWVkZWQgLSBpZiBhbnkgY2hpbGQgaXMgYW4gQXJyYXksIHdlIGZsYXR0ZW4gdGhlIHdob2xlXG4vLyB0aGluZyB3aXRoIEFycmF5LnByb3RvdHlwZS5jb25jYXQuIEl0IGlzIGd1YXJhbnRlZWQgdG8gYmUgb25seSAxLWxldmVsIGRlZXBcbi8vIGJlY2F1c2UgZnVuY3Rpb25hbCBjb21wb25lbnRzIGFscmVhZHkgbm9ybWFsaXplIHRoZWlyIG93biBjaGlsZHJlbi5cbmZ1bmN0aW9uIHNpbXBsZU5vcm1hbGl6ZUNoaWxkcmVuIChjaGlsZHJlbikge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW5baV0pKSB7XG4gICAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShbXSwgY2hpbGRyZW4pXG4gICAgfVxuICB9XG4gIHJldHVybiBjaGlsZHJlblxufVxuXG4vLyAyLiBXaGVuIHRoZSBjaGlsZHJlbiBjb250YWlucyBjb25zdHJjdXRzIHRoYXQgYWx3YXlzIGdlbmVyYXRlZCBuZXN0ZWQgQXJyYXlzLFxuLy8gZS5nLiA8dGVtcGxhdGU+LCA8c2xvdD4sIHYtZm9yLCBvciB3aGVuIHRoZSBjaGlsZHJlbiBpcyBwcm92aWRlZCBieSB1c2VyXG4vLyB3aXRoIGhhbmQtd3JpdHRlbiByZW5kZXIgZnVuY3Rpb25zIC8gSlNYLiBJbiBzdWNoIGNhc2VzIGEgZnVsbCBub3JtYWxpemF0aW9uXG4vLyBpcyBuZWVkZWQgdG8gY2F0ZXIgdG8gYWxsIHBvc3NpYmxlIHR5cGVzIG9mIGNoaWxkcmVuIHZhbHVlcy5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUNoaWxkcmVuIChjaGlsZHJlbikge1xuICByZXR1cm4gaXNQcmltaXRpdmUoY2hpbGRyZW4pXG4gICAgPyBbY3JlYXRlVGV4dFZOb2RlKGNoaWxkcmVuKV1cbiAgICA6IEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pXG4gICAgICA/IG5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4oY2hpbGRyZW4pXG4gICAgICA6IHVuZGVmaW5lZFxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVBcnJheUNoaWxkcmVuIChjaGlsZHJlbiwgbmVzdGVkSW5kZXgpIHtcbiAgdmFyIHJlcyA9IFtdO1xuICB2YXIgaSwgYywgbGFzdDtcbiAgZm9yIChpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgYyA9IGNoaWxkcmVuW2ldO1xuICAgIGlmIChjID09IG51bGwgfHwgdHlwZW9mIGMgPT09ICdib29sZWFuJykgeyBjb250aW51ZSB9XG4gICAgbGFzdCA9IHJlc1tyZXMubGVuZ3RoIC0gMV07XG4gICAgLy8gIG5lc3RlZFxuICAgIGlmIChBcnJheS5pc0FycmF5KGMpKSB7XG4gICAgICByZXMucHVzaC5hcHBseShyZXMsIG5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4oYywgKChuZXN0ZWRJbmRleCB8fCAnJykgKyBcIl9cIiArIGkpKSk7XG4gICAgfSBlbHNlIGlmIChpc1ByaW1pdGl2ZShjKSkge1xuICAgICAgaWYgKGxhc3QgJiYgbGFzdC50ZXh0KSB7XG4gICAgICAgIGxhc3QudGV4dCArPSBTdHJpbmcoYyk7XG4gICAgICB9IGVsc2UgaWYgKGMgIT09ICcnKSB7XG4gICAgICAgIC8vIGNvbnZlcnQgcHJpbWl0aXZlIHRvIHZub2RlXG4gICAgICAgIHJlcy5wdXNoKGNyZWF0ZVRleHRWTm9kZShjKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChjLnRleHQgJiYgbGFzdCAmJiBsYXN0LnRleHQpIHtcbiAgICAgICAgcmVzW3Jlcy5sZW5ndGggLSAxXSA9IGNyZWF0ZVRleHRWTm9kZShsYXN0LnRleHQgKyBjLnRleHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZGVmYXVsdCBrZXkgZm9yIG5lc3RlZCBhcnJheSBjaGlsZHJlbiAobGlrZWx5IGdlbmVyYXRlZCBieSB2LWZvcilcbiAgICAgICAgaWYgKGMudGFnICYmIGMua2V5ID09IG51bGwgJiYgbmVzdGVkSW5kZXggIT0gbnVsbCkge1xuICAgICAgICAgIGMua2V5ID0gXCJfX3ZsaXN0XCIgKyBuZXN0ZWRJbmRleCArIFwiX1wiICsgaSArIFwiX19cIjtcbiAgICAgICAgfVxuICAgICAgICByZXMucHVzaChjKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZ2V0Rmlyc3RDb21wb25lbnRDaGlsZCAoY2hpbGRyZW4pIHtcbiAgcmV0dXJuIGNoaWxkcmVuICYmIGNoaWxkcmVuLmZpbHRlcihmdW5jdGlvbiAoYykgeyByZXR1cm4gYyAmJiBjLmNvbXBvbmVudE9wdGlvbnM7IH0pWzBdXG59XG5cbi8qICAqL1xuXG52YXIgU0lNUExFX05PUk1BTElaRSA9IDE7XG52YXIgQUxXQVlTX05PUk1BTElaRSA9IDI7XG5cbi8vIHdyYXBwZXIgZnVuY3Rpb24gZm9yIHByb3ZpZGluZyBhIG1vcmUgZmxleGlibGUgaW50ZXJmYWNlXG4vLyB3aXRob3V0IGdldHRpbmcgeWVsbGVkIGF0IGJ5IGZsb3dcbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQgKFxuICBjb250ZXh0LFxuICB0YWcsXG4gIGRhdGEsXG4gIGNoaWxkcmVuLFxuICBub3JtYWxpemF0aW9uVHlwZSxcbiAgYWx3YXlzTm9ybWFsaXplXG4pIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkgfHwgaXNQcmltaXRpdmUoZGF0YSkpIHtcbiAgICBub3JtYWxpemF0aW9uVHlwZSA9IGNoaWxkcmVuO1xuICAgIGNoaWxkcmVuID0gZGF0YTtcbiAgICBkYXRhID0gdW5kZWZpbmVkO1xuICB9XG4gIGlmIChhbHdheXNOb3JtYWxpemUpIHsgbm9ybWFsaXphdGlvblR5cGUgPSBBTFdBWVNfTk9STUFMSVpFOyB9XG4gIHJldHVybiBfY3JlYXRlRWxlbWVudChjb250ZXh0LCB0YWcsIGRhdGEsIGNoaWxkcmVuLCBub3JtYWxpemF0aW9uVHlwZSlcbn1cblxuZnVuY3Rpb24gX2NyZWF0ZUVsZW1lbnQgKFxuICBjb250ZXh0LFxuICB0YWcsXG4gIGRhdGEsXG4gIGNoaWxkcmVuLFxuICBub3JtYWxpemF0aW9uVHlwZVxuKSB7XG4gIGlmIChkYXRhICYmIGRhdGEuX19vYl9fKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgXCJBdm9pZCB1c2luZyBvYnNlcnZlZCBkYXRhIG9iamVjdCBhcyB2bm9kZSBkYXRhOiBcIiArIChKU09OLnN0cmluZ2lmeShkYXRhKSkgKyBcIlxcblwiICtcbiAgICAgICdBbHdheXMgY3JlYXRlIGZyZXNoIHZub2RlIGRhdGEgb2JqZWN0cyBpbiBlYWNoIHJlbmRlciEnLFxuICAgICAgY29udGV4dFxuICAgICk7XG4gICAgcmV0dXJuIGNyZWF0ZUVtcHR5Vk5vZGUoKVxuICB9XG4gIGlmICghdGFnKSB7XG4gICAgLy8gaW4gY2FzZSBvZiBjb21wb25lbnQgOmlzIHNldCB0byBmYWxzeSB2YWx1ZVxuICAgIHJldHVybiBjcmVhdGVFbXB0eVZOb2RlKClcbiAgfVxuICAvLyBzdXBwb3J0IHNpbmdsZSBmdW5jdGlvbiBjaGlsZHJlbiBhcyBkZWZhdWx0IHNjb3BlZCBzbG90XG4gIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSAmJlxuICAgICAgdHlwZW9mIGNoaWxkcmVuWzBdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZGF0YSA9IGRhdGEgfHwge307XG4gICAgZGF0YS5zY29wZWRTbG90cyA9IHsgZGVmYXVsdDogY2hpbGRyZW5bMF0gfTtcbiAgICBjaGlsZHJlbi5sZW5ndGggPSAwO1xuICB9XG4gIGlmIChub3JtYWxpemF0aW9uVHlwZSA9PT0gQUxXQVlTX05PUk1BTElaRSkge1xuICAgIGNoaWxkcmVuID0gbm9ybWFsaXplQ2hpbGRyZW4oY2hpbGRyZW4pO1xuICB9IGVsc2UgaWYgKG5vcm1hbGl6YXRpb25UeXBlID09PSBTSU1QTEVfTk9STUFMSVpFKSB7XG4gICAgY2hpbGRyZW4gPSBzaW1wbGVOb3JtYWxpemVDaGlsZHJlbihjaGlsZHJlbik7XG4gIH1cbiAgdmFyIHZub2RlLCBucztcbiAgaWYgKHR5cGVvZiB0YWcgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIEN0b3I7XG4gICAgbnMgPSBjb25maWcuZ2V0VGFnTmFtZXNwYWNlKHRhZyk7XG4gICAgaWYgKGNvbmZpZy5pc1Jlc2VydmVkVGFnKHRhZykpIHtcbiAgICAgIC8vIHBsYXRmb3JtIGJ1aWx0LWluIGVsZW1lbnRzXG4gICAgICB2bm9kZSA9IG5ldyBWTm9kZShcbiAgICAgICAgY29uZmlnLnBhcnNlUGxhdGZvcm1UYWdOYW1lKHRhZyksIGRhdGEsIGNoaWxkcmVuLFxuICAgICAgICB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGV4dFxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKChDdG9yID0gcmVzb2x2ZUFzc2V0KGNvbnRleHQuJG9wdGlvbnMsICdjb21wb25lbnRzJywgdGFnKSkpIHtcbiAgICAgIC8vIGNvbXBvbmVudFxuICAgICAgdm5vZGUgPSBjcmVhdGVDb21wb25lbnQoQ3RvciwgZGF0YSwgY29udGV4dCwgY2hpbGRyZW4sIHRhZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHVua25vd24gb3IgdW5saXN0ZWQgbmFtZXNwYWNlZCBlbGVtZW50c1xuICAgICAgLy8gY2hlY2sgYXQgcnVudGltZSBiZWNhdXNlIGl0IG1heSBnZXQgYXNzaWduZWQgYSBuYW1lc3BhY2Ugd2hlbiBpdHNcbiAgICAgIC8vIHBhcmVudCBub3JtYWxpemVzIGNoaWxkcmVuXG4gICAgICB2bm9kZSA9IG5ldyBWTm9kZShcbiAgICAgICAgdGFnLCBkYXRhLCBjaGlsZHJlbixcbiAgICAgICAgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbnRleHRcbiAgICAgICk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIGRpcmVjdCBjb21wb25lbnQgb3B0aW9ucyAvIGNvbnN0cnVjdG9yXG4gICAgdm5vZGUgPSBjcmVhdGVDb21wb25lbnQodGFnLCBkYXRhLCBjb250ZXh0LCBjaGlsZHJlbik7XG4gIH1cbiAgaWYgKHZub2RlKSB7XG4gICAgaWYgKG5zKSB7IGFwcGx5TlModm5vZGUsIG5zKTsgfVxuICAgIHJldHVybiB2bm9kZVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBjcmVhdGVFbXB0eVZOb2RlKClcbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseU5TICh2bm9kZSwgbnMpIHtcbiAgdm5vZGUubnMgPSBucztcbiAgaWYgKHZub2RlLnRhZyA9PT0gJ2ZvcmVpZ25PYmplY3QnKSB7XG4gICAgLy8gdXNlIGRlZmF1bHQgbmFtZXNwYWNlIGluc2lkZSBmb3JlaWduT2JqZWN0XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKHZub2RlLmNoaWxkcmVuKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSB2bm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBjaGlsZCA9IHZub2RlLmNoaWxkcmVuW2ldO1xuICAgICAgaWYgKGNoaWxkLnRhZyAmJiAhY2hpbGQubnMpIHtcbiAgICAgICAgYXBwbHlOUyhjaGlsZCwgbnMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdFJlbmRlciAodm0pIHtcbiAgdm0uJHZub2RlID0gbnVsbDsgLy8gdGhlIHBsYWNlaG9sZGVyIG5vZGUgaW4gcGFyZW50IHRyZWVcbiAgdm0uX3Zub2RlID0gbnVsbDsgLy8gdGhlIHJvb3Qgb2YgdGhlIGNoaWxkIHRyZWVcbiAgdm0uX3N0YXRpY1RyZWVzID0gbnVsbDtcbiAgdmFyIHBhcmVudFZub2RlID0gdm0uJG9wdGlvbnMuX3BhcmVudFZub2RlO1xuICB2YXIgcmVuZGVyQ29udGV4dCA9IHBhcmVudFZub2RlICYmIHBhcmVudFZub2RlLmNvbnRleHQ7XG4gIHZtLiRzbG90cyA9IHJlc29sdmVTbG90cyh2bS4kb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4sIHJlbmRlckNvbnRleHQpO1xuICB2bS4kc2NvcGVkU2xvdHMgPSB7fTtcbiAgLy8gYmluZCB0aGUgY3JlYXRlRWxlbWVudCBmbiB0byB0aGlzIGluc3RhbmNlXG4gIC8vIHNvIHRoYXQgd2UgZ2V0IHByb3BlciByZW5kZXIgY29udGV4dCBpbnNpZGUgaXQuXG4gIC8vIGFyZ3Mgb3JkZXI6IHRhZywgZGF0YSwgY2hpbGRyZW4sIG5vcm1hbGl6YXRpb25UeXBlLCBhbHdheXNOb3JtYWxpemVcbiAgLy8gaW50ZXJuYWwgdmVyc2lvbiBpcyB1c2VkIGJ5IHJlbmRlciBmdW5jdGlvbnMgY29tcGlsZWQgZnJvbSB0ZW1wbGF0ZXNcbiAgdm0uX2MgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgeyByZXR1cm4gY3JlYXRlRWxlbWVudCh2bSwgYSwgYiwgYywgZCwgZmFsc2UpOyB9O1xuICAvLyBub3JtYWxpemF0aW9uIGlzIGFsd2F5cyBhcHBsaWVkIGZvciB0aGUgcHVibGljIHZlcnNpb24sIHVzZWQgaW5cbiAgLy8gdXNlci13cml0dGVuIHJlbmRlciBmdW5jdGlvbnMuXG4gIHZtLiRjcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHsgcmV0dXJuIGNyZWF0ZUVsZW1lbnQodm0sIGEsIGIsIGMsIGQsIHRydWUpOyB9O1xufVxuXG5mdW5jdGlvbiByZW5kZXJNaXhpbiAoVnVlKSB7XG4gIFZ1ZS5wcm90b3R5cGUuJG5leHRUaWNrID0gZnVuY3Rpb24gKGZuKSB7XG4gICAgcmV0dXJuIG5leHRUaWNrKGZuLCB0aGlzKVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuX3JlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZhciByZWYgPSB2bS4kb3B0aW9ucztcbiAgICB2YXIgcmVuZGVyID0gcmVmLnJlbmRlcjtcbiAgICB2YXIgc3RhdGljUmVuZGVyRm5zID0gcmVmLnN0YXRpY1JlbmRlckZucztcbiAgICB2YXIgX3BhcmVudFZub2RlID0gcmVmLl9wYXJlbnRWbm9kZTtcblxuICAgIGlmICh2bS5faXNNb3VudGVkKSB7XG4gICAgICAvLyBjbG9uZSBzbG90IG5vZGVzIG9uIHJlLXJlbmRlcnNcbiAgICAgIGZvciAodmFyIGtleSBpbiB2bS4kc2xvdHMpIHtcbiAgICAgICAgdm0uJHNsb3RzW2tleV0gPSBjbG9uZVZOb2Rlcyh2bS4kc2xvdHNba2V5XSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKF9wYXJlbnRWbm9kZSAmJiBfcGFyZW50Vm5vZGUuZGF0YS5zY29wZWRTbG90cykge1xuICAgICAgdm0uJHNjb3BlZFNsb3RzID0gX3BhcmVudFZub2RlLmRhdGEuc2NvcGVkU2xvdHM7XG4gICAgfVxuXG4gICAgaWYgKHN0YXRpY1JlbmRlckZucyAmJiAhdm0uX3N0YXRpY1RyZWVzKSB7XG4gICAgICB2bS5fc3RhdGljVHJlZXMgPSBbXTtcbiAgICB9XG4gICAgLy8gc2V0IHBhcmVudCB2bm9kZS4gdGhpcyBhbGxvd3MgcmVuZGVyIGZ1bmN0aW9ucyB0byBoYXZlIGFjY2Vzc1xuICAgIC8vIHRvIHRoZSBkYXRhIG9uIHRoZSBwbGFjZWhvbGRlciBub2RlLlxuICAgIHZtLiR2bm9kZSA9IF9wYXJlbnRWbm9kZTtcbiAgICAvLyByZW5kZXIgc2VsZlxuICAgIHZhciB2bm9kZTtcbiAgICB0cnkge1xuICAgICAgdm5vZGUgPSByZW5kZXIuY2FsbCh2bS5fcmVuZGVyUHJveHksIHZtLiRjcmVhdGVFbGVtZW50KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgaWYgKGNvbmZpZy5lcnJvckhhbmRsZXIpIHtcbiAgICAgICAgY29uZmlnLmVycm9ySGFuZGxlci5jYWxsKG51bGwsIGUsIHZtKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgd2FybigoXCJFcnJvciB3aGVuIHJlbmRlcmluZyBcIiArIChmb3JtYXRDb21wb25lbnROYW1lKHZtKSkgKyBcIjpcIikpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IGVcbiAgICAgIH1cbiAgICAgIC8vIHJldHVybiBwcmV2aW91cyB2bm9kZSB0byBwcmV2ZW50IHJlbmRlciBlcnJvciBjYXVzaW5nIGJsYW5rIGNvbXBvbmVudFxuICAgICAgdm5vZGUgPSB2bS5fdm5vZGU7XG4gICAgfVxuICAgIC8vIHJldHVybiBlbXB0eSB2bm9kZSBpbiBjYXNlIHRoZSByZW5kZXIgZnVuY3Rpb24gZXJyb3JlZCBvdXRcbiAgICBpZiAoISh2bm9kZSBpbnN0YW5jZW9mIFZOb2RlKSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgQXJyYXkuaXNBcnJheSh2bm9kZSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnTXVsdGlwbGUgcm9vdCBub2RlcyByZXR1cm5lZCBmcm9tIHJlbmRlciBmdW5jdGlvbi4gUmVuZGVyIGZ1bmN0aW9uICcgK1xuICAgICAgICAgICdzaG91bGQgcmV0dXJuIGEgc2luZ2xlIHJvb3Qgbm9kZS4nLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICB2bm9kZSA9IGNyZWF0ZUVtcHR5Vk5vZGUoKTtcbiAgICB9XG4gICAgLy8gc2V0IHBhcmVudFxuICAgIHZub2RlLnBhcmVudCA9IF9wYXJlbnRWbm9kZTtcbiAgICByZXR1cm4gdm5vZGVcbiAgfTtcblxuICAvLyB0b1N0cmluZyBmb3IgbXVzdGFjaGVzXG4gIFZ1ZS5wcm90b3R5cGUuX3MgPSBfdG9TdHJpbmc7XG4gIC8vIGNvbnZlcnQgdGV4dCB0byB2bm9kZVxuICBWdWUucHJvdG90eXBlLl92ID0gY3JlYXRlVGV4dFZOb2RlO1xuICAvLyBudW1iZXIgY29udmVyc2lvblxuICBWdWUucHJvdG90eXBlLl9uID0gdG9OdW1iZXI7XG4gIC8vIGVtcHR5IHZub2RlXG4gIFZ1ZS5wcm90b3R5cGUuX2UgPSBjcmVhdGVFbXB0eVZOb2RlO1xuICAvLyBsb29zZSBlcXVhbFxuICBWdWUucHJvdG90eXBlLl9xID0gbG9vc2VFcXVhbDtcbiAgLy8gbG9vc2UgaW5kZXhPZlxuICBWdWUucHJvdG90eXBlLl9pID0gbG9vc2VJbmRleE9mO1xuXG4gIC8vIHJlbmRlciBzdGF0aWMgdHJlZSBieSBpbmRleFxuICBWdWUucHJvdG90eXBlLl9tID0gZnVuY3Rpb24gcmVuZGVyU3RhdGljIChcbiAgICBpbmRleCxcbiAgICBpc0luRm9yXG4gICkge1xuICAgIHZhciB0cmVlID0gdGhpcy5fc3RhdGljVHJlZXNbaW5kZXhdO1xuICAgIC8vIGlmIGhhcyBhbHJlYWR5LXJlbmRlcmVkIHN0YXRpYyB0cmVlIGFuZCBub3QgaW5zaWRlIHYtZm9yLFxuICAgIC8vIHdlIGNhbiByZXVzZSB0aGUgc2FtZSB0cmVlIGJ5IGRvaW5nIGEgc2hhbGxvdyBjbG9uZS5cbiAgICBpZiAodHJlZSAmJiAhaXNJbkZvcikge1xuICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodHJlZSlcbiAgICAgICAgPyBjbG9uZVZOb2Rlcyh0cmVlKVxuICAgICAgICA6IGNsb25lVk5vZGUodHJlZSlcbiAgICB9XG4gICAgLy8gb3RoZXJ3aXNlLCByZW5kZXIgYSBmcmVzaCB0cmVlLlxuICAgIHRyZWUgPSB0aGlzLl9zdGF0aWNUcmVlc1tpbmRleF0gPSB0aGlzLiRvcHRpb25zLnN0YXRpY1JlbmRlckZuc1tpbmRleF0uY2FsbCh0aGlzLl9yZW5kZXJQcm94eSk7XG4gICAgbWFya1N0YXRpYyh0cmVlLCAoXCJfX3N0YXRpY19fXCIgKyBpbmRleCksIGZhbHNlKTtcbiAgICByZXR1cm4gdHJlZVxuICB9O1xuXG4gIC8vIG1hcmsgbm9kZSBhcyBzdGF0aWMgKHYtb25jZSlcbiAgVnVlLnByb3RvdHlwZS5fbyA9IGZ1bmN0aW9uIG1hcmtPbmNlIChcbiAgICB0cmVlLFxuICAgIGluZGV4LFxuICAgIGtleVxuICApIHtcbiAgICBtYXJrU3RhdGljKHRyZWUsIChcIl9fb25jZV9fXCIgKyBpbmRleCArIChrZXkgPyAoXCJfXCIgKyBrZXkpIDogXCJcIikpLCB0cnVlKTtcbiAgICByZXR1cm4gdHJlZVxuICB9O1xuXG4gIGZ1bmN0aW9uIG1hcmtTdGF0aWMgKHRyZWUsIGtleSwgaXNPbmNlKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodHJlZSkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHJlZS5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAodHJlZVtpXSAmJiB0eXBlb2YgdHJlZVtpXSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBtYXJrU3RhdGljTm9kZSh0cmVlW2ldLCAoa2V5ICsgXCJfXCIgKyBpKSwgaXNPbmNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBtYXJrU3RhdGljTm9kZSh0cmVlLCBrZXksIGlzT25jZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbWFya1N0YXRpY05vZGUgKG5vZGUsIGtleSwgaXNPbmNlKSB7XG4gICAgbm9kZS5pc1N0YXRpYyA9IHRydWU7XG4gICAgbm9kZS5rZXkgPSBrZXk7XG4gICAgbm9kZS5pc09uY2UgPSBpc09uY2U7XG4gIH1cblxuICAvLyBmaWx0ZXIgcmVzb2x1dGlvbiBoZWxwZXJcbiAgVnVlLnByb3RvdHlwZS5fZiA9IGZ1bmN0aW9uIHJlc29sdmVGaWx0ZXIgKGlkKSB7XG4gICAgcmV0dXJuIHJlc29sdmVBc3NldCh0aGlzLiRvcHRpb25zLCAnZmlsdGVycycsIGlkLCB0cnVlKSB8fCBpZGVudGl0eVxuICB9O1xuXG4gIC8vIHJlbmRlciB2LWZvclxuICBWdWUucHJvdG90eXBlLl9sID0gZnVuY3Rpb24gcmVuZGVyTGlzdCAoXG4gICAgdmFsLFxuICAgIHJlbmRlclxuICApIHtcbiAgICB2YXIgcmV0LCBpLCBsLCBrZXlzLCBrZXk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSB8fCB0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0ID0gbmV3IEFycmF5KHZhbC5sZW5ndGgpO1xuICAgICAgZm9yIChpID0gMCwgbCA9IHZhbC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgcmV0W2ldID0gcmVuZGVyKHZhbFtpXSwgaSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgICAgcmV0ID0gbmV3IEFycmF5KHZhbCk7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdmFsOyBpKyspIHtcbiAgICAgICAgcmV0W2ldID0gcmVuZGVyKGkgKyAxLCBpKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KHZhbCkpIHtcbiAgICAgIGtleXMgPSBPYmplY3Qua2V5cyh2YWwpO1xuICAgICAgcmV0ID0gbmV3IEFycmF5KGtleXMubGVuZ3RoKTtcbiAgICAgIGZvciAoaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICByZXRbaV0gPSByZW5kZXIodmFsW2tleV0sIGtleSwgaSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXRcbiAgfTtcblxuICAvLyByZW5kZXJTbG90XG4gIFZ1ZS5wcm90b3R5cGUuX3QgPSBmdW5jdGlvbiAoXG4gICAgbmFtZSxcbiAgICBmYWxsYmFjayxcbiAgICBwcm9wcyxcbiAgICBiaW5kT2JqZWN0XG4gICkge1xuICAgIHZhciBzY29wZWRTbG90Rm4gPSB0aGlzLiRzY29wZWRTbG90c1tuYW1lXTtcbiAgICBpZiAoc2NvcGVkU2xvdEZuKSB7IC8vIHNjb3BlZCBzbG90XG4gICAgICBwcm9wcyA9IHByb3BzIHx8IHt9O1xuICAgICAgaWYgKGJpbmRPYmplY3QpIHtcbiAgICAgICAgZXh0ZW5kKHByb3BzLCBiaW5kT2JqZWN0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzY29wZWRTbG90Rm4ocHJvcHMpIHx8IGZhbGxiYWNrXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBzbG90Tm9kZXMgPSB0aGlzLiRzbG90c1tuYW1lXTtcbiAgICAgIC8vIHdhcm4gZHVwbGljYXRlIHNsb3QgdXNhZ2VcbiAgICAgIGlmIChzbG90Tm9kZXMgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBzbG90Tm9kZXMuX3JlbmRlcmVkICYmIHdhcm4oXG4gICAgICAgICAgXCJEdXBsaWNhdGUgcHJlc2VuY2Ugb2Ygc2xvdCBcXFwiXCIgKyBuYW1lICsgXCJcXFwiIGZvdW5kIGluIHRoZSBzYW1lIHJlbmRlciB0cmVlIFwiICtcbiAgICAgICAgICBcIi0gdGhpcyB3aWxsIGxpa2VseSBjYXVzZSByZW5kZXIgZXJyb3JzLlwiLFxuICAgICAgICAgIHRoaXNcbiAgICAgICAgKTtcbiAgICAgICAgc2xvdE5vZGVzLl9yZW5kZXJlZCA9IHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gc2xvdE5vZGVzIHx8IGZhbGxiYWNrXG4gICAgfVxuICB9O1xuXG4gIC8vIGFwcGx5IHYtYmluZCBvYmplY3RcbiAgVnVlLnByb3RvdHlwZS5fYiA9IGZ1bmN0aW9uIGJpbmRQcm9wcyAoXG4gICAgZGF0YSxcbiAgICB0YWcsXG4gICAgdmFsdWUsXG4gICAgYXNQcm9wXG4gICkge1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAgICd2LWJpbmQgd2l0aG91dCBhcmd1bWVudCBleHBlY3RzIGFuIE9iamVjdCBvciBBcnJheSB2YWx1ZScsXG4gICAgICAgICAgdGhpc1xuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgdmFsdWUgPSB0b09iamVjdCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgICAgICAgaWYgKGtleSA9PT0gJ2NsYXNzJyB8fCBrZXkgPT09ICdzdHlsZScpIHtcbiAgICAgICAgICAgIGRhdGFba2V5XSA9IHZhbHVlW2tleV07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciB0eXBlID0gZGF0YS5hdHRycyAmJiBkYXRhLmF0dHJzLnR5cGU7XG4gICAgICAgICAgICB2YXIgaGFzaCA9IGFzUHJvcCB8fCBjb25maWcubXVzdFVzZVByb3AodGFnLCB0eXBlLCBrZXkpXG4gICAgICAgICAgICAgID8gZGF0YS5kb21Qcm9wcyB8fCAoZGF0YS5kb21Qcm9wcyA9IHt9KVxuICAgICAgICAgICAgICA6IGRhdGEuYXR0cnMgfHwgKGRhdGEuYXR0cnMgPSB7fSk7XG4gICAgICAgICAgICBoYXNoW2tleV0gPSB2YWx1ZVtrZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZGF0YVxuICB9O1xuXG4gIC8vIGNoZWNrIHYtb24ga2V5Q29kZXNcbiAgVnVlLnByb3RvdHlwZS5fayA9IGZ1bmN0aW9uIGNoZWNrS2V5Q29kZXMgKFxuICAgIGV2ZW50S2V5Q29kZSxcbiAgICBrZXksXG4gICAgYnVpbHRJbkFsaWFzXG4gICkge1xuICAgIHZhciBrZXlDb2RlcyA9IGNvbmZpZy5rZXlDb2Rlc1trZXldIHx8IGJ1aWx0SW5BbGlhcztcbiAgICBpZiAoQXJyYXkuaXNBcnJheShrZXlDb2RlcykpIHtcbiAgICAgIHJldHVybiBrZXlDb2Rlcy5pbmRleE9mKGV2ZW50S2V5Q29kZSkgPT09IC0xXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBrZXlDb2RlcyAhPT0gZXZlbnRLZXlDb2RlXG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiByZXNvbHZlU2xvdHMgKFxuICBjaGlsZHJlbixcbiAgY29udGV4dFxuKSB7XG4gIHZhciBzbG90cyA9IHt9O1xuICBpZiAoIWNoaWxkcmVuKSB7XG4gICAgcmV0dXJuIHNsb3RzXG4gIH1cbiAgdmFyIGRlZmF1bHRTbG90ID0gW107XG4gIHZhciBuYW1lLCBjaGlsZDtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgIC8vIG5hbWVkIHNsb3RzIHNob3VsZCBvbmx5IGJlIHJlc3BlY3RlZCBpZiB0aGUgdm5vZGUgd2FzIHJlbmRlcmVkIGluIHRoZVxuICAgIC8vIHNhbWUgY29udGV4dC5cbiAgICBpZiAoKGNoaWxkLmNvbnRleHQgPT09IGNvbnRleHQgfHwgY2hpbGQuZnVuY3Rpb25hbENvbnRleHQgPT09IGNvbnRleHQpICYmXG4gICAgICAgIGNoaWxkLmRhdGEgJiYgKG5hbWUgPSBjaGlsZC5kYXRhLnNsb3QpKSB7XG4gICAgICB2YXIgc2xvdCA9IChzbG90c1tuYW1lXSB8fCAoc2xvdHNbbmFtZV0gPSBbXSkpO1xuICAgICAgaWYgKGNoaWxkLnRhZyA9PT0gJ3RlbXBsYXRlJykge1xuICAgICAgICBzbG90LnB1c2guYXBwbHkoc2xvdCwgY2hpbGQuY2hpbGRyZW4pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2xvdC5wdXNoKGNoaWxkKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZGVmYXVsdFNsb3QucHVzaChjaGlsZCk7XG4gICAgfVxuICB9XG4gIC8vIGlnbm9yZSBzaW5nbGUgd2hpdGVzcGFjZVxuICBpZiAoZGVmYXVsdFNsb3QubGVuZ3RoICYmICEoXG4gICAgZGVmYXVsdFNsb3QubGVuZ3RoID09PSAxICYmXG4gICAgKGRlZmF1bHRTbG90WzBdLnRleHQgPT09ICcgJyB8fCBkZWZhdWx0U2xvdFswXS5pc0NvbW1lbnQpXG4gICkpIHtcbiAgICBzbG90cy5kZWZhdWx0ID0gZGVmYXVsdFNsb3Q7XG4gIH1cbiAgcmV0dXJuIHNsb3RzXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0RXZlbnRzICh2bSkge1xuICB2bS5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdm0uX2hhc0hvb2tFdmVudCA9IGZhbHNlO1xuICAvLyBpbml0IHBhcmVudCBhdHRhY2hlZCBldmVudHNcbiAgdmFyIGxpc3RlbmVycyA9IHZtLiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM7XG4gIGlmIChsaXN0ZW5lcnMpIHtcbiAgICB1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnModm0sIGxpc3RlbmVycyk7XG4gIH1cbn1cblxudmFyIHRhcmdldDtcblxuZnVuY3Rpb24gYWRkJDEgKGV2ZW50LCBmbiwgb25jZSkge1xuICBpZiAob25jZSkge1xuICAgIHRhcmdldC4kb25jZShldmVudCwgZm4pO1xuICB9IGVsc2Uge1xuICAgIHRhcmdldC4kb24oZXZlbnQsIGZuKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZW1vdmUkMiAoZXZlbnQsIGZuKSB7XG4gIHRhcmdldC4kb2ZmKGV2ZW50LCBmbik7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyAoXG4gIHZtLFxuICBsaXN0ZW5lcnMsXG4gIG9sZExpc3RlbmVyc1xuKSB7XG4gIHRhcmdldCA9IHZtO1xuICB1cGRhdGVMaXN0ZW5lcnMobGlzdGVuZXJzLCBvbGRMaXN0ZW5lcnMgfHwge30sIGFkZCQxLCByZW1vdmUkMiwgdm0pO1xufVxuXG5mdW5jdGlvbiBldmVudHNNaXhpbiAoVnVlKSB7XG4gIHZhciBob29rUkUgPSAvXmhvb2s6LztcbiAgVnVlLnByb3RvdHlwZS4kb24gPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG4gICAgdmFyIHZtID0gdGhpczsodm0uX2V2ZW50c1tldmVudF0gfHwgKHZtLl9ldmVudHNbZXZlbnRdID0gW10pKS5wdXNoKGZuKTtcbiAgICAvLyBvcHRpbWl6ZSBob29rOmV2ZW50IGNvc3QgYnkgdXNpbmcgYSBib29sZWFuIGZsYWcgbWFya2VkIGF0IHJlZ2lzdHJhdGlvblxuICAgIC8vIGluc3RlYWQgb2YgYSBoYXNoIGxvb2t1cFxuICAgIGlmIChob29rUkUudGVzdChldmVudCkpIHtcbiAgICAgIHZtLl9oYXNIb29rRXZlbnQgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gdm1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRvbmNlID0gZnVuY3Rpb24gKGV2ZW50LCBmbikge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgZnVuY3Rpb24gb24gKCkge1xuICAgICAgdm0uJG9mZihldmVudCwgb24pO1xuICAgICAgZm4uYXBwbHkodm0sIGFyZ3VtZW50cyk7XG4gICAgfVxuICAgIG9uLmZuID0gZm47XG4gICAgdm0uJG9uKGV2ZW50LCBvbik7XG4gICAgcmV0dXJuIHZtXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kb2ZmID0gZnVuY3Rpb24gKGV2ZW50LCBmbikge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgLy8gYWxsXG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICB2bS5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICAvLyBzcGVjaWZpYyBldmVudFxuICAgIHZhciBjYnMgPSB2bS5fZXZlbnRzW2V2ZW50XTtcbiAgICBpZiAoIWNicykge1xuICAgICAgcmV0dXJuIHZtXG4gICAgfVxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICB2bS5fZXZlbnRzW2V2ZW50XSA9IG51bGw7XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgLy8gc3BlY2lmaWMgaGFuZGxlclxuICAgIHZhciBjYjtcbiAgICB2YXIgaSA9IGNicy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgY2IgPSBjYnNbaV07XG4gICAgICBpZiAoY2IgPT09IGZuIHx8IGNiLmZuID09PSBmbikge1xuICAgICAgICBjYnMuc3BsaWNlKGksIDEpO1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdm1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRlbWl0ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2YXIgY2JzID0gdm0uX2V2ZW50c1tldmVudF07XG4gICAgaWYgKGNicykge1xuICAgICAgY2JzID0gY2JzLmxlbmd0aCA+IDEgPyB0b0FycmF5KGNicykgOiBjYnM7XG4gICAgICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzLCAxKTtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gY2JzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBjYnNbaV0uYXBwbHkodm0sIGFyZ3MpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdm1cbiAgfTtcbn1cblxuLyogICovXG5cbnZhciBhY3RpdmVJbnN0YW5jZSA9IG51bGw7XG5cbmZ1bmN0aW9uIGluaXRMaWZlY3ljbGUgKHZtKSB7XG4gIHZhciBvcHRpb25zID0gdm0uJG9wdGlvbnM7XG5cbiAgLy8gbG9jYXRlIGZpcnN0IG5vbi1hYnN0cmFjdCBwYXJlbnRcbiAgdmFyIHBhcmVudCA9IG9wdGlvbnMucGFyZW50O1xuICBpZiAocGFyZW50ICYmICFvcHRpb25zLmFic3RyYWN0KSB7XG4gICAgd2hpbGUgKHBhcmVudC4kb3B0aW9ucy5hYnN0cmFjdCAmJiBwYXJlbnQuJHBhcmVudCkge1xuICAgICAgcGFyZW50ID0gcGFyZW50LiRwYXJlbnQ7XG4gICAgfVxuICAgIHBhcmVudC4kY2hpbGRyZW4ucHVzaCh2bSk7XG4gIH1cblxuICB2bS4kcGFyZW50ID0gcGFyZW50O1xuICB2bS4kcm9vdCA9IHBhcmVudCA/IHBhcmVudC4kcm9vdCA6IHZtO1xuXG4gIHZtLiRjaGlsZHJlbiA9IFtdO1xuICB2bS4kcmVmcyA9IHt9O1xuXG4gIHZtLl93YXRjaGVyID0gbnVsbDtcbiAgdm0uX2luYWN0aXZlID0gZmFsc2U7XG4gIHZtLl9pc01vdW50ZWQgPSBmYWxzZTtcbiAgdm0uX2lzRGVzdHJveWVkID0gZmFsc2U7XG4gIHZtLl9pc0JlaW5nRGVzdHJveWVkID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGxpZmVjeWNsZU1peGluIChWdWUpIHtcbiAgVnVlLnByb3RvdHlwZS5fbW91bnQgPSBmdW5jdGlvbiAoXG4gICAgZWwsXG4gICAgaHlkcmF0aW5nXG4gICkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdm0uJGVsID0gZWw7XG4gICAgaWYgKCF2bS4kb3B0aW9ucy5yZW5kZXIpIHtcbiAgICAgIHZtLiRvcHRpb25zLnJlbmRlciA9IGNyZWF0ZUVtcHR5Vk5vZGU7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKHZtLiRvcHRpb25zLnRlbXBsYXRlICYmIHZtLiRvcHRpb25zLnRlbXBsYXRlLmNoYXJBdCgwKSAhPT0gJyMnKSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgICdZb3UgYXJlIHVzaW5nIHRoZSBydW50aW1lLW9ubHkgYnVpbGQgb2YgVnVlIHdoZXJlIHRoZSB0ZW1wbGF0ZSAnICtcbiAgICAgICAgICAgICdvcHRpb24gaXMgbm90IGF2YWlsYWJsZS4gRWl0aGVyIHByZS1jb21waWxlIHRoZSB0ZW1wbGF0ZXMgaW50byAnICtcbiAgICAgICAgICAgICdyZW5kZXIgZnVuY3Rpb25zLCBvciB1c2UgdGhlIGNvbXBpbGVyLWluY2x1ZGVkIGJ1aWxkLicsXG4gICAgICAgICAgICB2bVxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgICdGYWlsZWQgdG8gbW91bnQgY29tcG9uZW50OiB0ZW1wbGF0ZSBvciByZW5kZXIgZnVuY3Rpb24gbm90IGRlZmluZWQuJyxcbiAgICAgICAgICAgIHZtXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBjYWxsSG9vayh2bSwgJ2JlZm9yZU1vdW50Jyk7XG4gICAgdm0uX3dhdGNoZXIgPSBuZXcgV2F0Y2hlcih2bSwgZnVuY3Rpb24gdXBkYXRlQ29tcG9uZW50ICgpIHtcbiAgICAgIHZtLl91cGRhdGUodm0uX3JlbmRlcigpLCBoeWRyYXRpbmcpO1xuICAgIH0sIG5vb3ApO1xuICAgIGh5ZHJhdGluZyA9IGZhbHNlO1xuICAgIC8vIG1hbnVhbGx5IG1vdW50ZWQgaW5zdGFuY2UsIGNhbGwgbW91bnRlZCBvbiBzZWxmXG4gICAgLy8gbW91bnRlZCBpcyBjYWxsZWQgZm9yIHJlbmRlci1jcmVhdGVkIGNoaWxkIGNvbXBvbmVudHMgaW4gaXRzIGluc2VydGVkIGhvb2tcbiAgICBpZiAodm0uJHZub2RlID09IG51bGwpIHtcbiAgICAgIHZtLl9pc01vdW50ZWQgPSB0cnVlO1xuICAgICAgY2FsbEhvb2sodm0sICdtb3VudGVkJyk7XG4gICAgfVxuICAgIHJldHVybiB2bVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uICh2bm9kZSwgaHlkcmF0aW5nKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAodm0uX2lzTW91bnRlZCkge1xuICAgICAgY2FsbEhvb2sodm0sICdiZWZvcmVVcGRhdGUnKTtcbiAgICB9XG4gICAgdmFyIHByZXZFbCA9IHZtLiRlbDtcbiAgICB2YXIgcHJldlZub2RlID0gdm0uX3Zub2RlO1xuICAgIHZhciBwcmV2QWN0aXZlSW5zdGFuY2UgPSBhY3RpdmVJbnN0YW5jZTtcbiAgICBhY3RpdmVJbnN0YW5jZSA9IHZtO1xuICAgIHZtLl92bm9kZSA9IHZub2RlO1xuICAgIC8vIFZ1ZS5wcm90b3R5cGUuX19wYXRjaF9fIGlzIGluamVjdGVkIGluIGVudHJ5IHBvaW50c1xuICAgIC8vIGJhc2VkIG9uIHRoZSByZW5kZXJpbmcgYmFja2VuZCB1c2VkLlxuICAgIGlmICghcHJldlZub2RlKSB7XG4gICAgICAvLyBpbml0aWFsIHJlbmRlclxuICAgICAgdm0uJGVsID0gdm0uX19wYXRjaF9fKFxuICAgICAgICB2bS4kZWwsIHZub2RlLCBoeWRyYXRpbmcsIGZhbHNlIC8qIHJlbW92ZU9ubHkgKi8sXG4gICAgICAgIHZtLiRvcHRpb25zLl9wYXJlbnRFbG0sXG4gICAgICAgIHZtLiRvcHRpb25zLl9yZWZFbG1cbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHVwZGF0ZXNcbiAgICAgIHZtLiRlbCA9IHZtLl9fcGF0Y2hfXyhwcmV2Vm5vZGUsIHZub2RlKTtcbiAgICB9XG4gICAgYWN0aXZlSW5zdGFuY2UgPSBwcmV2QWN0aXZlSW5zdGFuY2U7XG4gICAgLy8gdXBkYXRlIF9fdnVlX18gcmVmZXJlbmNlXG4gICAgaWYgKHByZXZFbCkge1xuICAgICAgcHJldkVsLl9fdnVlX18gPSBudWxsO1xuICAgIH1cbiAgICBpZiAodm0uJGVsKSB7XG4gICAgICB2bS4kZWwuX192dWVfXyA9IHZtO1xuICAgIH1cbiAgICAvLyBpZiBwYXJlbnQgaXMgYW4gSE9DLCB1cGRhdGUgaXRzICRlbCBhcyB3ZWxsXG4gICAgaWYgKHZtLiR2bm9kZSAmJiB2bS4kcGFyZW50ICYmIHZtLiR2bm9kZSA9PT0gdm0uJHBhcmVudC5fdm5vZGUpIHtcbiAgICAgIHZtLiRwYXJlbnQuJGVsID0gdm0uJGVsO1xuICAgIH1cbiAgICAvLyB1cGRhdGVkIGhvb2sgaXMgY2FsbGVkIGJ5IHRoZSBzY2hlZHVsZXIgdG8gZW5zdXJlIHRoYXQgY2hpbGRyZW4gYXJlXG4gICAgLy8gdXBkYXRlZCBpbiBhIHBhcmVudCdzIHVwZGF0ZWQgaG9vay5cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLl91cGRhdGVGcm9tUGFyZW50ID0gZnVuY3Rpb24gKFxuICAgIHByb3BzRGF0YSxcbiAgICBsaXN0ZW5lcnMsXG4gICAgcGFyZW50Vm5vZGUsXG4gICAgcmVuZGVyQ2hpbGRyZW5cbiAgKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2YXIgaGFzQ2hpbGRyZW4gPSAhISh2bS4kb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4gfHwgcmVuZGVyQ2hpbGRyZW4pO1xuICAgIHZtLiRvcHRpb25zLl9wYXJlbnRWbm9kZSA9IHBhcmVudFZub2RlO1xuICAgIHZtLiR2bm9kZSA9IHBhcmVudFZub2RlOyAvLyB1cGRhdGUgdm0ncyBwbGFjZWhvbGRlciBub2RlIHdpdGhvdXQgcmUtcmVuZGVyXG4gICAgaWYgKHZtLl92bm9kZSkgeyAvLyB1cGRhdGUgY2hpbGQgdHJlZSdzIHBhcmVudFxuICAgICAgdm0uX3Zub2RlLnBhcmVudCA9IHBhcmVudFZub2RlO1xuICAgIH1cbiAgICB2bS4kb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4gPSByZW5kZXJDaGlsZHJlbjtcbiAgICAvLyB1cGRhdGUgcHJvcHNcbiAgICBpZiAocHJvcHNEYXRhICYmIHZtLiRvcHRpb25zLnByb3BzKSB7XG4gICAgICBvYnNlcnZlclN0YXRlLnNob3VsZENvbnZlcnQgPSBmYWxzZTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIG9ic2VydmVyU3RhdGUuaXNTZXR0aW5nUHJvcHMgPSB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIHByb3BLZXlzID0gdm0uJG9wdGlvbnMuX3Byb3BLZXlzIHx8IFtdO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIga2V5ID0gcHJvcEtleXNbaV07XG4gICAgICAgIHZtW2tleV0gPSB2YWxpZGF0ZVByb3Aoa2V5LCB2bS4kb3B0aW9ucy5wcm9wcywgcHJvcHNEYXRhLCB2bSk7XG4gICAgICB9XG4gICAgICBvYnNlcnZlclN0YXRlLnNob3VsZENvbnZlcnQgPSB0cnVlO1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgb2JzZXJ2ZXJTdGF0ZS5pc1NldHRpbmdQcm9wcyA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgdm0uJG9wdGlvbnMucHJvcHNEYXRhID0gcHJvcHNEYXRhO1xuICAgIH1cbiAgICAvLyB1cGRhdGUgbGlzdGVuZXJzXG4gICAgaWYgKGxpc3RlbmVycykge1xuICAgICAgdmFyIG9sZExpc3RlbmVycyA9IHZtLiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM7XG4gICAgICB2bS4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzID0gbGlzdGVuZXJzO1xuICAgICAgdXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzKHZtLCBsaXN0ZW5lcnMsIG9sZExpc3RlbmVycyk7XG4gICAgfVxuICAgIC8vIHJlc29sdmUgc2xvdHMgKyBmb3JjZSB1cGRhdGUgaWYgaGFzIGNoaWxkcmVuXG4gICAgaWYgKGhhc0NoaWxkcmVuKSB7XG4gICAgICB2bS4kc2xvdHMgPSByZXNvbHZlU2xvdHMocmVuZGVyQ2hpbGRyZW4sIHBhcmVudFZub2RlLmNvbnRleHQpO1xuICAgICAgdm0uJGZvcmNlVXBkYXRlKCk7XG4gICAgfVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJGZvcmNlVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKHZtLl93YXRjaGVyKSB7XG4gICAgICB2bS5fd2F0Y2hlci51cGRhdGUoKTtcbiAgICB9XG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmICh2bS5faXNCZWluZ0Rlc3Ryb3llZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlRGVzdHJveScpO1xuICAgIHZtLl9pc0JlaW5nRGVzdHJveWVkID0gdHJ1ZTtcbiAgICAvLyByZW1vdmUgc2VsZiBmcm9tIHBhcmVudFxuICAgIHZhciBwYXJlbnQgPSB2bS4kcGFyZW50O1xuICAgIGlmIChwYXJlbnQgJiYgIXBhcmVudC5faXNCZWluZ0Rlc3Ryb3llZCAmJiAhdm0uJG9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICAgIHJlbW92ZSQxKHBhcmVudC4kY2hpbGRyZW4sIHZtKTtcbiAgICB9XG4gICAgLy8gdGVhcmRvd24gd2F0Y2hlcnNcbiAgICBpZiAodm0uX3dhdGNoZXIpIHtcbiAgICAgIHZtLl93YXRjaGVyLnRlYXJkb3duKCk7XG4gICAgfVxuICAgIHZhciBpID0gdm0uX3dhdGNoZXJzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB2bS5fd2F0Y2hlcnNbaV0udGVhcmRvd24oKTtcbiAgICB9XG4gICAgLy8gcmVtb3ZlIHJlZmVyZW5jZSBmcm9tIGRhdGEgb2JcbiAgICAvLyBmcm96ZW4gb2JqZWN0IG1heSBub3QgaGF2ZSBvYnNlcnZlci5cbiAgICBpZiAodm0uX2RhdGEuX19vYl9fKSB7XG4gICAgICB2bS5fZGF0YS5fX29iX18udm1Db3VudC0tO1xuICAgIH1cbiAgICAvLyBjYWxsIHRoZSBsYXN0IGhvb2suLi5cbiAgICB2bS5faXNEZXN0cm95ZWQgPSB0cnVlO1xuICAgIGNhbGxIb29rKHZtLCAnZGVzdHJveWVkJyk7XG4gICAgLy8gdHVybiBvZmYgYWxsIGluc3RhbmNlIGxpc3RlbmVycy5cbiAgICB2bS4kb2ZmKCk7XG4gICAgLy8gcmVtb3ZlIF9fdnVlX18gcmVmZXJlbmNlXG4gICAgaWYgKHZtLiRlbCkge1xuICAgICAgdm0uJGVsLl9fdnVlX18gPSBudWxsO1xuICAgIH1cbiAgICAvLyBpbnZva2UgZGVzdHJveSBob29rcyBvbiBjdXJyZW50IHJlbmRlcmVkIHRyZWVcbiAgICB2bS5fX3BhdGNoX18odm0uX3Zub2RlLCBudWxsKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY2FsbEhvb2sgKHZtLCBob29rKSB7XG4gIHZhciBoYW5kbGVycyA9IHZtLiRvcHRpb25zW2hvb2tdO1xuICBpZiAoaGFuZGxlcnMpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgaiA9IGhhbmRsZXJzLmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgICAgaGFuZGxlcnNbaV0uY2FsbCh2bSk7XG4gICAgfVxuICB9XG4gIGlmICh2bS5faGFzSG9va0V2ZW50KSB7XG4gICAgdm0uJGVtaXQoJ2hvb2s6JyArIGhvb2spO1xuICB9XG59XG5cbi8qICAqL1xuXG5cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGhhcyQxID0ge307XG52YXIgY2lyY3VsYXIgPSB7fTtcbnZhciB3YWl0aW5nID0gZmFsc2U7XG52YXIgZmx1c2hpbmcgPSBmYWxzZTtcbnZhciBpbmRleCA9IDA7XG5cbi8qKlxuICogUmVzZXQgdGhlIHNjaGVkdWxlcidzIHN0YXRlLlxuICovXG5mdW5jdGlvbiByZXNldFNjaGVkdWxlclN0YXRlICgpIHtcbiAgcXVldWUubGVuZ3RoID0gMDtcbiAgaGFzJDEgPSB7fTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBjaXJjdWxhciA9IHt9O1xuICB9XG4gIHdhaXRpbmcgPSBmbHVzaGluZyA9IGZhbHNlO1xufVxuXG4vKipcbiAqIEZsdXNoIGJvdGggcXVldWVzIGFuZCBydW4gdGhlIHdhdGNoZXJzLlxuICovXG5mdW5jdGlvbiBmbHVzaFNjaGVkdWxlclF1ZXVlICgpIHtcbiAgZmx1c2hpbmcgPSB0cnVlO1xuICB2YXIgd2F0Y2hlciwgaWQsIHZtO1xuXG4gIC8vIFNvcnQgcXVldWUgYmVmb3JlIGZsdXNoLlxuICAvLyBUaGlzIGVuc3VyZXMgdGhhdDpcbiAgLy8gMS4gQ29tcG9uZW50cyBhcmUgdXBkYXRlZCBmcm9tIHBhcmVudCB0byBjaGlsZC4gKGJlY2F1c2UgcGFyZW50IGlzIGFsd2F5c1xuICAvLyAgICBjcmVhdGVkIGJlZm9yZSB0aGUgY2hpbGQpXG4gIC8vIDIuIEEgY29tcG9uZW50J3MgdXNlciB3YXRjaGVycyBhcmUgcnVuIGJlZm9yZSBpdHMgcmVuZGVyIHdhdGNoZXIgKGJlY2F1c2VcbiAgLy8gICAgdXNlciB3YXRjaGVycyBhcmUgY3JlYXRlZCBiZWZvcmUgdGhlIHJlbmRlciB3YXRjaGVyKVxuICAvLyAzLiBJZiBhIGNvbXBvbmVudCBpcyBkZXN0cm95ZWQgZHVyaW5nIGEgcGFyZW50IGNvbXBvbmVudCdzIHdhdGNoZXIgcnVuLFxuICAvLyAgICBpdHMgd2F0Y2hlcnMgY2FuIGJlIHNraXBwZWQuXG4gIHF1ZXVlLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEuaWQgLSBiLmlkOyB9KTtcblxuICAvLyBkbyBub3QgY2FjaGUgbGVuZ3RoIGJlY2F1c2UgbW9yZSB3YXRjaGVycyBtaWdodCBiZSBwdXNoZWRcbiAgLy8gYXMgd2UgcnVuIGV4aXN0aW5nIHdhdGNoZXJzXG4gIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IHF1ZXVlLmxlbmd0aDsgaW5kZXgrKykge1xuICAgIHdhdGNoZXIgPSBxdWV1ZVtpbmRleF07XG4gICAgaWQgPSB3YXRjaGVyLmlkO1xuICAgIGhhcyQxW2lkXSA9IG51bGw7XG4gICAgd2F0Y2hlci5ydW4oKTtcbiAgICAvLyBpbiBkZXYgYnVpbGQsIGNoZWNrIGFuZCBzdG9wIGNpcmN1bGFyIHVwZGF0ZXMuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaGFzJDFbaWRdICE9IG51bGwpIHtcbiAgICAgIGNpcmN1bGFyW2lkXSA9IChjaXJjdWxhcltpZF0gfHwgMCkgKyAxO1xuICAgICAgaWYgKGNpcmN1bGFyW2lkXSA+IGNvbmZpZy5fbWF4VXBkYXRlQ291bnQpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnWW91IG1heSBoYXZlIGFuIGluZmluaXRlIHVwZGF0ZSBsb29wICcgKyAoXG4gICAgICAgICAgICB3YXRjaGVyLnVzZXJcbiAgICAgICAgICAgICAgPyAoXCJpbiB3YXRjaGVyIHdpdGggZXhwcmVzc2lvbiBcXFwiXCIgKyAod2F0Y2hlci5leHByZXNzaW9uKSArIFwiXFxcIlwiKVxuICAgICAgICAgICAgICA6IFwiaW4gYSBjb21wb25lbnQgcmVuZGVyIGZ1bmN0aW9uLlwiXG4gICAgICAgICAgKSxcbiAgICAgICAgICB3YXRjaGVyLnZtXG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gY2FsbCB1cGRhdGVkIGhvb2tzXG4gIGluZGV4ID0gcXVldWUubGVuZ3RoO1xuICB3aGlsZSAoaW5kZXgtLSkge1xuICAgIHdhdGNoZXIgPSBxdWV1ZVtpbmRleF07XG4gICAgdm0gPSB3YXRjaGVyLnZtO1xuICAgIGlmICh2bS5fd2F0Y2hlciA9PT0gd2F0Y2hlciAmJiB2bS5faXNNb3VudGVkKSB7XG4gICAgICBjYWxsSG9vayh2bSwgJ3VwZGF0ZWQnKTtcbiAgICB9XG4gIH1cblxuICAvLyBkZXZ0b29sIGhvb2tcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChkZXZ0b29scyAmJiBjb25maWcuZGV2dG9vbHMpIHtcbiAgICBkZXZ0b29scy5lbWl0KCdmbHVzaCcpO1xuICB9XG5cbiAgcmVzZXRTY2hlZHVsZXJTdGF0ZSgpO1xufVxuXG4vKipcbiAqIFB1c2ggYSB3YXRjaGVyIGludG8gdGhlIHdhdGNoZXIgcXVldWUuXG4gKiBKb2JzIHdpdGggZHVwbGljYXRlIElEcyB3aWxsIGJlIHNraXBwZWQgdW5sZXNzIGl0J3NcbiAqIHB1c2hlZCB3aGVuIHRoZSBxdWV1ZSBpcyBiZWluZyBmbHVzaGVkLlxuICovXG5mdW5jdGlvbiBxdWV1ZVdhdGNoZXIgKHdhdGNoZXIpIHtcbiAgdmFyIGlkID0gd2F0Y2hlci5pZDtcbiAgaWYgKGhhcyQxW2lkXSA9PSBudWxsKSB7XG4gICAgaGFzJDFbaWRdID0gdHJ1ZTtcbiAgICBpZiAoIWZsdXNoaW5nKSB7XG4gICAgICBxdWV1ZS5wdXNoKHdhdGNoZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpZiBhbHJlYWR5IGZsdXNoaW5nLCBzcGxpY2UgdGhlIHdhdGNoZXIgYmFzZWQgb24gaXRzIGlkXG4gICAgICAvLyBpZiBhbHJlYWR5IHBhc3QgaXRzIGlkLCBpdCB3aWxsIGJlIHJ1biBuZXh0IGltbWVkaWF0ZWx5LlxuICAgICAgdmFyIGkgPSBxdWV1ZS5sZW5ndGggLSAxO1xuICAgICAgd2hpbGUgKGkgPj0gMCAmJiBxdWV1ZVtpXS5pZCA+IHdhdGNoZXIuaWQpIHtcbiAgICAgICAgaS0tO1xuICAgICAgfVxuICAgICAgcXVldWUuc3BsaWNlKE1hdGgubWF4KGksIGluZGV4KSArIDEsIDAsIHdhdGNoZXIpO1xuICAgIH1cbiAgICAvLyBxdWV1ZSB0aGUgZmx1c2hcbiAgICBpZiAoIXdhaXRpbmcpIHtcbiAgICAgIHdhaXRpbmcgPSB0cnVlO1xuICAgICAgbmV4dFRpY2soZmx1c2hTY2hlZHVsZXJRdWV1ZSk7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgdWlkJDIgPSAwO1xuXG4vKipcbiAqIEEgd2F0Y2hlciBwYXJzZXMgYW4gZXhwcmVzc2lvbiwgY29sbGVjdHMgZGVwZW5kZW5jaWVzLFxuICogYW5kIGZpcmVzIGNhbGxiYWNrIHdoZW4gdGhlIGV4cHJlc3Npb24gdmFsdWUgY2hhbmdlcy5cbiAqIFRoaXMgaXMgdXNlZCBmb3IgYm90aCB0aGUgJHdhdGNoKCkgYXBpIGFuZCBkaXJlY3RpdmVzLlxuICovXG52YXIgV2F0Y2hlciA9IGZ1bmN0aW9uIFdhdGNoZXIgKFxuICB2bSxcbiAgZXhwT3JGbixcbiAgY2IsXG4gIG9wdGlvbnNcbikge1xuICB0aGlzLnZtID0gdm07XG4gIHZtLl93YXRjaGVycy5wdXNoKHRoaXMpO1xuICAvLyBvcHRpb25zXG4gIGlmIChvcHRpb25zKSB7XG4gICAgdGhpcy5kZWVwID0gISFvcHRpb25zLmRlZXA7XG4gICAgdGhpcy51c2VyID0gISFvcHRpb25zLnVzZXI7XG4gICAgdGhpcy5sYXp5ID0gISFvcHRpb25zLmxhenk7XG4gICAgdGhpcy5zeW5jID0gISFvcHRpb25zLnN5bmM7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5kZWVwID0gdGhpcy51c2VyID0gdGhpcy5sYXp5ID0gdGhpcy5zeW5jID0gZmFsc2U7XG4gIH1cbiAgdGhpcy5jYiA9IGNiO1xuICB0aGlzLmlkID0gKyt1aWQkMjsgLy8gdWlkIGZvciBiYXRjaGluZ1xuICB0aGlzLmFjdGl2ZSA9IHRydWU7XG4gIHRoaXMuZGlydHkgPSB0aGlzLmxhenk7IC8vIGZvciBsYXp5IHdhdGNoZXJzXG4gIHRoaXMuZGVwcyA9IFtdO1xuICB0aGlzLm5ld0RlcHMgPSBbXTtcbiAgdGhpcy5kZXBJZHMgPSBuZXcgX1NldCgpO1xuICB0aGlzLm5ld0RlcElkcyA9IG5ldyBfU2V0KCk7XG4gIHRoaXMuZXhwcmVzc2lvbiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbidcbiAgICA/IGV4cE9yRm4udG9TdHJpbmcoKVxuICAgIDogJyc7XG4gIC8vIHBhcnNlIGV4cHJlc3Npb24gZm9yIGdldHRlclxuICBpZiAodHlwZW9mIGV4cE9yRm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aGlzLmdldHRlciA9IGV4cE9yRm47XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5nZXR0ZXIgPSBwYXJzZVBhdGgoZXhwT3JGbik7XG4gICAgaWYgKCF0aGlzLmdldHRlcikge1xuICAgICAgdGhpcy5nZXR0ZXIgPSBmdW5jdGlvbiAoKSB7fTtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgXCJGYWlsZWQgd2F0Y2hpbmcgcGF0aDogXFxcIlwiICsgZXhwT3JGbiArIFwiXFxcIiBcIiArXG4gICAgICAgICdXYXRjaGVyIG9ubHkgYWNjZXB0cyBzaW1wbGUgZG90LWRlbGltaXRlZCBwYXRocy4gJyArXG4gICAgICAgICdGb3IgZnVsbCBjb250cm9sLCB1c2UgYSBmdW5jdGlvbiBpbnN0ZWFkLicsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cbiAgfVxuICB0aGlzLnZhbHVlID0gdGhpcy5sYXp5XG4gICAgPyB1bmRlZmluZWRcbiAgICA6IHRoaXMuZ2V0KCk7XG59O1xuXG4vKipcbiAqIEV2YWx1YXRlIHRoZSBnZXR0ZXIsIGFuZCByZS1jb2xsZWN0IGRlcGVuZGVuY2llcy5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gZ2V0ICgpIHtcbiAgcHVzaFRhcmdldCh0aGlzKTtcbiAgdmFyIHZhbHVlID0gdGhpcy5nZXR0ZXIuY2FsbCh0aGlzLnZtLCB0aGlzLnZtKTtcbiAgLy8gXCJ0b3VjaFwiIGV2ZXJ5IHByb3BlcnR5IHNvIHRoZXkgYXJlIGFsbCB0cmFja2VkIGFzXG4gIC8vIGRlcGVuZGVuY2llcyBmb3IgZGVlcCB3YXRjaGluZ1xuICBpZiAodGhpcy5kZWVwKSB7XG4gICAgdHJhdmVyc2UodmFsdWUpO1xuICB9XG4gIHBvcFRhcmdldCgpO1xuICB0aGlzLmNsZWFudXBEZXBzKCk7XG4gIHJldHVybiB2YWx1ZVxufTtcblxuLyoqXG4gKiBBZGQgYSBkZXBlbmRlbmN5IHRvIHRoaXMgZGlyZWN0aXZlLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5hZGREZXAgPSBmdW5jdGlvbiBhZGREZXAgKGRlcCkge1xuICB2YXIgaWQgPSBkZXAuaWQ7XG4gIGlmICghdGhpcy5uZXdEZXBJZHMuaGFzKGlkKSkge1xuICAgIHRoaXMubmV3RGVwSWRzLmFkZChpZCk7XG4gICAgdGhpcy5uZXdEZXBzLnB1c2goZGVwKTtcbiAgICBpZiAoIXRoaXMuZGVwSWRzLmhhcyhpZCkpIHtcbiAgICAgIGRlcC5hZGRTdWIodGhpcyk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIENsZWFuIHVwIGZvciBkZXBlbmRlbmN5IGNvbGxlY3Rpb24uXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmNsZWFudXBEZXBzID0gZnVuY3Rpb24gY2xlYW51cERlcHMgKCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHZhciBpID0gdGhpcy5kZXBzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIHZhciBkZXAgPSB0aGlzJDEuZGVwc1tpXTtcbiAgICBpZiAoIXRoaXMkMS5uZXdEZXBJZHMuaGFzKGRlcC5pZCkpIHtcbiAgICAgIGRlcC5yZW1vdmVTdWIodGhpcyQxKTtcbiAgICB9XG4gIH1cbiAgdmFyIHRtcCA9IHRoaXMuZGVwSWRzO1xuICB0aGlzLmRlcElkcyA9IHRoaXMubmV3RGVwSWRzO1xuICB0aGlzLm5ld0RlcElkcyA9IHRtcDtcbiAgdGhpcy5uZXdEZXBJZHMuY2xlYXIoKTtcbiAgdG1wID0gdGhpcy5kZXBzO1xuICB0aGlzLmRlcHMgPSB0aGlzLm5ld0RlcHM7XG4gIHRoaXMubmV3RGVwcyA9IHRtcDtcbiAgdGhpcy5uZXdEZXBzLmxlbmd0aCA9IDA7XG59O1xuXG4vKipcbiAqIFN1YnNjcmliZXIgaW50ZXJmYWNlLlxuICogV2lsbCBiZSBjYWxsZWQgd2hlbiBhIGRlcGVuZGVuY3kgY2hhbmdlcy5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlICgpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKHRoaXMubGF6eSkge1xuICAgIHRoaXMuZGlydHkgPSB0cnVlO1xuICB9IGVsc2UgaWYgKHRoaXMuc3luYykge1xuICAgIHRoaXMucnVuKCk7XG4gIH0gZWxzZSB7XG4gICAgcXVldWVXYXRjaGVyKHRoaXMpO1xuICB9XG59O1xuXG4vKipcbiAqIFNjaGVkdWxlciBqb2IgaW50ZXJmYWNlLlxuICogV2lsbCBiZSBjYWxsZWQgYnkgdGhlIHNjaGVkdWxlci5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gcnVuICgpIHtcbiAgaWYgKHRoaXMuYWN0aXZlKSB7XG4gICAgdmFyIHZhbHVlID0gdGhpcy5nZXQoKTtcbiAgICBpZiAoXG4gICAgICB2YWx1ZSAhPT0gdGhpcy52YWx1ZSB8fFxuICAgICAgLy8gRGVlcCB3YXRjaGVycyBhbmQgd2F0Y2hlcnMgb24gT2JqZWN0L0FycmF5cyBzaG91bGQgZmlyZSBldmVuXG4gICAgICAvLyB3aGVuIHRoZSB2YWx1ZSBpcyB0aGUgc2FtZSwgYmVjYXVzZSB0aGUgdmFsdWUgbWF5XG4gICAgICAvLyBoYXZlIG11dGF0ZWQuXG4gICAgICBpc09iamVjdCh2YWx1ZSkgfHxcbiAgICAgIHRoaXMuZGVlcFxuICAgICkge1xuICAgICAgLy8gc2V0IG5ldyB2YWx1ZVxuICAgICAgdmFyIG9sZFZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgIGlmICh0aGlzLnVzZXIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGlzLmNiLmNhbGwodGhpcy52bSwgdmFsdWUsIG9sZFZhbHVlKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICAgICAgaWYgKGNvbmZpZy5lcnJvckhhbmRsZXIpIHtcbiAgICAgICAgICAgIGNvbmZpZy5lcnJvckhhbmRsZXIuY2FsbChudWxsLCBlLCB0aGlzLnZtKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAgICAgICAoXCJFcnJvciBpbiB3YXRjaGVyIFxcXCJcIiArICh0aGlzLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpLFxuICAgICAgICAgICAgICB0aGlzLnZtXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhyb3cgZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jYi5jYWxsKHRoaXMudm0sIHZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIEV2YWx1YXRlIHRoZSB2YWx1ZSBvZiB0aGUgd2F0Y2hlci5cbiAqIFRoaXMgb25seSBnZXRzIGNhbGxlZCBmb3IgbGF6eSB3YXRjaGVycy5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuZXZhbHVhdGUgPSBmdW5jdGlvbiBldmFsdWF0ZSAoKSB7XG4gIHRoaXMudmFsdWUgPSB0aGlzLmdldCgpO1xuICB0aGlzLmRpcnR5ID0gZmFsc2U7XG59O1xuXG4vKipcbiAqIERlcGVuZCBvbiBhbGwgZGVwcyBjb2xsZWN0ZWQgYnkgdGhpcyB3YXRjaGVyLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5kZXBlbmQgPSBmdW5jdGlvbiBkZXBlbmQgKCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHZhciBpID0gdGhpcy5kZXBzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIHRoaXMkMS5kZXBzW2ldLmRlcGVuZCgpO1xuICB9XG59O1xuXG4vKipcbiAqIFJlbW92ZSBzZWxmIGZyb20gYWxsIGRlcGVuZGVuY2llcycgc3Vic2NyaWJlciBsaXN0LlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS50ZWFyZG93biA9IGZ1bmN0aW9uIHRlYXJkb3duICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICBpZiAodGhpcy5hY3RpdmUpIHtcbiAgICAvLyByZW1vdmUgc2VsZiBmcm9tIHZtJ3Mgd2F0Y2hlciBsaXN0XG4gICAgLy8gdGhpcyBpcyBhIHNvbWV3aGF0IGV4cGVuc2l2ZSBvcGVyYXRpb24gc28gd2Ugc2tpcCBpdFxuICAgIC8vIGlmIHRoZSB2bSBpcyBiZWluZyBkZXN0cm95ZWQuXG4gICAgaWYgKCF0aGlzLnZtLl9pc0JlaW5nRGVzdHJveWVkKSB7XG4gICAgICByZW1vdmUkMSh0aGlzLnZtLl93YXRjaGVycywgdGhpcyk7XG4gICAgfVxuICAgIHZhciBpID0gdGhpcy5kZXBzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB0aGlzJDEuZGVwc1tpXS5yZW1vdmVTdWIodGhpcyQxKTtcbiAgICB9XG4gICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgfVxufTtcblxuLyoqXG4gKiBSZWN1cnNpdmVseSB0cmF2ZXJzZSBhbiBvYmplY3QgdG8gZXZva2UgYWxsIGNvbnZlcnRlZFxuICogZ2V0dGVycywgc28gdGhhdCBldmVyeSBuZXN0ZWQgcHJvcGVydHkgaW5zaWRlIHRoZSBvYmplY3RcbiAqIGlzIGNvbGxlY3RlZCBhcyBhIFwiZGVlcFwiIGRlcGVuZGVuY3kuXG4gKi9cbnZhciBzZWVuT2JqZWN0cyA9IG5ldyBfU2V0KCk7XG5mdW5jdGlvbiB0cmF2ZXJzZSAodmFsKSB7XG4gIHNlZW5PYmplY3RzLmNsZWFyKCk7XG4gIF90cmF2ZXJzZSh2YWwsIHNlZW5PYmplY3RzKTtcbn1cblxuZnVuY3Rpb24gX3RyYXZlcnNlICh2YWwsIHNlZW4pIHtcbiAgdmFyIGksIGtleXM7XG4gIHZhciBpc0EgPSBBcnJheS5pc0FycmF5KHZhbCk7XG4gIGlmICgoIWlzQSAmJiAhaXNPYmplY3QodmFsKSkgfHwgIU9iamVjdC5pc0V4dGVuc2libGUodmFsKSkge1xuICAgIHJldHVyblxuICB9XG4gIGlmICh2YWwuX19vYl9fKSB7XG4gICAgdmFyIGRlcElkID0gdmFsLl9fb2JfXy5kZXAuaWQ7XG4gICAgaWYgKHNlZW4uaGFzKGRlcElkKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHNlZW4uYWRkKGRlcElkKTtcbiAgfVxuICBpZiAoaXNBKSB7XG4gICAgaSA9IHZhbC5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkgeyBfdHJhdmVyc2UodmFsW2ldLCBzZWVuKTsgfVxuICB9IGVsc2Uge1xuICAgIGtleXMgPSBPYmplY3Qua2V5cyh2YWwpO1xuICAgIGkgPSBrZXlzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7IF90cmF2ZXJzZSh2YWxba2V5c1tpXV0sIHNlZW4pOyB9XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRTdGF0ZSAodm0pIHtcbiAgdm0uX3dhdGNoZXJzID0gW107XG4gIHZhciBvcHRzID0gdm0uJG9wdGlvbnM7XG4gIGlmIChvcHRzLnByb3BzKSB7IGluaXRQcm9wcyh2bSwgb3B0cy5wcm9wcyk7IH1cbiAgaWYgKG9wdHMubWV0aG9kcykgeyBpbml0TWV0aG9kcyh2bSwgb3B0cy5tZXRob2RzKTsgfVxuICBpZiAob3B0cy5kYXRhKSB7XG4gICAgaW5pdERhdGEodm0pO1xuICB9IGVsc2Uge1xuICAgIG9ic2VydmUodm0uX2RhdGEgPSB7fSwgdHJ1ZSAvKiBhc1Jvb3REYXRhICovKTtcbiAgfVxuICBpZiAob3B0cy5jb21wdXRlZCkgeyBpbml0Q29tcHV0ZWQodm0sIG9wdHMuY29tcHV0ZWQpOyB9XG4gIGlmIChvcHRzLndhdGNoKSB7IGluaXRXYXRjaCh2bSwgb3B0cy53YXRjaCk7IH1cbn1cblxudmFyIGlzUmVzZXJ2ZWRQcm9wID0geyBrZXk6IDEsIHJlZjogMSwgc2xvdDogMSB9O1xuXG5mdW5jdGlvbiBpbml0UHJvcHMgKHZtLCBwcm9wcykge1xuICB2YXIgcHJvcHNEYXRhID0gdm0uJG9wdGlvbnMucHJvcHNEYXRhIHx8IHt9O1xuICB2YXIga2V5cyA9IHZtLiRvcHRpb25zLl9wcm9wS2V5cyA9IE9iamVjdC5rZXlzKHByb3BzKTtcbiAgdmFyIGlzUm9vdCA9ICF2bS4kcGFyZW50O1xuICAvLyByb290IGluc3RhbmNlIHByb3BzIHNob3VsZCBiZSBjb252ZXJ0ZWRcbiAgb2JzZXJ2ZXJTdGF0ZS5zaG91bGRDb252ZXJ0ID0gaXNSb290O1xuICB2YXIgbG9vcCA9IGZ1bmN0aW9uICggaSApIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoaXNSZXNlcnZlZFByb3Bba2V5XSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIChcIlxcXCJcIiArIGtleSArIFwiXFxcIiBpcyBhIHJlc2VydmVkIGF0dHJpYnV0ZSBhbmQgY2Fubm90IGJlIHVzZWQgYXMgY29tcG9uZW50IHByb3AuXCIpLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwga2V5LCB2YWxpZGF0ZVByb3Aoa2V5LCBwcm9wcywgcHJvcHNEYXRhLCB2bSksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHZtLiRwYXJlbnQgJiYgIW9ic2VydmVyU3RhdGUuaXNTZXR0aW5nUHJvcHMpIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgXCJBdm9pZCBtdXRhdGluZyBhIHByb3AgZGlyZWN0bHkgc2luY2UgdGhlIHZhbHVlIHdpbGwgYmUgXCIgK1xuICAgICAgICAgICAgXCJvdmVyd3JpdHRlbiB3aGVuZXZlciB0aGUgcGFyZW50IGNvbXBvbmVudCByZS1yZW5kZXJzLiBcIiArXG4gICAgICAgICAgICBcIkluc3RlYWQsIHVzZSBhIGRhdGEgb3IgY29tcHV0ZWQgcHJvcGVydHkgYmFzZWQgb24gdGhlIHByb3AncyBcIiArXG4gICAgICAgICAgICBcInZhbHVlLiBQcm9wIGJlaW5nIG11dGF0ZWQ6IFxcXCJcIiArIGtleSArIFwiXFxcIlwiLFxuICAgICAgICAgICAgdm1cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sIGtleSwgdmFsaWRhdGVQcm9wKGtleSwgcHJvcHMsIHByb3BzRGF0YSwgdm0pKTtcbiAgICB9XG4gIH07XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSBsb29wKCBpICk7XG4gIG9ic2VydmVyU3RhdGUuc2hvdWxkQ29udmVydCA9IHRydWU7XG59XG5cbmZ1bmN0aW9uIGluaXREYXRhICh2bSkge1xuICB2YXIgZGF0YSA9IHZtLiRvcHRpb25zLmRhdGE7XG4gIGRhdGEgPSB2bS5fZGF0YSA9IHR5cGVvZiBkYXRhID09PSAnZnVuY3Rpb24nXG4gICAgPyBkYXRhLmNhbGwodm0pXG4gICAgOiBkYXRhIHx8IHt9O1xuICBpZiAoIWlzUGxhaW5PYmplY3QoZGF0YSkpIHtcbiAgICBkYXRhID0ge307XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgJ2RhdGEgZnVuY3Rpb25zIHNob3VsZCByZXR1cm4gYW4gb2JqZWN0OlxcbicgK1xuICAgICAgJ2h0dHBzOi8vdnVlanMub3JnL3YyL2d1aWRlL2NvbXBvbmVudHMuaHRtbCNkYXRhLU11c3QtQmUtYS1GdW5jdGlvbicsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbiAgLy8gcHJveHkgZGF0YSBvbiBpbnN0YW5jZVxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGRhdGEpO1xuICB2YXIgcHJvcHMgPSB2bS4kb3B0aW9ucy5wcm9wcztcbiAgdmFyIGkgPSBrZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIGlmIChwcm9wcyAmJiBoYXNPd24ocHJvcHMsIGtleXNbaV0pKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgIFwiVGhlIGRhdGEgcHJvcGVydHkgXFxcIlwiICsgKGtleXNbaV0pICsgXCJcXFwiIGlzIGFscmVhZHkgZGVjbGFyZWQgYXMgYSBwcm9wLiBcIiArXG4gICAgICAgIFwiVXNlIHByb3AgZGVmYXVsdCB2YWx1ZSBpbnN0ZWFkLlwiLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJveHkodm0sIGtleXNbaV0pO1xuICAgIH1cbiAgfVxuICAvLyBvYnNlcnZlIGRhdGFcbiAgb2JzZXJ2ZShkYXRhLCB0cnVlIC8qIGFzUm9vdERhdGEgKi8pO1xufVxuXG52YXIgY29tcHV0ZWRTaGFyZWREZWZpbml0aW9uID0ge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogbm9vcCxcbiAgc2V0OiBub29wXG59O1xuXG5mdW5jdGlvbiBpbml0Q29tcHV0ZWQgKHZtLCBjb21wdXRlZCkge1xuICBmb3IgKHZhciBrZXkgaW4gY29tcHV0ZWQpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBrZXkgaW4gdm0pIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIFwiZXhpc3RpbmcgaW5zdGFuY2UgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIHdpbGwgYmUgXCIgK1xuICAgICAgICBcIm92ZXJ3cml0dGVuIGJ5IGEgY29tcHV0ZWQgcHJvcGVydHkgd2l0aCB0aGUgc2FtZSBuYW1lLlwiLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG4gICAgdmFyIHVzZXJEZWYgPSBjb21wdXRlZFtrZXldO1xuICAgIGlmICh0eXBlb2YgdXNlckRlZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY29tcHV0ZWRTaGFyZWREZWZpbml0aW9uLmdldCA9IG1ha2VDb21wdXRlZEdldHRlcih1c2VyRGVmLCB2bSk7XG4gICAgICBjb21wdXRlZFNoYXJlZERlZmluaXRpb24uc2V0ID0gbm9vcDtcbiAgICB9IGVsc2Uge1xuICAgICAgY29tcHV0ZWRTaGFyZWREZWZpbml0aW9uLmdldCA9IHVzZXJEZWYuZ2V0XG4gICAgICAgID8gdXNlckRlZi5jYWNoZSAhPT0gZmFsc2VcbiAgICAgICAgICA/IG1ha2VDb21wdXRlZEdldHRlcih1c2VyRGVmLmdldCwgdm0pXG4gICAgICAgICAgOiBiaW5kJDEodXNlckRlZi5nZXQsIHZtKVxuICAgICAgICA6IG5vb3A7XG4gICAgICBjb21wdXRlZFNoYXJlZERlZmluaXRpb24uc2V0ID0gdXNlckRlZi5zZXRcbiAgICAgICAgPyBiaW5kJDEodXNlckRlZi5zZXQsIHZtKVxuICAgICAgICA6IG5vb3A7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh2bSwga2V5LCBjb21wdXRlZFNoYXJlZERlZmluaXRpb24pO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1ha2VDb21wdXRlZEdldHRlciAoZ2V0dGVyLCBvd25lcikge1xuICB2YXIgd2F0Y2hlciA9IG5ldyBXYXRjaGVyKG93bmVyLCBnZXR0ZXIsIG5vb3AsIHtcbiAgICBsYXp5OiB0cnVlXG4gIH0pO1xuICByZXR1cm4gZnVuY3Rpb24gY29tcHV0ZWRHZXR0ZXIgKCkge1xuICAgIGlmICh3YXRjaGVyLmRpcnR5KSB7XG4gICAgICB3YXRjaGVyLmV2YWx1YXRlKCk7XG4gICAgfVxuICAgIGlmIChEZXAudGFyZ2V0KSB7XG4gICAgICB3YXRjaGVyLmRlcGVuZCgpO1xuICAgIH1cbiAgICByZXR1cm4gd2F0Y2hlci52YWx1ZVxuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRNZXRob2RzICh2bSwgbWV0aG9kcykge1xuICBmb3IgKHZhciBrZXkgaW4gbWV0aG9kcykge1xuICAgIHZtW2tleV0gPSBtZXRob2RzW2tleV0gPT0gbnVsbCA/IG5vb3AgOiBiaW5kJDEobWV0aG9kc1trZXldLCB2bSk7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgbWV0aG9kc1trZXldID09IG51bGwpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIFwibWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBoYXMgYW4gdW5kZWZpbmVkIHZhbHVlIGluIHRoZSBjb21wb25lbnQgZGVmaW5pdGlvbi4gXCIgK1xuICAgICAgICBcIkRpZCB5b3UgcmVmZXJlbmNlIHRoZSBmdW5jdGlvbiBjb3JyZWN0bHk/XCIsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0V2F0Y2ggKHZtLCB3YXRjaCkge1xuICBmb3IgKHZhciBrZXkgaW4gd2F0Y2gpIHtcbiAgICB2YXIgaGFuZGxlciA9IHdhdGNoW2tleV07XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoaGFuZGxlcikpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaGFuZGxlci5sZW5ndGg7IGkrKykge1xuICAgICAgICBjcmVhdGVXYXRjaGVyKHZtLCBrZXksIGhhbmRsZXJbaV0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjcmVhdGVXYXRjaGVyKHZtLCBrZXksIGhhbmRsZXIpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVXYXRjaGVyICh2bSwga2V5LCBoYW5kbGVyKSB7XG4gIHZhciBvcHRpb25zO1xuICBpZiAoaXNQbGFpbk9iamVjdChoYW5kbGVyKSkge1xuICAgIG9wdGlvbnMgPSBoYW5kbGVyO1xuICAgIGhhbmRsZXIgPSBoYW5kbGVyLmhhbmRsZXI7XG4gIH1cbiAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAnc3RyaW5nJykge1xuICAgIGhhbmRsZXIgPSB2bVtoYW5kbGVyXTtcbiAgfVxuICB2bS4kd2F0Y2goa2V5LCBoYW5kbGVyLCBvcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gc3RhdGVNaXhpbiAoVnVlKSB7XG4gIC8vIGZsb3cgc29tZWhvdyBoYXMgcHJvYmxlbXMgd2l0aCBkaXJlY3RseSBkZWNsYXJlZCBkZWZpbml0aW9uIG9iamVjdFxuICAvLyB3aGVuIHVzaW5nIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSwgc28gd2UgaGF2ZSB0byBwcm9jZWR1cmFsbHkgYnVpbGQgdXBcbiAgLy8gdGhlIG9iamVjdCBoZXJlLlxuICB2YXIgZGF0YURlZiA9IHt9O1xuICBkYXRhRGVmLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fZGF0YVxuICB9O1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGRhdGFEZWYuc2V0ID0gZnVuY3Rpb24gKG5ld0RhdGEpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdBdm9pZCByZXBsYWNpbmcgaW5zdGFuY2Ugcm9vdCAkZGF0YS4gJyArXG4gICAgICAgICdVc2UgbmVzdGVkIGRhdGEgcHJvcGVydGllcyBpbnN0ZWFkLicsXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRkYXRhJywgZGF0YURlZik7XG5cbiAgVnVlLnByb3RvdHlwZS4kc2V0ID0gc2V0JDE7XG4gIFZ1ZS5wcm90b3R5cGUuJGRlbGV0ZSA9IGRlbDtcblxuICBWdWUucHJvdG90eXBlLiR3YXRjaCA9IGZ1bmN0aW9uIChcbiAgICBleHBPckZuLFxuICAgIGNiLFxuICAgIG9wdGlvbnNcbiAgKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICBvcHRpb25zLnVzZXIgPSB0cnVlO1xuICAgIHZhciB3YXRjaGVyID0gbmV3IFdhdGNoZXIodm0sIGV4cE9yRm4sIGNiLCBvcHRpb25zKTtcbiAgICBpZiAob3B0aW9ucy5pbW1lZGlhdGUpIHtcbiAgICAgIGNiLmNhbGwodm0sIHdhdGNoZXIudmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gdW53YXRjaEZuICgpIHtcbiAgICAgIHdhdGNoZXIudGVhcmRvd24oKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHByb3h5ICh2bSwga2V5KSB7XG4gIGlmICghaXNSZXNlcnZlZChrZXkpKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHZtLCBrZXksIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIHByb3h5R2V0dGVyICgpIHtcbiAgICAgICAgcmV0dXJuIHZtLl9kYXRhW2tleV1cbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uIHByb3h5U2V0dGVyICh2YWwpIHtcbiAgICAgICAgdm0uX2RhdGFba2V5XSA9IHZhbDtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIHVpZCA9IDA7XG5cbmZ1bmN0aW9uIGluaXRNaXhpbiAoVnVlKSB7XG4gIFZ1ZS5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgLy8gYSB1aWRcbiAgICB2bS5fdWlkID0gdWlkKys7XG4gICAgLy8gYSBmbGFnIHRvIGF2b2lkIHRoaXMgYmVpbmcgb2JzZXJ2ZWRcbiAgICB2bS5faXNWdWUgPSB0cnVlO1xuICAgIC8vIG1lcmdlIG9wdGlvbnNcbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLl9pc0NvbXBvbmVudCkge1xuICAgICAgLy8gb3B0aW1pemUgaW50ZXJuYWwgY29tcG9uZW50IGluc3RhbnRpYXRpb25cbiAgICAgIC8vIHNpbmNlIGR5bmFtaWMgb3B0aW9ucyBtZXJnaW5nIGlzIHByZXR0eSBzbG93LCBhbmQgbm9uZSBvZiB0aGVcbiAgICAgIC8vIGludGVybmFsIGNvbXBvbmVudCBvcHRpb25zIG5lZWRzIHNwZWNpYWwgdHJlYXRtZW50LlxuICAgICAgaW5pdEludGVybmFsQ29tcG9uZW50KHZtLCBvcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdm0uJG9wdGlvbnMgPSBtZXJnZU9wdGlvbnMoXG4gICAgICAgIHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnModm0uY29uc3RydWN0b3IpLFxuICAgICAgICBvcHRpb25zIHx8IHt9LFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaW5pdFByb3h5KHZtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdm0uX3JlbmRlclByb3h5ID0gdm07XG4gICAgfVxuICAgIC8vIGV4cG9zZSByZWFsIHNlbGZcbiAgICB2bS5fc2VsZiA9IHZtO1xuICAgIGluaXRMaWZlY3ljbGUodm0pO1xuICAgIGluaXRFdmVudHModm0pO1xuICAgIGluaXRSZW5kZXIodm0pO1xuICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlQ3JlYXRlJyk7XG4gICAgaW5pdFN0YXRlKHZtKTtcbiAgICBjYWxsSG9vayh2bSwgJ2NyZWF0ZWQnKTtcbiAgICBpZiAodm0uJG9wdGlvbnMuZWwpIHtcbiAgICAgIHZtLiRtb3VudCh2bS4kb3B0aW9ucy5lbCk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBpbml0SW50ZXJuYWxDb21wb25lbnQgKHZtLCBvcHRpb25zKSB7XG4gIHZhciBvcHRzID0gdm0uJG9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKHZtLmNvbnN0cnVjdG9yLm9wdGlvbnMpO1xuICAvLyBkb2luZyB0aGlzIGJlY2F1c2UgaXQncyBmYXN0ZXIgdGhhbiBkeW5hbWljIGVudW1lcmF0aW9uLlxuICBvcHRzLnBhcmVudCA9IG9wdGlvbnMucGFyZW50O1xuICBvcHRzLnByb3BzRGF0YSA9IG9wdGlvbnMucHJvcHNEYXRhO1xuICBvcHRzLl9wYXJlbnRWbm9kZSA9IG9wdGlvbnMuX3BhcmVudFZub2RlO1xuICBvcHRzLl9wYXJlbnRMaXN0ZW5lcnMgPSBvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM7XG4gIG9wdHMuX3JlbmRlckNoaWxkcmVuID0gb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW47XG4gIG9wdHMuX2NvbXBvbmVudFRhZyA9IG9wdGlvbnMuX2NvbXBvbmVudFRhZztcbiAgb3B0cy5fcGFyZW50RWxtID0gb3B0aW9ucy5fcGFyZW50RWxtO1xuICBvcHRzLl9yZWZFbG0gPSBvcHRpb25zLl9yZWZFbG07XG4gIGlmIChvcHRpb25zLnJlbmRlcikge1xuICAgIG9wdHMucmVuZGVyID0gb3B0aW9ucy5yZW5kZXI7XG4gICAgb3B0cy5zdGF0aWNSZW5kZXJGbnMgPSBvcHRpb25zLnN0YXRpY1JlbmRlckZucztcbiAgfVxufVxuXG5mdW5jdGlvbiByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zIChDdG9yKSB7XG4gIHZhciBvcHRpb25zID0gQ3Rvci5vcHRpb25zO1xuICBpZiAoQ3Rvci5zdXBlcikge1xuICAgIHZhciBzdXBlck9wdGlvbnMgPSBDdG9yLnN1cGVyLm9wdGlvbnM7XG4gICAgdmFyIGNhY2hlZFN1cGVyT3B0aW9ucyA9IEN0b3Iuc3VwZXJPcHRpb25zO1xuICAgIHZhciBleHRlbmRPcHRpb25zID0gQ3Rvci5leHRlbmRPcHRpb25zO1xuICAgIGlmIChzdXBlck9wdGlvbnMgIT09IGNhY2hlZFN1cGVyT3B0aW9ucykge1xuICAgICAgLy8gc3VwZXIgb3B0aW9uIGNoYW5nZWRcbiAgICAgIEN0b3Iuc3VwZXJPcHRpb25zID0gc3VwZXJPcHRpb25zO1xuICAgICAgZXh0ZW5kT3B0aW9ucy5yZW5kZXIgPSBvcHRpb25zLnJlbmRlcjtcbiAgICAgIGV4dGVuZE9wdGlvbnMuc3RhdGljUmVuZGVyRm5zID0gb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnM7XG4gICAgICBleHRlbmRPcHRpb25zLl9zY29wZUlkID0gb3B0aW9ucy5fc2NvcGVJZDtcbiAgICAgIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnMgPSBtZXJnZU9wdGlvbnMoc3VwZXJPcHRpb25zLCBleHRlbmRPcHRpb25zKTtcbiAgICAgIGlmIChvcHRpb25zLm5hbWUpIHtcbiAgICAgICAgb3B0aW9ucy5jb21wb25lbnRzW29wdGlvbnMubmFtZV0gPSBDdG9yO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gb3B0aW9uc1xufVxuXG5mdW5jdGlvbiBWdWUkMyAob3B0aW9ucykge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICEodGhpcyBpbnN0YW5jZW9mIFZ1ZSQzKSkge1xuICAgIHdhcm4oJ1Z1ZSBpcyBhIGNvbnN0cnVjdG9yIGFuZCBzaG91bGQgYmUgY2FsbGVkIHdpdGggdGhlIGBuZXdgIGtleXdvcmQnKTtcbiAgfVxuICB0aGlzLl9pbml0KG9wdGlvbnMpO1xufVxuXG5pbml0TWl4aW4oVnVlJDMpO1xuc3RhdGVNaXhpbihWdWUkMyk7XG5ldmVudHNNaXhpbihWdWUkMyk7XG5saWZlY3ljbGVNaXhpbihWdWUkMyk7XG5yZW5kZXJNaXhpbihWdWUkMyk7XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0VXNlIChWdWUpIHtcbiAgVnVlLnVzZSA9IGZ1bmN0aW9uIChwbHVnaW4pIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAocGx1Z2luLmluc3RhbGxlZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIC8vIGFkZGl0aW9uYWwgcGFyYW1ldGVyc1xuICAgIHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMsIDEpO1xuICAgIGFyZ3MudW5zaGlmdCh0aGlzKTtcbiAgICBpZiAodHlwZW9mIHBsdWdpbi5pbnN0YWxsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBwbHVnaW4uaW5zdGFsbC5hcHBseShwbHVnaW4sIGFyZ3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwbHVnaW4uYXBwbHkobnVsbCwgYXJncyk7XG4gICAgfVxuICAgIHBsdWdpbi5pbnN0YWxsZWQgPSB0cnVlO1xuICAgIHJldHVybiB0aGlzXG4gIH07XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0TWl4aW4kMSAoVnVlKSB7XG4gIFZ1ZS5taXhpbiA9IGZ1bmN0aW9uIChtaXhpbikge1xuICAgIHRoaXMub3B0aW9ucyA9IG1lcmdlT3B0aW9ucyh0aGlzLm9wdGlvbnMsIG1peGluKTtcbiAgfTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRFeHRlbmQgKFZ1ZSkge1xuICAvKipcbiAgICogRWFjaCBpbnN0YW5jZSBjb25zdHJ1Y3RvciwgaW5jbHVkaW5nIFZ1ZSwgaGFzIGEgdW5pcXVlXG4gICAqIGNpZC4gVGhpcyBlbmFibGVzIHVzIHRvIGNyZWF0ZSB3cmFwcGVkIFwiY2hpbGRcbiAgICogY29uc3RydWN0b3JzXCIgZm9yIHByb3RvdHlwYWwgaW5oZXJpdGFuY2UgYW5kIGNhY2hlIHRoZW0uXG4gICAqL1xuICBWdWUuY2lkID0gMDtcbiAgdmFyIGNpZCA9IDE7XG5cbiAgLyoqXG4gICAqIENsYXNzIGluaGVyaXRhbmNlXG4gICAqL1xuICBWdWUuZXh0ZW5kID0gZnVuY3Rpb24gKGV4dGVuZE9wdGlvbnMpIHtcbiAgICBleHRlbmRPcHRpb25zID0gZXh0ZW5kT3B0aW9ucyB8fCB7fTtcbiAgICB2YXIgU3VwZXIgPSB0aGlzO1xuICAgIHZhciBTdXBlcklkID0gU3VwZXIuY2lkO1xuICAgIHZhciBjYWNoZWRDdG9ycyA9IGV4dGVuZE9wdGlvbnMuX0N0b3IgfHwgKGV4dGVuZE9wdGlvbnMuX0N0b3IgPSB7fSk7XG4gICAgaWYgKGNhY2hlZEN0b3JzW1N1cGVySWRdKSB7XG4gICAgICByZXR1cm4gY2FjaGVkQ3RvcnNbU3VwZXJJZF1cbiAgICB9XG4gICAgdmFyIG5hbWUgPSBleHRlbmRPcHRpb25zLm5hbWUgfHwgU3VwZXIub3B0aW9ucy5uYW1lO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoIS9eW2EtekEtWl1bXFx3LV0qJC8udGVzdChuYW1lKSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICdJbnZhbGlkIGNvbXBvbmVudCBuYW1lOiBcIicgKyBuYW1lICsgJ1wiLiBDb21wb25lbnQgbmFtZXMgJyArXG4gICAgICAgICAgJ2NhbiBvbmx5IGNvbnRhaW4gYWxwaGFudW1lcmljIGNoYXJhY3RlcnMgYW5kIHRoZSBoeXBoZW4sICcgK1xuICAgICAgICAgICdhbmQgbXVzdCBzdGFydCB3aXRoIGEgbGV0dGVyLidcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIFN1YiA9IGZ1bmN0aW9uIFZ1ZUNvbXBvbmVudCAob3B0aW9ucykge1xuICAgICAgdGhpcy5faW5pdChvcHRpb25zKTtcbiAgICB9O1xuICAgIFN1Yi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFN1cGVyLnByb3RvdHlwZSk7XG4gICAgU3ViLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFN1YjtcbiAgICBTdWIuY2lkID0gY2lkKys7XG4gICAgU3ViLm9wdGlvbnMgPSBtZXJnZU9wdGlvbnMoXG4gICAgICBTdXBlci5vcHRpb25zLFxuICAgICAgZXh0ZW5kT3B0aW9uc1xuICAgICk7XG4gICAgU3ViWydzdXBlciddID0gU3VwZXI7XG4gICAgLy8gYWxsb3cgZnVydGhlciBleHRlbnNpb24vbWl4aW4vcGx1Z2luIHVzYWdlXG4gICAgU3ViLmV4dGVuZCA9IFN1cGVyLmV4dGVuZDtcbiAgICBTdWIubWl4aW4gPSBTdXBlci5taXhpbjtcbiAgICBTdWIudXNlID0gU3VwZXIudXNlO1xuICAgIC8vIGNyZWF0ZSBhc3NldCByZWdpc3RlcnMsIHNvIGV4dGVuZGVkIGNsYXNzZXNcbiAgICAvLyBjYW4gaGF2ZSB0aGVpciBwcml2YXRlIGFzc2V0cyB0b28uXG4gICAgY29uZmlnLl9hc3NldFR5cGVzLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgIFN1Ylt0eXBlXSA9IFN1cGVyW3R5cGVdO1xuICAgIH0pO1xuICAgIC8vIGVuYWJsZSByZWN1cnNpdmUgc2VsZi1sb29rdXBcbiAgICBpZiAobmFtZSkge1xuICAgICAgU3ViLm9wdGlvbnMuY29tcG9uZW50c1tuYW1lXSA9IFN1YjtcbiAgICB9XG4gICAgLy8ga2VlcCBhIHJlZmVyZW5jZSB0byB0aGUgc3VwZXIgb3B0aW9ucyBhdCBleHRlbnNpb24gdGltZS5cbiAgICAvLyBsYXRlciBhdCBpbnN0YW50aWF0aW9uIHdlIGNhbiBjaGVjayBpZiBTdXBlcidzIG9wdGlvbnMgaGF2ZVxuICAgIC8vIGJlZW4gdXBkYXRlZC5cbiAgICBTdWIuc3VwZXJPcHRpb25zID0gU3VwZXIub3B0aW9ucztcbiAgICBTdWIuZXh0ZW5kT3B0aW9ucyA9IGV4dGVuZE9wdGlvbnM7XG4gICAgLy8gY2FjaGUgY29uc3RydWN0b3JcbiAgICBjYWNoZWRDdG9yc1tTdXBlcklkXSA9IFN1YjtcbiAgICByZXR1cm4gU3ViXG4gIH07XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0QXNzZXRSZWdpc3RlcnMgKFZ1ZSkge1xuICAvKipcbiAgICogQ3JlYXRlIGFzc2V0IHJlZ2lzdHJhdGlvbiBtZXRob2RzLlxuICAgKi9cbiAgY29uZmlnLl9hc3NldFR5cGVzLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICBWdWVbdHlwZV0gPSBmdW5jdGlvbiAoXG4gICAgICBpZCxcbiAgICAgIGRlZmluaXRpb25cbiAgICApIHtcbiAgICAgIGlmICghZGVmaW5pdGlvbikge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zW3R5cGUgKyAncyddW2lkXVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgaWYgKHR5cGUgPT09ICdjb21wb25lbnQnICYmIGNvbmZpZy5pc1Jlc2VydmVkVGFnKGlkKSkge1xuICAgICAgICAgICAgd2FybihcbiAgICAgICAgICAgICAgJ0RvIG5vdCB1c2UgYnVpbHQtaW4gb3IgcmVzZXJ2ZWQgSFRNTCBlbGVtZW50cyBhcyBjb21wb25lbnQgJyArXG4gICAgICAgICAgICAgICdpZDogJyArIGlkXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZSA9PT0gJ2NvbXBvbmVudCcgJiYgaXNQbGFpbk9iamVjdChkZWZpbml0aW9uKSkge1xuICAgICAgICAgIGRlZmluaXRpb24ubmFtZSA9IGRlZmluaXRpb24ubmFtZSB8fCBpZDtcbiAgICAgICAgICBkZWZpbml0aW9uID0gdGhpcy5vcHRpb25zLl9iYXNlLmV4dGVuZChkZWZpbml0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZSA9PT0gJ2RpcmVjdGl2ZScgJiYgdHlwZW9mIGRlZmluaXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBkZWZpbml0aW9uID0geyBiaW5kOiBkZWZpbml0aW9uLCB1cGRhdGU6IGRlZmluaXRpb24gfTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9wdGlvbnNbdHlwZSArICdzJ11baWRdID0gZGVmaW5pdGlvbjtcbiAgICAgICAgcmV0dXJuIGRlZmluaXRpb25cbiAgICAgIH1cbiAgICB9O1xuICB9KTtcbn1cblxuLyogICovXG5cbnZhciBwYXR0ZXJuVHlwZXMgPSBbU3RyaW5nLCBSZWdFeHBdO1xuXG5mdW5jdGlvbiBnZXRDb21wb25lbnROYW1lIChvcHRzKSB7XG4gIHJldHVybiBvcHRzICYmIChvcHRzLkN0b3Iub3B0aW9ucy5uYW1lIHx8IG9wdHMudGFnKVxufVxuXG5mdW5jdGlvbiBtYXRjaGVzIChwYXR0ZXJuLCBuYW1lKSB7XG4gIGlmICh0eXBlb2YgcGF0dGVybiA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gcGF0dGVybi5zcGxpdCgnLCcpLmluZGV4T2YobmFtZSkgPiAtMVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBwYXR0ZXJuLnRlc3QobmFtZSlcbiAgfVxufVxuXG5mdW5jdGlvbiBwcnVuZUNhY2hlIChjYWNoZSwgZmlsdGVyKSB7XG4gIGZvciAodmFyIGtleSBpbiBjYWNoZSkge1xuICAgIHZhciBjYWNoZWROb2RlID0gY2FjaGVba2V5XTtcbiAgICBpZiAoY2FjaGVkTm9kZSkge1xuICAgICAgdmFyIG5hbWUgPSBnZXRDb21wb25lbnROYW1lKGNhY2hlZE5vZGUuY29tcG9uZW50T3B0aW9ucyk7XG4gICAgICBpZiAobmFtZSAmJiAhZmlsdGVyKG5hbWUpKSB7XG4gICAgICAgIHBydW5lQ2FjaGVFbnRyeShjYWNoZWROb2RlKTtcbiAgICAgICAgY2FjaGVba2V5XSA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHBydW5lQ2FjaGVFbnRyeSAodm5vZGUpIHtcbiAgaWYgKHZub2RlKSB7XG4gICAgaWYgKCF2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5faW5hY3RpdmUpIHtcbiAgICAgIGNhbGxIb29rKHZub2RlLmNvbXBvbmVudEluc3RhbmNlLCAnZGVhY3RpdmF0ZWQnKTtcbiAgICB9XG4gICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuJGRlc3Ryb3koKTtcbiAgfVxufVxuXG52YXIgS2VlcEFsaXZlID0ge1xuICBuYW1lOiAna2VlcC1hbGl2ZScsXG4gIGFic3RyYWN0OiB0cnVlLFxuXG4gIHByb3BzOiB7XG4gICAgaW5jbHVkZTogcGF0dGVyblR5cGVzLFxuICAgIGV4Y2x1ZGU6IHBhdHRlcm5UeXBlc1xuICB9LFxuXG4gIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQgKCkge1xuICAgIHRoaXMuY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB9LFxuXG4gIGRlc3Ryb3llZDogZnVuY3Rpb24gZGVzdHJveWVkICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIGZvciAodmFyIGtleSBpbiB0aGlzLmNhY2hlKSB7XG4gICAgICBwcnVuZUNhY2hlRW50cnkodGhpcyQxLmNhY2hlW2tleV0pO1xuICAgIH1cbiAgfSxcblxuICB3YXRjaDoge1xuICAgIGluY2x1ZGU6IGZ1bmN0aW9uIGluY2x1ZGUgKHZhbCkge1xuICAgICAgcHJ1bmVDYWNoZSh0aGlzLmNhY2hlLCBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gbWF0Y2hlcyh2YWwsIG5hbWUpOyB9KTtcbiAgICB9LFxuICAgIGV4Y2x1ZGU6IGZ1bmN0aW9uIGV4Y2x1ZGUgKHZhbCkge1xuICAgICAgcHJ1bmVDYWNoZSh0aGlzLmNhY2hlLCBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gIW1hdGNoZXModmFsLCBuYW1lKTsgfSk7XG4gICAgfVxuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyICgpIHtcbiAgICB2YXIgdm5vZGUgPSBnZXRGaXJzdENvbXBvbmVudENoaWxkKHRoaXMuJHNsb3RzLmRlZmF1bHQpO1xuICAgIHZhciBjb21wb25lbnRPcHRpb25zID0gdm5vZGUgJiYgdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgICBpZiAoY29tcG9uZW50T3B0aW9ucykge1xuICAgICAgLy8gY2hlY2sgcGF0dGVyblxuICAgICAgdmFyIG5hbWUgPSBnZXRDb21wb25lbnROYW1lKGNvbXBvbmVudE9wdGlvbnMpO1xuICAgICAgaWYgKG5hbWUgJiYgKFxuICAgICAgICAodGhpcy5pbmNsdWRlICYmICFtYXRjaGVzKHRoaXMuaW5jbHVkZSwgbmFtZSkpIHx8XG4gICAgICAgICh0aGlzLmV4Y2x1ZGUgJiYgbWF0Y2hlcyh0aGlzLmV4Y2x1ZGUsIG5hbWUpKVxuICAgICAgKSkge1xuICAgICAgICByZXR1cm4gdm5vZGVcbiAgICAgIH1cbiAgICAgIHZhciBrZXkgPSB2bm9kZS5rZXkgPT0gbnVsbFxuICAgICAgICAvLyBzYW1lIGNvbnN0cnVjdG9yIG1heSBnZXQgcmVnaXN0ZXJlZCBhcyBkaWZmZXJlbnQgbG9jYWwgY29tcG9uZW50c1xuICAgICAgICAvLyBzbyBjaWQgYWxvbmUgaXMgbm90IGVub3VnaCAoIzMyNjkpXG4gICAgICAgID8gY29tcG9uZW50T3B0aW9ucy5DdG9yLmNpZCArIChjb21wb25lbnRPcHRpb25zLnRhZyA/IChcIjo6XCIgKyAoY29tcG9uZW50T3B0aW9ucy50YWcpKSA6ICcnKVxuICAgICAgICA6IHZub2RlLmtleTtcbiAgICAgIGlmICh0aGlzLmNhY2hlW2tleV0pIHtcbiAgICAgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSB0aGlzLmNhY2hlW2tleV0uY29tcG9uZW50SW5zdGFuY2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNhY2hlW2tleV0gPSB2bm9kZTtcbiAgICAgIH1cbiAgICAgIHZub2RlLmRhdGEua2VlcEFsaXZlID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHZub2RlXG4gIH1cbn07XG5cbnZhciBidWlsdEluQ29tcG9uZW50cyA9IHtcbiAgS2VlcEFsaXZlOiBLZWVwQWxpdmVcbn07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0R2xvYmFsQVBJIChWdWUpIHtcbiAgLy8gY29uZmlnXG4gIHZhciBjb25maWdEZWYgPSB7fTtcbiAgY29uZmlnRGVmLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbmZpZzsgfTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBjb25maWdEZWYuc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgd2FybihcbiAgICAgICAgJ0RvIG5vdCByZXBsYWNlIHRoZSBWdWUuY29uZmlnIG9iamVjdCwgc2V0IGluZGl2aWR1YWwgZmllbGRzIGluc3RlYWQuJ1xuICAgICAgKTtcbiAgICB9O1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUsICdjb25maWcnLCBjb25maWdEZWYpO1xuICBWdWUudXRpbCA9IHV0aWw7XG4gIFZ1ZS5zZXQgPSBzZXQkMTtcbiAgVnVlLmRlbGV0ZSA9IGRlbDtcbiAgVnVlLm5leHRUaWNrID0gbmV4dFRpY2s7XG5cbiAgVnVlLm9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBjb25maWcuX2Fzc2V0VHlwZXMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgIFZ1ZS5vcHRpb25zW3R5cGUgKyAncyddID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgfSk7XG5cbiAgLy8gdGhpcyBpcyB1c2VkIHRvIGlkZW50aWZ5IHRoZSBcImJhc2VcIiBjb25zdHJ1Y3RvciB0byBleHRlbmQgYWxsIHBsYWluLW9iamVjdFxuICAvLyBjb21wb25lbnRzIHdpdGggaW4gV2VleCdzIG11bHRpLWluc3RhbmNlIHNjZW5hcmlvcy5cbiAgVnVlLm9wdGlvbnMuX2Jhc2UgPSBWdWU7XG5cbiAgZXh0ZW5kKFZ1ZS5vcHRpb25zLmNvbXBvbmVudHMsIGJ1aWx0SW5Db21wb25lbnRzKTtcblxuICBpbml0VXNlKFZ1ZSk7XG4gIGluaXRNaXhpbiQxKFZ1ZSk7XG4gIGluaXRFeHRlbmQoVnVlKTtcbiAgaW5pdEFzc2V0UmVnaXN0ZXJzKFZ1ZSk7XG59XG5cbmluaXRHbG9iYWxBUEkoVnVlJDMpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlJDMucHJvdG90eXBlLCAnJGlzU2VydmVyJywge1xuICBnZXQ6IGlzU2VydmVyUmVuZGVyaW5nXG59KTtcblxuVnVlJDMudmVyc2lvbiA9ICcyLjEuMTAnO1xuXG4vKiAgKi9cblxuLy8gYXR0cmlidXRlcyB0aGF0IHNob3VsZCBiZSB1c2luZyBwcm9wcyBmb3IgYmluZGluZ1xudmFyIGFjY2VwdFZhbHVlID0gbWFrZU1hcCgnaW5wdXQsdGV4dGFyZWEsb3B0aW9uLHNlbGVjdCcpO1xudmFyIG11c3RVc2VQcm9wID0gZnVuY3Rpb24gKHRhZywgdHlwZSwgYXR0cikge1xuICByZXR1cm4gKFxuICAgIChhdHRyID09PSAndmFsdWUnICYmIGFjY2VwdFZhbHVlKHRhZykpICYmIHR5cGUgIT09ICdidXR0b24nIHx8XG4gICAgKGF0dHIgPT09ICdzZWxlY3RlZCcgJiYgdGFnID09PSAnb3B0aW9uJykgfHxcbiAgICAoYXR0ciA9PT0gJ2NoZWNrZWQnICYmIHRhZyA9PT0gJ2lucHV0JykgfHxcbiAgICAoYXR0ciA9PT0gJ211dGVkJyAmJiB0YWcgPT09ICd2aWRlbycpXG4gIClcbn07XG5cbnZhciBpc0VudW1lcmF0ZWRBdHRyID0gbWFrZU1hcCgnY29udGVudGVkaXRhYmxlLGRyYWdnYWJsZSxzcGVsbGNoZWNrJyk7XG5cbnZhciBpc0Jvb2xlYW5BdHRyID0gbWFrZU1hcChcbiAgJ2FsbG93ZnVsbHNjcmVlbixhc3luYyxhdXRvZm9jdXMsYXV0b3BsYXksY2hlY2tlZCxjb21wYWN0LGNvbnRyb2xzLGRlY2xhcmUsJyArXG4gICdkZWZhdWx0LGRlZmF1bHRjaGVja2VkLGRlZmF1bHRtdXRlZCxkZWZhdWx0c2VsZWN0ZWQsZGVmZXIsZGlzYWJsZWQsJyArXG4gICdlbmFibGVkLGZvcm1ub3ZhbGlkYXRlLGhpZGRlbixpbmRldGVybWluYXRlLGluZXJ0LGlzbWFwLGl0ZW1zY29wZSxsb29wLG11bHRpcGxlLCcgK1xuICAnbXV0ZWQsbm9ocmVmLG5vcmVzaXplLG5vc2hhZGUsbm92YWxpZGF0ZSxub3dyYXAsb3BlbixwYXVzZW9uZXhpdCxyZWFkb25seSwnICtcbiAgJ3JlcXVpcmVkLHJldmVyc2VkLHNjb3BlZCxzZWFtbGVzcyxzZWxlY3RlZCxzb3J0YWJsZSx0cmFuc2xhdGUsJyArXG4gICd0cnVlc3BlZWQsdHlwZW11c3RtYXRjaCx2aXNpYmxlJ1xuKTtcblxudmFyIHhsaW5rTlMgPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayc7XG5cbnZhciBpc1hsaW5rID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIG5hbWUuY2hhckF0KDUpID09PSAnOicgJiYgbmFtZS5zbGljZSgwLCA1KSA9PT0gJ3hsaW5rJ1xufTtcblxudmFyIGdldFhsaW5rUHJvcCA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBpc1hsaW5rKG5hbWUpID8gbmFtZS5zbGljZSg2LCBuYW1lLmxlbmd0aCkgOiAnJ1xufTtcblxudmFyIGlzRmFsc3lBdHRyVmFsdWUgPSBmdW5jdGlvbiAodmFsKSB7XG4gIHJldHVybiB2YWwgPT0gbnVsbCB8fCB2YWwgPT09IGZhbHNlXG59O1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gZ2VuQ2xhc3NGb3JWbm9kZSAodm5vZGUpIHtcbiAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICB2YXIgcGFyZW50Tm9kZSA9IHZub2RlO1xuICB2YXIgY2hpbGROb2RlID0gdm5vZGU7XG4gIHdoaWxlIChjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UpIHtcbiAgICBjaGlsZE5vZGUgPSBjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgIGlmIChjaGlsZE5vZGUuZGF0YSkge1xuICAgICAgZGF0YSA9IG1lcmdlQ2xhc3NEYXRhKGNoaWxkTm9kZS5kYXRhLCBkYXRhKTtcbiAgICB9XG4gIH1cbiAgd2hpbGUgKChwYXJlbnROb2RlID0gcGFyZW50Tm9kZS5wYXJlbnQpKSB7XG4gICAgaWYgKHBhcmVudE5vZGUuZGF0YSkge1xuICAgICAgZGF0YSA9IG1lcmdlQ2xhc3NEYXRhKGRhdGEsIHBhcmVudE5vZGUuZGF0YSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBnZW5DbGFzc0Zyb21EYXRhKGRhdGEpXG59XG5cbmZ1bmN0aW9uIG1lcmdlQ2xhc3NEYXRhIChjaGlsZCwgcGFyZW50KSB7XG4gIHJldHVybiB7XG4gICAgc3RhdGljQ2xhc3M6IGNvbmNhdChjaGlsZC5zdGF0aWNDbGFzcywgcGFyZW50LnN0YXRpY0NsYXNzKSxcbiAgICBjbGFzczogY2hpbGQuY2xhc3NcbiAgICAgID8gW2NoaWxkLmNsYXNzLCBwYXJlbnQuY2xhc3NdXG4gICAgICA6IHBhcmVudC5jbGFzc1xuICB9XG59XG5cbmZ1bmN0aW9uIGdlbkNsYXNzRnJvbURhdGEgKGRhdGEpIHtcbiAgdmFyIGR5bmFtaWNDbGFzcyA9IGRhdGEuY2xhc3M7XG4gIHZhciBzdGF0aWNDbGFzcyA9IGRhdGEuc3RhdGljQ2xhc3M7XG4gIGlmIChzdGF0aWNDbGFzcyB8fCBkeW5hbWljQ2xhc3MpIHtcbiAgICByZXR1cm4gY29uY2F0KHN0YXRpY0NsYXNzLCBzdHJpbmdpZnlDbGFzcyhkeW5hbWljQ2xhc3MpKVxuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHJldHVybiAnJ1xufVxuXG5mdW5jdGlvbiBjb25jYXQgKGEsIGIpIHtcbiAgcmV0dXJuIGEgPyBiID8gKGEgKyAnICcgKyBiKSA6IGEgOiAoYiB8fCAnJylcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5Q2xhc3MgKHZhbHVlKSB7XG4gIHZhciByZXMgPSAnJztcbiAgaWYgKCF2YWx1ZSkge1xuICAgIHJldHVybiByZXNcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZVxuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHZhciBzdHJpbmdpZmllZDtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgaWYgKHZhbHVlW2ldKSB7XG4gICAgICAgIGlmICgoc3RyaW5naWZpZWQgPSBzdHJpbmdpZnlDbGFzcyh2YWx1ZVtpXSkpKSB7XG4gICAgICAgICAgcmVzICs9IHN0cmluZ2lmaWVkICsgJyAnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXMuc2xpY2UoMCwgLTEpXG4gIH1cbiAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlW2tleV0pIHsgcmVzICs9IGtleSArICcgJzsgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzLnNsaWNlKDAsIC0xKVxuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbnZhciBuYW1lc3BhY2VNYXAgPSB7XG4gIHN2ZzogJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyxcbiAgbWF0aDogJ2h0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUwnXG59O1xuXG52YXIgaXNIVE1MVGFnID0gbWFrZU1hcChcbiAgJ2h0bWwsYm9keSxiYXNlLGhlYWQsbGluayxtZXRhLHN0eWxlLHRpdGxlLCcgK1xuICAnYWRkcmVzcyxhcnRpY2xlLGFzaWRlLGZvb3RlcixoZWFkZXIsaDEsaDIsaDMsaDQsaDUsaDYsaGdyb3VwLG5hdixzZWN0aW9uLCcgK1xuICAnZGl2LGRkLGRsLGR0LGZpZ2NhcHRpb24sZmlndXJlLGhyLGltZyxsaSxtYWluLG9sLHAscHJlLHVsLCcgK1xuICAnYSxiLGFiYnIsYmRpLGJkbyxicixjaXRlLGNvZGUsZGF0YSxkZm4sZW0saSxrYmQsbWFyayxxLHJwLHJ0LHJ0YyxydWJ5LCcgK1xuICAncyxzYW1wLHNtYWxsLHNwYW4sc3Ryb25nLHN1YixzdXAsdGltZSx1LHZhcix3YnIsYXJlYSxhdWRpbyxtYXAsdHJhY2ssdmlkZW8sJyArXG4gICdlbWJlZCxvYmplY3QscGFyYW0sc291cmNlLGNhbnZhcyxzY3JpcHQsbm9zY3JpcHQsZGVsLGlucywnICtcbiAgJ2NhcHRpb24sY29sLGNvbGdyb3VwLHRhYmxlLHRoZWFkLHRib2R5LHRkLHRoLHRyLCcgK1xuICAnYnV0dG9uLGRhdGFsaXN0LGZpZWxkc2V0LGZvcm0saW5wdXQsbGFiZWwsbGVnZW5kLG1ldGVyLG9wdGdyb3VwLG9wdGlvbiwnICtcbiAgJ291dHB1dCxwcm9ncmVzcyxzZWxlY3QsdGV4dGFyZWEsJyArXG4gICdkZXRhaWxzLGRpYWxvZyxtZW51LG1lbnVpdGVtLHN1bW1hcnksJyArXG4gICdjb250ZW50LGVsZW1lbnQsc2hhZG93LHRlbXBsYXRlJ1xuKTtcblxuLy8gdGhpcyBtYXAgaXMgaW50ZW50aW9uYWxseSBzZWxlY3RpdmUsIG9ubHkgY292ZXJpbmcgU1ZHIGVsZW1lbnRzIHRoYXQgbWF5XG4vLyBjb250YWluIGNoaWxkIGVsZW1lbnRzLlxudmFyIGlzU1ZHID0gbWFrZU1hcChcbiAgJ3N2ZyxhbmltYXRlLGNpcmNsZSxjbGlwcGF0aCxjdXJzb3IsZGVmcyxkZXNjLGVsbGlwc2UsZmlsdGVyLCcgK1xuICAnZm9udC1mYWNlLGcsZ2x5cGgsaW1hZ2UsbGluZSxtYXJrZXIsbWFzayxtaXNzaW5nLWdseXBoLHBhdGgscGF0dGVybiwnICtcbiAgJ3BvbHlnb24scG9seWxpbmUscmVjdCxzd2l0Y2gsc3ltYm9sLHRleHQsdGV4dHBhdGgsdHNwYW4sdXNlLHZpZXcnLFxuICB0cnVlXG4pO1xuXG52YXIgaXNQcmVUYWcgPSBmdW5jdGlvbiAodGFnKSB7IHJldHVybiB0YWcgPT09ICdwcmUnOyB9O1xuXG52YXIgaXNSZXNlcnZlZFRhZyA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgcmV0dXJuIGlzSFRNTFRhZyh0YWcpIHx8IGlzU1ZHKHRhZylcbn07XG5cbmZ1bmN0aW9uIGdldFRhZ05hbWVzcGFjZSAodGFnKSB7XG4gIGlmIChpc1NWRyh0YWcpKSB7XG4gICAgcmV0dXJuICdzdmcnXG4gIH1cbiAgLy8gYmFzaWMgc3VwcG9ydCBmb3IgTWF0aE1MXG4gIC8vIG5vdGUgaXQgZG9lc24ndCBzdXBwb3J0IG90aGVyIE1hdGhNTCBlbGVtZW50cyBiZWluZyBjb21wb25lbnQgcm9vdHNcbiAgaWYgKHRhZyA9PT0gJ21hdGgnKSB7XG4gICAgcmV0dXJuICdtYXRoJ1xuICB9XG59XG5cbnZhciB1bmtub3duRWxlbWVudENhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbmZ1bmN0aW9uIGlzVW5rbm93bkVsZW1lbnQgKHRhZykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFpbkJyb3dzZXIpIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG4gIGlmIChpc1Jlc2VydmVkVGFnKHRhZykpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICB0YWcgPSB0YWcudG9Mb3dlckNhc2UoKTtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICh1bmtub3duRWxlbWVudENhY2hlW3RhZ10gIT0gbnVsbCkge1xuICAgIHJldHVybiB1bmtub3duRWxlbWVudENhY2hlW3RhZ11cbiAgfVxuICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZyk7XG4gIGlmICh0YWcuaW5kZXhPZignLScpID4gLTEpIHtcbiAgICAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yODIxMDM2NC8xMDcwMjQ0XG4gICAgcmV0dXJuICh1bmtub3duRWxlbWVudENhY2hlW3RhZ10gPSAoXG4gICAgICBlbC5jb25zdHJ1Y3RvciA9PT0gd2luZG93LkhUTUxVbmtub3duRWxlbWVudCB8fFxuICAgICAgZWwuY29uc3RydWN0b3IgPT09IHdpbmRvdy5IVE1MRWxlbWVudFxuICAgICkpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuICh1bmtub3duRWxlbWVudENhY2hlW3RhZ10gPSAvSFRNTFVua25vd25FbGVtZW50Ly50ZXN0KGVsLnRvU3RyaW5nKCkpKVxuICB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFF1ZXJ5IGFuIGVsZW1lbnQgc2VsZWN0b3IgaWYgaXQncyBub3QgYW4gZWxlbWVudCBhbHJlYWR5LlxuICovXG5mdW5jdGlvbiBxdWVyeSAoZWwpIHtcbiAgaWYgKHR5cGVvZiBlbCA9PT0gJ3N0cmluZycpIHtcbiAgICB2YXIgc2VsZWN0b3IgPSBlbDtcbiAgICBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZWwpO1xuICAgIGlmICghZWwpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgJ0Nhbm5vdCBmaW5kIGVsZW1lbnQ6ICcgKyBzZWxlY3RvclxuICAgICAgKTtcbiAgICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgIH1cbiAgfVxuICByZXR1cm4gZWxcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQkMSAodGFnTmFtZSwgdm5vZGUpIHtcbiAgdmFyIGVsbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnTmFtZSk7XG4gIGlmICh0YWdOYW1lICE9PSAnc2VsZWN0Jykge1xuICAgIHJldHVybiBlbG1cbiAgfVxuICBpZiAodm5vZGUuZGF0YSAmJiB2bm9kZS5kYXRhLmF0dHJzICYmICdtdWx0aXBsZScgaW4gdm5vZGUuZGF0YS5hdHRycykge1xuICAgIGVsbS5zZXRBdHRyaWJ1dGUoJ211bHRpcGxlJywgJ211bHRpcGxlJyk7XG4gIH1cbiAgcmV0dXJuIGVsbVxufVxuXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50TlMgKG5hbWVzcGFjZSwgdGFnTmFtZSkge1xuICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZU1hcFtuYW1lc3BhY2VdLCB0YWdOYW1lKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVUZXh0Tm9kZSAodGV4dCkge1xuICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGV4dClcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29tbWVudCAodGV4dCkge1xuICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlQ29tbWVudCh0ZXh0KVxufVxuXG5mdW5jdGlvbiBpbnNlcnRCZWZvcmUgKHBhcmVudE5vZGUsIG5ld05vZGUsIHJlZmVyZW5jZU5vZGUpIHtcbiAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobmV3Tm9kZSwgcmVmZXJlbmNlTm9kZSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUNoaWxkIChub2RlLCBjaGlsZCkge1xuICBub2RlLnJlbW92ZUNoaWxkKGNoaWxkKTtcbn1cblxuZnVuY3Rpb24gYXBwZW5kQ2hpbGQgKG5vZGUsIGNoaWxkKSB7XG4gIG5vZGUuYXBwZW5kQ2hpbGQoY2hpbGQpO1xufVxuXG5mdW5jdGlvbiBwYXJlbnROb2RlIChub2RlKSB7XG4gIHJldHVybiBub2RlLnBhcmVudE5vZGVcbn1cblxuZnVuY3Rpb24gbmV4dFNpYmxpbmcgKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUubmV4dFNpYmxpbmdcbn1cblxuZnVuY3Rpb24gdGFnTmFtZSAobm9kZSkge1xuICByZXR1cm4gbm9kZS50YWdOYW1lXG59XG5cbmZ1bmN0aW9uIHNldFRleHRDb250ZW50IChub2RlLCB0ZXh0KSB7XG4gIG5vZGUudGV4dENvbnRlbnQgPSB0ZXh0O1xufVxuXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGUgKG5vZGUsIGtleSwgdmFsKSB7XG4gIG5vZGUuc2V0QXR0cmlidXRlKGtleSwgdmFsKTtcbn1cblxuXG52YXIgbm9kZU9wcyA9IE9iamVjdC5mcmVlemUoe1xuXHRjcmVhdGVFbGVtZW50OiBjcmVhdGVFbGVtZW50JDEsXG5cdGNyZWF0ZUVsZW1lbnROUzogY3JlYXRlRWxlbWVudE5TLFxuXHRjcmVhdGVUZXh0Tm9kZTogY3JlYXRlVGV4dE5vZGUsXG5cdGNyZWF0ZUNvbW1lbnQ6IGNyZWF0ZUNvbW1lbnQsXG5cdGluc2VydEJlZm9yZTogaW5zZXJ0QmVmb3JlLFxuXHRyZW1vdmVDaGlsZDogcmVtb3ZlQ2hpbGQsXG5cdGFwcGVuZENoaWxkOiBhcHBlbmRDaGlsZCxcblx0cGFyZW50Tm9kZTogcGFyZW50Tm9kZSxcblx0bmV4dFNpYmxpbmc6IG5leHRTaWJsaW5nLFxuXHR0YWdOYW1lOiB0YWdOYW1lLFxuXHRzZXRUZXh0Q29udGVudDogc2V0VGV4dENvbnRlbnQsXG5cdHNldEF0dHJpYnV0ZTogc2V0QXR0cmlidXRlXG59KTtcblxuLyogICovXG5cbnZhciByZWYgPSB7XG4gIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlIChfLCB2bm9kZSkge1xuICAgIHJlZ2lzdGVyUmVmKHZub2RlKTtcbiAgfSxcbiAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUgKG9sZFZub2RlLCB2bm9kZSkge1xuICAgIGlmIChvbGRWbm9kZS5kYXRhLnJlZiAhPT0gdm5vZGUuZGF0YS5yZWYpIHtcbiAgICAgIHJlZ2lzdGVyUmVmKG9sZFZub2RlLCB0cnVlKTtcbiAgICAgIHJlZ2lzdGVyUmVmKHZub2RlKTtcbiAgICB9XG4gIH0sXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3kgKHZub2RlKSB7XG4gICAgcmVnaXN0ZXJSZWYodm5vZGUsIHRydWUpO1xuICB9XG59O1xuXG5mdW5jdGlvbiByZWdpc3RlclJlZiAodm5vZGUsIGlzUmVtb3ZhbCkge1xuICB2YXIga2V5ID0gdm5vZGUuZGF0YS5yZWY7XG4gIGlmICgha2V5KSB7IHJldHVybiB9XG5cbiAgdmFyIHZtID0gdm5vZGUuY29udGV4dDtcbiAgdmFyIHJlZiA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlIHx8IHZub2RlLmVsbTtcbiAgdmFyIHJlZnMgPSB2bS4kcmVmcztcbiAgaWYgKGlzUmVtb3ZhbCkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHJlZnNba2V5XSkpIHtcbiAgICAgIHJlbW92ZSQxKHJlZnNba2V5XSwgcmVmKTtcbiAgICB9IGVsc2UgaWYgKHJlZnNba2V5XSA9PT0gcmVmKSB7XG4gICAgICByZWZzW2tleV0gPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmICh2bm9kZS5kYXRhLnJlZkluRm9yKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShyZWZzW2tleV0pICYmIHJlZnNba2V5XS5pbmRleE9mKHJlZikgPCAwKSB7XG4gICAgICAgIHJlZnNba2V5XS5wdXNoKHJlZik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZWZzW2tleV0gPSBbcmVmXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVmc1trZXldID0gcmVmO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFZpcnR1YWwgRE9NIHBhdGNoaW5nIGFsZ29yaXRobSBiYXNlZCBvbiBTbmFiYmRvbSBieVxuICogU2ltb24gRnJpaXMgVmluZHVtIChAcGFsZGVwaW5kKVxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXG4gKiBodHRwczovL2dpdGh1Yi5jb20vcGFsZGVwaW5kL3NuYWJiZG9tL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqXG4gKiBtb2RpZmllZCBieSBFdmFuIFlvdSAoQHl5eDk5MDgwMylcbiAqXG5cbi8qXG4gKiBOb3QgdHlwZS1jaGVja2luZyB0aGlzIGJlY2F1c2UgdGhpcyBmaWxlIGlzIHBlcmYtY3JpdGljYWwgYW5kIHRoZSBjb3N0XG4gKiBvZiBtYWtpbmcgZmxvdyB1bmRlcnN0YW5kIGl0IGlzIG5vdCB3b3J0aCBpdC5cbiAqL1xuXG52YXIgZW1wdHlOb2RlID0gbmV3IFZOb2RlKCcnLCB7fSwgW10pO1xuXG52YXIgaG9va3MkMSA9IFsnY3JlYXRlJywgJ2FjdGl2YXRlJywgJ3VwZGF0ZScsICdyZW1vdmUnLCAnZGVzdHJveSddO1xuXG5mdW5jdGlvbiBpc1VuZGVmIChzKSB7XG4gIHJldHVybiBzID09IG51bGxcbn1cblxuZnVuY3Rpb24gaXNEZWYgKHMpIHtcbiAgcmV0dXJuIHMgIT0gbnVsbFxufVxuXG5mdW5jdGlvbiBzYW1lVm5vZGUgKHZub2RlMSwgdm5vZGUyKSB7XG4gIHJldHVybiAoXG4gICAgdm5vZGUxLmtleSA9PT0gdm5vZGUyLmtleSAmJlxuICAgIHZub2RlMS50YWcgPT09IHZub2RlMi50YWcgJiZcbiAgICB2bm9kZTEuaXNDb21tZW50ID09PSB2bm9kZTIuaXNDb21tZW50ICYmXG4gICAgIXZub2RlMS5kYXRhID09PSAhdm5vZGUyLmRhdGFcbiAgKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVLZXlUb09sZElkeCAoY2hpbGRyZW4sIGJlZ2luSWR4LCBlbmRJZHgpIHtcbiAgdmFyIGksIGtleTtcbiAgdmFyIG1hcCA9IHt9O1xuICBmb3IgKGkgPSBiZWdpbklkeDsgaSA8PSBlbmRJZHg7ICsraSkge1xuICAgIGtleSA9IGNoaWxkcmVuW2ldLmtleTtcbiAgICBpZiAoaXNEZWYoa2V5KSkgeyBtYXBba2V5XSA9IGk7IH1cbiAgfVxuICByZXR1cm4gbWFwXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVBhdGNoRnVuY3Rpb24gKGJhY2tlbmQpIHtcbiAgdmFyIGksIGo7XG4gIHZhciBjYnMgPSB7fTtcblxuICB2YXIgbW9kdWxlcyA9IGJhY2tlbmQubW9kdWxlcztcbiAgdmFyIG5vZGVPcHMgPSBiYWNrZW5kLm5vZGVPcHM7XG5cbiAgZm9yIChpID0gMDsgaSA8IGhvb2tzJDEubGVuZ3RoOyArK2kpIHtcbiAgICBjYnNbaG9va3MkMVtpXV0gPSBbXTtcbiAgICBmb3IgKGogPSAwOyBqIDwgbW9kdWxlcy5sZW5ndGg7ICsraikge1xuICAgICAgaWYgKG1vZHVsZXNbal1baG9va3MkMVtpXV0gIT09IHVuZGVmaW5lZCkgeyBjYnNbaG9va3MkMVtpXV0ucHVzaChtb2R1bGVzW2pdW2hvb2tzJDFbaV1dKTsgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGVtcHR5Tm9kZUF0IChlbG0pIHtcbiAgICByZXR1cm4gbmV3IFZOb2RlKG5vZGVPcHMudGFnTmFtZShlbG0pLnRvTG93ZXJDYXNlKCksIHt9LCBbXSwgdW5kZWZpbmVkLCBlbG0pXG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVSbUNiIChjaGlsZEVsbSwgbGlzdGVuZXJzKSB7XG4gICAgZnVuY3Rpb24gcmVtb3ZlJCQxICgpIHtcbiAgICAgIGlmICgtLXJlbW92ZSQkMS5saXN0ZW5lcnMgPT09IDApIHtcbiAgICAgICAgcmVtb3ZlTm9kZShjaGlsZEVsbSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJlbW92ZSQkMS5saXN0ZW5lcnMgPSBsaXN0ZW5lcnM7XG4gICAgcmV0dXJuIHJlbW92ZSQkMVxuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlTm9kZSAoZWwpIHtcbiAgICB2YXIgcGFyZW50ID0gbm9kZU9wcy5wYXJlbnROb2RlKGVsKTtcbiAgICAvLyBlbGVtZW50IG1heSBoYXZlIGFscmVhZHkgYmVlbiByZW1vdmVkIGR1ZSB0byB2LWh0bWwgLyB2LXRleHRcbiAgICBpZiAocGFyZW50KSB7XG4gICAgICBub2RlT3BzLnJlbW92ZUNoaWxkKHBhcmVudCwgZWwpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpblByZSA9IDA7XG4gIGZ1bmN0aW9uIGNyZWF0ZUVsbSAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0sIG5lc3RlZCkge1xuICAgIHZub2RlLmlzUm9vdEluc2VydCA9ICFuZXN0ZWQ7IC8vIGZvciB0cmFuc2l0aW9uIGVudGVyIGNoZWNrXG4gICAgaWYgKGNyZWF0ZUNvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICB2YXIgY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbjtcbiAgICB2YXIgdGFnID0gdm5vZGUudGFnO1xuICAgIGlmIChpc0RlZih0YWcpKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLnByZSkge1xuICAgICAgICAgIGluUHJlKys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFxuICAgICAgICAgICFpblByZSAmJlxuICAgICAgICAgICF2bm9kZS5ucyAmJlxuICAgICAgICAgICEoY29uZmlnLmlnbm9yZWRFbGVtZW50cy5sZW5ndGggJiYgY29uZmlnLmlnbm9yZWRFbGVtZW50cy5pbmRleE9mKHRhZykgPiAtMSkgJiZcbiAgICAgICAgICBjb25maWcuaXNVbmtub3duRWxlbWVudCh0YWcpXG4gICAgICAgICkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAnVW5rbm93biBjdXN0b20gZWxlbWVudDogPCcgKyB0YWcgKyAnPiAtIGRpZCB5b3UgJyArXG4gICAgICAgICAgICAncmVnaXN0ZXIgdGhlIGNvbXBvbmVudCBjb3JyZWN0bHk/IEZvciByZWN1cnNpdmUgY29tcG9uZW50cywgJyArXG4gICAgICAgICAgICAnbWFrZSBzdXJlIHRvIHByb3ZpZGUgdGhlIFwibmFtZVwiIG9wdGlvbi4nLFxuICAgICAgICAgICAgdm5vZGUuY29udGV4dFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZub2RlLmVsbSA9IHZub2RlLm5zXG4gICAgICAgID8gbm9kZU9wcy5jcmVhdGVFbGVtZW50TlModm5vZGUubnMsIHRhZylcbiAgICAgICAgOiBub2RlT3BzLmNyZWF0ZUVsZW1lbnQodGFnLCB2bm9kZSk7XG4gICAgICBzZXRTY29wZSh2bm9kZSk7XG5cbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAge1xuICAgICAgICBjcmVhdGVDaGlsZHJlbih2bm9kZSwgY2hpbGRyZW4sIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgICAgIGludm9rZUNyZWF0ZUhvb2tzKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICB9XG4gICAgICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgZGF0YSAmJiBkYXRhLnByZSkge1xuICAgICAgICBpblByZS0tO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodm5vZGUuaXNDb21tZW50KSB7XG4gICAgICB2bm9kZS5lbG0gPSBub2RlT3BzLmNyZWF0ZUNvbW1lbnQodm5vZGUudGV4dCk7XG4gICAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZub2RlLmVsbSA9IG5vZGVPcHMuY3JlYXRlVGV4dE5vZGUodm5vZGUudGV4dCk7XG4gICAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlQ29tcG9uZW50ICh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSkge1xuICAgIHZhciBpID0gdm5vZGUuZGF0YTtcbiAgICBpZiAoaXNEZWYoaSkpIHtcbiAgICAgIHZhciBpc1JlYWN0aXZhdGVkID0gaXNEZWYodm5vZGUuY29tcG9uZW50SW5zdGFuY2UpICYmIGkua2VlcEFsaXZlO1xuICAgICAgaWYgKGlzRGVmKGkgPSBpLmhvb2spICYmIGlzRGVmKGkgPSBpLmluaXQpKSB7XG4gICAgICAgIGkodm5vZGUsIGZhbHNlIC8qIGh5ZHJhdGluZyAqLywgcGFyZW50RWxtLCByZWZFbG0pO1xuICAgICAgfVxuICAgICAgLy8gYWZ0ZXIgY2FsbGluZyB0aGUgaW5pdCBob29rLCBpZiB0aGUgdm5vZGUgaXMgYSBjaGlsZCBjb21wb25lbnRcbiAgICAgIC8vIGl0IHNob3VsZCd2ZSBjcmVhdGVkIGEgY2hpbGQgaW5zdGFuY2UgYW5kIG1vdW50ZWQgaXQuIHRoZSBjaGlsZFxuICAgICAgLy8gY29tcG9uZW50IGFsc28gaGFzIHNldCB0aGUgcGxhY2Vob2xkZXIgdm5vZGUncyBlbG0uXG4gICAgICAvLyBpbiB0aGF0IGNhc2Ugd2UgY2FuIGp1c3QgcmV0dXJuIHRoZSBlbGVtZW50IGFuZCBiZSBkb25lLlxuICAgICAgaWYgKGlzRGVmKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSkge1xuICAgICAgICBpbml0Q29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICBpZiAoaXNSZWFjdGl2YXRlZCkge1xuICAgICAgICAgIHJlYWN0aXZhdGVDb21wb25lbnQodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5pdENvbXBvbmVudCAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGlmICh2bm9kZS5kYXRhLnBlbmRpbmdJbnNlcnQpIHtcbiAgICAgIGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoLmFwcGx5KGluc2VydGVkVm5vZGVRdWV1ZSwgdm5vZGUuZGF0YS5wZW5kaW5nSW5zZXJ0KTtcbiAgICB9XG4gICAgdm5vZGUuZWxtID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuJGVsO1xuICAgIGlmIChpc1BhdGNoYWJsZSh2bm9kZSkpIHtcbiAgICAgIGludm9rZUNyZWF0ZUhvb2tzKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgc2V0U2NvcGUodm5vZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlbXB0eSBjb21wb25lbnQgcm9vdC5cbiAgICAgIC8vIHNraXAgYWxsIGVsZW1lbnQtcmVsYXRlZCBtb2R1bGVzIGV4Y2VwdCBmb3IgcmVmICgjMzQ1NSlcbiAgICAgIHJlZ2lzdGVyUmVmKHZub2RlKTtcbiAgICAgIC8vIG1ha2Ugc3VyZSB0byBpbnZva2UgdGhlIGluc2VydCBob29rXG4gICAgICBpbnNlcnRlZFZub2RlUXVldWUucHVzaCh2bm9kZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhY3RpdmF0ZUNvbXBvbmVudCAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pIHtcbiAgICB2YXIgaTtcbiAgICAvLyBoYWNrIGZvciAjNDMzOTogYSByZWFjdGl2YXRlZCBjb21wb25lbnQgd2l0aCBpbm5lciB0cmFuc2l0aW9uXG4gICAgLy8gZG9lcyBub3QgdHJpZ2dlciBiZWNhdXNlIHRoZSBpbm5lciBub2RlJ3MgY3JlYXRlZCBob29rcyBhcmUgbm90IGNhbGxlZFxuICAgIC8vIGFnYWluLiBJdCdzIG5vdCBpZGVhbCB0byBpbnZvbHZlIG1vZHVsZS1zcGVjaWZpYyBsb2dpYyBpbiBoZXJlIGJ1dFxuICAgIC8vIHRoZXJlIGRvZXNuJ3Qgc2VlbSB0byBiZSBhIGJldHRlciB3YXkgdG8gZG8gaXQuXG4gICAgdmFyIGlubmVyTm9kZSA9IHZub2RlO1xuICAgIHdoaWxlIChpbm5lck5vZGUuY29tcG9uZW50SW5zdGFuY2UpIHtcbiAgICAgIGlubmVyTm9kZSA9IGlubmVyTm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XG4gICAgICBpZiAoaXNEZWYoaSA9IGlubmVyTm9kZS5kYXRhKSAmJiBpc0RlZihpID0gaS50cmFuc2l0aW9uKSkge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLmFjdGl2YXRlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgY2JzLmFjdGl2YXRlW2ldKGVtcHR5Tm9kZSwgaW5uZXJOb2RlKTtcbiAgICAgICAgfVxuICAgICAgICBpbnNlcnRlZFZub2RlUXVldWUucHVzaChpbm5lck5vZGUpO1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICAvLyB1bmxpa2UgYSBuZXdseSBjcmVhdGVkIGNvbXBvbmVudCxcbiAgICAvLyBhIHJlYWN0aXZhdGVkIGtlZXAtYWxpdmUgY29tcG9uZW50IGRvZXNuJ3QgaW5zZXJ0IGl0c2VsZlxuICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluc2VydCAocGFyZW50LCBlbG0sIHJlZikge1xuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgIGlmIChyZWYpIHtcbiAgICAgICAgbm9kZU9wcy5pbnNlcnRCZWZvcmUocGFyZW50LCBlbG0sIHJlZik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlT3BzLmFwcGVuZENoaWxkKHBhcmVudCwgZWxtKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVDaGlsZHJlbiAodm5vZGUsIGNoaWxkcmVuLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY3JlYXRlRWxtKGNoaWxkcmVuW2ldLCBpbnNlcnRlZFZub2RlUXVldWUsIHZub2RlLmVsbSwgbnVsbCwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1ByaW1pdGl2ZSh2bm9kZS50ZXh0KSkge1xuICAgICAgbm9kZU9wcy5hcHBlbmRDaGlsZCh2bm9kZS5lbG0sIG5vZGVPcHMuY3JlYXRlVGV4dE5vZGUodm5vZGUudGV4dCkpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGlzUGF0Y2hhYmxlICh2bm9kZSkge1xuICAgIHdoaWxlICh2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkge1xuICAgICAgdm5vZGUgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XG4gICAgfVxuICAgIHJldHVybiBpc0RlZih2bm9kZS50YWcpXG4gIH1cblxuICBmdW5jdGlvbiBpbnZva2VDcmVhdGVIb29rcyAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGNicy5jcmVhdGUubGVuZ3RoOyArK2kkMSkge1xuICAgICAgY2JzLmNyZWF0ZVtpJDFdKGVtcHR5Tm9kZSwgdm5vZGUpO1xuICAgIH1cbiAgICBpID0gdm5vZGUuZGF0YS5ob29rOyAvLyBSZXVzZSB2YXJpYWJsZVxuICAgIGlmIChpc0RlZihpKSkge1xuICAgICAgaWYgKGkuY3JlYXRlKSB7IGkuY3JlYXRlKGVtcHR5Tm9kZSwgdm5vZGUpOyB9XG4gICAgICBpZiAoaS5pbnNlcnQpIHsgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2godm5vZGUpOyB9XG4gICAgfVxuICB9XG5cbiAgLy8gc2V0IHNjb3BlIGlkIGF0dHJpYnV0ZSBmb3Igc2NvcGVkIENTUy5cbiAgLy8gdGhpcyBpcyBpbXBsZW1lbnRlZCBhcyBhIHNwZWNpYWwgY2FzZSB0byBhdm9pZCB0aGUgb3ZlcmhlYWRcbiAgLy8gb2YgZ29pbmcgdGhyb3VnaCB0aGUgbm9ybWFsIGF0dHJpYnV0ZSBwYXRjaGluZyBwcm9jZXNzLlxuICBmdW5jdGlvbiBzZXRTY29wZSAodm5vZGUpIHtcbiAgICB2YXIgaTtcbiAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmNvbnRleHQpICYmIGlzRGVmKGkgPSBpLiRvcHRpb25zLl9zY29wZUlkKSkge1xuICAgICAgbm9kZU9wcy5zZXRBdHRyaWJ1dGUodm5vZGUuZWxtLCBpLCAnJyk7XG4gICAgfVxuICAgIGlmIChpc0RlZihpID0gYWN0aXZlSW5zdGFuY2UpICYmXG4gICAgICAgIGkgIT09IHZub2RlLmNvbnRleHQgJiZcbiAgICAgICAgaXNEZWYoaSA9IGkuJG9wdGlvbnMuX3Njb3BlSWQpKSB7XG4gICAgICBub2RlT3BzLnNldEF0dHJpYnV0ZSh2bm9kZS5lbG0sIGksICcnKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBhZGRWbm9kZXMgKHBhcmVudEVsbSwgcmVmRWxtLCB2bm9kZXMsIHN0YXJ0SWR4LCBlbmRJZHgsIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGZvciAoOyBzdGFydElkeCA8PSBlbmRJZHg7ICsrc3RhcnRJZHgpIHtcbiAgICAgIGNyZWF0ZUVsbSh2bm9kZXNbc3RhcnRJZHhdLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbnZva2VEZXN0cm95SG9vayAodm5vZGUpIHtcbiAgICB2YXIgaSwgajtcbiAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkuZGVzdHJveSkpIHsgaSh2bm9kZSk7IH1cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMuZGVzdHJveS5sZW5ndGg7ICsraSkgeyBjYnMuZGVzdHJveVtpXSh2bm9kZSk7IH1cbiAgICB9XG4gICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5jaGlsZHJlbikpIHtcbiAgICAgIGZvciAoaiA9IDA7IGogPCB2bm9kZS5jaGlsZHJlbi5sZW5ndGg7ICsraikge1xuICAgICAgICBpbnZva2VEZXN0cm95SG9vayh2bm9kZS5jaGlsZHJlbltqXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlVm5vZGVzIChwYXJlbnRFbG0sIHZub2Rlcywgc3RhcnRJZHgsIGVuZElkeCkge1xuICAgIGZvciAoOyBzdGFydElkeCA8PSBlbmRJZHg7ICsrc3RhcnRJZHgpIHtcbiAgICAgIHZhciBjaCA9IHZub2Rlc1tzdGFydElkeF07XG4gICAgICBpZiAoaXNEZWYoY2gpKSB7XG4gICAgICAgIGlmIChpc0RlZihjaC50YWcpKSB7XG4gICAgICAgICAgcmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayhjaCk7XG4gICAgICAgICAgaW52b2tlRGVzdHJveUhvb2soY2gpO1xuICAgICAgICB9IGVsc2UgeyAvLyBUZXh0IG5vZGVcbiAgICAgICAgICByZW1vdmVOb2RlKGNoLmVsbSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rICh2bm9kZSwgcm0pIHtcbiAgICBpZiAocm0gfHwgaXNEZWYodm5vZGUuZGF0YSkpIHtcbiAgICAgIHZhciBsaXN0ZW5lcnMgPSBjYnMucmVtb3ZlLmxlbmd0aCArIDE7XG4gICAgICBpZiAoIXJtKSB7XG4gICAgICAgIC8vIGRpcmVjdGx5IHJlbW92aW5nXG4gICAgICAgIHJtID0gY3JlYXRlUm1DYih2bm9kZS5lbG0sIGxpc3RlbmVycyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyB3ZSBoYXZlIGEgcmVjdXJzaXZlbHkgcGFzc2VkIGRvd24gcm0gY2FsbGJhY2tcbiAgICAgICAgLy8gaW5jcmVhc2UgdGhlIGxpc3RlbmVycyBjb3VudFxuICAgICAgICBybS5saXN0ZW5lcnMgKz0gbGlzdGVuZXJzO1xuICAgICAgfVxuICAgICAgLy8gcmVjdXJzaXZlbHkgaW52b2tlIGhvb2tzIG9uIGNoaWxkIGNvbXBvbmVudCByb290IG5vZGVcbiAgICAgIGlmIChpc0RlZihpID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UpICYmIGlzRGVmKGkgPSBpLl92bm9kZSkgJiYgaXNEZWYoaS5kYXRhKSkge1xuICAgICAgICByZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rKGksIHJtKTtcbiAgICAgIH1cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMucmVtb3ZlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNicy5yZW1vdmVbaV0odm5vZGUsIHJtKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0RlZihpID0gdm5vZGUuZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5yZW1vdmUpKSB7XG4gICAgICAgIGkodm5vZGUsIHJtKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJtKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZU5vZGUodm5vZGUuZWxtKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVDaGlsZHJlbiAocGFyZW50RWxtLCBvbGRDaCwgbmV3Q2gsIGluc2VydGVkVm5vZGVRdWV1ZSwgcmVtb3ZlT25seSkge1xuICAgIHZhciBvbGRTdGFydElkeCA9IDA7XG4gICAgdmFyIG5ld1N0YXJ0SWR4ID0gMDtcbiAgICB2YXIgb2xkRW5kSWR4ID0gb2xkQ2gubGVuZ3RoIC0gMTtcbiAgICB2YXIgb2xkU3RhcnRWbm9kZSA9IG9sZENoWzBdO1xuICAgIHZhciBvbGRFbmRWbm9kZSA9IG9sZENoW29sZEVuZElkeF07XG4gICAgdmFyIG5ld0VuZElkeCA9IG5ld0NoLmxlbmd0aCAtIDE7XG4gICAgdmFyIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFswXTtcbiAgICB2YXIgbmV3RW5kVm5vZGUgPSBuZXdDaFtuZXdFbmRJZHhdO1xuICAgIHZhciBvbGRLZXlUb0lkeCwgaWR4SW5PbGQsIGVsbVRvTW92ZSwgcmVmRWxtO1xuXG4gICAgLy8gcmVtb3ZlT25seSBpcyBhIHNwZWNpYWwgZmxhZyB1c2VkIG9ubHkgYnkgPHRyYW5zaXRpb24tZ3JvdXA+XG4gICAgLy8gdG8gZW5zdXJlIHJlbW92ZWQgZWxlbWVudHMgc3RheSBpbiBjb3JyZWN0IHJlbGF0aXZlIHBvc2l0aW9uc1xuICAgIC8vIGR1cmluZyBsZWF2aW5nIHRyYW5zaXRpb25zXG4gICAgdmFyIGNhbk1vdmUgPSAhcmVtb3ZlT25seTtcblxuICAgIHdoaWxlIChvbGRTdGFydElkeCA8PSBvbGRFbmRJZHggJiYgbmV3U3RhcnRJZHggPD0gbmV3RW5kSWR4KSB7XG4gICAgICBpZiAoaXNVbmRlZihvbGRTdGFydFZub2RlKSkge1xuICAgICAgICBvbGRTdGFydFZub2RlID0gb2xkQ2hbKytvbGRTdGFydElkeF07IC8vIFZub2RlIGhhcyBiZWVuIG1vdmVkIGxlZnRcbiAgICAgIH0gZWxzZSBpZiAoaXNVbmRlZihvbGRFbmRWbm9kZSkpIHtcbiAgICAgICAgb2xkRW5kVm5vZGUgPSBvbGRDaFstLW9sZEVuZElkeF07XG4gICAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRTdGFydFZub2RlLCBuZXdTdGFydFZub2RlKSkge1xuICAgICAgICBwYXRjaFZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFsrK29sZFN0YXJ0SWR4XTtcbiAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkRW5kVm5vZGUsIG5ld0VuZFZub2RlKSkge1xuICAgICAgICBwYXRjaFZub2RlKG9sZEVuZFZub2RlLCBuZXdFbmRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgb2xkRW5kVm5vZGUgPSBvbGRDaFstLW9sZEVuZElkeF07XG4gICAgICAgIG5ld0VuZFZub2RlID0gbmV3Q2hbLS1uZXdFbmRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3RW5kVm5vZGUpKSB7IC8vIFZub2RlIG1vdmVkIHJpZ2h0XG4gICAgICAgIHBhdGNoVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3RW5kVm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIGNhbk1vdmUgJiYgbm9kZU9wcy5pbnNlcnRCZWZvcmUocGFyZW50RWxtLCBvbGRTdGFydFZub2RlLmVsbSwgbm9kZU9wcy5uZXh0U2libGluZyhvbGRFbmRWbm9kZS5lbG0pKTtcbiAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdO1xuICAgICAgICBuZXdFbmRWbm9kZSA9IG5ld0NoWy0tbmV3RW5kSWR4XTtcbiAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZEVuZFZub2RlLCBuZXdTdGFydFZub2RlKSkgeyAvLyBWbm9kZSBtb3ZlZCBsZWZ0XG4gICAgICAgIHBhdGNoVm5vZGUob2xkRW5kVm5vZGUsIG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIGNhbk1vdmUgJiYgbm9kZU9wcy5pbnNlcnRCZWZvcmUocGFyZW50RWxtLCBvbGRFbmRWbm9kZS5lbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtKTtcbiAgICAgICAgb2xkRW5kVm5vZGUgPSBvbGRDaFstLW9sZEVuZElkeF07XG4gICAgICAgIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFsrK25ld1N0YXJ0SWR4XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc1VuZGVmKG9sZEtleVRvSWR4KSkgeyBvbGRLZXlUb0lkeCA9IGNyZWF0ZUtleVRvT2xkSWR4KG9sZENoLCBvbGRTdGFydElkeCwgb2xkRW5kSWR4KTsgfVxuICAgICAgICBpZHhJbk9sZCA9IGlzRGVmKG5ld1N0YXJ0Vm5vZGUua2V5KSA/IG9sZEtleVRvSWR4W25ld1N0YXJ0Vm5vZGUua2V5XSA6IG51bGw7XG4gICAgICAgIGlmIChpc1VuZGVmKGlkeEluT2xkKSkgeyAvLyBOZXcgZWxlbWVudFxuICAgICAgICAgIGNyZWF0ZUVsbShuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgb2xkU3RhcnRWbm9kZS5lbG0pO1xuICAgICAgICAgIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFsrK25ld1N0YXJ0SWR4XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbG1Ub01vdmUgPSBvbGRDaFtpZHhJbk9sZF07XG4gICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWVsbVRvTW92ZSkge1xuICAgICAgICAgICAgd2FybihcbiAgICAgICAgICAgICAgJ0l0IHNlZW1zIHRoZXJlIGFyZSBkdXBsaWNhdGUga2V5cyB0aGF0IGlzIGNhdXNpbmcgYW4gdXBkYXRlIGVycm9yLiAnICtcbiAgICAgICAgICAgICAgJ01ha2Ugc3VyZSBlYWNoIHYtZm9yIGl0ZW0gaGFzIGEgdW5pcXVlIGtleS4nXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc2FtZVZub2RlKGVsbVRvTW92ZSwgbmV3U3RhcnRWbm9kZSkpIHtcbiAgICAgICAgICAgIHBhdGNoVm5vZGUoZWxtVG9Nb3ZlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICAgICAgb2xkQ2hbaWR4SW5PbGRdID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgY2FuTW92ZSAmJiBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIG5ld1N0YXJ0Vm5vZGUuZWxtLCBvbGRTdGFydFZub2RlLmVsbSk7XG4gICAgICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHNhbWUga2V5IGJ1dCBkaWZmZXJlbnQgZWxlbWVudC4gdHJlYXQgYXMgbmV3IGVsZW1lbnRcbiAgICAgICAgICAgIGNyZWF0ZUVsbShuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgb2xkU3RhcnRWbm9kZS5lbG0pO1xuICAgICAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAob2xkU3RhcnRJZHggPiBvbGRFbmRJZHgpIHtcbiAgICAgIHJlZkVsbSA9IGlzVW5kZWYobmV3Q2hbbmV3RW5kSWR4ICsgMV0pID8gbnVsbCA6IG5ld0NoW25ld0VuZElkeCArIDFdLmVsbTtcbiAgICAgIGFkZFZub2RlcyhwYXJlbnRFbG0sIHJlZkVsbSwgbmV3Q2gsIG5ld1N0YXJ0SWR4LCBuZXdFbmRJZHgsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgfSBlbHNlIGlmIChuZXdTdGFydElkeCA+IG5ld0VuZElkeCkge1xuICAgICAgcmVtb3ZlVm5vZGVzKHBhcmVudEVsbSwgb2xkQ2gsIG9sZFN0YXJ0SWR4LCBvbGRFbmRJZHgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHBhdGNoVm5vZGUgKG9sZFZub2RlLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCByZW1vdmVPbmx5KSB7XG4gICAgaWYgKG9sZFZub2RlID09PSB2bm9kZSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIC8vIHJldXNlIGVsZW1lbnQgZm9yIHN0YXRpYyB0cmVlcy5cbiAgICAvLyBub3RlIHdlIG9ubHkgZG8gdGhpcyBpZiB0aGUgdm5vZGUgaXMgY2xvbmVkIC1cbiAgICAvLyBpZiB0aGUgbmV3IG5vZGUgaXMgbm90IGNsb25lZCBpdCBtZWFucyB0aGUgcmVuZGVyIGZ1bmN0aW9ucyBoYXZlIGJlZW5cbiAgICAvLyByZXNldCBieSB0aGUgaG90LXJlbG9hZC1hcGkgYW5kIHdlIG5lZWQgdG8gZG8gYSBwcm9wZXIgcmUtcmVuZGVyLlxuICAgIGlmICh2bm9kZS5pc1N0YXRpYyAmJlxuICAgICAgICBvbGRWbm9kZS5pc1N0YXRpYyAmJlxuICAgICAgICB2bm9kZS5rZXkgPT09IG9sZFZub2RlLmtleSAmJlxuICAgICAgICAodm5vZGUuaXNDbG9uZWQgfHwgdm5vZGUuaXNPbmNlKSkge1xuICAgICAgdm5vZGUuZWxtID0gb2xkVm5vZGUuZWxtO1xuICAgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBvbGRWbm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICB2YXIgaTtcbiAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gICAgdmFyIGhhc0RhdGEgPSBpc0RlZihkYXRhKTtcbiAgICBpZiAoaGFzRGF0YSAmJiBpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5wcmVwYXRjaCkpIHtcbiAgICAgIGkob2xkVm5vZGUsIHZub2RlKTtcbiAgICB9XG4gICAgdmFyIGVsbSA9IHZub2RlLmVsbSA9IG9sZFZub2RlLmVsbTtcbiAgICB2YXIgb2xkQ2ggPSBvbGRWbm9kZS5jaGlsZHJlbjtcbiAgICB2YXIgY2ggPSB2bm9kZS5jaGlsZHJlbjtcbiAgICBpZiAoaGFzRGF0YSAmJiBpc1BhdGNoYWJsZSh2bm9kZSkpIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMudXBkYXRlLmxlbmd0aDsgKytpKSB7IGNicy51cGRhdGVbaV0ob2xkVm5vZGUsIHZub2RlKTsgfVxuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnVwZGF0ZSkpIHsgaShvbGRWbm9kZSwgdm5vZGUpOyB9XG4gICAgfVxuICAgIGlmIChpc1VuZGVmKHZub2RlLnRleHQpKSB7XG4gICAgICBpZiAoaXNEZWYob2xkQ2gpICYmIGlzRGVmKGNoKSkge1xuICAgICAgICBpZiAob2xkQ2ggIT09IGNoKSB7IHVwZGF0ZUNoaWxkcmVuKGVsbSwgb2xkQ2gsIGNoLCBpbnNlcnRlZFZub2RlUXVldWUsIHJlbW92ZU9ubHkpOyB9XG4gICAgICB9IGVsc2UgaWYgKGlzRGVmKGNoKSkge1xuICAgICAgICBpZiAoaXNEZWYob2xkVm5vZGUudGV4dCkpIHsgbm9kZU9wcy5zZXRUZXh0Q29udGVudChlbG0sICcnKTsgfVxuICAgICAgICBhZGRWbm9kZXMoZWxtLCBudWxsLCBjaCwgMCwgY2gubGVuZ3RoIC0gMSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNEZWYob2xkQ2gpKSB7XG4gICAgICAgIHJlbW92ZVZub2RlcyhlbG0sIG9sZENoLCAwLCBvbGRDaC5sZW5ndGggLSAxKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNEZWYob2xkVm5vZGUudGV4dCkpIHtcbiAgICAgICAgbm9kZU9wcy5zZXRUZXh0Q29udGVudChlbG0sICcnKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9sZFZub2RlLnRleHQgIT09IHZub2RlLnRleHQpIHtcbiAgICAgIG5vZGVPcHMuc2V0VGV4dENvbnRlbnQoZWxtLCB2bm9kZS50ZXh0KTtcbiAgICB9XG4gICAgaWYgKGhhc0RhdGEpIHtcbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5wb3N0cGF0Y2gpKSB7IGkob2xkVm5vZGUsIHZub2RlKTsgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZUluc2VydEhvb2sgKHZub2RlLCBxdWV1ZSwgaW5pdGlhbCkge1xuICAgIC8vIGRlbGF5IGluc2VydCBob29rcyBmb3IgY29tcG9uZW50IHJvb3Qgbm9kZXMsIGludm9rZSB0aGVtIGFmdGVyIHRoZVxuICAgIC8vIGVsZW1lbnQgaXMgcmVhbGx5IGluc2VydGVkXG4gICAgaWYgKGluaXRpYWwgJiYgdm5vZGUucGFyZW50KSB7XG4gICAgICB2bm9kZS5wYXJlbnQuZGF0YS5wZW5kaW5nSW5zZXJ0ID0gcXVldWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgcXVldWVbaV0uZGF0YS5ob29rLmluc2VydChxdWV1ZVtpXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIGJhaWxlZCA9IGZhbHNlO1xuICAvLyBsaXN0IG9mIG1vZHVsZXMgdGhhdCBjYW4gc2tpcCBjcmVhdGUgaG9vayBkdXJpbmcgaHlkcmF0aW9uIGJlY2F1c2UgdGhleVxuICAvLyBhcmUgYWxyZWFkeSByZW5kZXJlZCBvbiB0aGUgY2xpZW50IG9yIGhhcyBubyBuZWVkIGZvciBpbml0aWFsaXphdGlvblxuICB2YXIgaXNSZW5kZXJlZE1vZHVsZSA9IG1ha2VNYXAoJ2F0dHJzLHN0eWxlLGNsYXNzLHN0YXRpY0NsYXNzLHN0YXRpY1N0eWxlLGtleScpO1xuXG4gIC8vIE5vdGU6IHRoaXMgaXMgYSBicm93c2VyLW9ubHkgZnVuY3Rpb24gc28gd2UgY2FuIGFzc3VtZSBlbG1zIGFyZSBET00gbm9kZXMuXG4gIGZ1bmN0aW9uIGh5ZHJhdGUgKGVsbSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoIWFzc2VydE5vZGVNYXRjaChlbG0sIHZub2RlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9XG4gICAgdm5vZGUuZWxtID0gZWxtO1xuICAgIHZhciB0YWcgPSB2bm9kZS50YWc7XG4gICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgIHZhciBjaGlsZHJlbiA9IHZub2RlLmNoaWxkcmVuO1xuICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLmluaXQpKSB7IGkodm5vZGUsIHRydWUgLyogaHlkcmF0aW5nICovKTsgfVxuICAgICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkpIHtcbiAgICAgICAgLy8gY2hpbGQgY29tcG9uZW50LiBpdCBzaG91bGQgaGF2ZSBoeWRyYXRlZCBpdHMgb3duIHRyZWUuXG4gICAgICAgIGluaXRDb21wb25lbnQodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpc0RlZih0YWcpKSB7XG4gICAgICBpZiAoaXNEZWYoY2hpbGRyZW4pKSB7XG4gICAgICAgIC8vIGVtcHR5IGVsZW1lbnQsIGFsbG93IGNsaWVudCB0byBwaWNrIHVwIGFuZCBwb3B1bGF0ZSBjaGlsZHJlblxuICAgICAgICBpZiAoIWVsbS5oYXNDaGlsZE5vZGVzKCkpIHtcbiAgICAgICAgICBjcmVhdGVDaGlsZHJlbih2bm9kZSwgY2hpbGRyZW4sIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIGNoaWxkcmVuTWF0Y2ggPSB0cnVlO1xuICAgICAgICAgIHZhciBjaGlsZE5vZGUgPSBlbG0uZmlyc3RDaGlsZDtcbiAgICAgICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjaGlsZHJlbi5sZW5ndGg7IGkkMSsrKSB7XG4gICAgICAgICAgICBpZiAoIWNoaWxkTm9kZSB8fCAhaHlkcmF0ZShjaGlsZE5vZGUsIGNoaWxkcmVuW2kkMV0sIGluc2VydGVkVm5vZGVRdWV1ZSkpIHtcbiAgICAgICAgICAgICAgY2hpbGRyZW5NYXRjaCA9IGZhbHNlO1xuICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2hpbGROb2RlID0gY2hpbGROb2RlLm5leHRTaWJsaW5nO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBpZiBjaGlsZE5vZGUgaXMgbm90IG51bGwsIGl0IG1lYW5zIHRoZSBhY3R1YWwgY2hpbGROb2RlcyBsaXN0IGlzXG4gICAgICAgICAgLy8gbG9uZ2VyIHRoYW4gdGhlIHZpcnR1YWwgY2hpbGRyZW4gbGlzdC5cbiAgICAgICAgICBpZiAoIWNoaWxkcmVuTWF0Y2ggfHwgY2hpbGROb2RlKSB7XG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgICAgICFiYWlsZWQpIHtcbiAgICAgICAgICAgICAgYmFpbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdQYXJlbnQ6ICcsIGVsbSk7XG4gICAgICAgICAgICAgIGNvbnNvbGUud2FybignTWlzbWF0Y2hpbmcgY2hpbGROb2RlcyB2cy4gVk5vZGVzOiAnLCBlbG0uY2hpbGROb2RlcywgY2hpbGRyZW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIGRhdGEpIHtcbiAgICAgICAgICBpZiAoIWlzUmVuZGVyZWRNb2R1bGUoa2V5KSkge1xuICAgICAgICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZWxtLmRhdGEgIT09IHZub2RlLnRleHQpIHtcbiAgICAgIGVsbS5kYXRhID0gdm5vZGUudGV4dDtcbiAgICB9XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGZ1bmN0aW9uIGFzc2VydE5vZGVNYXRjaCAobm9kZSwgdm5vZGUpIHtcbiAgICBpZiAodm5vZGUudGFnKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICB2bm9kZS50YWcuaW5kZXhPZigndnVlLWNvbXBvbmVudCcpID09PSAwIHx8XG4gICAgICAgIHZub2RlLnRhZy50b0xvd2VyQ2FzZSgpID09PSAobm9kZS50YWdOYW1lICYmIG5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpKVxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbm9kZS5ub2RlVHlwZSA9PT0gKHZub2RlLmlzQ29tbWVudCA/IDggOiAzKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBwYXRjaCAob2xkVm5vZGUsIHZub2RlLCBoeWRyYXRpbmcsIHJlbW92ZU9ubHksIHBhcmVudEVsbSwgcmVmRWxtKSB7XG4gICAgaWYgKCF2bm9kZSkge1xuICAgICAgaWYgKG9sZFZub2RlKSB7IGludm9rZURlc3Ryb3lIb29rKG9sZFZub2RlKTsgfVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIGlzSW5pdGlhbFBhdGNoID0gZmFsc2U7XG4gICAgdmFyIGluc2VydGVkVm5vZGVRdWV1ZSA9IFtdO1xuXG4gICAgaWYgKCFvbGRWbm9kZSkge1xuICAgICAgLy8gZW1wdHkgbW91bnQgKGxpa2VseSBhcyBjb21wb25lbnQpLCBjcmVhdGUgbmV3IHJvb3QgZWxlbWVudFxuICAgICAgaXNJbml0aWFsUGF0Y2ggPSB0cnVlO1xuICAgICAgY3JlYXRlRWxtKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGlzUmVhbEVsZW1lbnQgPSBpc0RlZihvbGRWbm9kZS5ub2RlVHlwZSk7XG4gICAgICBpZiAoIWlzUmVhbEVsZW1lbnQgJiYgc2FtZVZub2RlKG9sZFZub2RlLCB2bm9kZSkpIHtcbiAgICAgICAgLy8gcGF0Y2ggZXhpc3Rpbmcgcm9vdCBub2RlXG4gICAgICAgIHBhdGNoVm5vZGUob2xkVm5vZGUsIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHJlbW92ZU9ubHkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzUmVhbEVsZW1lbnQpIHtcbiAgICAgICAgICAvLyBtb3VudGluZyB0byBhIHJlYWwgZWxlbWVudFxuICAgICAgICAgIC8vIGNoZWNrIGlmIHRoaXMgaXMgc2VydmVyLXJlbmRlcmVkIGNvbnRlbnQgYW5kIGlmIHdlIGNhbiBwZXJmb3JtXG4gICAgICAgICAgLy8gYSBzdWNjZXNzZnVsIGh5ZHJhdGlvbi5cbiAgICAgICAgICBpZiAob2xkVm5vZGUubm9kZVR5cGUgPT09IDEgJiYgb2xkVm5vZGUuaGFzQXR0cmlidXRlKCdzZXJ2ZXItcmVuZGVyZWQnKSkge1xuICAgICAgICAgICAgb2xkVm5vZGUucmVtb3ZlQXR0cmlidXRlKCdzZXJ2ZXItcmVuZGVyZWQnKTtcbiAgICAgICAgICAgIGh5ZHJhdGluZyA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChoeWRyYXRpbmcpIHtcbiAgICAgICAgICAgIGlmIChoeWRyYXRlKG9sZFZub2RlLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSkge1xuICAgICAgICAgICAgICBpbnZva2VJbnNlcnRIb29rKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHRydWUpO1xuICAgICAgICAgICAgICByZXR1cm4gb2xkVm5vZGVcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgICAgICdUaGUgY2xpZW50LXNpZGUgcmVuZGVyZWQgdmlydHVhbCBET00gdHJlZSBpcyBub3QgbWF0Y2hpbmcgJyArXG4gICAgICAgICAgICAgICAgJ3NlcnZlci1yZW5kZXJlZCBjb250ZW50LiBUaGlzIGlzIGxpa2VseSBjYXVzZWQgYnkgaW5jb3JyZWN0ICcgK1xuICAgICAgICAgICAgICAgICdIVE1MIG1hcmt1cCwgZm9yIGV4YW1wbGUgbmVzdGluZyBibG9jay1sZXZlbCBlbGVtZW50cyBpbnNpZGUgJyArXG4gICAgICAgICAgICAgICAgJzxwPiwgb3IgbWlzc2luZyA8dGJvZHk+LiBCYWlsaW5nIGh5ZHJhdGlvbiBhbmQgcGVyZm9ybWluZyAnICtcbiAgICAgICAgICAgICAgICAnZnVsbCBjbGllbnQtc2lkZSByZW5kZXIuJ1xuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBlaXRoZXIgbm90IHNlcnZlci1yZW5kZXJlZCwgb3IgaHlkcmF0aW9uIGZhaWxlZC5cbiAgICAgICAgICAvLyBjcmVhdGUgYW4gZW1wdHkgbm9kZSBhbmQgcmVwbGFjZSBpdFxuICAgICAgICAgIG9sZFZub2RlID0gZW1wdHlOb2RlQXQob2xkVm5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJlcGxhY2luZyBleGlzdGluZyBlbGVtZW50XG4gICAgICAgIHZhciBvbGRFbG0gPSBvbGRWbm9kZS5lbG07XG4gICAgICAgIHZhciBwYXJlbnRFbG0kMSA9IG5vZGVPcHMucGFyZW50Tm9kZShvbGRFbG0pO1xuICAgICAgICBjcmVhdGVFbG0oXG4gICAgICAgICAgdm5vZGUsXG4gICAgICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLFxuICAgICAgICAgIC8vIGV4dHJlbWVseSByYXJlIGVkZ2UgY2FzZTogZG8gbm90IGluc2VydCBpZiBvbGQgZWxlbWVudCBpcyBpbiBhXG4gICAgICAgICAgLy8gbGVhdmluZyB0cmFuc2l0aW9uLiBPbmx5IGhhcHBlbnMgd2hlbiBjb21iaW5pbmcgdHJhbnNpdGlvbiArXG4gICAgICAgICAgLy8ga2VlcC1hbGl2ZSArIEhPQ3MuICgjNDU5MClcbiAgICAgICAgICBvbGRFbG0uX2xlYXZlQ2IgPyBudWxsIDogcGFyZW50RWxtJDEsXG4gICAgICAgICAgbm9kZU9wcy5uZXh0U2libGluZyhvbGRFbG0pXG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKHZub2RlLnBhcmVudCkge1xuICAgICAgICAgIC8vIGNvbXBvbmVudCByb290IGVsZW1lbnQgcmVwbGFjZWQuXG4gICAgICAgICAgLy8gdXBkYXRlIHBhcmVudCBwbGFjZWhvbGRlciBub2RlIGVsZW1lbnQsIHJlY3Vyc2l2ZWx5XG4gICAgICAgICAgdmFyIGFuY2VzdG9yID0gdm5vZGUucGFyZW50O1xuICAgICAgICAgIHdoaWxlIChhbmNlc3Rvcikge1xuICAgICAgICAgICAgYW5jZXN0b3IuZWxtID0gdm5vZGUuZWxtO1xuICAgICAgICAgICAgYW5jZXN0b3IgPSBhbmNlc3Rvci5wYXJlbnQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpc1BhdGNoYWJsZSh2bm9kZSkpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2JzLmNyZWF0ZS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICBjYnMuY3JlYXRlW2ldKGVtcHR5Tm9kZSwgdm5vZGUucGFyZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFyZW50RWxtJDEgIT09IG51bGwpIHtcbiAgICAgICAgICByZW1vdmVWbm9kZXMocGFyZW50RWxtJDEsIFtvbGRWbm9kZV0sIDAsIDApO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRGVmKG9sZFZub2RlLnRhZykpIHtcbiAgICAgICAgICBpbnZva2VEZXN0cm95SG9vayhvbGRWbm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpbnZva2VJbnNlcnRIb29rKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIGlzSW5pdGlhbFBhdGNoKTtcbiAgICByZXR1cm4gdm5vZGUuZWxtXG4gIH1cbn1cblxuLyogICovXG5cbnZhciBkaXJlY3RpdmVzID0ge1xuICBjcmVhdGU6IHVwZGF0ZURpcmVjdGl2ZXMsXG4gIHVwZGF0ZTogdXBkYXRlRGlyZWN0aXZlcyxcbiAgZGVzdHJveTogZnVuY3Rpb24gdW5iaW5kRGlyZWN0aXZlcyAodm5vZGUpIHtcbiAgICB1cGRhdGVEaXJlY3RpdmVzKHZub2RlLCBlbXB0eU5vZGUpO1xuICB9XG59O1xuXG5mdW5jdGlvbiB1cGRhdGVEaXJlY3RpdmVzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgaWYgKG9sZFZub2RlLmRhdGEuZGlyZWN0aXZlcyB8fCB2bm9kZS5kYXRhLmRpcmVjdGl2ZXMpIHtcbiAgICBfdXBkYXRlKG9sZFZub2RlLCB2bm9kZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gX3VwZGF0ZSAob2xkVm5vZGUsIHZub2RlKSB7XG4gIHZhciBpc0NyZWF0ZSA9IG9sZFZub2RlID09PSBlbXB0eU5vZGU7XG4gIHZhciBpc0Rlc3Ryb3kgPSB2bm9kZSA9PT0gZW1wdHlOb2RlO1xuICB2YXIgb2xkRGlycyA9IG5vcm1hbGl6ZURpcmVjdGl2ZXMkMShvbGRWbm9kZS5kYXRhLmRpcmVjdGl2ZXMsIG9sZFZub2RlLmNvbnRleHQpO1xuICB2YXIgbmV3RGlycyA9IG5vcm1hbGl6ZURpcmVjdGl2ZXMkMSh2bm9kZS5kYXRhLmRpcmVjdGl2ZXMsIHZub2RlLmNvbnRleHQpO1xuXG4gIHZhciBkaXJzV2l0aEluc2VydCA9IFtdO1xuICB2YXIgZGlyc1dpdGhQb3N0cGF0Y2ggPSBbXTtcblxuICB2YXIga2V5LCBvbGREaXIsIGRpcjtcbiAgZm9yIChrZXkgaW4gbmV3RGlycykge1xuICAgIG9sZERpciA9IG9sZERpcnNba2V5XTtcbiAgICBkaXIgPSBuZXdEaXJzW2tleV07XG4gICAgaWYgKCFvbGREaXIpIHtcbiAgICAgIC8vIG5ldyBkaXJlY3RpdmUsIGJpbmRcbiAgICAgIGNhbGxIb29rJDEoZGlyLCAnYmluZCcsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICBpZiAoZGlyLmRlZiAmJiBkaXIuZGVmLmluc2VydGVkKSB7XG4gICAgICAgIGRpcnNXaXRoSW5zZXJ0LnB1c2goZGlyKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXhpc3RpbmcgZGlyZWN0aXZlLCB1cGRhdGVcbiAgICAgIGRpci5vbGRWYWx1ZSA9IG9sZERpci52YWx1ZTtcbiAgICAgIGNhbGxIb29rJDEoZGlyLCAndXBkYXRlJywgdm5vZGUsIG9sZFZub2RlKTtcbiAgICAgIGlmIChkaXIuZGVmICYmIGRpci5kZWYuY29tcG9uZW50VXBkYXRlZCkge1xuICAgICAgICBkaXJzV2l0aFBvc3RwYXRjaC5wdXNoKGRpcik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKGRpcnNXaXRoSW5zZXJ0Lmxlbmd0aCkge1xuICAgIHZhciBjYWxsSW5zZXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaXJzV2l0aEluc2VydC5sZW5ndGg7IGkrKykge1xuICAgICAgICBjYWxsSG9vayQxKGRpcnNXaXRoSW5zZXJ0W2ldLCAnaW5zZXJ0ZWQnLCB2bm9kZSwgb2xkVm5vZGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgaWYgKGlzQ3JlYXRlKSB7XG4gICAgICBtZXJnZVZOb2RlSG9vayh2bm9kZS5kYXRhLmhvb2sgfHwgKHZub2RlLmRhdGEuaG9vayA9IHt9KSwgJ2luc2VydCcsIGNhbGxJbnNlcnQsICdkaXItaW5zZXJ0Jyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxJbnNlcnQoKTtcbiAgICB9XG4gIH1cblxuICBpZiAoZGlyc1dpdGhQb3N0cGF0Y2gubGVuZ3RoKSB7XG4gICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUuZGF0YS5ob29rIHx8ICh2bm9kZS5kYXRhLmhvb2sgPSB7fSksICdwb3N0cGF0Y2gnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpcnNXaXRoUG9zdHBhdGNoLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNhbGxIb29rJDEoZGlyc1dpdGhQb3N0cGF0Y2hbaV0sICdjb21wb25lbnRVcGRhdGVkJywgdm5vZGUsIG9sZFZub2RlKTtcbiAgICAgIH1cbiAgICB9LCAnZGlyLXBvc3RwYXRjaCcpO1xuICB9XG5cbiAgaWYgKCFpc0NyZWF0ZSkge1xuICAgIGZvciAoa2V5IGluIG9sZERpcnMpIHtcbiAgICAgIGlmICghbmV3RGlyc1trZXldKSB7XG4gICAgICAgIC8vIG5vIGxvbmdlciBwcmVzZW50LCB1bmJpbmRcbiAgICAgICAgY2FsbEhvb2skMShvbGREaXJzW2tleV0sICd1bmJpbmQnLCBvbGRWbm9kZSwgb2xkVm5vZGUsIGlzRGVzdHJveSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbnZhciBlbXB0eU1vZGlmaWVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZURpcmVjdGl2ZXMkMSAoXG4gIGRpcnMsXG4gIHZtXG4pIHtcbiAgdmFyIHJlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGlmICghZGlycykge1xuICAgIHJldHVybiByZXNcbiAgfVxuICB2YXIgaSwgZGlyO1xuICBmb3IgKGkgPSAwOyBpIDwgZGlycy5sZW5ndGg7IGkrKykge1xuICAgIGRpciA9IGRpcnNbaV07XG4gICAgaWYgKCFkaXIubW9kaWZpZXJzKSB7XG4gICAgICBkaXIubW9kaWZpZXJzID0gZW1wdHlNb2RpZmllcnM7XG4gICAgfVxuICAgIHJlc1tnZXRSYXdEaXJOYW1lKGRpcildID0gZGlyO1xuICAgIGRpci5kZWYgPSByZXNvbHZlQXNzZXQodm0uJG9wdGlvbnMsICdkaXJlY3RpdmVzJywgZGlyLm5hbWUsIHRydWUpO1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gZ2V0UmF3RGlyTmFtZSAoZGlyKSB7XG4gIHJldHVybiBkaXIucmF3TmFtZSB8fCAoKGRpci5uYW1lKSArIFwiLlwiICsgKE9iamVjdC5rZXlzKGRpci5tb2RpZmllcnMgfHwge30pLmpvaW4oJy4nKSkpXG59XG5cbmZ1bmN0aW9uIGNhbGxIb29rJDEgKGRpciwgaG9vaywgdm5vZGUsIG9sZFZub2RlLCBpc0Rlc3Ryb3kpIHtcbiAgdmFyIGZuID0gZGlyLmRlZiAmJiBkaXIuZGVmW2hvb2tdO1xuICBpZiAoZm4pIHtcbiAgICBmbih2bm9kZS5lbG0sIGRpciwgdm5vZGUsIG9sZFZub2RlLCBpc0Rlc3Ryb3kpO1xuICB9XG59XG5cbnZhciBiYXNlTW9kdWxlcyA9IFtcbiAgcmVmLFxuICBkaXJlY3RpdmVzXG5dO1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gdXBkYXRlQXR0cnMgKG9sZFZub2RlLCB2bm9kZSkge1xuICBpZiAoIW9sZFZub2RlLmRhdGEuYXR0cnMgJiYgIXZub2RlLmRhdGEuYXR0cnMpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIga2V5LCBjdXIsIG9sZDtcbiAgdmFyIGVsbSA9IHZub2RlLmVsbTtcbiAgdmFyIG9sZEF0dHJzID0gb2xkVm5vZGUuZGF0YS5hdHRycyB8fCB7fTtcbiAgdmFyIGF0dHJzID0gdm5vZGUuZGF0YS5hdHRycyB8fCB7fTtcbiAgLy8gY2xvbmUgb2JzZXJ2ZWQgb2JqZWN0cywgYXMgdGhlIHVzZXIgcHJvYmFibHkgd2FudHMgdG8gbXV0YXRlIGl0XG4gIGlmIChhdHRycy5fX29iX18pIHtcbiAgICBhdHRycyA9IHZub2RlLmRhdGEuYXR0cnMgPSBleHRlbmQoe30sIGF0dHJzKTtcbiAgfVxuXG4gIGZvciAoa2V5IGluIGF0dHJzKSB7XG4gICAgY3VyID0gYXR0cnNba2V5XTtcbiAgICBvbGQgPSBvbGRBdHRyc1trZXldO1xuICAgIGlmIChvbGQgIT09IGN1cikge1xuICAgICAgc2V0QXR0cihlbG0sIGtleSwgY3VyKTtcbiAgICB9XG4gIH1cbiAgLy8gIzQzOTE6IGluIElFOSwgc2V0dGluZyB0eXBlIGNhbiByZXNldCB2YWx1ZSBmb3IgaW5wdXRbdHlwZT1yYWRpb11cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0lFOSAmJiBhdHRycy52YWx1ZSAhPT0gb2xkQXR0cnMudmFsdWUpIHtcbiAgICBzZXRBdHRyKGVsbSwgJ3ZhbHVlJywgYXR0cnMudmFsdWUpO1xuICB9XG4gIGZvciAoa2V5IGluIG9sZEF0dHJzKSB7XG4gICAgaWYgKGF0dHJzW2tleV0gPT0gbnVsbCkge1xuICAgICAgaWYgKGlzWGxpbmsoa2V5KSkge1xuICAgICAgICBlbG0ucmVtb3ZlQXR0cmlidXRlTlMoeGxpbmtOUywgZ2V0WGxpbmtQcm9wKGtleSkpO1xuICAgICAgfSBlbHNlIGlmICghaXNFbnVtZXJhdGVkQXR0cihrZXkpKSB7XG4gICAgICAgIGVsbS5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gc2V0QXR0ciAoZWwsIGtleSwgdmFsdWUpIHtcbiAgaWYgKGlzQm9vbGVhbkF0dHIoa2V5KSkge1xuICAgIC8vIHNldCBhdHRyaWJ1dGUgZm9yIGJsYW5rIHZhbHVlXG4gICAgLy8gZS5nLiA8b3B0aW9uIGRpc2FibGVkPlNlbGVjdCBvbmU8L29wdGlvbj5cbiAgICBpZiAoaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkpIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoa2V5LCBrZXkpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc0VudW1lcmF0ZWRBdHRyKGtleSkpIHtcbiAgICBlbC5zZXRBdHRyaWJ1dGUoa2V5LCBpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSB8fCB2YWx1ZSA9PT0gJ2ZhbHNlJyA/ICdmYWxzZScgOiAndHJ1ZScpO1xuICB9IGVsc2UgaWYgKGlzWGxpbmsoa2V5KSkge1xuICAgIGlmIChpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlTlMoeGxpbmtOUywgZ2V0WGxpbmtQcm9wKGtleSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGVOUyh4bGlua05TLCBrZXksIHZhbHVlKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGlzRmFsc3lBdHRyVmFsdWUodmFsdWUpKSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgYXR0cnMgPSB7XG4gIGNyZWF0ZTogdXBkYXRlQXR0cnMsXG4gIHVwZGF0ZTogdXBkYXRlQXR0cnNcbn07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiB1cGRhdGVDbGFzcyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIHZhciBlbCA9IHZub2RlLmVsbTtcbiAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICB2YXIgb2xkRGF0YSA9IG9sZFZub2RlLmRhdGE7XG4gIGlmICghZGF0YS5zdGF0aWNDbGFzcyAmJiAhZGF0YS5jbGFzcyAmJlxuICAgICAgKCFvbGREYXRhIHx8ICghb2xkRGF0YS5zdGF0aWNDbGFzcyAmJiAhb2xkRGF0YS5jbGFzcykpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgY2xzID0gZ2VuQ2xhc3NGb3JWbm9kZSh2bm9kZSk7XG5cbiAgLy8gaGFuZGxlIHRyYW5zaXRpb24gY2xhc3Nlc1xuICB2YXIgdHJhbnNpdGlvbkNsYXNzID0gZWwuX3RyYW5zaXRpb25DbGFzc2VzO1xuICBpZiAodHJhbnNpdGlvbkNsYXNzKSB7XG4gICAgY2xzID0gY29uY2F0KGNscywgc3RyaW5naWZ5Q2xhc3ModHJhbnNpdGlvbkNsYXNzKSk7XG4gIH1cblxuICAvLyBzZXQgdGhlIGNsYXNzXG4gIGlmIChjbHMgIT09IGVsLl9wcmV2Q2xhc3MpIHtcbiAgICBlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgY2xzKTtcbiAgICBlbC5fcHJldkNsYXNzID0gY2xzO1xuICB9XG59XG5cbnZhciBrbGFzcyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVDbGFzcyxcbiAgdXBkYXRlOiB1cGRhdGVDbGFzc1xufTtcblxuLyogICovXG5cbnZhciB0YXJnZXQkMTtcblxuZnVuY3Rpb24gYWRkJDIgKFxuICBldmVudCxcbiAgaGFuZGxlcixcbiAgb25jZSxcbiAgY2FwdHVyZVxuKSB7XG4gIGlmIChvbmNlKSB7XG4gICAgdmFyIG9sZEhhbmRsZXIgPSBoYW5kbGVyO1xuICAgIHZhciBfdGFyZ2V0ID0gdGFyZ2V0JDE7IC8vIHNhdmUgY3VycmVudCB0YXJnZXQgZWxlbWVudCBpbiBjbG9zdXJlXG4gICAgaGFuZGxlciA9IGZ1bmN0aW9uIChldikge1xuICAgICAgcmVtb3ZlJDMoZXZlbnQsIGhhbmRsZXIsIGNhcHR1cmUsIF90YXJnZXQpO1xuICAgICAgYXJndW1lbnRzLmxlbmd0aCA9PT0gMVxuICAgICAgICA/IG9sZEhhbmRsZXIoZXYpXG4gICAgICAgIDogb2xkSGFuZGxlci5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH1cbiAgdGFyZ2V0JDEuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlciwgY2FwdHVyZSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSQzIChcbiAgZXZlbnQsXG4gIGhhbmRsZXIsXG4gIGNhcHR1cmUsXG4gIF90YXJnZXRcbikge1xuICAoX3RhcmdldCB8fCB0YXJnZXQkMSkucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlciwgY2FwdHVyZSk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZURPTUxpc3RlbmVycyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIGlmICghb2xkVm5vZGUuZGF0YS5vbiAmJiAhdm5vZGUuZGF0YS5vbikge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBvbiA9IHZub2RlLmRhdGEub24gfHwge307XG4gIHZhciBvbGRPbiA9IG9sZFZub2RlLmRhdGEub24gfHwge307XG4gIHRhcmdldCQxID0gdm5vZGUuZWxtO1xuICB1cGRhdGVMaXN0ZW5lcnMob24sIG9sZE9uLCBhZGQkMiwgcmVtb3ZlJDMsIHZub2RlLmNvbnRleHQpO1xufVxuXG52YXIgZXZlbnRzID0ge1xuICBjcmVhdGU6IHVwZGF0ZURPTUxpc3RlbmVycyxcbiAgdXBkYXRlOiB1cGRhdGVET01MaXN0ZW5lcnNcbn07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiB1cGRhdGVET01Qcm9wcyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIGlmICghb2xkVm5vZGUuZGF0YS5kb21Qcm9wcyAmJiAhdm5vZGUuZGF0YS5kb21Qcm9wcykge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBrZXksIGN1cjtcbiAgdmFyIGVsbSA9IHZub2RlLmVsbTtcbiAgdmFyIG9sZFByb3BzID0gb2xkVm5vZGUuZGF0YS5kb21Qcm9wcyB8fCB7fTtcbiAgdmFyIHByb3BzID0gdm5vZGUuZGF0YS5kb21Qcm9wcyB8fCB7fTtcbiAgLy8gY2xvbmUgb2JzZXJ2ZWQgb2JqZWN0cywgYXMgdGhlIHVzZXIgcHJvYmFibHkgd2FudHMgdG8gbXV0YXRlIGl0XG4gIGlmIChwcm9wcy5fX29iX18pIHtcbiAgICBwcm9wcyA9IHZub2RlLmRhdGEuZG9tUHJvcHMgPSBleHRlbmQoe30sIHByb3BzKTtcbiAgfVxuXG4gIGZvciAoa2V5IGluIG9sZFByb3BzKSB7XG4gICAgaWYgKHByb3BzW2tleV0gPT0gbnVsbCkge1xuICAgICAgZWxtW2tleV0gPSAnJztcbiAgICB9XG4gIH1cbiAgZm9yIChrZXkgaW4gcHJvcHMpIHtcbiAgICBjdXIgPSBwcm9wc1trZXldO1xuICAgIC8vIGlnbm9yZSBjaGlsZHJlbiBpZiB0aGUgbm9kZSBoYXMgdGV4dENvbnRlbnQgb3IgaW5uZXJIVE1MLFxuICAgIC8vIGFzIHRoZXNlIHdpbGwgdGhyb3cgYXdheSBleGlzdGluZyBET00gbm9kZXMgYW5kIGNhdXNlIHJlbW92YWwgZXJyb3JzXG4gICAgLy8gb24gc3Vic2VxdWVudCBwYXRjaGVzICgjMzM2MClcbiAgICBpZiAoa2V5ID09PSAndGV4dENvbnRlbnQnIHx8IGtleSA9PT0gJ2lubmVySFRNTCcpIHtcbiAgICAgIGlmICh2bm9kZS5jaGlsZHJlbikgeyB2bm9kZS5jaGlsZHJlbi5sZW5ndGggPSAwOyB9XG4gICAgICBpZiAoY3VyID09PSBvbGRQcm9wc1trZXldKSB7IGNvbnRpbnVlIH1cbiAgICB9XG5cbiAgICBpZiAoa2V5ID09PSAndmFsdWUnKSB7XG4gICAgICAvLyBzdG9yZSB2YWx1ZSBhcyBfdmFsdWUgYXMgd2VsbCBzaW5jZVxuICAgICAgLy8gbm9uLXN0cmluZyB2YWx1ZXMgd2lsbCBiZSBzdHJpbmdpZmllZFxuICAgICAgZWxtLl92YWx1ZSA9IGN1cjtcbiAgICAgIC8vIGF2b2lkIHJlc2V0dGluZyBjdXJzb3IgcG9zaXRpb24gd2hlbiB2YWx1ZSBpcyB0aGUgc2FtZVxuICAgICAgdmFyIHN0ckN1ciA9IGN1ciA9PSBudWxsID8gJycgOiBTdHJpbmcoY3VyKTtcbiAgICAgIGlmIChzaG91bGRVcGRhdGVWYWx1ZShlbG0sIHZub2RlLCBzdHJDdXIpKSB7XG4gICAgICAgIGVsbS52YWx1ZSA9IHN0ckN1cjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZWxtW2tleV0gPSBjdXI7XG4gICAgfVxuICB9XG59XG5cbi8vIGNoZWNrIHBsYXRmb3Jtcy93ZWIvdXRpbC9hdHRycy5qcyBhY2NlcHRWYWx1ZVxuXG5cbmZ1bmN0aW9uIHNob3VsZFVwZGF0ZVZhbHVlIChcbiAgZWxtLFxuICB2bm9kZSxcbiAgY2hlY2tWYWxcbikge1xuICByZXR1cm4gKCFlbG0uY29tcG9zaW5nICYmIChcbiAgICB2bm9kZS50YWcgPT09ICdvcHRpb24nIHx8XG4gICAgaXNEaXJ0eShlbG0sIGNoZWNrVmFsKSB8fFxuICAgIGlzSW5wdXRDaGFuZ2VkKHZub2RlLCBjaGVja1ZhbClcbiAgKSlcbn1cblxuZnVuY3Rpb24gaXNEaXJ0eSAoZWxtLCBjaGVja1ZhbCkge1xuICAvLyByZXR1cm4gdHJ1ZSB3aGVuIHRleHRib3ggKC5udW1iZXIgYW5kIC50cmltKSBsb3NlcyBmb2N1cyBhbmQgaXRzIHZhbHVlIGlzIG5vdCBlcXVhbCB0byB0aGUgdXBkYXRlZCB2YWx1ZVxuICByZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAhPT0gZWxtICYmIGVsbS52YWx1ZSAhPT0gY2hlY2tWYWxcbn1cblxuZnVuY3Rpb24gaXNJbnB1dENoYW5nZWQgKHZub2RlLCBuZXdWYWwpIHtcbiAgdmFyIHZhbHVlID0gdm5vZGUuZWxtLnZhbHVlO1xuICB2YXIgbW9kaWZpZXJzID0gdm5vZGUuZWxtLl92TW9kaWZpZXJzOyAvLyBpbmplY3RlZCBieSB2LW1vZGVsIHJ1bnRpbWVcbiAgaWYgKChtb2RpZmllcnMgJiYgbW9kaWZpZXJzLm51bWJlcikgfHwgdm5vZGUuZWxtLnR5cGUgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIHRvTnVtYmVyKHZhbHVlKSAhPT0gdG9OdW1iZXIobmV3VmFsKVxuICB9XG4gIGlmIChtb2RpZmllcnMgJiYgbW9kaWZpZXJzLnRyaW0pIHtcbiAgICByZXR1cm4gdmFsdWUudHJpbSgpICE9PSBuZXdWYWwudHJpbSgpXG4gIH1cbiAgcmV0dXJuIHZhbHVlICE9PSBuZXdWYWxcbn1cblxudmFyIGRvbVByb3BzID0ge1xuICBjcmVhdGU6IHVwZGF0ZURPTVByb3BzLFxuICB1cGRhdGU6IHVwZGF0ZURPTVByb3BzXG59O1xuXG4vKiAgKi9cblxudmFyIHBhcnNlU3R5bGVUZXh0ID0gY2FjaGVkKGZ1bmN0aW9uIChjc3NUZXh0KSB7XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIGxpc3REZWxpbWl0ZXIgPSAvOyg/IVteKF0qXFwpKS9nO1xuICB2YXIgcHJvcGVydHlEZWxpbWl0ZXIgPSAvOiguKykvO1xuICBjc3NUZXh0LnNwbGl0KGxpc3REZWxpbWl0ZXIpLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICBpZiAoaXRlbSkge1xuICAgICAgdmFyIHRtcCA9IGl0ZW0uc3BsaXQocHJvcGVydHlEZWxpbWl0ZXIpO1xuICAgICAgdG1wLmxlbmd0aCA+IDEgJiYgKHJlc1t0bXBbMF0udHJpbSgpXSA9IHRtcFsxXS50cmltKCkpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXNcbn0pO1xuXG4vLyBtZXJnZSBzdGF0aWMgYW5kIGR5bmFtaWMgc3R5bGUgZGF0YSBvbiB0aGUgc2FtZSB2bm9kZVxuZnVuY3Rpb24gbm9ybWFsaXplU3R5bGVEYXRhIChkYXRhKSB7XG4gIHZhciBzdHlsZSA9IG5vcm1hbGl6ZVN0eWxlQmluZGluZyhkYXRhLnN0eWxlKTtcbiAgLy8gc3RhdGljIHN0eWxlIGlzIHByZS1wcm9jZXNzZWQgaW50byBhbiBvYmplY3QgZHVyaW5nIGNvbXBpbGF0aW9uXG4gIC8vIGFuZCBpcyBhbHdheXMgYSBmcmVzaCBvYmplY3QsIHNvIGl0J3Mgc2FmZSB0byBtZXJnZSBpbnRvIGl0XG4gIHJldHVybiBkYXRhLnN0YXRpY1N0eWxlXG4gICAgPyBleHRlbmQoZGF0YS5zdGF0aWNTdHlsZSwgc3R5bGUpXG4gICAgOiBzdHlsZVxufVxuXG4vLyBub3JtYWxpemUgcG9zc2libGUgYXJyYXkgLyBzdHJpbmcgdmFsdWVzIGludG8gT2JqZWN0XG5mdW5jdGlvbiBub3JtYWxpemVTdHlsZUJpbmRpbmcgKGJpbmRpbmdTdHlsZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShiaW5kaW5nU3R5bGUpKSB7XG4gICAgcmV0dXJuIHRvT2JqZWN0KGJpbmRpbmdTdHlsZSlcbiAgfVxuICBpZiAodHlwZW9mIGJpbmRpbmdTdHlsZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gcGFyc2VTdHlsZVRleHQoYmluZGluZ1N0eWxlKVxuICB9XG4gIHJldHVybiBiaW5kaW5nU3R5bGVcbn1cblxuLyoqXG4gKiBwYXJlbnQgY29tcG9uZW50IHN0eWxlIHNob3VsZCBiZSBhZnRlciBjaGlsZCdzXG4gKiBzbyB0aGF0IHBhcmVudCBjb21wb25lbnQncyBzdHlsZSBjb3VsZCBvdmVycmlkZSBpdFxuICovXG5mdW5jdGlvbiBnZXRTdHlsZSAodm5vZGUsIGNoZWNrQ2hpbGQpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICB2YXIgc3R5bGVEYXRhO1xuXG4gIGlmIChjaGVja0NoaWxkKSB7XG4gICAgdmFyIGNoaWxkTm9kZSA9IHZub2RlO1xuICAgIHdoaWxlIChjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UpIHtcbiAgICAgIGNoaWxkTm9kZSA9IGNoaWxkTm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XG4gICAgICBpZiAoY2hpbGROb2RlLmRhdGEgJiYgKHN0eWxlRGF0YSA9IG5vcm1hbGl6ZVN0eWxlRGF0YShjaGlsZE5vZGUuZGF0YSkpKSB7XG4gICAgICAgIGV4dGVuZChyZXMsIHN0eWxlRGF0YSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKChzdHlsZURhdGEgPSBub3JtYWxpemVTdHlsZURhdGEodm5vZGUuZGF0YSkpKSB7XG4gICAgZXh0ZW5kKHJlcywgc3R5bGVEYXRhKTtcbiAgfVxuXG4gIHZhciBwYXJlbnROb2RlID0gdm5vZGU7XG4gIHdoaWxlICgocGFyZW50Tm9kZSA9IHBhcmVudE5vZGUucGFyZW50KSkge1xuICAgIGlmIChwYXJlbnROb2RlLmRhdGEgJiYgKHN0eWxlRGF0YSA9IG5vcm1hbGl6ZVN0eWxlRGF0YShwYXJlbnROb2RlLmRhdGEpKSkge1xuICAgICAgZXh0ZW5kKHJlcywgc3R5bGVEYXRhKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxudmFyIGNzc1ZhclJFID0gL14tLS87XG52YXIgaW1wb3J0YW50UkUgPSAvXFxzKiFpbXBvcnRhbnQkLztcbnZhciBzZXRQcm9wID0gZnVuY3Rpb24gKGVsLCBuYW1lLCB2YWwpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChjc3NWYXJSRS50ZXN0KG5hbWUpKSB7XG4gICAgZWwuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgdmFsKTtcbiAgfSBlbHNlIGlmIChpbXBvcnRhbnRSRS50ZXN0KHZhbCkpIHtcbiAgICBlbC5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2YWwucmVwbGFjZShpbXBvcnRhbnRSRSwgJycpLCAnaW1wb3J0YW50Jyk7XG4gIH0gZWxzZSB7XG4gICAgZWwuc3R5bGVbbm9ybWFsaXplKG5hbWUpXSA9IHZhbDtcbiAgfVxufTtcblxudmFyIHByZWZpeGVzID0gWydXZWJraXQnLCAnTW96JywgJ21zJ107XG5cbnZhciB0ZXN0RWw7XG52YXIgbm9ybWFsaXplID0gY2FjaGVkKGZ1bmN0aW9uIChwcm9wKSB7XG4gIHRlc3RFbCA9IHRlc3RFbCB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgcHJvcCA9IGNhbWVsaXplKHByb3ApO1xuICBpZiAocHJvcCAhPT0gJ2ZpbHRlcicgJiYgKHByb3AgaW4gdGVzdEVsLnN0eWxlKSkge1xuICAgIHJldHVybiBwcm9wXG4gIH1cbiAgdmFyIHVwcGVyID0gcHJvcC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHByb3Auc2xpY2UoMSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJlZml4ZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcHJlZml4ZWQgPSBwcmVmaXhlc1tpXSArIHVwcGVyO1xuICAgIGlmIChwcmVmaXhlZCBpbiB0ZXN0RWwuc3R5bGUpIHtcbiAgICAgIHJldHVybiBwcmVmaXhlZFxuICAgIH1cbiAgfVxufSk7XG5cbmZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICB2YXIgb2xkRGF0YSA9IG9sZFZub2RlLmRhdGE7XG5cbiAgaWYgKCFkYXRhLnN0YXRpY1N0eWxlICYmICFkYXRhLnN0eWxlICYmXG4gICAgICAhb2xkRGF0YS5zdGF0aWNTdHlsZSAmJiAhb2xkRGF0YS5zdHlsZSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGN1ciwgbmFtZTtcbiAgdmFyIGVsID0gdm5vZGUuZWxtO1xuICB2YXIgb2xkU3RhdGljU3R5bGUgPSBvbGRWbm9kZS5kYXRhLnN0YXRpY1N0eWxlO1xuICB2YXIgb2xkU3R5bGVCaW5kaW5nID0gb2xkVm5vZGUuZGF0YS5zdHlsZSB8fCB7fTtcblxuICAvLyBpZiBzdGF0aWMgc3R5bGUgZXhpc3RzLCBzdHlsZWJpbmRpbmcgYWxyZWFkeSBtZXJnZWQgaW50byBpdCB3aGVuIGRvaW5nIG5vcm1hbGl6ZVN0eWxlRGF0YVxuICB2YXIgb2xkU3R5bGUgPSBvbGRTdGF0aWNTdHlsZSB8fCBvbGRTdHlsZUJpbmRpbmc7XG5cbiAgdmFyIHN0eWxlID0gbm9ybWFsaXplU3R5bGVCaW5kaW5nKHZub2RlLmRhdGEuc3R5bGUpIHx8IHt9O1xuXG4gIHZub2RlLmRhdGEuc3R5bGUgPSBzdHlsZS5fX29iX18gPyBleHRlbmQoe30sIHN0eWxlKSA6IHN0eWxlO1xuXG4gIHZhciBuZXdTdHlsZSA9IGdldFN0eWxlKHZub2RlLCB0cnVlKTtcblxuICBmb3IgKG5hbWUgaW4gb2xkU3R5bGUpIHtcbiAgICBpZiAobmV3U3R5bGVbbmFtZV0gPT0gbnVsbCkge1xuICAgICAgc2V0UHJvcChlbCwgbmFtZSwgJycpO1xuICAgIH1cbiAgfVxuICBmb3IgKG5hbWUgaW4gbmV3U3R5bGUpIHtcbiAgICBjdXIgPSBuZXdTdHlsZVtuYW1lXTtcbiAgICBpZiAoY3VyICE9PSBvbGRTdHlsZVtuYW1lXSkge1xuICAgICAgLy8gaWU5IHNldHRpbmcgdG8gbnVsbCBoYXMgbm8gZWZmZWN0LCBtdXN0IHVzZSBlbXB0eSBzdHJpbmdcbiAgICAgIHNldFByb3AoZWwsIG5hbWUsIGN1ciA9PSBudWxsID8gJycgOiBjdXIpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgc3R5bGUgPSB7XG4gIGNyZWF0ZTogdXBkYXRlU3R5bGUsXG4gIHVwZGF0ZTogdXBkYXRlU3R5bGVcbn07XG5cbi8qICAqL1xuXG4vKipcbiAqIEFkZCBjbGFzcyB3aXRoIGNvbXBhdGliaWxpdHkgZm9yIFNWRyBzaW5jZSBjbGFzc0xpc3QgaXMgbm90IHN1cHBvcnRlZCBvblxuICogU1ZHIGVsZW1lbnRzIGluIElFXG4gKi9cbmZ1bmN0aW9uIGFkZENsYXNzIChlbCwgY2xzKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIWNscyB8fCAhY2xzLnRyaW0oKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKGVsLmNsYXNzTGlzdCkge1xuICAgIGlmIChjbHMuaW5kZXhPZignICcpID4gLTEpIHtcbiAgICAgIGNscy5zcGxpdCgvXFxzKy8pLmZvckVhY2goZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGVsLmNsYXNzTGlzdC5hZGQoYyk7IH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5jbGFzc0xpc3QuYWRkKGNscyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBjdXIgPSAnICcgKyBlbC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgKyAnICc7XG4gICAgaWYgKGN1ci5pbmRleE9mKCcgJyArIGNscyArICcgJykgPCAwKSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgKGN1ciArIGNscykudHJpbSgpKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBSZW1vdmUgY2xhc3Mgd2l0aCBjb21wYXRpYmlsaXR5IGZvciBTVkcgc2luY2UgY2xhc3NMaXN0IGlzIG5vdCBzdXBwb3J0ZWQgb25cbiAqIFNWRyBlbGVtZW50cyBpbiBJRVxuICovXG5mdW5jdGlvbiByZW1vdmVDbGFzcyAoZWwsIGNscykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFjbHMgfHwgIWNscy50cmltKCkpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChlbC5jbGFzc0xpc3QpIHtcbiAgICBpZiAoY2xzLmluZGV4T2YoJyAnKSA+IC0xKSB7XG4gICAgICBjbHMuc3BsaXQoL1xccysvKS5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7IHJldHVybiBlbC5jbGFzc0xpc3QucmVtb3ZlKGMpOyB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZShjbHMpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgY3VyID0gJyAnICsgZWwuZ2V0QXR0cmlidXRlKCdjbGFzcycpICsgJyAnO1xuICAgIHZhciB0YXIgPSAnICcgKyBjbHMgKyAnICc7XG4gICAgd2hpbGUgKGN1ci5pbmRleE9mKHRhcikgPj0gMCkge1xuICAgICAgY3VyID0gY3VyLnJlcGxhY2UodGFyLCAnICcpO1xuICAgIH1cbiAgICBlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgY3VyLnRyaW0oKSk7XG4gIH1cbn1cblxuLyogICovXG5cbnZhciBoYXNUcmFuc2l0aW9uID0gaW5Ccm93c2VyICYmICFpc0lFOTtcbnZhciBUUkFOU0lUSU9OID0gJ3RyYW5zaXRpb24nO1xudmFyIEFOSU1BVElPTiA9ICdhbmltYXRpb24nO1xuXG4vLyBUcmFuc2l0aW9uIHByb3BlcnR5L2V2ZW50IHNuaWZmaW5nXG52YXIgdHJhbnNpdGlvblByb3AgPSAndHJhbnNpdGlvbic7XG52YXIgdHJhbnNpdGlvbkVuZEV2ZW50ID0gJ3RyYW5zaXRpb25lbmQnO1xudmFyIGFuaW1hdGlvblByb3AgPSAnYW5pbWF0aW9uJztcbnZhciBhbmltYXRpb25FbmRFdmVudCA9ICdhbmltYXRpb25lbmQnO1xuaWYgKGhhc1RyYW5zaXRpb24pIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICh3aW5kb3cub250cmFuc2l0aW9uZW5kID09PSB1bmRlZmluZWQgJiZcbiAgICB3aW5kb3cub253ZWJraXR0cmFuc2l0aW9uZW5kICE9PSB1bmRlZmluZWQpIHtcbiAgICB0cmFuc2l0aW9uUHJvcCA9ICdXZWJraXRUcmFuc2l0aW9uJztcbiAgICB0cmFuc2l0aW9uRW5kRXZlbnQgPSAnd2Via2l0VHJhbnNpdGlvbkVuZCc7XG4gIH1cbiAgaWYgKHdpbmRvdy5vbmFuaW1hdGlvbmVuZCA9PT0gdW5kZWZpbmVkICYmXG4gICAgd2luZG93Lm9ud2Via2l0YW5pbWF0aW9uZW5kICE9PSB1bmRlZmluZWQpIHtcbiAgICBhbmltYXRpb25Qcm9wID0gJ1dlYmtpdEFuaW1hdGlvbic7XG4gICAgYW5pbWF0aW9uRW5kRXZlbnQgPSAnd2Via2l0QW5pbWF0aW9uRW5kJztcbiAgfVxufVxuXG4vLyBiaW5kaW5nIHRvIHdpbmRvdyBpcyBuZWNlc3NhcnkgdG8gbWFrZSBob3QgcmVsb2FkIHdvcmsgaW4gSUUgaW4gc3RyaWN0IG1vZGVcbnZhciByYWYgPSBpbkJyb3dzZXIgJiYgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZVxuICA/IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUuYmluZCh3aW5kb3cpXG4gIDogc2V0VGltZW91dDtcblxuZnVuY3Rpb24gbmV4dEZyYW1lIChmbikge1xuICByYWYoZnVuY3Rpb24gKCkge1xuICAgIHJhZihmbik7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBhZGRUcmFuc2l0aW9uQ2xhc3MgKGVsLCBjbHMpIHtcbiAgKGVsLl90cmFuc2l0aW9uQ2xhc3NlcyB8fCAoZWwuX3RyYW5zaXRpb25DbGFzc2VzID0gW10pKS5wdXNoKGNscyk7XG4gIGFkZENsYXNzKGVsLCBjbHMpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVUcmFuc2l0aW9uQ2xhc3MgKGVsLCBjbHMpIHtcbiAgaWYgKGVsLl90cmFuc2l0aW9uQ2xhc3Nlcykge1xuICAgIHJlbW92ZSQxKGVsLl90cmFuc2l0aW9uQ2xhc3NlcywgY2xzKTtcbiAgfVxuICByZW1vdmVDbGFzcyhlbCwgY2xzKTtcbn1cblxuZnVuY3Rpb24gd2hlblRyYW5zaXRpb25FbmRzIChcbiAgZWwsXG4gIGV4cGVjdGVkVHlwZSxcbiAgY2Jcbikge1xuICB2YXIgcmVmID0gZ2V0VHJhbnNpdGlvbkluZm8oZWwsIGV4cGVjdGVkVHlwZSk7XG4gIHZhciB0eXBlID0gcmVmLnR5cGU7XG4gIHZhciB0aW1lb3V0ID0gcmVmLnRpbWVvdXQ7XG4gIHZhciBwcm9wQ291bnQgPSByZWYucHJvcENvdW50O1xuICBpZiAoIXR5cGUpIHsgcmV0dXJuIGNiKCkgfVxuICB2YXIgZXZlbnQgPSB0eXBlID09PSBUUkFOU0lUSU9OID8gdHJhbnNpdGlvbkVuZEV2ZW50IDogYW5pbWF0aW9uRW5kRXZlbnQ7XG4gIHZhciBlbmRlZCA9IDA7XG4gIHZhciBlbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgb25FbmQpO1xuICAgIGNiKCk7XG4gIH07XG4gIHZhciBvbkVuZCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKGUudGFyZ2V0ID09PSBlbCkge1xuICAgICAgaWYgKCsrZW5kZWQgPj0gcHJvcENvdW50KSB7XG4gICAgICAgIGVuZCgpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGVuZGVkIDwgcHJvcENvdW50KSB7XG4gICAgICBlbmQoKTtcbiAgICB9XG4gIH0sIHRpbWVvdXQgKyAxKTtcbiAgZWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgb25FbmQpO1xufVxuXG52YXIgdHJhbnNmb3JtUkUgPSAvXFxiKHRyYW5zZm9ybXxhbGwpKCx8JCkvO1xuXG5mdW5jdGlvbiBnZXRUcmFuc2l0aW9uSW5mbyAoZWwsIGV4cGVjdGVkVHlwZSkge1xuICB2YXIgc3R5bGVzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpO1xuICB2YXIgdHJhbnNpdGlvbmVEZWxheXMgPSBzdHlsZXNbdHJhbnNpdGlvblByb3AgKyAnRGVsYXknXS5zcGxpdCgnLCAnKTtcbiAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbnMgPSBzdHlsZXNbdHJhbnNpdGlvblByb3AgKyAnRHVyYXRpb24nXS5zcGxpdCgnLCAnKTtcbiAgdmFyIHRyYW5zaXRpb25UaW1lb3V0ID0gZ2V0VGltZW91dCh0cmFuc2l0aW9uZURlbGF5cywgdHJhbnNpdGlvbkR1cmF0aW9ucyk7XG4gIHZhciBhbmltYXRpb25EZWxheXMgPSBzdHlsZXNbYW5pbWF0aW9uUHJvcCArICdEZWxheSddLnNwbGl0KCcsICcpO1xuICB2YXIgYW5pbWF0aW9uRHVyYXRpb25zID0gc3R5bGVzW2FuaW1hdGlvblByb3AgKyAnRHVyYXRpb24nXS5zcGxpdCgnLCAnKTtcbiAgdmFyIGFuaW1hdGlvblRpbWVvdXQgPSBnZXRUaW1lb3V0KGFuaW1hdGlvbkRlbGF5cywgYW5pbWF0aW9uRHVyYXRpb25zKTtcblxuICB2YXIgdHlwZTtcbiAgdmFyIHRpbWVvdXQgPSAwO1xuICB2YXIgcHJvcENvdW50ID0gMDtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChleHBlY3RlZFR5cGUgPT09IFRSQU5TSVRJT04pIHtcbiAgICBpZiAodHJhbnNpdGlvblRpbWVvdXQgPiAwKSB7XG4gICAgICB0eXBlID0gVFJBTlNJVElPTjtcbiAgICAgIHRpbWVvdXQgPSB0cmFuc2l0aW9uVGltZW91dDtcbiAgICAgIHByb3BDb3VudCA9IHRyYW5zaXRpb25EdXJhdGlvbnMubGVuZ3RoO1xuICAgIH1cbiAgfSBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09IEFOSU1BVElPTikge1xuICAgIGlmIChhbmltYXRpb25UaW1lb3V0ID4gMCkge1xuICAgICAgdHlwZSA9IEFOSU1BVElPTjtcbiAgICAgIHRpbWVvdXQgPSBhbmltYXRpb25UaW1lb3V0O1xuICAgICAgcHJvcENvdW50ID0gYW5pbWF0aW9uRHVyYXRpb25zLmxlbmd0aDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGltZW91dCA9IE1hdGgubWF4KHRyYW5zaXRpb25UaW1lb3V0LCBhbmltYXRpb25UaW1lb3V0KTtcbiAgICB0eXBlID0gdGltZW91dCA+IDBcbiAgICAgID8gdHJhbnNpdGlvblRpbWVvdXQgPiBhbmltYXRpb25UaW1lb3V0XG4gICAgICAgID8gVFJBTlNJVElPTlxuICAgICAgICA6IEFOSU1BVElPTlxuICAgICAgOiBudWxsO1xuICAgIHByb3BDb3VudCA9IHR5cGVcbiAgICAgID8gdHlwZSA9PT0gVFJBTlNJVElPTlxuICAgICAgICA/IHRyYW5zaXRpb25EdXJhdGlvbnMubGVuZ3RoXG4gICAgICAgIDogYW5pbWF0aW9uRHVyYXRpb25zLmxlbmd0aFxuICAgICAgOiAwO1xuICB9XG4gIHZhciBoYXNUcmFuc2Zvcm0gPVxuICAgIHR5cGUgPT09IFRSQU5TSVRJT04gJiZcbiAgICB0cmFuc2Zvcm1SRS50ZXN0KHN0eWxlc1t0cmFuc2l0aW9uUHJvcCArICdQcm9wZXJ0eSddKTtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiB0eXBlLFxuICAgIHRpbWVvdXQ6IHRpbWVvdXQsXG4gICAgcHJvcENvdW50OiBwcm9wQ291bnQsXG4gICAgaGFzVHJhbnNmb3JtOiBoYXNUcmFuc2Zvcm1cbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRUaW1lb3V0IChkZWxheXMsIGR1cmF0aW9ucykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICB3aGlsZSAoZGVsYXlzLmxlbmd0aCA8IGR1cmF0aW9ucy5sZW5ndGgpIHtcbiAgICBkZWxheXMgPSBkZWxheXMuY29uY2F0KGRlbGF5cyk7XG4gIH1cblxuICByZXR1cm4gTWF0aC5tYXguYXBwbHkobnVsbCwgZHVyYXRpb25zLm1hcChmdW5jdGlvbiAoZCwgaSkge1xuICAgIHJldHVybiB0b01zKGQpICsgdG9NcyhkZWxheXNbaV0pXG4gIH0pKVxufVxuXG5mdW5jdGlvbiB0b01zIChzKSB7XG4gIHJldHVybiBOdW1iZXIocy5zbGljZSgwLCAtMSkpICogMTAwMFxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZW50ZXIgKHZub2RlLCB0b2dnbGVEaXNwbGF5KSB7XG4gIHZhciBlbCA9IHZub2RlLmVsbTtcblxuICAvLyBjYWxsIGxlYXZlIGNhbGxiYWNrIG5vd1xuICBpZiAoZWwuX2xlYXZlQ2IpIHtcbiAgICBlbC5fbGVhdmVDYi5jYW5jZWxsZWQgPSB0cnVlO1xuICAgIGVsLl9sZWF2ZUNiKCk7XG4gIH1cblxuICB2YXIgZGF0YSA9IHJlc29sdmVUcmFuc2l0aW9uKHZub2RlLmRhdGEudHJhbnNpdGlvbik7XG4gIGlmICghZGF0YSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChlbC5fZW50ZXJDYiB8fCBlbC5ub2RlVHlwZSAhPT0gMSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGNzcyA9IGRhdGEuY3NzO1xuICB2YXIgdHlwZSA9IGRhdGEudHlwZTtcbiAgdmFyIGVudGVyQ2xhc3MgPSBkYXRhLmVudGVyQ2xhc3M7XG4gIHZhciBlbnRlclRvQ2xhc3MgPSBkYXRhLmVudGVyVG9DbGFzcztcbiAgdmFyIGVudGVyQWN0aXZlQ2xhc3MgPSBkYXRhLmVudGVyQWN0aXZlQ2xhc3M7XG4gIHZhciBhcHBlYXJDbGFzcyA9IGRhdGEuYXBwZWFyQ2xhc3M7XG4gIHZhciBhcHBlYXJUb0NsYXNzID0gZGF0YS5hcHBlYXJUb0NsYXNzO1xuICB2YXIgYXBwZWFyQWN0aXZlQ2xhc3MgPSBkYXRhLmFwcGVhckFjdGl2ZUNsYXNzO1xuICB2YXIgYmVmb3JlRW50ZXIgPSBkYXRhLmJlZm9yZUVudGVyO1xuICB2YXIgZW50ZXIgPSBkYXRhLmVudGVyO1xuICB2YXIgYWZ0ZXJFbnRlciA9IGRhdGEuYWZ0ZXJFbnRlcjtcbiAgdmFyIGVudGVyQ2FuY2VsbGVkID0gZGF0YS5lbnRlckNhbmNlbGxlZDtcbiAgdmFyIGJlZm9yZUFwcGVhciA9IGRhdGEuYmVmb3JlQXBwZWFyO1xuICB2YXIgYXBwZWFyID0gZGF0YS5hcHBlYXI7XG4gIHZhciBhZnRlckFwcGVhciA9IGRhdGEuYWZ0ZXJBcHBlYXI7XG4gIHZhciBhcHBlYXJDYW5jZWxsZWQgPSBkYXRhLmFwcGVhckNhbmNlbGxlZDtcblxuICAvLyBhY3RpdmVJbnN0YW5jZSB3aWxsIGFsd2F5cyBiZSB0aGUgPHRyYW5zaXRpb24+IGNvbXBvbmVudCBtYW5hZ2luZyB0aGlzXG4gIC8vIHRyYW5zaXRpb24uIE9uZSBlZGdlIGNhc2UgdG8gY2hlY2sgaXMgd2hlbiB0aGUgPHRyYW5zaXRpb24+IGlzIHBsYWNlZFxuICAvLyBhcyB0aGUgcm9vdCBub2RlIG9mIGEgY2hpbGQgY29tcG9uZW50LiBJbiB0aGF0IGNhc2Ugd2UgbmVlZCB0byBjaGVja1xuICAvLyA8dHJhbnNpdGlvbj4ncyBwYXJlbnQgZm9yIGFwcGVhciBjaGVjay5cbiAgdmFyIGNvbnRleHQgPSBhY3RpdmVJbnN0YW5jZTtcbiAgdmFyIHRyYW5zaXRpb25Ob2RlID0gYWN0aXZlSW5zdGFuY2UuJHZub2RlO1xuICB3aGlsZSAodHJhbnNpdGlvbk5vZGUgJiYgdHJhbnNpdGlvbk5vZGUucGFyZW50KSB7XG4gICAgdHJhbnNpdGlvbk5vZGUgPSB0cmFuc2l0aW9uTm9kZS5wYXJlbnQ7XG4gICAgY29udGV4dCA9IHRyYW5zaXRpb25Ob2RlLmNvbnRleHQ7XG4gIH1cblxuICB2YXIgaXNBcHBlYXIgPSAhY29udGV4dC5faXNNb3VudGVkIHx8ICF2bm9kZS5pc1Jvb3RJbnNlcnQ7XG5cbiAgaWYgKGlzQXBwZWFyICYmICFhcHBlYXIgJiYgYXBwZWFyICE9PSAnJykge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIHN0YXJ0Q2xhc3MgPSBpc0FwcGVhciA/IGFwcGVhckNsYXNzIDogZW50ZXJDbGFzcztcbiAgdmFyIGFjdGl2ZUNsYXNzID0gaXNBcHBlYXIgPyBhcHBlYXJBY3RpdmVDbGFzcyA6IGVudGVyQWN0aXZlQ2xhc3M7XG4gIHZhciB0b0NsYXNzID0gaXNBcHBlYXIgPyBhcHBlYXJUb0NsYXNzIDogZW50ZXJUb0NsYXNzO1xuICB2YXIgYmVmb3JlRW50ZXJIb29rID0gaXNBcHBlYXIgPyAoYmVmb3JlQXBwZWFyIHx8IGJlZm9yZUVudGVyKSA6IGJlZm9yZUVudGVyO1xuICB2YXIgZW50ZXJIb29rID0gaXNBcHBlYXIgPyAodHlwZW9mIGFwcGVhciA9PT0gJ2Z1bmN0aW9uJyA/IGFwcGVhciA6IGVudGVyKSA6IGVudGVyO1xuICB2YXIgYWZ0ZXJFbnRlckhvb2sgPSBpc0FwcGVhciA/IChhZnRlckFwcGVhciB8fCBhZnRlckVudGVyKSA6IGFmdGVyRW50ZXI7XG4gIHZhciBlbnRlckNhbmNlbGxlZEhvb2sgPSBpc0FwcGVhciA/IChhcHBlYXJDYW5jZWxsZWQgfHwgZW50ZXJDYW5jZWxsZWQpIDogZW50ZXJDYW5jZWxsZWQ7XG5cbiAgdmFyIGV4cGVjdHNDU1MgPSBjc3MgIT09IGZhbHNlICYmICFpc0lFOTtcbiAgdmFyIHVzZXJXYW50c0NvbnRyb2wgPVxuICAgIGVudGVySG9vayAmJlxuICAgIC8vIGVudGVySG9vayBtYXkgYmUgYSBib3VuZCBtZXRob2Qgd2hpY2ggZXhwb3Nlc1xuICAgIC8vIHRoZSBsZW5ndGggb2Ygb3JpZ2luYWwgZm4gYXMgX2xlbmd0aFxuICAgIChlbnRlckhvb2suX2xlbmd0aCB8fCBlbnRlckhvb2subGVuZ3RoKSA+IDE7XG5cbiAgdmFyIGNiID0gZWwuX2VudGVyQ2IgPSBvbmNlKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCB0b0NsYXNzKTtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgYWN0aXZlQ2xhc3MpO1xuICAgIH1cbiAgICBpZiAoY2IuY2FuY2VsbGVkKSB7XG4gICAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIHN0YXJ0Q2xhc3MpO1xuICAgICAgfVxuICAgICAgZW50ZXJDYW5jZWxsZWRIb29rICYmIGVudGVyQ2FuY2VsbGVkSG9vayhlbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFmdGVyRW50ZXJIb29rICYmIGFmdGVyRW50ZXJIb29rKGVsKTtcbiAgICB9XG4gICAgZWwuX2VudGVyQ2IgPSBudWxsO1xuICB9KTtcblxuICBpZiAoIXZub2RlLmRhdGEuc2hvdykge1xuICAgIC8vIHJlbW92ZSBwZW5kaW5nIGxlYXZlIGVsZW1lbnQgb24gZW50ZXIgYnkgaW5qZWN0aW5nIGFuIGluc2VydCBob29rXG4gICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUuZGF0YS5ob29rIHx8ICh2bm9kZS5kYXRhLmhvb2sgPSB7fSksICdpbnNlcnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcGFyZW50ID0gZWwucGFyZW50Tm9kZTtcbiAgICAgIHZhciBwZW5kaW5nTm9kZSA9IHBhcmVudCAmJiBwYXJlbnQuX3BlbmRpbmcgJiYgcGFyZW50Ll9wZW5kaW5nW3Zub2RlLmtleV07XG4gICAgICBpZiAocGVuZGluZ05vZGUgJiZcbiAgICAgICAgICBwZW5kaW5nTm9kZS50YWcgPT09IHZub2RlLnRhZyAmJlxuICAgICAgICAgIHBlbmRpbmdOb2RlLmVsbS5fbGVhdmVDYikge1xuICAgICAgICBwZW5kaW5nTm9kZS5lbG0uX2xlYXZlQ2IoKTtcbiAgICAgIH1cbiAgICAgIGVudGVySG9vayAmJiBlbnRlckhvb2soZWwsIGNiKTtcbiAgICB9LCAndHJhbnNpdGlvbi1pbnNlcnQnKTtcbiAgfVxuXG4gIC8vIHN0YXJ0IGVudGVyIHRyYW5zaXRpb25cbiAgYmVmb3JlRW50ZXJIb29rICYmIGJlZm9yZUVudGVySG9vayhlbCk7XG4gIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBzdGFydENsYXNzKTtcbiAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGFjdGl2ZUNsYXNzKTtcbiAgICBuZXh0RnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCB0b0NsYXNzKTtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgc3RhcnRDbGFzcyk7XG4gICAgICBpZiAoIWNiLmNhbmNlbGxlZCAmJiAhdXNlcldhbnRzQ29udHJvbCkge1xuICAgICAgICB3aGVuVHJhbnNpdGlvbkVuZHMoZWwsIHR5cGUsIGNiKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGlmICh2bm9kZS5kYXRhLnNob3cpIHtcbiAgICB0b2dnbGVEaXNwbGF5ICYmIHRvZ2dsZURpc3BsYXkoKTtcbiAgICBlbnRlckhvb2sgJiYgZW50ZXJIb29rKGVsLCBjYik7XG4gIH1cblxuICBpZiAoIWV4cGVjdHNDU1MgJiYgIXVzZXJXYW50c0NvbnRyb2wpIHtcbiAgICBjYigpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGxlYXZlICh2bm9kZSwgcm0pIHtcbiAgdmFyIGVsID0gdm5vZGUuZWxtO1xuXG4gIC8vIGNhbGwgZW50ZXIgY2FsbGJhY2sgbm93XG4gIGlmIChlbC5fZW50ZXJDYikge1xuICAgIGVsLl9lbnRlckNiLmNhbmNlbGxlZCA9IHRydWU7XG4gICAgZWwuX2VudGVyQ2IoKTtcbiAgfVxuXG4gIHZhciBkYXRhID0gcmVzb2x2ZVRyYW5zaXRpb24odm5vZGUuZGF0YS50cmFuc2l0aW9uKTtcbiAgaWYgKCFkYXRhKSB7XG4gICAgcmV0dXJuIHJtKClcbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoZWwuX2xlYXZlQ2IgfHwgZWwubm9kZVR5cGUgIT09IDEpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBjc3MgPSBkYXRhLmNzcztcbiAgdmFyIHR5cGUgPSBkYXRhLnR5cGU7XG4gIHZhciBsZWF2ZUNsYXNzID0gZGF0YS5sZWF2ZUNsYXNzO1xuICB2YXIgbGVhdmVUb0NsYXNzID0gZGF0YS5sZWF2ZVRvQ2xhc3M7XG4gIHZhciBsZWF2ZUFjdGl2ZUNsYXNzID0gZGF0YS5sZWF2ZUFjdGl2ZUNsYXNzO1xuICB2YXIgYmVmb3JlTGVhdmUgPSBkYXRhLmJlZm9yZUxlYXZlO1xuICB2YXIgbGVhdmUgPSBkYXRhLmxlYXZlO1xuICB2YXIgYWZ0ZXJMZWF2ZSA9IGRhdGEuYWZ0ZXJMZWF2ZTtcbiAgdmFyIGxlYXZlQ2FuY2VsbGVkID0gZGF0YS5sZWF2ZUNhbmNlbGxlZDtcbiAgdmFyIGRlbGF5TGVhdmUgPSBkYXRhLmRlbGF5TGVhdmU7XG5cbiAgdmFyIGV4cGVjdHNDU1MgPSBjc3MgIT09IGZhbHNlICYmICFpc0lFOTtcbiAgdmFyIHVzZXJXYW50c0NvbnRyb2wgPVxuICAgIGxlYXZlICYmXG4gICAgLy8gbGVhdmUgaG9vayBtYXkgYmUgYSBib3VuZCBtZXRob2Qgd2hpY2ggZXhwb3Nlc1xuICAgIC8vIHRoZSBsZW5ndGggb2Ygb3JpZ2luYWwgZm4gYXMgX2xlbmd0aFxuICAgIChsZWF2ZS5fbGVuZ3RoIHx8IGxlYXZlLmxlbmd0aCkgPiAxO1xuXG4gIHZhciBjYiA9IGVsLl9sZWF2ZUNiID0gb25jZShmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGVsLnBhcmVudE5vZGUgJiYgZWwucGFyZW50Tm9kZS5fcGVuZGluZykge1xuICAgICAgZWwucGFyZW50Tm9kZS5fcGVuZGluZ1t2bm9kZS5rZXldID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVUb0NsYXNzKTtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVBY3RpdmVDbGFzcyk7XG4gICAgfVxuICAgIGlmIChjYi5jYW5jZWxsZWQpIHtcbiAgICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVDbGFzcyk7XG4gICAgICB9XG4gICAgICBsZWF2ZUNhbmNlbGxlZCAmJiBsZWF2ZUNhbmNlbGxlZChlbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJtKCk7XG4gICAgICBhZnRlckxlYXZlICYmIGFmdGVyTGVhdmUoZWwpO1xuICAgIH1cbiAgICBlbC5fbGVhdmVDYiA9IG51bGw7XG4gIH0pO1xuXG4gIGlmIChkZWxheUxlYXZlKSB7XG4gICAgZGVsYXlMZWF2ZShwZXJmb3JtTGVhdmUpO1xuICB9IGVsc2Uge1xuICAgIHBlcmZvcm1MZWF2ZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVyZm9ybUxlYXZlICgpIHtcbiAgICAvLyB0aGUgZGVsYXllZCBsZWF2ZSBtYXkgaGF2ZSBhbHJlYWR5IGJlZW4gY2FuY2VsbGVkXG4gICAgaWYgKGNiLmNhbmNlbGxlZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIC8vIHJlY29yZCBsZWF2aW5nIGVsZW1lbnRcbiAgICBpZiAoIXZub2RlLmRhdGEuc2hvdykge1xuICAgICAgKGVsLnBhcmVudE5vZGUuX3BlbmRpbmcgfHwgKGVsLnBhcmVudE5vZGUuX3BlbmRpbmcgPSB7fSkpW3Zub2RlLmtleV0gPSB2bm9kZTtcbiAgICB9XG4gICAgYmVmb3JlTGVhdmUgJiYgYmVmb3JlTGVhdmUoZWwpO1xuICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQ2xhc3MpO1xuICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUFjdGl2ZUNsYXNzKTtcbiAgICAgIG5leHRGcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVUb0NsYXNzKTtcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUNsYXNzKTtcbiAgICAgICAgaWYgKCFjYi5jYW5jZWxsZWQgJiYgIXVzZXJXYW50c0NvbnRyb2wpIHtcbiAgICAgICAgICB3aGVuVHJhbnNpdGlvbkVuZHMoZWwsIHR5cGUsIGNiKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIGxlYXZlICYmIGxlYXZlKGVsLCBjYik7XG4gICAgaWYgKCFleHBlY3RzQ1NTICYmICF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgICBjYigpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiByZXNvbHZlVHJhbnNpdGlvbiAoZGVmJCQxKSB7XG4gIGlmICghZGVmJCQxKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKHR5cGVvZiBkZWYkJDEgPT09ICdvYmplY3QnKSB7XG4gICAgdmFyIHJlcyA9IHt9O1xuICAgIGlmIChkZWYkJDEuY3NzICE9PSBmYWxzZSkge1xuICAgICAgZXh0ZW5kKHJlcywgYXV0b0Nzc1RyYW5zaXRpb24oZGVmJCQxLm5hbWUgfHwgJ3YnKSk7XG4gICAgfVxuICAgIGV4dGVuZChyZXMsIGRlZiQkMSk7XG4gICAgcmV0dXJuIHJlc1xuICB9IGVsc2UgaWYgKHR5cGVvZiBkZWYkJDEgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGF1dG9Dc3NUcmFuc2l0aW9uKGRlZiQkMSlcbiAgfVxufVxuXG52YXIgYXV0b0Nzc1RyYW5zaXRpb24gPSBjYWNoZWQoZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnRlckNsYXNzOiAobmFtZSArIFwiLWVudGVyXCIpLFxuICAgIGxlYXZlQ2xhc3M6IChuYW1lICsgXCItbGVhdmVcIiksXG4gICAgYXBwZWFyQ2xhc3M6IChuYW1lICsgXCItZW50ZXJcIiksXG4gICAgZW50ZXJUb0NsYXNzOiAobmFtZSArIFwiLWVudGVyLXRvXCIpLFxuICAgIGxlYXZlVG9DbGFzczogKG5hbWUgKyBcIi1sZWF2ZS10b1wiKSxcbiAgICBhcHBlYXJUb0NsYXNzOiAobmFtZSArIFwiLWVudGVyLXRvXCIpLFxuICAgIGVudGVyQWN0aXZlQ2xhc3M6IChuYW1lICsgXCItZW50ZXItYWN0aXZlXCIpLFxuICAgIGxlYXZlQWN0aXZlQ2xhc3M6IChuYW1lICsgXCItbGVhdmUtYWN0aXZlXCIpLFxuICAgIGFwcGVhckFjdGl2ZUNsYXNzOiAobmFtZSArIFwiLWVudGVyLWFjdGl2ZVwiKVxuICB9XG59KTtcblxuZnVuY3Rpb24gb25jZSAoZm4pIHtcbiAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghY2FsbGVkKSB7XG4gICAgICBjYWxsZWQgPSB0cnVlO1xuICAgICAgZm4oKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gX2VudGVyIChfLCB2bm9kZSkge1xuICBpZiAoIXZub2RlLmRhdGEuc2hvdykge1xuICAgIGVudGVyKHZub2RlKTtcbiAgfVxufVxuXG52YXIgdHJhbnNpdGlvbiA9IGluQnJvd3NlciA/IHtcbiAgY3JlYXRlOiBfZW50ZXIsXG4gIGFjdGl2YXRlOiBfZW50ZXIsXG4gIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlICh2bm9kZSwgcm0pIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmICghdm5vZGUuZGF0YS5zaG93KSB7XG4gICAgICBsZWF2ZSh2bm9kZSwgcm0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBybSgpO1xuICAgIH1cbiAgfVxufSA6IHt9O1xuXG52YXIgcGxhdGZvcm1Nb2R1bGVzID0gW1xuICBhdHRycyxcbiAga2xhc3MsXG4gIGV2ZW50cyxcbiAgZG9tUHJvcHMsXG4gIHN0eWxlLFxuICB0cmFuc2l0aW9uXG5dO1xuXG4vKiAgKi9cblxuLy8gdGhlIGRpcmVjdGl2ZSBtb2R1bGUgc2hvdWxkIGJlIGFwcGxpZWQgbGFzdCwgYWZ0ZXIgYWxsXG4vLyBidWlsdC1pbiBtb2R1bGVzIGhhdmUgYmVlbiBhcHBsaWVkLlxudmFyIG1vZHVsZXMgPSBwbGF0Zm9ybU1vZHVsZXMuY29uY2F0KGJhc2VNb2R1bGVzKTtcblxudmFyIHBhdGNoJDEgPSBjcmVhdGVQYXRjaEZ1bmN0aW9uKHsgbm9kZU9wczogbm9kZU9wcywgbW9kdWxlczogbW9kdWxlcyB9KTtcblxuLyoqXG4gKiBOb3QgdHlwZSBjaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBmbG93IGRvZXNuJ3QgbGlrZSBhdHRhY2hpbmdcbiAqIHByb3BlcnRpZXMgdG8gRWxlbWVudHMuXG4gKi9cblxudmFyIG1vZGVsYWJsZVRhZ1JFID0gL15pbnB1dHxzZWxlY3R8dGV4dGFyZWF8dnVlLWNvbXBvbmVudC1bMC05XSsoLVswLTlhLXpBLVpfLV0qKT8kLztcblxuLyogaXN0YW5idWwgaWdub3JlIGlmICovXG5pZiAoaXNJRTkpIHtcbiAgLy8gaHR0cDovL3d3dy5tYXR0czQxMS5jb20vcG9zdC9pbnRlcm5ldC1leHBsb3Jlci05LW9uaW5wdXQvXG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3NlbGVjdGlvbmNoYW5nZScsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZWwgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuICAgIGlmIChlbCAmJiBlbC52bW9kZWwpIHtcbiAgICAgIHRyaWdnZXIoZWwsICdpbnB1dCcpO1xuICAgIH1cbiAgfSk7XG59XG5cbnZhciBtb2RlbCA9IHtcbiAgaW5zZXJ0ZWQ6IGZ1bmN0aW9uIGluc2VydGVkIChlbCwgYmluZGluZywgdm5vZGUpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCFtb2RlbGFibGVUYWdSRS50ZXN0KHZub2RlLnRhZykpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBcInYtbW9kZWwgaXMgbm90IHN1cHBvcnRlZCBvbiBlbGVtZW50IHR5cGU6IDxcIiArICh2bm9kZS50YWcpICsgXCI+LiBcIiArXG4gICAgICAgICAgJ0lmIHlvdSBhcmUgd29ya2luZyB3aXRoIGNvbnRlbnRlZGl0YWJsZSwgaXRcXCdzIHJlY29tbWVuZGVkIHRvICcgK1xuICAgICAgICAgICd3cmFwIGEgbGlicmFyeSBkZWRpY2F0ZWQgZm9yIHRoYXQgcHVycG9zZSBpbnNpZGUgYSBjdXN0b20gY29tcG9uZW50LicsXG4gICAgICAgICAgdm5vZGUuY29udGV4dFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodm5vZGUudGFnID09PSAnc2VsZWN0Jykge1xuICAgICAgdmFyIGNiID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBzZXRTZWxlY3RlZChlbCwgYmluZGluZywgdm5vZGUuY29udGV4dCk7XG4gICAgICB9O1xuICAgICAgY2IoKTtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKGlzSUUgfHwgaXNFZGdlKSB7XG4gICAgICAgIHNldFRpbWVvdXQoY2IsIDApO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodm5vZGUudGFnID09PSAndGV4dGFyZWEnIHx8IGVsLnR5cGUgPT09ICd0ZXh0Jykge1xuICAgICAgZWwuX3ZNb2RpZmllcnMgPSBiaW5kaW5nLm1vZGlmaWVycztcbiAgICAgIGlmICghYmluZGluZy5tb2RpZmllcnMubGF6eSkge1xuICAgICAgICBpZiAoIWlzQW5kcm9pZCkge1xuICAgICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbXBvc2l0aW9uc3RhcnQnLCBvbkNvbXBvc2l0aW9uU3RhcnQpO1xuICAgICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbXBvc2l0aW9uZW5kJywgb25Db21wb3NpdGlvbkVuZCk7XG4gICAgICAgIH1cbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmIChpc0lFOSkge1xuICAgICAgICAgIGVsLnZtb2RlbCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGNvbXBvbmVudFVwZGF0ZWQ6IGZ1bmN0aW9uIGNvbXBvbmVudFVwZGF0ZWQgKGVsLCBiaW5kaW5nLCB2bm9kZSkge1xuICAgIGlmICh2bm9kZS50YWcgPT09ICdzZWxlY3QnKSB7XG4gICAgICBzZXRTZWxlY3RlZChlbCwgYmluZGluZywgdm5vZGUuY29udGV4dCk7XG4gICAgICAvLyBpbiBjYXNlIHRoZSBvcHRpb25zIHJlbmRlcmVkIGJ5IHYtZm9yIGhhdmUgY2hhbmdlZCxcbiAgICAgIC8vIGl0J3MgcG9zc2libGUgdGhhdCB0aGUgdmFsdWUgaXMgb3V0LW9mLXN5bmMgd2l0aCB0aGUgcmVuZGVyZWQgb3B0aW9ucy5cbiAgICAgIC8vIGRldGVjdCBzdWNoIGNhc2VzIGFuZCBmaWx0ZXIgb3V0IHZhbHVlcyB0aGF0IG5vIGxvbmdlciBoYXMgYSBtYXRjaGluZ1xuICAgICAgLy8gb3B0aW9uIGluIHRoZSBET00uXG4gICAgICB2YXIgbmVlZFJlc2V0ID0gZWwubXVsdGlwbGVcbiAgICAgICAgPyBiaW5kaW5nLnZhbHVlLnNvbWUoZnVuY3Rpb24gKHYpIHsgcmV0dXJuIGhhc05vTWF0Y2hpbmdPcHRpb24odiwgZWwub3B0aW9ucyk7IH0pXG4gICAgICAgIDogYmluZGluZy52YWx1ZSAhPT0gYmluZGluZy5vbGRWYWx1ZSAmJiBoYXNOb01hdGNoaW5nT3B0aW9uKGJpbmRpbmcudmFsdWUsIGVsLm9wdGlvbnMpO1xuICAgICAgaWYgKG5lZWRSZXNldCkge1xuICAgICAgICB0cmlnZ2VyKGVsLCAnY2hhbmdlJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBzZXRTZWxlY3RlZCAoZWwsIGJpbmRpbmcsIHZtKSB7XG4gIHZhciB2YWx1ZSA9IGJpbmRpbmcudmFsdWU7XG4gIHZhciBpc011bHRpcGxlID0gZWwubXVsdGlwbGU7XG4gIGlmIChpc011bHRpcGxlICYmICFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgIFwiPHNlbGVjdCBtdWx0aXBsZSB2LW1vZGVsPVxcXCJcIiArIChiaW5kaW5nLmV4cHJlc3Npb24pICsgXCJcXFwiPiBcIiArXG4gICAgICBcImV4cGVjdHMgYW4gQXJyYXkgdmFsdWUgZm9yIGl0cyBiaW5kaW5nLCBidXQgZ290IFwiICsgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkuc2xpY2UoOCwgLTEpKSxcbiAgICAgIHZtXG4gICAgKTtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgc2VsZWN0ZWQsIG9wdGlvbjtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBlbC5vcHRpb25zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIG9wdGlvbiA9IGVsLm9wdGlvbnNbaV07XG4gICAgaWYgKGlzTXVsdGlwbGUpIHtcbiAgICAgIHNlbGVjdGVkID0gbG9vc2VJbmRleE9mKHZhbHVlLCBnZXRWYWx1ZShvcHRpb24pKSA+IC0xO1xuICAgICAgaWYgKG9wdGlvbi5zZWxlY3RlZCAhPT0gc2VsZWN0ZWQpIHtcbiAgICAgICAgb3B0aW9uLnNlbGVjdGVkID0gc2VsZWN0ZWQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChsb29zZUVxdWFsKGdldFZhbHVlKG9wdGlvbiksIHZhbHVlKSkge1xuICAgICAgICBpZiAoZWwuc2VsZWN0ZWRJbmRleCAhPT0gaSkge1xuICAgICAgICAgIGVsLnNlbGVjdGVkSW5kZXggPSBpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoIWlzTXVsdGlwbGUpIHtcbiAgICBlbC5zZWxlY3RlZEluZGV4ID0gLTE7XG4gIH1cbn1cblxuZnVuY3Rpb24gaGFzTm9NYXRjaGluZ09wdGlvbiAodmFsdWUsIG9wdGlvbnMpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBvcHRpb25zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGlmIChsb29zZUVxdWFsKGdldFZhbHVlKG9wdGlvbnNbaV0pLCB2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZVxufVxuXG5mdW5jdGlvbiBnZXRWYWx1ZSAob3B0aW9uKSB7XG4gIHJldHVybiAnX3ZhbHVlJyBpbiBvcHRpb25cbiAgICA/IG9wdGlvbi5fdmFsdWVcbiAgICA6IG9wdGlvbi52YWx1ZVxufVxuXG5mdW5jdGlvbiBvbkNvbXBvc2l0aW9uU3RhcnQgKGUpIHtcbiAgZS50YXJnZXQuY29tcG9zaW5nID0gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gb25Db21wb3NpdGlvbkVuZCAoZSkge1xuICBlLnRhcmdldC5jb21wb3NpbmcgPSBmYWxzZTtcbiAgdHJpZ2dlcihlLnRhcmdldCwgJ2lucHV0Jyk7XG59XG5cbmZ1bmN0aW9uIHRyaWdnZXIgKGVsLCB0eXBlKSB7XG4gIHZhciBlID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0hUTUxFdmVudHMnKTtcbiAgZS5pbml0RXZlbnQodHlwZSwgdHJ1ZSwgdHJ1ZSk7XG4gIGVsLmRpc3BhdGNoRXZlbnQoZSk7XG59XG5cbi8qICAqL1xuXG4vLyByZWN1cnNpdmVseSBzZWFyY2ggZm9yIHBvc3NpYmxlIHRyYW5zaXRpb24gZGVmaW5lZCBpbnNpZGUgdGhlIGNvbXBvbmVudCByb290XG5mdW5jdGlvbiBsb2NhdGVOb2RlICh2bm9kZSkge1xuICByZXR1cm4gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgJiYgKCF2bm9kZS5kYXRhIHx8ICF2bm9kZS5kYXRhLnRyYW5zaXRpb24pXG4gICAgPyBsb2NhdGVOb2RlKHZub2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZSlcbiAgICA6IHZub2RlXG59XG5cbnZhciBzaG93ID0ge1xuICBiaW5kOiBmdW5jdGlvbiBiaW5kIChlbCwgcmVmLCB2bm9kZSkge1xuICAgIHZhciB2YWx1ZSA9IHJlZi52YWx1ZTtcblxuICAgIHZub2RlID0gbG9jYXRlTm9kZSh2bm9kZSk7XG4gICAgdmFyIHRyYW5zaXRpb24gPSB2bm9kZS5kYXRhICYmIHZub2RlLmRhdGEudHJhbnNpdGlvbjtcbiAgICB2YXIgb3JpZ2luYWxEaXNwbGF5ID0gZWwuX192T3JpZ2luYWxEaXNwbGF5ID1cbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPT09ICdub25lJyA/ICcnIDogZWwuc3R5bGUuZGlzcGxheTtcbiAgICBpZiAodmFsdWUgJiYgdHJhbnNpdGlvbiAmJiAhaXNJRTkpIHtcbiAgICAgIHZub2RlLmRhdGEuc2hvdyA9IHRydWU7XG4gICAgICBlbnRlcih2bm9kZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gb3JpZ2luYWxEaXNwbGF5O1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZSA/IG9yaWdpbmFsRGlzcGxheSA6ICdub25lJztcbiAgICB9XG4gIH0sXG5cbiAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUgKGVsLCByZWYsIHZub2RlKSB7XG4gICAgdmFyIHZhbHVlID0gcmVmLnZhbHVlO1xuICAgIHZhciBvbGRWYWx1ZSA9IHJlZi5vbGRWYWx1ZTtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICh2YWx1ZSA9PT0gb2xkVmFsdWUpIHsgcmV0dXJuIH1cbiAgICB2bm9kZSA9IGxvY2F0ZU5vZGUodm5vZGUpO1xuICAgIHZhciB0cmFuc2l0aW9uID0gdm5vZGUuZGF0YSAmJiB2bm9kZS5kYXRhLnRyYW5zaXRpb247XG4gICAgaWYgKHRyYW5zaXRpb24gJiYgIWlzSUU5KSB7XG4gICAgICB2bm9kZS5kYXRhLnNob3cgPSB0cnVlO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIGVudGVyKHZub2RlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IGVsLl9fdk9yaWdpbmFsRGlzcGxheTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZWF2ZSh2bm9kZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gdmFsdWUgPyBlbC5fX3ZPcmlnaW5hbERpc3BsYXkgOiAnbm9uZSc7XG4gICAgfVxuICB9LFxuXG4gIHVuYmluZDogZnVuY3Rpb24gdW5iaW5kIChcbiAgICBlbCxcbiAgICBiaW5kaW5nLFxuICAgIHZub2RlLFxuICAgIG9sZFZub2RlLFxuICAgIGlzRGVzdHJveVxuICApIHtcbiAgICBpZiAoIWlzRGVzdHJveSkge1xuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IGVsLl9fdk9yaWdpbmFsRGlzcGxheTtcbiAgICB9XG4gIH1cbn07XG5cbnZhciBwbGF0Zm9ybURpcmVjdGl2ZXMgPSB7XG4gIG1vZGVsOiBtb2RlbCxcbiAgc2hvdzogc2hvd1xufTtcblxuLyogICovXG5cbi8vIFByb3ZpZGVzIHRyYW5zaXRpb24gc3VwcG9ydCBmb3IgYSBzaW5nbGUgZWxlbWVudC9jb21wb25lbnQuXG4vLyBzdXBwb3J0cyB0cmFuc2l0aW9uIG1vZGUgKG91dC1pbiAvIGluLW91dClcblxudmFyIHRyYW5zaXRpb25Qcm9wcyA9IHtcbiAgbmFtZTogU3RyaW5nLFxuICBhcHBlYXI6IEJvb2xlYW4sXG4gIGNzczogQm9vbGVhbixcbiAgbW9kZTogU3RyaW5nLFxuICB0eXBlOiBTdHJpbmcsXG4gIGVudGVyQ2xhc3M6IFN0cmluZyxcbiAgbGVhdmVDbGFzczogU3RyaW5nLFxuICBlbnRlclRvQ2xhc3M6IFN0cmluZyxcbiAgbGVhdmVUb0NsYXNzOiBTdHJpbmcsXG4gIGVudGVyQWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgbGVhdmVBY3RpdmVDbGFzczogU3RyaW5nLFxuICBhcHBlYXJDbGFzczogU3RyaW5nLFxuICBhcHBlYXJBY3RpdmVDbGFzczogU3RyaW5nLFxuICBhcHBlYXJUb0NsYXNzOiBTdHJpbmdcbn07XG5cbi8vIGluIGNhc2UgdGhlIGNoaWxkIGlzIGFsc28gYW4gYWJzdHJhY3QgY29tcG9uZW50LCBlLmcuIDxrZWVwLWFsaXZlPlxuLy8gd2Ugd2FudCB0byByZWN1cnNpdmVseSByZXRyaWV2ZSB0aGUgcmVhbCBjb21wb25lbnQgdG8gYmUgcmVuZGVyZWRcbmZ1bmN0aW9uIGdldFJlYWxDaGlsZCAodm5vZGUpIHtcbiAgdmFyIGNvbXBPcHRpb25zID0gdm5vZGUgJiYgdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgaWYgKGNvbXBPcHRpb25zICYmIGNvbXBPcHRpb25zLkN0b3Iub3B0aW9ucy5hYnN0cmFjdCkge1xuICAgIHJldHVybiBnZXRSZWFsQ2hpbGQoZ2V0Rmlyc3RDb21wb25lbnRDaGlsZChjb21wT3B0aW9ucy5jaGlsZHJlbikpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHZub2RlXG4gIH1cbn1cblxuZnVuY3Rpb24gZXh0cmFjdFRyYW5zaXRpb25EYXRhIChjb21wKSB7XG4gIHZhciBkYXRhID0ge307XG4gIHZhciBvcHRpb25zID0gY29tcC4kb3B0aW9ucztcbiAgLy8gcHJvcHNcbiAgZm9yICh2YXIga2V5IGluIG9wdGlvbnMucHJvcHNEYXRhKSB7XG4gICAgZGF0YVtrZXldID0gY29tcFtrZXldO1xuICB9XG4gIC8vIGV2ZW50cy5cbiAgLy8gZXh0cmFjdCBsaXN0ZW5lcnMgYW5kIHBhc3MgdGhlbSBkaXJlY3RseSB0byB0aGUgdHJhbnNpdGlvbiBtZXRob2RzXG4gIHZhciBsaXN0ZW5lcnMgPSBvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM7XG4gIGZvciAodmFyIGtleSQxIGluIGxpc3RlbmVycykge1xuICAgIGRhdGFbY2FtZWxpemUoa2V5JDEpXSA9IGxpc3RlbmVyc1trZXkkMV0uZm47XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxuZnVuY3Rpb24gcGxhY2Vob2xkZXIgKGgsIHJhd0NoaWxkKSB7XG4gIHJldHVybiAvXFxkLWtlZXAtYWxpdmUkLy50ZXN0KHJhd0NoaWxkLnRhZylcbiAgICA/IGgoJ2tlZXAtYWxpdmUnKVxuICAgIDogbnVsbFxufVxuXG5mdW5jdGlvbiBoYXNQYXJlbnRUcmFuc2l0aW9uICh2bm9kZSkge1xuICB3aGlsZSAoKHZub2RlID0gdm5vZGUucGFyZW50KSkge1xuICAgIGlmICh2bm9kZS5kYXRhLnRyYW5zaXRpb24pIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGlzU2FtZUNoaWxkIChjaGlsZCwgb2xkQ2hpbGQpIHtcbiAgcmV0dXJuIG9sZENoaWxkLmtleSA9PT0gY2hpbGQua2V5ICYmIG9sZENoaWxkLnRhZyA9PT0gY2hpbGQudGFnXG59XG5cbnZhciBUcmFuc2l0aW9uID0ge1xuICBuYW1lOiAndHJhbnNpdGlvbicsXG4gIHByb3BzOiB0cmFuc2l0aW9uUHJvcHMsXG4gIGFic3RyYWN0OiB0cnVlLFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyIChoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLiRzbG90cy5kZWZhdWx0O1xuICAgIGlmICghY2hpbGRyZW4pIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIGZpbHRlciBvdXQgdGV4dCBub2RlcyAocG9zc2libGUgd2hpdGVzcGFjZXMpXG4gICAgY2hpbGRyZW4gPSBjaGlsZHJlbi5maWx0ZXIoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMudGFnOyB9KTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIWNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gd2FybiBtdWx0aXBsZSBlbGVtZW50c1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNoaWxkcmVuLmxlbmd0aCA+IDEpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICc8dHJhbnNpdGlvbj4gY2FuIG9ubHkgYmUgdXNlZCBvbiBhIHNpbmdsZSBlbGVtZW50LiBVc2UgJyArXG4gICAgICAgICc8dHJhbnNpdGlvbi1ncm91cD4gZm9yIGxpc3RzLicsXG4gICAgICAgIHRoaXMuJHBhcmVudFxuICAgICAgKTtcbiAgICB9XG5cbiAgICB2YXIgbW9kZSA9IHRoaXMubW9kZTtcblxuICAgIC8vIHdhcm4gaW52YWxpZCBtb2RlXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgICAgbW9kZSAmJiBtb2RlICE9PSAnaW4tb3V0JyAmJiBtb2RlICE9PSAnb3V0LWluJykge1xuICAgICAgd2FybihcbiAgICAgICAgJ2ludmFsaWQgPHRyYW5zaXRpb24+IG1vZGU6ICcgKyBtb2RlLFxuICAgICAgICB0aGlzLiRwYXJlbnRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdmFyIHJhd0NoaWxkID0gY2hpbGRyZW5bMF07XG5cbiAgICAvLyBpZiB0aGlzIGlzIGEgY29tcG9uZW50IHJvb3Qgbm9kZSBhbmQgdGhlIGNvbXBvbmVudCdzXG4gICAgLy8gcGFyZW50IGNvbnRhaW5lciBub2RlIGFsc28gaGFzIHRyYW5zaXRpb24sIHNraXAuXG4gICAgaWYgKGhhc1BhcmVudFRyYW5zaXRpb24odGhpcy4kdm5vZGUpKSB7XG4gICAgICByZXR1cm4gcmF3Q2hpbGRcbiAgICB9XG5cbiAgICAvLyBhcHBseSB0cmFuc2l0aW9uIGRhdGEgdG8gY2hpbGRcbiAgICAvLyB1c2UgZ2V0UmVhbENoaWxkKCkgdG8gaWdub3JlIGFic3RyYWN0IGNvbXBvbmVudHMgZS5nLiBrZWVwLWFsaXZlXG4gICAgdmFyIGNoaWxkID0gZ2V0UmVhbENoaWxkKHJhd0NoaWxkKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIWNoaWxkKSB7XG4gICAgICByZXR1cm4gcmF3Q2hpbGRcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fbGVhdmluZykge1xuICAgICAgcmV0dXJuIHBsYWNlaG9sZGVyKGgsIHJhd0NoaWxkKVxuICAgIH1cblxuICAgIC8vIGVuc3VyZSBhIGtleSB0aGF0IGlzIHVuaXF1ZSB0byB0aGUgdm5vZGUgdHlwZSBhbmQgdG8gdGhpcyB0cmFuc2l0aW9uXG4gICAgLy8gY29tcG9uZW50IGluc3RhbmNlLiBUaGlzIGtleSB3aWxsIGJlIHVzZWQgdG8gcmVtb3ZlIHBlbmRpbmcgbGVhdmluZyBub2Rlc1xuICAgIC8vIGR1cmluZyBlbnRlcmluZy5cbiAgICB2YXIgaWQgPSBcIl9fdHJhbnNpdGlvbi1cIiArICh0aGlzLl91aWQpICsgXCItXCI7XG4gICAgdmFyIGtleSA9IGNoaWxkLmtleSA9IGNoaWxkLmtleSA9PSBudWxsXG4gICAgICA/IGlkICsgY2hpbGQudGFnXG4gICAgICA6IGlzUHJpbWl0aXZlKGNoaWxkLmtleSlcbiAgICAgICAgPyAoU3RyaW5nKGNoaWxkLmtleSkuaW5kZXhPZihpZCkgPT09IDAgPyBjaGlsZC5rZXkgOiBpZCArIGNoaWxkLmtleSlcbiAgICAgICAgOiBjaGlsZC5rZXk7XG4gICAgdmFyIGRhdGEgPSAoY2hpbGQuZGF0YSB8fCAoY2hpbGQuZGF0YSA9IHt9KSkudHJhbnNpdGlvbiA9IGV4dHJhY3RUcmFuc2l0aW9uRGF0YSh0aGlzKTtcbiAgICB2YXIgb2xkUmF3Q2hpbGQgPSB0aGlzLl92bm9kZTtcbiAgICB2YXIgb2xkQ2hpbGQgPSBnZXRSZWFsQ2hpbGQob2xkUmF3Q2hpbGQpO1xuXG4gICAgLy8gbWFyayB2LXNob3dcbiAgICAvLyBzbyB0aGF0IHRoZSB0cmFuc2l0aW9uIG1vZHVsZSBjYW4gaGFuZCBvdmVyIHRoZSBjb250cm9sIHRvIHRoZSBkaXJlY3RpdmVcbiAgICBpZiAoY2hpbGQuZGF0YS5kaXJlY3RpdmVzICYmIGNoaWxkLmRhdGEuZGlyZWN0aXZlcy5zb21lKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLm5hbWUgPT09ICdzaG93JzsgfSkpIHtcbiAgICAgIGNoaWxkLmRhdGEuc2hvdyA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKG9sZENoaWxkICYmIG9sZENoaWxkLmRhdGEgJiYgIWlzU2FtZUNoaWxkKGNoaWxkLCBvbGRDaGlsZCkpIHtcbiAgICAgIC8vIHJlcGxhY2Ugb2xkIGNoaWxkIHRyYW5zaXRpb24gZGF0YSB3aXRoIGZyZXNoIG9uZVxuICAgICAgLy8gaW1wb3J0YW50IGZvciBkeW5hbWljIHRyYW5zaXRpb25zIVxuICAgICAgdmFyIG9sZERhdGEgPSBvbGRDaGlsZCAmJiAob2xkQ2hpbGQuZGF0YS50cmFuc2l0aW9uID0gZXh0ZW5kKHt9LCBkYXRhKSk7XG4gICAgICAvLyBoYW5kbGUgdHJhbnNpdGlvbiBtb2RlXG4gICAgICBpZiAobW9kZSA9PT0gJ291dC1pbicpIHtcbiAgICAgICAgLy8gcmV0dXJuIHBsYWNlaG9sZGVyIG5vZGUgYW5kIHF1ZXVlIHVwZGF0ZSB3aGVuIGxlYXZlIGZpbmlzaGVzXG4gICAgICAgIHRoaXMuX2xlYXZpbmcgPSB0cnVlO1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhvbGREYXRhLCAnYWZ0ZXJMZWF2ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0aGlzJDEuX2xlYXZpbmcgPSBmYWxzZTtcbiAgICAgICAgICB0aGlzJDEuJGZvcmNlVXBkYXRlKCk7XG4gICAgICAgIH0sIGtleSk7XG4gICAgICAgIHJldHVybiBwbGFjZWhvbGRlcihoLCByYXdDaGlsZClcbiAgICAgIH0gZWxzZSBpZiAobW9kZSA9PT0gJ2luLW91dCcpIHtcbiAgICAgICAgdmFyIGRlbGF5ZWRMZWF2ZTtcbiAgICAgICAgdmFyIHBlcmZvcm1MZWF2ZSA9IGZ1bmN0aW9uICgpIHsgZGVsYXllZExlYXZlKCk7IH07XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKGRhdGEsICdhZnRlckVudGVyJywgcGVyZm9ybUxlYXZlLCBrZXkpO1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhkYXRhLCAnZW50ZXJDYW5jZWxsZWQnLCBwZXJmb3JtTGVhdmUsIGtleSk7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKG9sZERhdGEsICdkZWxheUxlYXZlJywgZnVuY3Rpb24gKGxlYXZlKSB7XG4gICAgICAgICAgZGVsYXllZExlYXZlID0gbGVhdmU7XG4gICAgICAgIH0sIGtleSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJhd0NoaWxkXG4gIH1cbn07XG5cbi8qICAqL1xuXG4vLyBQcm92aWRlcyB0cmFuc2l0aW9uIHN1cHBvcnQgZm9yIGxpc3QgaXRlbXMuXG4vLyBzdXBwb3J0cyBtb3ZlIHRyYW5zaXRpb25zIHVzaW5nIHRoZSBGTElQIHRlY2huaXF1ZS5cblxuLy8gQmVjYXVzZSB0aGUgdmRvbSdzIGNoaWxkcmVuIHVwZGF0ZSBhbGdvcml0aG0gaXMgXCJ1bnN0YWJsZVwiIC0gaS5lLlxuLy8gaXQgZG9lc24ndCBndWFyYW50ZWUgdGhlIHJlbGF0aXZlIHBvc2l0aW9uaW5nIG9mIHJlbW92ZWQgZWxlbWVudHMsXG4vLyB3ZSBmb3JjZSB0cmFuc2l0aW9uLWdyb3VwIHRvIHVwZGF0ZSBpdHMgY2hpbGRyZW4gaW50byB0d28gcGFzc2VzOlxuLy8gaW4gdGhlIGZpcnN0IHBhc3MsIHdlIHJlbW92ZSBhbGwgbm9kZXMgdGhhdCBuZWVkIHRvIGJlIHJlbW92ZWQsXG4vLyB0cmlnZ2VyaW5nIHRoZWlyIGxlYXZpbmcgdHJhbnNpdGlvbjsgaW4gdGhlIHNlY29uZCBwYXNzLCB3ZSBpbnNlcnQvbW92ZVxuLy8gaW50byB0aGUgZmluYWwgZGlzaXJlZCBzdGF0ZS4gVGhpcyB3YXkgaW4gdGhlIHNlY29uZCBwYXNzIHJlbW92ZWRcbi8vIG5vZGVzIHdpbGwgcmVtYWluIHdoZXJlIHRoZXkgc2hvdWxkIGJlLlxuXG52YXIgcHJvcHMgPSBleHRlbmQoe1xuICB0YWc6IFN0cmluZyxcbiAgbW92ZUNsYXNzOiBTdHJpbmdcbn0sIHRyYW5zaXRpb25Qcm9wcyk7XG5cbmRlbGV0ZSBwcm9wcy5tb2RlO1xuXG52YXIgVHJhbnNpdGlvbkdyb3VwID0ge1xuICBwcm9wczogcHJvcHMsXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKGgpIHtcbiAgICB2YXIgdGFnID0gdGhpcy50YWcgfHwgdGhpcy4kdm5vZGUuZGF0YS50YWcgfHwgJ3NwYW4nO1xuICAgIHZhciBtYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHZhciBwcmV2Q2hpbGRyZW4gPSB0aGlzLnByZXZDaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XG4gICAgdmFyIHJhd0NoaWxkcmVuID0gdGhpcy4kc2xvdHMuZGVmYXVsdCB8fCBbXTtcbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuID0gW107XG4gICAgdmFyIHRyYW5zaXRpb25EYXRhID0gZXh0cmFjdFRyYW5zaXRpb25EYXRhKHRoaXMpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByYXdDaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGMgPSByYXdDaGlsZHJlbltpXTtcbiAgICAgIGlmIChjLnRhZykge1xuICAgICAgICBpZiAoYy5rZXkgIT0gbnVsbCAmJiBTdHJpbmcoYy5rZXkpLmluZGV4T2YoJ19fdmxpc3QnKSAhPT0gMCkge1xuICAgICAgICAgIGNoaWxkcmVuLnB1c2goYyk7XG4gICAgICAgICAgbWFwW2Mua2V5XSA9IGNcbiAgICAgICAgICA7KGMuZGF0YSB8fCAoYy5kYXRhID0ge30pKS50cmFuc2l0aW9uID0gdHJhbnNpdGlvbkRhdGE7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHZhciBvcHRzID0gYy5jb21wb25lbnRPcHRpb25zO1xuICAgICAgICAgIHZhciBuYW1lID0gb3B0c1xuICAgICAgICAgICAgPyAob3B0cy5DdG9yLm9wdGlvbnMubmFtZSB8fCBvcHRzLnRhZylcbiAgICAgICAgICAgIDogYy50YWc7XG4gICAgICAgICAgd2FybigoXCI8dHJhbnNpdGlvbi1ncm91cD4gY2hpbGRyZW4gbXVzdCBiZSBrZXllZDogPFwiICsgbmFtZSArIFwiPlwiKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocHJldkNoaWxkcmVuKSB7XG4gICAgICB2YXIga2VwdCA9IFtdO1xuICAgICAgdmFyIHJlbW92ZWQgPSBbXTtcbiAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IHByZXZDaGlsZHJlbi5sZW5ndGg7IGkkMSsrKSB7XG4gICAgICAgIHZhciBjJDEgPSBwcmV2Q2hpbGRyZW5baSQxXTtcbiAgICAgICAgYyQxLmRhdGEudHJhbnNpdGlvbiA9IHRyYW5zaXRpb25EYXRhO1xuICAgICAgICBjJDEuZGF0YS5wb3MgPSBjJDEuZWxtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBpZiAobWFwW2MkMS5rZXldKSB7XG4gICAgICAgICAga2VwdC5wdXNoKGMkMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVtb3ZlZC5wdXNoKGMkMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMua2VwdCA9IGgodGFnLCBudWxsLCBrZXB0KTtcbiAgICAgIHRoaXMucmVtb3ZlZCA9IHJlbW92ZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGgodGFnLCBudWxsLCBjaGlsZHJlbilcbiAgfSxcblxuICBiZWZvcmVVcGRhdGU6IGZ1bmN0aW9uIGJlZm9yZVVwZGF0ZSAoKSB7XG4gICAgLy8gZm9yY2UgcmVtb3ZpbmcgcGFzc1xuICAgIHRoaXMuX19wYXRjaF9fKFxuICAgICAgdGhpcy5fdm5vZGUsXG4gICAgICB0aGlzLmtlcHQsXG4gICAgICBmYWxzZSwgLy8gaHlkcmF0aW5nXG4gICAgICB0cnVlIC8vIHJlbW92ZU9ubHkgKCFpbXBvcnRhbnQsIGF2b2lkcyB1bm5lY2Vzc2FyeSBtb3ZlcylcbiAgICApO1xuICAgIHRoaXMuX3Zub2RlID0gdGhpcy5rZXB0O1xuICB9LFxuXG4gIHVwZGF0ZWQ6IGZ1bmN0aW9uIHVwZGF0ZWQgKCkge1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucHJldkNoaWxkcmVuO1xuICAgIHZhciBtb3ZlQ2xhc3MgPSB0aGlzLm1vdmVDbGFzcyB8fCAoKHRoaXMubmFtZSB8fCAndicpICsgJy1tb3ZlJyk7XG4gICAgaWYgKCFjaGlsZHJlbi5sZW5ndGggfHwgIXRoaXMuaGFzTW92ZShjaGlsZHJlblswXS5lbG0sIG1vdmVDbGFzcykpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIHdlIGRpdmlkZSB0aGUgd29yayBpbnRvIHRocmVlIGxvb3BzIHRvIGF2b2lkIG1peGluZyBET00gcmVhZHMgYW5kIHdyaXRlc1xuICAgIC8vIGluIGVhY2ggaXRlcmF0aW9uIC0gd2hpY2ggaGVscHMgcHJldmVudCBsYXlvdXQgdGhyYXNoaW5nLlxuICAgIGNoaWxkcmVuLmZvckVhY2goY2FsbFBlbmRpbmdDYnMpO1xuICAgIGNoaWxkcmVuLmZvckVhY2gocmVjb3JkUG9zaXRpb24pO1xuICAgIGNoaWxkcmVuLmZvckVhY2goYXBwbHlUcmFuc2xhdGlvbik7XG5cbiAgICAvLyBmb3JjZSByZWZsb3cgdG8gcHV0IGV2ZXJ5dGhpbmcgaW4gcG9zaXRpb25cbiAgICB2YXIgZiA9IGRvY3VtZW50LmJvZHkub2Zmc2V0SGVpZ2h0OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgICBjaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XG4gICAgICBpZiAoYy5kYXRhLm1vdmVkKSB7XG4gICAgICAgIHZhciBlbCA9IGMuZWxtO1xuICAgICAgICB2YXIgcyA9IGVsLnN0eWxlO1xuICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIG1vdmVDbGFzcyk7XG4gICAgICAgIHMudHJhbnNmb3JtID0gcy5XZWJraXRUcmFuc2Zvcm0gPSBzLnRyYW5zaXRpb25EdXJhdGlvbiA9ICcnO1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKHRyYW5zaXRpb25FbmRFdmVudCwgZWwuX21vdmVDYiA9IGZ1bmN0aW9uIGNiIChlKSB7XG4gICAgICAgICAgaWYgKCFlIHx8IC90cmFuc2Zvcm0kLy50ZXN0KGUucHJvcGVydHlOYW1lKSkge1xuICAgICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcih0cmFuc2l0aW9uRW5kRXZlbnQsIGNiKTtcbiAgICAgICAgICAgIGVsLl9tb3ZlQ2IgPSBudWxsO1xuICAgICAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBtb3ZlQ2xhc3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG5cbiAgbWV0aG9kczoge1xuICAgIGhhc01vdmU6IGZ1bmN0aW9uIGhhc01vdmUgKGVsLCBtb3ZlQ2xhc3MpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKCFoYXNUcmFuc2l0aW9uKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMuX2hhc01vdmUgIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faGFzTW92ZVxuICAgICAgfVxuICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBtb3ZlQ2xhc3MpO1xuICAgICAgdmFyIGluZm8gPSBnZXRUcmFuc2l0aW9uSW5mbyhlbCk7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIG1vdmVDbGFzcyk7XG4gICAgICByZXR1cm4gKHRoaXMuX2hhc01vdmUgPSBpbmZvLmhhc1RyYW5zZm9ybSlcbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGNhbGxQZW5kaW5nQ2JzIChjKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoYy5lbG0uX21vdmVDYikge1xuICAgIGMuZWxtLl9tb3ZlQ2IoKTtcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGMuZWxtLl9lbnRlckNiKSB7XG4gICAgYy5lbG0uX2VudGVyQ2IoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZWNvcmRQb3NpdGlvbiAoYykge1xuICBjLmRhdGEubmV3UG9zID0gYy5lbG0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG59XG5cbmZ1bmN0aW9uIGFwcGx5VHJhbnNsYXRpb24gKGMpIHtcbiAgdmFyIG9sZFBvcyA9IGMuZGF0YS5wb3M7XG4gIHZhciBuZXdQb3MgPSBjLmRhdGEubmV3UG9zO1xuICB2YXIgZHggPSBvbGRQb3MubGVmdCAtIG5ld1Bvcy5sZWZ0O1xuICB2YXIgZHkgPSBvbGRQb3MudG9wIC0gbmV3UG9zLnRvcDtcbiAgaWYgKGR4IHx8IGR5KSB7XG4gICAgYy5kYXRhLm1vdmVkID0gdHJ1ZTtcbiAgICB2YXIgcyA9IGMuZWxtLnN0eWxlO1xuICAgIHMudHJhbnNmb3JtID0gcy5XZWJraXRUcmFuc2Zvcm0gPSBcInRyYW5zbGF0ZShcIiArIGR4ICsgXCJweCxcIiArIGR5ICsgXCJweClcIjtcbiAgICBzLnRyYW5zaXRpb25EdXJhdGlvbiA9ICcwcyc7XG4gIH1cbn1cblxudmFyIHBsYXRmb3JtQ29tcG9uZW50cyA9IHtcbiAgVHJhbnNpdGlvbjogVHJhbnNpdGlvbixcbiAgVHJhbnNpdGlvbkdyb3VwOiBUcmFuc2l0aW9uR3JvdXBcbn07XG5cbi8qICAqL1xuXG4vLyBpbnN0YWxsIHBsYXRmb3JtIHNwZWNpZmljIHV0aWxzXG5WdWUkMy5jb25maWcuaXNVbmtub3duRWxlbWVudCA9IGlzVW5rbm93bkVsZW1lbnQ7XG5WdWUkMy5jb25maWcuaXNSZXNlcnZlZFRhZyA9IGlzUmVzZXJ2ZWRUYWc7XG5WdWUkMy5jb25maWcuZ2V0VGFnTmFtZXNwYWNlID0gZ2V0VGFnTmFtZXNwYWNlO1xuVnVlJDMuY29uZmlnLm11c3RVc2VQcm9wID0gbXVzdFVzZVByb3A7XG5cbi8vIGluc3RhbGwgcGxhdGZvcm0gcnVudGltZSBkaXJlY3RpdmVzICYgY29tcG9uZW50c1xuZXh0ZW5kKFZ1ZSQzLm9wdGlvbnMuZGlyZWN0aXZlcywgcGxhdGZvcm1EaXJlY3RpdmVzKTtcbmV4dGVuZChWdWUkMy5vcHRpb25zLmNvbXBvbmVudHMsIHBsYXRmb3JtQ29tcG9uZW50cyk7XG5cbi8vIGluc3RhbGwgcGxhdGZvcm0gcGF0Y2ggZnVuY3Rpb25cblZ1ZSQzLnByb3RvdHlwZS5fX3BhdGNoX18gPSBpbkJyb3dzZXIgPyBwYXRjaCQxIDogbm9vcDtcblxuLy8gd3JhcCBtb3VudFxuVnVlJDMucHJvdG90eXBlLiRtb3VudCA9IGZ1bmN0aW9uIChcbiAgZWwsXG4gIGh5ZHJhdGluZ1xuKSB7XG4gIGVsID0gZWwgJiYgaW5Ccm93c2VyID8gcXVlcnkoZWwpIDogdW5kZWZpbmVkO1xuICByZXR1cm4gdGhpcy5fbW91bnQoZWwsIGh5ZHJhdGluZylcbn07XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgaW5Ccm93c2VyICYmIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICBjb25zb2xlW2NvbnNvbGUuaW5mbyA/ICdpbmZvJyA6ICdsb2cnXShcbiAgICBcIllvdSBhcmUgcnVubmluZyBWdWUgaW4gZGV2ZWxvcG1lbnQgbW9kZS5cXG5cIiArXG4gICAgXCJNYWtlIHN1cmUgdG8gdHVybiBvbiBwcm9kdWN0aW9uIG1vZGUgd2hlbiBkZXBsb3lpbmcgZm9yIHByb2R1Y3Rpb24uXFxuXCIgK1xuICAgIFwiU2VlIG1vcmUgdGlwcyBhdCBodHRwczovL3Z1ZWpzLm9yZy9ndWlkZS9kZXBsb3ltZW50Lmh0bWxcIlxuICApO1xufVxuXG4vLyBkZXZ0b29scyBnbG9iYWwgaG9va1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICBpZiAoY29uZmlnLmRldnRvb2xzKSB7XG4gICAgaWYgKGRldnRvb2xzKSB7XG4gICAgICBkZXZ0b29scy5lbWl0KCdpbml0JywgVnVlJDMpO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICBpbkJyb3dzZXIgJiYgIWlzRWRnZSAmJiAvQ2hyb21lXFwvXFxkKy8udGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudClcbiAgICApIHtcbiAgICAgIGNvbnNvbGVbY29uc29sZS5pbmZvID8gJ2luZm8nIDogJ2xvZyddKFxuICAgICAgICAnRG93bmxvYWQgdGhlIFZ1ZSBEZXZ0b29scyBleHRlbnNpb24gZm9yIGEgYmV0dGVyIGRldmVsb3BtZW50IGV4cGVyaWVuY2U6XFxuJyArXG4gICAgICAgICdodHRwczovL2dpdGh1Yi5jb20vdnVlanMvdnVlLWRldnRvb2xzJ1xuICAgICAgKTtcbiAgICB9XG4gIH1cbn0sIDApO1xuXG4vKiAgKi9cblxuLy8gY2hlY2sgd2hldGhlciBjdXJyZW50IGJyb3dzZXIgZW5jb2RlcyBhIGNoYXIgaW5zaWRlIGF0dHJpYnV0ZSB2YWx1ZXNcbmZ1bmN0aW9uIHNob3VsZERlY29kZSAoY29udGVudCwgZW5jb2RlZCkge1xuICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGRpdi5pbm5lckhUTUwgPSBcIjxkaXYgYT1cXFwiXCIgKyBjb250ZW50ICsgXCJcXFwiPlwiO1xuICByZXR1cm4gZGl2LmlubmVySFRNTC5pbmRleE9mKGVuY29kZWQpID4gMFxufVxuXG4vLyAjMzY2M1xuLy8gSUUgZW5jb2RlcyBuZXdsaW5lcyBpbnNpZGUgYXR0cmlidXRlIHZhbHVlcyB3aGlsZSBvdGhlciBicm93c2VycyBkb24ndFxudmFyIHNob3VsZERlY29kZU5ld2xpbmVzID0gaW5Ccm93c2VyID8gc2hvdWxkRGVjb2RlKCdcXG4nLCAnJiMxMDsnKSA6IGZhbHNlO1xuXG4vKiAgKi9cblxudmFyIGRlY29kZXI7XG5cbmZ1bmN0aW9uIGRlY29kZSAoaHRtbCkge1xuICBkZWNvZGVyID0gZGVjb2RlciB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgZGVjb2Rlci5pbm5lckhUTUwgPSBodG1sO1xuICByZXR1cm4gZGVjb2Rlci50ZXh0Q29udGVudFxufVxuXG4vKiAgKi9cblxudmFyIGlzVW5hcnlUYWcgPSBtYWtlTWFwKFxuICAnYXJlYSxiYXNlLGJyLGNvbCxlbWJlZCxmcmFtZSxocixpbWcsaW5wdXQsaXNpbmRleCxrZXlnZW4sJyArXG4gICdsaW5rLG1ldGEscGFyYW0sc291cmNlLHRyYWNrLHdicicsXG4gIHRydWVcbik7XG5cbi8vIEVsZW1lbnRzIHRoYXQgeW91IGNhbiwgaW50ZW50aW9uYWxseSwgbGVhdmUgb3BlblxuLy8gKGFuZCB3aGljaCBjbG9zZSB0aGVtc2VsdmVzKVxudmFyIGNhbkJlTGVmdE9wZW5UYWcgPSBtYWtlTWFwKFxuICAnY29sZ3JvdXAsZGQsZHQsbGksb3B0aW9ucyxwLHRkLHRmb290LHRoLHRoZWFkLHRyLHNvdXJjZScsXG4gIHRydWVcbik7XG5cbi8vIEhUTUw1IHRhZ3MgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvaW5kaWNlcy5odG1sI2VsZW1lbnRzLTNcbi8vIFBocmFzaW5nIENvbnRlbnQgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZG9tLmh0bWwjcGhyYXNpbmctY29udGVudFxudmFyIGlzTm9uUGhyYXNpbmdUYWcgPSBtYWtlTWFwKFxuICAnYWRkcmVzcyxhcnRpY2xlLGFzaWRlLGJhc2UsYmxvY2txdW90ZSxib2R5LGNhcHRpb24sY29sLGNvbGdyb3VwLGRkLCcgK1xuICAnZGV0YWlscyxkaWFsb2csZGl2LGRsLGR0LGZpZWxkc2V0LGZpZ2NhcHRpb24sZmlndXJlLGZvb3Rlcixmb3JtLCcgK1xuICAnaDEsaDIsaDMsaDQsaDUsaDYsaGVhZCxoZWFkZXIsaGdyb3VwLGhyLGh0bWwsbGVnZW5kLGxpLG1lbnVpdGVtLG1ldGEsJyArXG4gICdvcHRncm91cCxvcHRpb24scGFyYW0scnAscnQsc291cmNlLHN0eWxlLHN1bW1hcnksdGJvZHksdGQsdGZvb3QsdGgsdGhlYWQsJyArXG4gICd0aXRsZSx0cix0cmFjaycsXG4gIHRydWVcbik7XG5cbi8qKlxuICogTm90IHR5cGUtY2hlY2tpbmcgdGhpcyBmaWxlIGJlY2F1c2UgaXQncyBtb3N0bHkgdmVuZG9yIGNvZGUuXG4gKi9cblxuLyohXG4gKiBIVE1MIFBhcnNlciBCeSBKb2huIFJlc2lnIChlam9obi5vcmcpXG4gKiBNb2RpZmllZCBieSBKdXJpeSBcImthbmdheFwiIFpheXRzZXZcbiAqIE9yaWdpbmFsIGNvZGUgYnkgRXJpayBBcnZpZHNzb24sIE1vemlsbGEgUHVibGljIExpY2Vuc2VcbiAqIGh0dHA6Ly9lcmlrLmVhZS5uZXQvc2ltcGxlaHRtbHBhcnNlci9zaW1wbGVodG1scGFyc2VyLmpzXG4gKi9cblxuLy8gUmVndWxhciBFeHByZXNzaW9ucyBmb3IgcGFyc2luZyB0YWdzIGFuZCBhdHRyaWJ1dGVzXG52YXIgc2luZ2xlQXR0cklkZW50aWZpZXIgPSAvKFteXFxzXCInPD4vPV0rKS87XG52YXIgc2luZ2xlQXR0ckFzc2lnbiA9IC8oPzo9KS87XG52YXIgc2luZ2xlQXR0clZhbHVlcyA9IFtcbiAgLy8gYXR0ciB2YWx1ZSBkb3VibGUgcXVvdGVzXG4gIC9cIihbXlwiXSopXCIrLy5zb3VyY2UsXG4gIC8vIGF0dHIgdmFsdWUsIHNpbmdsZSBxdW90ZXNcbiAgLycoW14nXSopJysvLnNvdXJjZSxcbiAgLy8gYXR0ciB2YWx1ZSwgbm8gcXVvdGVzXG4gIC8oW15cXHNcIic9PD5gXSspLy5zb3VyY2Vcbl07XG52YXIgYXR0cmlidXRlID0gbmV3IFJlZ0V4cChcbiAgJ15cXFxccyonICsgc2luZ2xlQXR0cklkZW50aWZpZXIuc291cmNlICtcbiAgJyg/OlxcXFxzKignICsgc2luZ2xlQXR0ckFzc2lnbi5zb3VyY2UgKyAnKScgK1xuICAnXFxcXHMqKD86JyArIHNpbmdsZUF0dHJWYWx1ZXMuam9pbignfCcpICsgJykpPydcbik7XG5cbi8vIGNvdWxkIHVzZSBodHRwczovL3d3dy53My5vcmcvVFIvMTk5OS9SRUMteG1sLW5hbWVzLTE5OTkwMTE0LyNOVC1RTmFtZVxuLy8gYnV0IGZvciBWdWUgdGVtcGxhdGVzIHdlIGNhbiBlbmZvcmNlIGEgc2ltcGxlIGNoYXJzZXRcbnZhciBuY25hbWUgPSAnW2EtekEtWl9dW1xcXFx3XFxcXC1cXFxcLl0qJztcbnZhciBxbmFtZUNhcHR1cmUgPSAnKCg/OicgKyBuY25hbWUgKyAnXFxcXDopPycgKyBuY25hbWUgKyAnKSc7XG52YXIgc3RhcnRUYWdPcGVuID0gbmV3IFJlZ0V4cCgnXjwnICsgcW5hbWVDYXB0dXJlKTtcbnZhciBzdGFydFRhZ0Nsb3NlID0gL15cXHMqKFxcLz8pPi87XG52YXIgZW5kVGFnID0gbmV3IFJlZ0V4cCgnXjxcXFxcLycgKyBxbmFtZUNhcHR1cmUgKyAnW14+XSo+Jyk7XG52YXIgZG9jdHlwZSA9IC9ePCFET0NUWVBFIFtePl0rPi9pO1xudmFyIGNvbW1lbnQgPSAvXjwhLS0vO1xudmFyIGNvbmRpdGlvbmFsQ29tbWVudCA9IC9ePCFcXFsvO1xuXG52YXIgSVNfUkVHRVhfQ0FQVFVSSU5HX0JST0tFTiA9IGZhbHNlO1xuJ3gnLnJlcGxhY2UoL3goLik/L2csIGZ1bmN0aW9uIChtLCBnKSB7XG4gIElTX1JFR0VYX0NBUFRVUklOR19CUk9LRU4gPSBnID09PSAnJztcbn0pO1xuXG4vLyBTcGVjaWFsIEVsZW1lbnRzIChjYW4gY29udGFpbiBhbnl0aGluZylcbnZhciBpc1NjcmlwdE9yU3R5bGUgPSBtYWtlTWFwKCdzY3JpcHQsc3R5bGUnLCB0cnVlKTtcbnZhciByZUNhY2hlID0ge307XG5cbnZhciBsdFJFID0gLyZsdDsvZztcbnZhciBndFJFID0gLyZndDsvZztcbnZhciBubFJFID0gLyYjMTA7L2c7XG52YXIgYW1wUkUgPSAvJmFtcDsvZztcbnZhciBxdW90ZVJFID0gLyZxdW90Oy9nO1xuXG5mdW5jdGlvbiBkZWNvZGVBdHRyICh2YWx1ZSwgc2hvdWxkRGVjb2RlTmV3bGluZXMpIHtcbiAgaWYgKHNob3VsZERlY29kZU5ld2xpbmVzKSB7XG4gICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKG5sUkUsICdcXG4nKTtcbiAgfVxuICByZXR1cm4gdmFsdWVcbiAgICAucmVwbGFjZShsdFJFLCAnPCcpXG4gICAgLnJlcGxhY2UoZ3RSRSwgJz4nKVxuICAgIC5yZXBsYWNlKGFtcFJFLCAnJicpXG4gICAgLnJlcGxhY2UocXVvdGVSRSwgJ1wiJylcbn1cblxuZnVuY3Rpb24gcGFyc2VIVE1MIChodG1sLCBvcHRpb25zKSB7XG4gIHZhciBzdGFjayA9IFtdO1xuICB2YXIgZXhwZWN0SFRNTCA9IG9wdGlvbnMuZXhwZWN0SFRNTDtcbiAgdmFyIGlzVW5hcnlUYWckJDEgPSBvcHRpb25zLmlzVW5hcnlUYWcgfHwgbm87XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsYXN0LCBsYXN0VGFnO1xuICB3aGlsZSAoaHRtbCkge1xuICAgIGxhc3QgPSBodG1sO1xuICAgIC8vIE1ha2Ugc3VyZSB3ZSdyZSBub3QgaW4gYSBzY3JpcHQgb3Igc3R5bGUgZWxlbWVudFxuICAgIGlmICghbGFzdFRhZyB8fCAhaXNTY3JpcHRPclN0eWxlKGxhc3RUYWcpKSB7XG4gICAgICB2YXIgdGV4dEVuZCA9IGh0bWwuaW5kZXhPZignPCcpO1xuICAgICAgaWYgKHRleHRFbmQgPT09IDApIHtcbiAgICAgICAgLy8gQ29tbWVudDpcbiAgICAgICAgaWYgKGNvbW1lbnQudGVzdChodG1sKSkge1xuICAgICAgICAgIHZhciBjb21tZW50RW5kID0gaHRtbC5pbmRleE9mKCctLT4nKTtcblxuICAgICAgICAgIGlmIChjb21tZW50RW5kID49IDApIHtcbiAgICAgICAgICAgIGFkdmFuY2UoY29tbWVudEVuZCArIDMpO1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbmRpdGlvbmFsX2NvbW1lbnQjRG93bmxldmVsLXJldmVhbGVkX2NvbmRpdGlvbmFsX2NvbW1lbnRcbiAgICAgICAgaWYgKGNvbmRpdGlvbmFsQ29tbWVudC50ZXN0KGh0bWwpKSB7XG4gICAgICAgICAgdmFyIGNvbmRpdGlvbmFsRW5kID0gaHRtbC5pbmRleE9mKCddPicpO1xuXG4gICAgICAgICAgaWYgKGNvbmRpdGlvbmFsRW5kID49IDApIHtcbiAgICAgICAgICAgIGFkdmFuY2UoY29uZGl0aW9uYWxFbmQgKyAyKTtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gRG9jdHlwZTpcbiAgICAgICAgdmFyIGRvY3R5cGVNYXRjaCA9IGh0bWwubWF0Y2goZG9jdHlwZSk7XG4gICAgICAgIGlmIChkb2N0eXBlTWF0Y2gpIHtcbiAgICAgICAgICBhZHZhbmNlKGRvY3R5cGVNYXRjaFswXS5sZW5ndGgpO1xuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyBFbmQgdGFnOlxuICAgICAgICB2YXIgZW5kVGFnTWF0Y2ggPSBodG1sLm1hdGNoKGVuZFRhZyk7XG4gICAgICAgIGlmIChlbmRUYWdNYXRjaCkge1xuICAgICAgICAgIHZhciBjdXJJbmRleCA9IGluZGV4O1xuICAgICAgICAgIGFkdmFuY2UoZW5kVGFnTWF0Y2hbMF0ubGVuZ3RoKTtcbiAgICAgICAgICBwYXJzZUVuZFRhZyhlbmRUYWdNYXRjaFsxXSwgY3VySW5kZXgsIGluZGV4KTtcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gU3RhcnQgdGFnOlxuICAgICAgICB2YXIgc3RhcnRUYWdNYXRjaCA9IHBhcnNlU3RhcnRUYWcoKTtcbiAgICAgICAgaWYgKHN0YXJ0VGFnTWF0Y2gpIHtcbiAgICAgICAgICBoYW5kbGVTdGFydFRhZyhzdGFydFRhZ01hdGNoKTtcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciB0ZXh0ID0gKHZvaWQgMCksIHJlc3QkMSA9ICh2b2lkIDApLCBuZXh0ID0gKHZvaWQgMCk7XG4gICAgICBpZiAodGV4dEVuZCA+IDApIHtcbiAgICAgICAgcmVzdCQxID0gaHRtbC5zbGljZSh0ZXh0RW5kKTtcbiAgICAgICAgd2hpbGUgKFxuICAgICAgICAgICFlbmRUYWcudGVzdChyZXN0JDEpICYmXG4gICAgICAgICAgIXN0YXJ0VGFnT3Blbi50ZXN0KHJlc3QkMSkgJiZcbiAgICAgICAgICAhY29tbWVudC50ZXN0KHJlc3QkMSkgJiZcbiAgICAgICAgICAhY29uZGl0aW9uYWxDb21tZW50LnRlc3QocmVzdCQxKVxuICAgICAgICApIHtcbiAgICAgICAgICAvLyA8IGluIHBsYWluIHRleHQsIGJlIGZvcmdpdmluZyBhbmQgdHJlYXQgaXQgYXMgdGV4dFxuICAgICAgICAgIG5leHQgPSByZXN0JDEuaW5kZXhPZignPCcsIDEpO1xuICAgICAgICAgIGlmIChuZXh0IDwgMCkgeyBicmVhayB9XG4gICAgICAgICAgdGV4dEVuZCArPSBuZXh0O1xuICAgICAgICAgIHJlc3QkMSA9IGh0bWwuc2xpY2UodGV4dEVuZCk7XG4gICAgICAgIH1cbiAgICAgICAgdGV4dCA9IGh0bWwuc3Vic3RyaW5nKDAsIHRleHRFbmQpO1xuICAgICAgICBhZHZhbmNlKHRleHRFbmQpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGV4dEVuZCA8IDApIHtcbiAgICAgICAgdGV4dCA9IGh0bWw7XG4gICAgICAgIGh0bWwgPSAnJztcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMuY2hhcnMgJiYgdGV4dCkge1xuICAgICAgICBvcHRpb25zLmNoYXJzKHRleHQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgc3RhY2tlZFRhZyA9IGxhc3RUYWcudG9Mb3dlckNhc2UoKTtcbiAgICAgIHZhciByZVN0YWNrZWRUYWcgPSByZUNhY2hlW3N0YWNrZWRUYWddIHx8IChyZUNhY2hlW3N0YWNrZWRUYWddID0gbmV3IFJlZ0V4cCgnKFtcXFxcc1xcXFxTXSo/KSg8LycgKyBzdGFja2VkVGFnICsgJ1tePl0qPiknLCAnaScpKTtcbiAgICAgIHZhciBlbmRUYWdMZW5ndGggPSAwO1xuICAgICAgdmFyIHJlc3QgPSBodG1sLnJlcGxhY2UocmVTdGFja2VkVGFnLCBmdW5jdGlvbiAoYWxsLCB0ZXh0LCBlbmRUYWcpIHtcbiAgICAgICAgZW5kVGFnTGVuZ3RoID0gZW5kVGFnLmxlbmd0aDtcbiAgICAgICAgaWYgKHN0YWNrZWRUYWcgIT09ICdzY3JpcHQnICYmIHN0YWNrZWRUYWcgIT09ICdzdHlsZScgJiYgc3RhY2tlZFRhZyAhPT0gJ25vc2NyaXB0Jykge1xuICAgICAgICAgIHRleHQgPSB0ZXh0XG4gICAgICAgICAgICAucmVwbGFjZSgvPCEtLShbXFxzXFxTXSo/KS0tPi9nLCAnJDEnKVxuICAgICAgICAgICAgLnJlcGxhY2UoLzwhXFxbQ0RBVEFcXFsoW1xcc1xcU10qPyldXT4vZywgJyQxJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuY2hhcnMpIHtcbiAgICAgICAgICBvcHRpb25zLmNoYXJzKHRleHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnJ1xuICAgICAgfSk7XG4gICAgICBpbmRleCArPSBodG1sLmxlbmd0aCAtIHJlc3QubGVuZ3RoO1xuICAgICAgaHRtbCA9IHJlc3Q7XG4gICAgICBwYXJzZUVuZFRhZyhzdGFja2VkVGFnLCBpbmRleCAtIGVuZFRhZ0xlbmd0aCwgaW5kZXgpO1xuICAgIH1cblxuICAgIGlmIChodG1sID09PSBsYXN0ICYmIG9wdGlvbnMuY2hhcnMpIHtcbiAgICAgIG9wdGlvbnMuY2hhcnMoaHRtbCk7XG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIC8vIENsZWFuIHVwIGFueSByZW1haW5pbmcgdGFnc1xuICBwYXJzZUVuZFRhZygpO1xuXG4gIGZ1bmN0aW9uIGFkdmFuY2UgKG4pIHtcbiAgICBpbmRleCArPSBuO1xuICAgIGh0bWwgPSBodG1sLnN1YnN0cmluZyhuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlU3RhcnRUYWcgKCkge1xuICAgIHZhciBzdGFydCA9IGh0bWwubWF0Y2goc3RhcnRUYWdPcGVuKTtcbiAgICBpZiAoc3RhcnQpIHtcbiAgICAgIHZhciBtYXRjaCA9IHtcbiAgICAgICAgdGFnTmFtZTogc3RhcnRbMV0sXG4gICAgICAgIGF0dHJzOiBbXSxcbiAgICAgICAgc3RhcnQ6IGluZGV4XG4gICAgICB9O1xuICAgICAgYWR2YW5jZShzdGFydFswXS5sZW5ndGgpO1xuICAgICAgdmFyIGVuZCwgYXR0cjtcbiAgICAgIHdoaWxlICghKGVuZCA9IGh0bWwubWF0Y2goc3RhcnRUYWdDbG9zZSkpICYmIChhdHRyID0gaHRtbC5tYXRjaChhdHRyaWJ1dGUpKSkge1xuICAgICAgICBhZHZhbmNlKGF0dHJbMF0ubGVuZ3RoKTtcbiAgICAgICAgbWF0Y2guYXR0cnMucHVzaChhdHRyKTtcbiAgICAgIH1cbiAgICAgIGlmIChlbmQpIHtcbiAgICAgICAgbWF0Y2gudW5hcnlTbGFzaCA9IGVuZFsxXTtcbiAgICAgICAgYWR2YW5jZShlbmRbMF0ubGVuZ3RoKTtcbiAgICAgICAgbWF0Y2guZW5kID0gaW5kZXg7XG4gICAgICAgIHJldHVybiBtYXRjaFxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVN0YXJ0VGFnIChtYXRjaCkge1xuICAgIHZhciB0YWdOYW1lID0gbWF0Y2gudGFnTmFtZTtcbiAgICB2YXIgdW5hcnlTbGFzaCA9IG1hdGNoLnVuYXJ5U2xhc2g7XG5cbiAgICBpZiAoZXhwZWN0SFRNTCkge1xuICAgICAgaWYgKGxhc3RUYWcgPT09ICdwJyAmJiBpc05vblBocmFzaW5nVGFnKHRhZ05hbWUpKSB7XG4gICAgICAgIHBhcnNlRW5kVGFnKGxhc3RUYWcpO1xuICAgICAgfVxuICAgICAgaWYgKGNhbkJlTGVmdE9wZW5UYWcodGFnTmFtZSkgJiYgbGFzdFRhZyA9PT0gdGFnTmFtZSkge1xuICAgICAgICBwYXJzZUVuZFRhZyh0YWdOYW1lKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgdW5hcnkgPSBpc1VuYXJ5VGFnJCQxKHRhZ05hbWUpIHx8IHRhZ05hbWUgPT09ICdodG1sJyAmJiBsYXN0VGFnID09PSAnaGVhZCcgfHwgISF1bmFyeVNsYXNoO1xuXG4gICAgdmFyIGwgPSBtYXRjaC5hdHRycy5sZW5ndGg7XG4gICAgdmFyIGF0dHJzID0gbmV3IEFycmF5KGwpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICB2YXIgYXJncyA9IG1hdGNoLmF0dHJzW2ldO1xuICAgICAgLy8gaGFja2lzaCB3b3JrIGFyb3VuZCBGRiBidWcgaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MzY5Nzc4XG4gICAgICBpZiAoSVNfUkVHRVhfQ0FQVFVSSU5HX0JST0tFTiAmJiBhcmdzWzBdLmluZGV4T2YoJ1wiXCInKSA9PT0gLTEpIHtcbiAgICAgICAgaWYgKGFyZ3NbM10gPT09ICcnKSB7IGRlbGV0ZSBhcmdzWzNdOyB9XG4gICAgICAgIGlmIChhcmdzWzRdID09PSAnJykgeyBkZWxldGUgYXJnc1s0XTsgfVxuICAgICAgICBpZiAoYXJnc1s1XSA9PT0gJycpIHsgZGVsZXRlIGFyZ3NbNV07IH1cbiAgICAgIH1cbiAgICAgIHZhciB2YWx1ZSA9IGFyZ3NbM10gfHwgYXJnc1s0XSB8fCBhcmdzWzVdIHx8ICcnO1xuICAgICAgYXR0cnNbaV0gPSB7XG4gICAgICAgIG5hbWU6IGFyZ3NbMV0sXG4gICAgICAgIHZhbHVlOiBkZWNvZGVBdHRyKFxuICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgIG9wdGlvbnMuc2hvdWxkRGVjb2RlTmV3bGluZXNcbiAgICAgICAgKVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoIXVuYXJ5KSB7XG4gICAgICBzdGFjay5wdXNoKHsgdGFnOiB0YWdOYW1lLCBsb3dlckNhc2VkVGFnOiB0YWdOYW1lLnRvTG93ZXJDYXNlKCksIGF0dHJzOiBhdHRycyB9KTtcbiAgICAgIGxhc3RUYWcgPSB0YWdOYW1lO1xuICAgICAgdW5hcnlTbGFzaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnN0YXJ0KSB7XG4gICAgICBvcHRpb25zLnN0YXJ0KHRhZ05hbWUsIGF0dHJzLCB1bmFyeSwgbWF0Y2guc3RhcnQsIG1hdGNoLmVuZCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VFbmRUYWcgKHRhZ05hbWUsIHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgcG9zLCBsb3dlckNhc2VkVGFnTmFtZTtcbiAgICBpZiAoc3RhcnQgPT0gbnVsbCkgeyBzdGFydCA9IGluZGV4OyB9XG4gICAgaWYgKGVuZCA9PSBudWxsKSB7IGVuZCA9IGluZGV4OyB9XG5cbiAgICBpZiAodGFnTmFtZSkge1xuICAgICAgbG93ZXJDYXNlZFRhZ05hbWUgPSB0YWdOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgLy8gRmluZCB0aGUgY2xvc2VzdCBvcGVuZWQgdGFnIG9mIHRoZSBzYW1lIHR5cGVcbiAgICBpZiAodGFnTmFtZSkge1xuICAgICAgZm9yIChwb3MgPSBzdGFjay5sZW5ndGggLSAxOyBwb3MgPj0gMDsgcG9zLS0pIHtcbiAgICAgICAgaWYgKHN0YWNrW3Bvc10ubG93ZXJDYXNlZFRhZyA9PT0gbG93ZXJDYXNlZFRhZ05hbWUpIHtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIElmIG5vIHRhZyBuYW1lIGlzIHByb3ZpZGVkLCBjbGVhbiBzaG9wXG4gICAgICBwb3MgPSAwO1xuICAgIH1cblxuICAgIGlmIChwb3MgPj0gMCkge1xuICAgICAgLy8gQ2xvc2UgYWxsIHRoZSBvcGVuIGVsZW1lbnRzLCB1cCB0aGUgc3RhY2tcbiAgICAgIGZvciAodmFyIGkgPSBzdGFjay5sZW5ndGggLSAxOyBpID49IHBvczsgaS0tKSB7XG4gICAgICAgIGlmIChvcHRpb25zLmVuZCkge1xuICAgICAgICAgIG9wdGlvbnMuZW5kKHN0YWNrW2ldLnRhZywgc3RhcnQsIGVuZCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gUmVtb3ZlIHRoZSBvcGVuIGVsZW1lbnRzIGZyb20gdGhlIHN0YWNrXG4gICAgICBzdGFjay5sZW5ndGggPSBwb3M7XG4gICAgICBsYXN0VGFnID0gcG9zICYmIHN0YWNrW3BvcyAtIDFdLnRhZztcbiAgICB9IGVsc2UgaWYgKGxvd2VyQ2FzZWRUYWdOYW1lID09PSAnYnInKSB7XG4gICAgICBpZiAob3B0aW9ucy5zdGFydCkge1xuICAgICAgICBvcHRpb25zLnN0YXJ0KHRhZ05hbWUsIFtdLCB0cnVlLCBzdGFydCwgZW5kKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGxvd2VyQ2FzZWRUYWdOYW1lID09PSAncCcpIHtcbiAgICAgIGlmIChvcHRpb25zLnN0YXJ0KSB7XG4gICAgICAgIG9wdGlvbnMuc3RhcnQodGFnTmFtZSwgW10sIGZhbHNlLCBzdGFydCwgZW5kKTtcbiAgICAgIH1cbiAgICAgIGlmIChvcHRpb25zLmVuZCkge1xuICAgICAgICBvcHRpb25zLmVuZCh0YWdOYW1lLCBzdGFydCwgZW5kKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHBhcnNlRmlsdGVycyAoZXhwKSB7XG4gIHZhciBpblNpbmdsZSA9IGZhbHNlO1xuICB2YXIgaW5Eb3VibGUgPSBmYWxzZTtcbiAgdmFyIGluVGVtcGxhdGVTdHJpbmcgPSBmYWxzZTtcbiAgdmFyIGluUmVnZXggPSBmYWxzZTtcbiAgdmFyIGN1cmx5ID0gMDtcbiAgdmFyIHNxdWFyZSA9IDA7XG4gIHZhciBwYXJlbiA9IDA7XG4gIHZhciBsYXN0RmlsdGVySW5kZXggPSAwO1xuICB2YXIgYywgcHJldiwgaSwgZXhwcmVzc2lvbiwgZmlsdGVycztcblxuICBmb3IgKGkgPSAwOyBpIDwgZXhwLmxlbmd0aDsgaSsrKSB7XG4gICAgcHJldiA9IGM7XG4gICAgYyA9IGV4cC5jaGFyQ29kZUF0KGkpO1xuICAgIGlmIChpblNpbmdsZSkge1xuICAgICAgaWYgKGMgPT09IDB4MjcgJiYgcHJldiAhPT0gMHg1QykgeyBpblNpbmdsZSA9IGZhbHNlOyB9XG4gICAgfSBlbHNlIGlmIChpbkRvdWJsZSkge1xuICAgICAgaWYgKGMgPT09IDB4MjIgJiYgcHJldiAhPT0gMHg1QykgeyBpbkRvdWJsZSA9IGZhbHNlOyB9XG4gICAgfSBlbHNlIGlmIChpblRlbXBsYXRlU3RyaW5nKSB7XG4gICAgICBpZiAoYyA9PT0gMHg2MCAmJiBwcmV2ICE9PSAweDVDKSB7IGluVGVtcGxhdGVTdHJpbmcgPSBmYWxzZTsgfVxuICAgIH0gZWxzZSBpZiAoaW5SZWdleCkge1xuICAgICAgaWYgKGMgPT09IDB4MmYgJiYgcHJldiAhPT0gMHg1QykgeyBpblJlZ2V4ID0gZmFsc2U7IH1cbiAgICB9IGVsc2UgaWYgKFxuICAgICAgYyA9PT0gMHg3QyAmJiAvLyBwaXBlXG4gICAgICBleHAuY2hhckNvZGVBdChpICsgMSkgIT09IDB4N0MgJiZcbiAgICAgIGV4cC5jaGFyQ29kZUF0KGkgLSAxKSAhPT0gMHg3QyAmJlxuICAgICAgIWN1cmx5ICYmICFzcXVhcmUgJiYgIXBhcmVuXG4gICAgKSB7XG4gICAgICBpZiAoZXhwcmVzc2lvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIGZpcnN0IGZpbHRlciwgZW5kIG9mIGV4cHJlc3Npb25cbiAgICAgICAgbGFzdEZpbHRlckluZGV4ID0gaSArIDE7XG4gICAgICAgIGV4cHJlc3Npb24gPSBleHAuc2xpY2UoMCwgaSkudHJpbSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHVzaEZpbHRlcigpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzd2l0Y2ggKGMpIHtcbiAgICAgICAgY2FzZSAweDIyOiBpbkRvdWJsZSA9IHRydWU7IGJyZWFrICAgICAgICAgLy8gXCJcbiAgICAgICAgY2FzZSAweDI3OiBpblNpbmdsZSA9IHRydWU7IGJyZWFrICAgICAgICAgLy8gJ1xuICAgICAgICBjYXNlIDB4NjA6IGluVGVtcGxhdGVTdHJpbmcgPSB0cnVlOyBicmVhayAvLyBgXG4gICAgICAgIGNhc2UgMHgyODogcGFyZW4rKzsgYnJlYWsgICAgICAgICAgICAgICAgIC8vIChcbiAgICAgICAgY2FzZSAweDI5OiBwYXJlbi0tOyBicmVhayAgICAgICAgICAgICAgICAgLy8gKVxuICAgICAgICBjYXNlIDB4NUI6IHNxdWFyZSsrOyBicmVhayAgICAgICAgICAgICAgICAvLyBbXG4gICAgICAgIGNhc2UgMHg1RDogc3F1YXJlLS07IGJyZWFrICAgICAgICAgICAgICAgIC8vIF1cbiAgICAgICAgY2FzZSAweDdCOiBjdXJseSsrOyBicmVhayAgICAgICAgICAgICAgICAgLy8ge1xuICAgICAgICBjYXNlIDB4N0Q6IGN1cmx5LS07IGJyZWFrICAgICAgICAgICAgICAgICAvLyB9XG4gICAgICB9XG4gICAgICBpZiAoYyA9PT0gMHgyZikgeyAvLyAvXG4gICAgICAgIHZhciBqID0gaSAtIDE7XG4gICAgICAgIHZhciBwID0gKHZvaWQgMCk7XG4gICAgICAgIC8vIGZpbmQgZmlyc3Qgbm9uLXdoaXRlc3BhY2UgcHJldiBjaGFyXG4gICAgICAgIGZvciAoOyBqID49IDA7IGotLSkge1xuICAgICAgICAgIHAgPSBleHAuY2hhckF0KGopO1xuICAgICAgICAgIGlmIChwICE9PSAnICcpIHsgYnJlYWsgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghcCB8fCAhL1tcXHckXS8udGVzdChwKSkge1xuICAgICAgICAgIGluUmVnZXggPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKGV4cHJlc3Npb24gPT09IHVuZGVmaW5lZCkge1xuICAgIGV4cHJlc3Npb24gPSBleHAuc2xpY2UoMCwgaSkudHJpbSgpO1xuICB9IGVsc2UgaWYgKGxhc3RGaWx0ZXJJbmRleCAhPT0gMCkge1xuICAgIHB1c2hGaWx0ZXIoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2hGaWx0ZXIgKCkge1xuICAgIChmaWx0ZXJzIHx8IChmaWx0ZXJzID0gW10pKS5wdXNoKGV4cC5zbGljZShsYXN0RmlsdGVySW5kZXgsIGkpLnRyaW0oKSk7XG4gICAgbGFzdEZpbHRlckluZGV4ID0gaSArIDE7XG4gIH1cblxuICBpZiAoZmlsdGVycykge1xuICAgIGZvciAoaSA9IDA7IGkgPCBmaWx0ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBleHByZXNzaW9uID0gd3JhcEZpbHRlcihleHByZXNzaW9uLCBmaWx0ZXJzW2ldKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZXhwcmVzc2lvblxufVxuXG5mdW5jdGlvbiB3cmFwRmlsdGVyIChleHAsIGZpbHRlcikge1xuICB2YXIgaSA9IGZpbHRlci5pbmRleE9mKCcoJyk7XG4gIGlmIChpIDwgMCkge1xuICAgIC8vIF9mOiByZXNvbHZlRmlsdGVyXG4gICAgcmV0dXJuIChcIl9mKFxcXCJcIiArIGZpbHRlciArIFwiXFxcIikoXCIgKyBleHAgKyBcIilcIilcbiAgfSBlbHNlIHtcbiAgICB2YXIgbmFtZSA9IGZpbHRlci5zbGljZSgwLCBpKTtcbiAgICB2YXIgYXJncyA9IGZpbHRlci5zbGljZShpICsgMSk7XG4gICAgcmV0dXJuIChcIl9mKFxcXCJcIiArIG5hbWUgKyBcIlxcXCIpKFwiICsgZXhwICsgXCIsXCIgKyBhcmdzKVxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgZGVmYXVsdFRhZ1JFID0gL1xce1xceygoPzoufFxcbikrPylcXH1cXH0vZztcbnZhciByZWdleEVzY2FwZVJFID0gL1stLiorP14ke30oKXxbXFxdXFwvXFxcXF0vZztcblxudmFyIGJ1aWxkUmVnZXggPSBjYWNoZWQoZnVuY3Rpb24gKGRlbGltaXRlcnMpIHtcbiAgdmFyIG9wZW4gPSBkZWxpbWl0ZXJzWzBdLnJlcGxhY2UocmVnZXhFc2NhcGVSRSwgJ1xcXFwkJicpO1xuICB2YXIgY2xvc2UgPSBkZWxpbWl0ZXJzWzFdLnJlcGxhY2UocmVnZXhFc2NhcGVSRSwgJ1xcXFwkJicpO1xuICByZXR1cm4gbmV3IFJlZ0V4cChvcGVuICsgJygoPzoufFxcXFxuKSs/KScgKyBjbG9zZSwgJ2cnKVxufSk7XG5cbmZ1bmN0aW9uIHBhcnNlVGV4dCAoXG4gIHRleHQsXG4gIGRlbGltaXRlcnNcbikge1xuICB2YXIgdGFnUkUgPSBkZWxpbWl0ZXJzID8gYnVpbGRSZWdleChkZWxpbWl0ZXJzKSA6IGRlZmF1bHRUYWdSRTtcbiAgaWYgKCF0YWdSRS50ZXN0KHRleHQpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHRva2VucyA9IFtdO1xuICB2YXIgbGFzdEluZGV4ID0gdGFnUkUubGFzdEluZGV4ID0gMDtcbiAgdmFyIG1hdGNoLCBpbmRleDtcbiAgd2hpbGUgKChtYXRjaCA9IHRhZ1JFLmV4ZWModGV4dCkpKSB7XG4gICAgaW5kZXggPSBtYXRjaC5pbmRleDtcbiAgICAvLyBwdXNoIHRleHQgdG9rZW5cbiAgICBpZiAoaW5kZXggPiBsYXN0SW5kZXgpIHtcbiAgICAgIHRva2Vucy5wdXNoKEpTT04uc3RyaW5naWZ5KHRleHQuc2xpY2UobGFzdEluZGV4LCBpbmRleCkpKTtcbiAgICB9XG4gICAgLy8gdGFnIHRva2VuXG4gICAgdmFyIGV4cCA9IHBhcnNlRmlsdGVycyhtYXRjaFsxXS50cmltKCkpO1xuICAgIHRva2Vucy5wdXNoKChcIl9zKFwiICsgZXhwICsgXCIpXCIpKTtcbiAgICBsYXN0SW5kZXggPSBpbmRleCArIG1hdGNoWzBdLmxlbmd0aDtcbiAgfVxuICBpZiAobGFzdEluZGV4IDwgdGV4dC5sZW5ndGgpIHtcbiAgICB0b2tlbnMucHVzaChKU09OLnN0cmluZ2lmeSh0ZXh0LnNsaWNlKGxhc3RJbmRleCkpKTtcbiAgfVxuICByZXR1cm4gdG9rZW5zLmpvaW4oJysnKVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gYmFzZVdhcm4gKG1zZykge1xuICBjb25zb2xlLmVycm9yKChcIltWdWUgcGFyc2VyXTogXCIgKyBtc2cpKTtcbn1cblxuZnVuY3Rpb24gcGx1Y2tNb2R1bGVGdW5jdGlvbiAoXG4gIG1vZHVsZXMsXG4gIGtleVxuKSB7XG4gIHJldHVybiBtb2R1bGVzXG4gICAgPyBtb2R1bGVzLm1hcChmdW5jdGlvbiAobSkgeyByZXR1cm4gbVtrZXldOyB9KS5maWx0ZXIoZnVuY3Rpb24gKF8pIHsgcmV0dXJuIF87IH0pXG4gICAgOiBbXVxufVxuXG5mdW5jdGlvbiBhZGRQcm9wIChlbCwgbmFtZSwgdmFsdWUpIHtcbiAgKGVsLnByb3BzIHx8IChlbC5wcm9wcyA9IFtdKSkucHVzaCh7IG5hbWU6IG5hbWUsIHZhbHVlOiB2YWx1ZSB9KTtcbn1cblxuZnVuY3Rpb24gYWRkQXR0ciAoZWwsIG5hbWUsIHZhbHVlKSB7XG4gIChlbC5hdHRycyB8fCAoZWwuYXR0cnMgPSBbXSkpLnB1c2goeyBuYW1lOiBuYW1lLCB2YWx1ZTogdmFsdWUgfSk7XG59XG5cbmZ1bmN0aW9uIGFkZERpcmVjdGl2ZSAoXG4gIGVsLFxuICBuYW1lLFxuICByYXdOYW1lLFxuICB2YWx1ZSxcbiAgYXJnLFxuICBtb2RpZmllcnNcbikge1xuICAoZWwuZGlyZWN0aXZlcyB8fCAoZWwuZGlyZWN0aXZlcyA9IFtdKSkucHVzaCh7IG5hbWU6IG5hbWUsIHJhd05hbWU6IHJhd05hbWUsIHZhbHVlOiB2YWx1ZSwgYXJnOiBhcmcsIG1vZGlmaWVyczogbW9kaWZpZXJzIH0pO1xufVxuXG5mdW5jdGlvbiBhZGRIYW5kbGVyIChcbiAgZWwsXG4gIG5hbWUsXG4gIHZhbHVlLFxuICBtb2RpZmllcnMsXG4gIGltcG9ydGFudFxuKSB7XG4gIC8vIGNoZWNrIGNhcHR1cmUgbW9kaWZpZXJcbiAgaWYgKG1vZGlmaWVycyAmJiBtb2RpZmllcnMuY2FwdHVyZSkge1xuICAgIGRlbGV0ZSBtb2RpZmllcnMuY2FwdHVyZTtcbiAgICBuYW1lID0gJyEnICsgbmFtZTsgLy8gbWFyayB0aGUgZXZlbnQgYXMgY2FwdHVyZWRcbiAgfVxuICBpZiAobW9kaWZpZXJzICYmIG1vZGlmaWVycy5vbmNlKSB7XG4gICAgZGVsZXRlIG1vZGlmaWVycy5vbmNlO1xuICAgIG5hbWUgPSAnficgKyBuYW1lOyAvLyBtYXJrIHRoZSBldmVudCBhcyBvbmNlXG4gIH1cbiAgdmFyIGV2ZW50cztcbiAgaWYgKG1vZGlmaWVycyAmJiBtb2RpZmllcnMubmF0aXZlKSB7XG4gICAgZGVsZXRlIG1vZGlmaWVycy5uYXRpdmU7XG4gICAgZXZlbnRzID0gZWwubmF0aXZlRXZlbnRzIHx8IChlbC5uYXRpdmVFdmVudHMgPSB7fSk7XG4gIH0gZWxzZSB7XG4gICAgZXZlbnRzID0gZWwuZXZlbnRzIHx8IChlbC5ldmVudHMgPSB7fSk7XG4gIH1cbiAgdmFyIG5ld0hhbmRsZXIgPSB7IHZhbHVlOiB2YWx1ZSwgbW9kaWZpZXJzOiBtb2RpZmllcnMgfTtcbiAgdmFyIGhhbmRsZXJzID0gZXZlbnRzW25hbWVdO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKEFycmF5LmlzQXJyYXkoaGFuZGxlcnMpKSB7XG4gICAgaW1wb3J0YW50ID8gaGFuZGxlcnMudW5zaGlmdChuZXdIYW5kbGVyKSA6IGhhbmRsZXJzLnB1c2gobmV3SGFuZGxlcik7XG4gIH0gZWxzZSBpZiAoaGFuZGxlcnMpIHtcbiAgICBldmVudHNbbmFtZV0gPSBpbXBvcnRhbnQgPyBbbmV3SGFuZGxlciwgaGFuZGxlcnNdIDogW2hhbmRsZXJzLCBuZXdIYW5kbGVyXTtcbiAgfSBlbHNlIHtcbiAgICBldmVudHNbbmFtZV0gPSBuZXdIYW5kbGVyO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldEJpbmRpbmdBdHRyIChcbiAgZWwsXG4gIG5hbWUsXG4gIGdldFN0YXRpY1xuKSB7XG4gIHZhciBkeW5hbWljVmFsdWUgPVxuICAgIGdldEFuZFJlbW92ZUF0dHIoZWwsICc6JyArIG5hbWUpIHx8XG4gICAgZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3YtYmluZDonICsgbmFtZSk7XG4gIGlmIChkeW5hbWljVmFsdWUgIT0gbnVsbCkge1xuICAgIHJldHVybiBwYXJzZUZpbHRlcnMoZHluYW1pY1ZhbHVlKVxuICB9IGVsc2UgaWYgKGdldFN0YXRpYyAhPT0gZmFsc2UpIHtcbiAgICB2YXIgc3RhdGljVmFsdWUgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCBuYW1lKTtcbiAgICBpZiAoc3RhdGljVmFsdWUgIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHN0YXRpY1ZhbHVlKVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRBbmRSZW1vdmVBdHRyIChlbCwgbmFtZSkge1xuICB2YXIgdmFsO1xuICBpZiAoKHZhbCA9IGVsLmF0dHJzTWFwW25hbWVdKSAhPSBudWxsKSB7XG4gICAgdmFyIGxpc3QgPSBlbC5hdHRyc0xpc3Q7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBsaXN0Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgaWYgKGxpc3RbaV0ubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICBsaXN0LnNwbGljZShpLCAxKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHZhbFxufVxuXG52YXIgbGVuO1xudmFyIHN0cjtcbnZhciBjaHI7XG52YXIgaW5kZXgkMTtcbnZhciBleHByZXNzaW9uUG9zO1xudmFyIGV4cHJlc3Npb25FbmRQb3M7XG5cbi8qKlxuICogcGFyc2UgZGlyZWN0aXZlIG1vZGVsIHRvIGRvIHRoZSBhcnJheSB1cGRhdGUgdHJhbnNmb3JtLiBhW2lkeF0gPSB2YWwgPT4gJCRhLnNwbGljZSgkJGlkeCwgMSwgdmFsKVxuICpcbiAqIGZvciBsb29wIHBvc3NpYmxlIGNhc2VzOlxuICpcbiAqIC0gdGVzdFxuICogLSB0ZXN0W2lkeF1cbiAqIC0gdGVzdFt0ZXN0MVtpZHhdXVxuICogLSB0ZXN0W1wiYVwiXVtpZHhdXG4gKiAtIHh4eC50ZXN0W2FbYV0udGVzdDFbaWR4XV1cbiAqIC0gdGVzdC54eHguYVtcImFzYVwiXVt0ZXN0MVtpZHhdXVxuICpcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZU1vZGVsICh2YWwpIHtcbiAgc3RyID0gdmFsO1xuICBsZW4gPSBzdHIubGVuZ3RoO1xuICBpbmRleCQxID0gZXhwcmVzc2lvblBvcyA9IGV4cHJlc3Npb25FbmRQb3MgPSAwO1xuXG4gIGlmICh2YWwuaW5kZXhPZignWycpIDwgMCB8fCB2YWwubGFzdEluZGV4T2YoJ10nKSA8IGxlbiAtIDEpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZXhwOiB2YWwsXG4gICAgICBpZHg6IG51bGxcbiAgICB9XG4gIH1cblxuICB3aGlsZSAoIWVvZigpKSB7XG4gICAgY2hyID0gbmV4dCgpO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChpc1N0cmluZ1N0YXJ0KGNocikpIHtcbiAgICAgIHBhcnNlU3RyaW5nKGNocik7XG4gICAgfSBlbHNlIGlmIChjaHIgPT09IDB4NUIpIHtcbiAgICAgIHBhcnNlQnJhY2tldChjaHIpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZXhwOiB2YWwuc3Vic3RyaW5nKDAsIGV4cHJlc3Npb25Qb3MpLFxuICAgIGlkeDogdmFsLnN1YnN0cmluZyhleHByZXNzaW9uUG9zICsgMSwgZXhwcmVzc2lvbkVuZFBvcylcbiAgfVxufVxuXG5mdW5jdGlvbiBuZXh0ICgpIHtcbiAgcmV0dXJuIHN0ci5jaGFyQ29kZUF0KCsraW5kZXgkMSlcbn1cblxuZnVuY3Rpb24gZW9mICgpIHtcbiAgcmV0dXJuIGluZGV4JDEgPj0gbGVuXG59XG5cbmZ1bmN0aW9uIGlzU3RyaW5nU3RhcnQgKGNocikge1xuICByZXR1cm4gY2hyID09PSAweDIyIHx8IGNociA9PT0gMHgyN1xufVxuXG5mdW5jdGlvbiBwYXJzZUJyYWNrZXQgKGNocikge1xuICB2YXIgaW5CcmFja2V0ID0gMTtcbiAgZXhwcmVzc2lvblBvcyA9IGluZGV4JDE7XG4gIHdoaWxlICghZW9mKCkpIHtcbiAgICBjaHIgPSBuZXh0KCk7XG4gICAgaWYgKGlzU3RyaW5nU3RhcnQoY2hyKSkge1xuICAgICAgcGFyc2VTdHJpbmcoY2hyKTtcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuICAgIGlmIChjaHIgPT09IDB4NUIpIHsgaW5CcmFja2V0Kys7IH1cbiAgICBpZiAoY2hyID09PSAweDVEKSB7IGluQnJhY2tldC0tOyB9XG4gICAgaWYgKGluQnJhY2tldCA9PT0gMCkge1xuICAgICAgZXhwcmVzc2lvbkVuZFBvcyA9IGluZGV4JDE7XG4gICAgICBicmVha1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBwYXJzZVN0cmluZyAoY2hyKSB7XG4gIHZhciBzdHJpbmdRdW90ZSA9IGNocjtcbiAgd2hpbGUgKCFlb2YoKSkge1xuICAgIGNociA9IG5leHQoKTtcbiAgICBpZiAoY2hyID09PSBzdHJpbmdRdW90ZSkge1xuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbnZhciBkaXJSRSA9IC9edi18XkB8XjovO1xudmFyIGZvckFsaWFzUkUgPSAvKC4qPylcXHMrKD86aW58b2YpXFxzKyguKikvO1xudmFyIGZvckl0ZXJhdG9yUkUgPSAvXFwoKFxce1tefV0qXFx9fFteLF0qKSwoW14sXSopKD86LChbXixdKikpP1xcKS87XG52YXIgYmluZFJFID0gL146fF52LWJpbmQ6LztcbnZhciBvblJFID0gL15AfF52LW9uOi87XG52YXIgYXJnUkUgPSAvOiguKikkLztcbnZhciBtb2RpZmllclJFID0gL1xcLlteLl0rL2c7XG5cbnZhciBkZWNvZGVIVE1MQ2FjaGVkID0gY2FjaGVkKGRlY29kZSk7XG5cbi8vIGNvbmZpZ3VyYWJsZSBzdGF0ZVxudmFyIHdhcm4kMTtcbnZhciBwbGF0Zm9ybUdldFRhZ05hbWVzcGFjZTtcbnZhciBwbGF0Zm9ybU11c3RVc2VQcm9wO1xudmFyIHBsYXRmb3JtSXNQcmVUYWc7XG52YXIgcHJlVHJhbnNmb3JtcztcbnZhciB0cmFuc2Zvcm1zO1xudmFyIHBvc3RUcmFuc2Zvcm1zO1xudmFyIGRlbGltaXRlcnM7XG5cbi8qKlxuICogQ29udmVydCBIVE1MIHN0cmluZyB0byBBU1QuXG4gKi9cbmZ1bmN0aW9uIHBhcnNlIChcbiAgdGVtcGxhdGUsXG4gIG9wdGlvbnNcbikge1xuICB3YXJuJDEgPSBvcHRpb25zLndhcm4gfHwgYmFzZVdhcm47XG4gIHBsYXRmb3JtR2V0VGFnTmFtZXNwYWNlID0gb3B0aW9ucy5nZXRUYWdOYW1lc3BhY2UgfHwgbm87XG4gIHBsYXRmb3JtTXVzdFVzZVByb3AgPSBvcHRpb25zLm11c3RVc2VQcm9wIHx8IG5vO1xuICBwbGF0Zm9ybUlzUHJlVGFnID0gb3B0aW9ucy5pc1ByZVRhZyB8fCBubztcbiAgcHJlVHJhbnNmb3JtcyA9IHBsdWNrTW9kdWxlRnVuY3Rpb24ob3B0aW9ucy5tb2R1bGVzLCAncHJlVHJhbnNmb3JtTm9kZScpO1xuICB0cmFuc2Zvcm1zID0gcGx1Y2tNb2R1bGVGdW5jdGlvbihvcHRpb25zLm1vZHVsZXMsICd0cmFuc2Zvcm1Ob2RlJyk7XG4gIHBvc3RUcmFuc2Zvcm1zID0gcGx1Y2tNb2R1bGVGdW5jdGlvbihvcHRpb25zLm1vZHVsZXMsICdwb3N0VHJhbnNmb3JtTm9kZScpO1xuICBkZWxpbWl0ZXJzID0gb3B0aW9ucy5kZWxpbWl0ZXJzO1xuICB2YXIgc3RhY2sgPSBbXTtcbiAgdmFyIHByZXNlcnZlV2hpdGVzcGFjZSA9IG9wdGlvbnMucHJlc2VydmVXaGl0ZXNwYWNlICE9PSBmYWxzZTtcbiAgdmFyIHJvb3Q7XG4gIHZhciBjdXJyZW50UGFyZW50O1xuICB2YXIgaW5WUHJlID0gZmFsc2U7XG4gIHZhciBpblByZSA9IGZhbHNlO1xuICB2YXIgd2FybmVkID0gZmFsc2U7XG4gIHBhcnNlSFRNTCh0ZW1wbGF0ZSwge1xuICAgIGV4cGVjdEhUTUw6IG9wdGlvbnMuZXhwZWN0SFRNTCxcbiAgICBpc1VuYXJ5VGFnOiBvcHRpb25zLmlzVW5hcnlUYWcsXG4gICAgc2hvdWxkRGVjb2RlTmV3bGluZXM6IG9wdGlvbnMuc2hvdWxkRGVjb2RlTmV3bGluZXMsXG4gICAgc3RhcnQ6IGZ1bmN0aW9uIHN0YXJ0ICh0YWcsIGF0dHJzLCB1bmFyeSkge1xuICAgICAgLy8gY2hlY2sgbmFtZXNwYWNlLlxuICAgICAgLy8gaW5oZXJpdCBwYXJlbnQgbnMgaWYgdGhlcmUgaXMgb25lXG4gICAgICB2YXIgbnMgPSAoY3VycmVudFBhcmVudCAmJiBjdXJyZW50UGFyZW50Lm5zKSB8fCBwbGF0Zm9ybUdldFRhZ05hbWVzcGFjZSh0YWcpO1xuXG4gICAgICAvLyBoYW5kbGUgSUUgc3ZnIGJ1Z1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoaXNJRSAmJiBucyA9PT0gJ3N2ZycpIHtcbiAgICAgICAgYXR0cnMgPSBndWFyZElFU1ZHQnVnKGF0dHJzKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGVsZW1lbnQgPSB7XG4gICAgICAgIHR5cGU6IDEsXG4gICAgICAgIHRhZzogdGFnLFxuICAgICAgICBhdHRyc0xpc3Q6IGF0dHJzLFxuICAgICAgICBhdHRyc01hcDogbWFrZUF0dHJzTWFwKGF0dHJzKSxcbiAgICAgICAgcGFyZW50OiBjdXJyZW50UGFyZW50LFxuICAgICAgICBjaGlsZHJlbjogW11cbiAgICAgIH07XG4gICAgICBpZiAobnMpIHtcbiAgICAgICAgZWxlbWVudC5ucyA9IG5zO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNGb3JiaWRkZW5UYWcoZWxlbWVudCkgJiYgIWlzU2VydmVyUmVuZGVyaW5nKCkpIHtcbiAgICAgICAgZWxlbWVudC5mb3JiaWRkZW4gPSB0cnVlO1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4kMShcbiAgICAgICAgICAnVGVtcGxhdGVzIHNob3VsZCBvbmx5IGJlIHJlc3BvbnNpYmxlIGZvciBtYXBwaW5nIHRoZSBzdGF0ZSB0byB0aGUgJyArXG4gICAgICAgICAgJ1VJLiBBdm9pZCBwbGFjaW5nIHRhZ3Mgd2l0aCBzaWRlLWVmZmVjdHMgaW4geW91ciB0ZW1wbGF0ZXMsIHN1Y2ggYXMgJyArXG4gICAgICAgICAgXCI8XCIgKyB0YWcgKyBcIj5cIiArICcsIGFzIHRoZXkgd2lsbCBub3QgYmUgcGFyc2VkLidcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgLy8gYXBwbHkgcHJlLXRyYW5zZm9ybXNcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJlVHJhbnNmb3Jtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBwcmVUcmFuc2Zvcm1zW2ldKGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWluVlByZSkge1xuICAgICAgICBwcm9jZXNzUHJlKGVsZW1lbnQpO1xuICAgICAgICBpZiAoZWxlbWVudC5wcmUpIHtcbiAgICAgICAgICBpblZQcmUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocGxhdGZvcm1Jc1ByZVRhZyhlbGVtZW50LnRhZykpIHtcbiAgICAgICAgaW5QcmUgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGluVlByZSkge1xuICAgICAgICBwcm9jZXNzUmF3QXR0cnMoZWxlbWVudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzRm9yKGVsZW1lbnQpO1xuICAgICAgICBwcm9jZXNzSWYoZWxlbWVudCk7XG4gICAgICAgIHByb2Nlc3NPbmNlKGVsZW1lbnQpO1xuICAgICAgICBwcm9jZXNzS2V5KGVsZW1lbnQpO1xuXG4gICAgICAgIC8vIGRldGVybWluZSB3aGV0aGVyIHRoaXMgaXMgYSBwbGFpbiBlbGVtZW50IGFmdGVyXG4gICAgICAgIC8vIHJlbW92aW5nIHN0cnVjdHVyYWwgYXR0cmlidXRlc1xuICAgICAgICBlbGVtZW50LnBsYWluID0gIWVsZW1lbnQua2V5ICYmICFhdHRycy5sZW5ndGg7XG5cbiAgICAgICAgcHJvY2Vzc1JlZihlbGVtZW50KTtcbiAgICAgICAgcHJvY2Vzc1Nsb3QoZWxlbWVudCk7XG4gICAgICAgIHByb2Nlc3NDb21wb25lbnQoZWxlbWVudCk7XG4gICAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IHRyYW5zZm9ybXMubGVuZ3RoOyBpJDErKykge1xuICAgICAgICAgIHRyYW5zZm9ybXNbaSQxXShlbGVtZW50LCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBwcm9jZXNzQXR0cnMoZWxlbWVudCk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGNoZWNrUm9vdENvbnN0cmFpbnRzIChlbCkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhd2FybmVkKSB7XG4gICAgICAgICAgaWYgKGVsLnRhZyA9PT0gJ3Nsb3QnIHx8IGVsLnRhZyA9PT0gJ3RlbXBsYXRlJykge1xuICAgICAgICAgICAgd2FybmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgICAgXCJDYW5ub3QgdXNlIDxcIiArIChlbC50YWcpICsgXCI+IGFzIGNvbXBvbmVudCByb290IGVsZW1lbnQgYmVjYXVzZSBpdCBtYXkgXCIgK1xuICAgICAgICAgICAgICAnY29udGFpbiBtdWx0aXBsZSBub2RlczpcXG4nICsgdGVtcGxhdGVcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChlbC5hdHRyc01hcC5oYXNPd25Qcm9wZXJ0eSgndi1mb3InKSkge1xuICAgICAgICAgICAgd2FybmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgICAgJ0Nhbm5vdCB1c2Ugdi1mb3Igb24gc3RhdGVmdWwgY29tcG9uZW50IHJvb3QgZWxlbWVudCBiZWNhdXNlICcgK1xuICAgICAgICAgICAgICAnaXQgcmVuZGVycyBtdWx0aXBsZSBlbGVtZW50czpcXG4nICsgdGVtcGxhdGVcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIHRyZWUgbWFuYWdlbWVudFxuICAgICAgaWYgKCFyb290KSB7XG4gICAgICAgIHJvb3QgPSBlbGVtZW50O1xuICAgICAgICBjaGVja1Jvb3RDb25zdHJhaW50cyhyb290KTtcbiAgICAgIH0gZWxzZSBpZiAoIXN0YWNrLmxlbmd0aCkge1xuICAgICAgICAvLyBhbGxvdyByb290IGVsZW1lbnRzIHdpdGggdi1pZiwgdi1lbHNlLWlmIGFuZCB2LWVsc2VcbiAgICAgICAgaWYgKHJvb3QuaWYgJiYgKGVsZW1lbnQuZWxzZWlmIHx8IGVsZW1lbnQuZWxzZSkpIHtcbiAgICAgICAgICBjaGVja1Jvb3RDb25zdHJhaW50cyhlbGVtZW50KTtcbiAgICAgICAgICBhZGRJZkNvbmRpdGlvbihyb290LCB7XG4gICAgICAgICAgICBleHA6IGVsZW1lbnQuZWxzZWlmLFxuICAgICAgICAgICAgYmxvY2s6IGVsZW1lbnRcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICF3YXJuZWQpIHtcbiAgICAgICAgICB3YXJuZWQgPSB0cnVlO1xuICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgIFwiQ29tcG9uZW50IHRlbXBsYXRlIHNob3VsZCBjb250YWluIGV4YWN0bHkgb25lIHJvb3QgZWxlbWVudDpcIiArXG4gICAgICAgICAgICBcIlxcblxcblwiICsgdGVtcGxhdGUgKyBcIlxcblxcblwiICtcbiAgICAgICAgICAgIFwiSWYgeW91IGFyZSB1c2luZyB2LWlmIG9uIG11bHRpcGxlIGVsZW1lbnRzLCBcIiArXG4gICAgICAgICAgICBcInVzZSB2LWVsc2UtaWYgdG8gY2hhaW4gdGhlbSBpbnN0ZWFkLlwiXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGN1cnJlbnRQYXJlbnQgJiYgIWVsZW1lbnQuZm9yYmlkZGVuKSB7XG4gICAgICAgIGlmIChlbGVtZW50LmVsc2VpZiB8fCBlbGVtZW50LmVsc2UpIHtcbiAgICAgICAgICBwcm9jZXNzSWZDb25kaXRpb25zKGVsZW1lbnQsIGN1cnJlbnRQYXJlbnQpO1xuICAgICAgICB9IGVsc2UgaWYgKGVsZW1lbnQuc2xvdFNjb3BlKSB7IC8vIHNjb3BlZCBzbG90XG4gICAgICAgICAgY3VycmVudFBhcmVudC5wbGFpbiA9IGZhbHNlO1xuICAgICAgICAgIHZhciBuYW1lID0gZWxlbWVudC5zbG90VGFyZ2V0IHx8ICdkZWZhdWx0JzsoY3VycmVudFBhcmVudC5zY29wZWRTbG90cyB8fCAoY3VycmVudFBhcmVudC5zY29wZWRTbG90cyA9IHt9KSlbbmFtZV0gPSBlbGVtZW50O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGN1cnJlbnRQYXJlbnQuY2hpbGRyZW4ucHVzaChlbGVtZW50KTtcbiAgICAgICAgICBlbGVtZW50LnBhcmVudCA9IGN1cnJlbnRQYXJlbnQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICghdW5hcnkpIHtcbiAgICAgICAgY3VycmVudFBhcmVudCA9IGVsZW1lbnQ7XG4gICAgICAgIHN0YWNrLnB1c2goZWxlbWVudCk7XG4gICAgICB9XG4gICAgICAvLyBhcHBseSBwb3N0LXRyYW5zZm9ybXNcbiAgICAgIGZvciAodmFyIGkkMiA9IDA7IGkkMiA8IHBvc3RUcmFuc2Zvcm1zLmxlbmd0aDsgaSQyKyspIHtcbiAgICAgICAgcG9zdFRyYW5zZm9ybXNbaSQyXShlbGVtZW50LCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgZW5kOiBmdW5jdGlvbiBlbmQgKCkge1xuICAgICAgLy8gcmVtb3ZlIHRyYWlsaW5nIHdoaXRlc3BhY2VcbiAgICAgIHZhciBlbGVtZW50ID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XG4gICAgICB2YXIgbGFzdE5vZGUgPSBlbGVtZW50LmNoaWxkcmVuW2VsZW1lbnQuY2hpbGRyZW4ubGVuZ3RoIC0gMV07XG4gICAgICBpZiAobGFzdE5vZGUgJiYgbGFzdE5vZGUudHlwZSA9PT0gMyAmJiBsYXN0Tm9kZS50ZXh0ID09PSAnICcpIHtcbiAgICAgICAgZWxlbWVudC5jaGlsZHJlbi5wb3AoKTtcbiAgICAgIH1cbiAgICAgIC8vIHBvcCBzdGFja1xuICAgICAgc3RhY2subGVuZ3RoIC09IDE7XG4gICAgICBjdXJyZW50UGFyZW50ID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XG4gICAgICAvLyBjaGVjayBwcmUgc3RhdGVcbiAgICAgIGlmIChlbGVtZW50LnByZSkge1xuICAgICAgICBpblZQcmUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChwbGF0Zm9ybUlzUHJlVGFnKGVsZW1lbnQudGFnKSkge1xuICAgICAgICBpblByZSA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBjaGFyczogZnVuY3Rpb24gY2hhcnMgKHRleHQpIHtcbiAgICAgIGlmICghY3VycmVudFBhcmVudCkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhd2FybmVkICYmIHRleHQgPT09IHRlbXBsYXRlKSB7XG4gICAgICAgICAgd2FybmVkID0gdHJ1ZTtcbiAgICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgICAnQ29tcG9uZW50IHRlbXBsYXRlIHJlcXVpcmVzIGEgcm9vdCBlbGVtZW50LCByYXRoZXIgdGhhbiBqdXN0IHRleHQ6XFxuXFxuJyArIHRlbXBsYXRlXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIC8vIElFIHRleHRhcmVhIHBsYWNlaG9sZGVyIGJ1Z1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoaXNJRSAmJlxuICAgICAgICAgIGN1cnJlbnRQYXJlbnQudGFnID09PSAndGV4dGFyZWEnICYmXG4gICAgICAgICAgY3VycmVudFBhcmVudC5hdHRyc01hcC5wbGFjZWhvbGRlciA9PT0gdGV4dCkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIHZhciBjaGlsZHJlbiA9IGN1cnJlbnRQYXJlbnQuY2hpbGRyZW47XG4gICAgICB0ZXh0ID0gaW5QcmUgfHwgdGV4dC50cmltKClcbiAgICAgICAgPyBkZWNvZGVIVE1MQ2FjaGVkKHRleHQpXG4gICAgICAgIC8vIG9ubHkgcHJlc2VydmUgd2hpdGVzcGFjZSBpZiBpdHMgbm90IHJpZ2h0IGFmdGVyIGEgc3RhcnRpbmcgdGFnXG4gICAgICAgIDogcHJlc2VydmVXaGl0ZXNwYWNlICYmIGNoaWxkcmVuLmxlbmd0aCA/ICcgJyA6ICcnO1xuICAgICAgaWYgKHRleHQpIHtcbiAgICAgICAgdmFyIGV4cHJlc3Npb247XG4gICAgICAgIGlmICghaW5WUHJlICYmIHRleHQgIT09ICcgJyAmJiAoZXhwcmVzc2lvbiA9IHBhcnNlVGV4dCh0ZXh0LCBkZWxpbWl0ZXJzKSkpIHtcbiAgICAgICAgICBjaGlsZHJlbi5wdXNoKHtcbiAgICAgICAgICAgIHR5cGU6IDIsXG4gICAgICAgICAgICBleHByZXNzaW9uOiBleHByZXNzaW9uLFxuICAgICAgICAgICAgdGV4dDogdGV4dFxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKHRleHQgIT09ICcgJyB8fCBjaGlsZHJlbltjaGlsZHJlbi5sZW5ndGggLSAxXS50ZXh0ICE9PSAnICcpIHtcbiAgICAgICAgICBjdXJyZW50UGFyZW50LmNoaWxkcmVuLnB1c2goe1xuICAgICAgICAgICAgdHlwZTogMyxcbiAgICAgICAgICAgIHRleHQ6IHRleHRcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIHJldHVybiByb290XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NQcmUgKGVsKSB7XG4gIGlmIChnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1wcmUnKSAhPSBudWxsKSB7XG4gICAgZWwucHJlID0gdHJ1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzUmF3QXR0cnMgKGVsKSB7XG4gIHZhciBsID0gZWwuYXR0cnNMaXN0Lmxlbmd0aDtcbiAgaWYgKGwpIHtcbiAgICB2YXIgYXR0cnMgPSBlbC5hdHRycyA9IG5ldyBBcnJheShsKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgYXR0cnNbaV0gPSB7XG4gICAgICAgIG5hbWU6IGVsLmF0dHJzTGlzdFtpXS5uYW1lLFxuICAgICAgICB2YWx1ZTogSlNPTi5zdHJpbmdpZnkoZWwuYXR0cnNMaXN0W2ldLnZhbHVlKVxuICAgICAgfTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoIWVsLnByZSkge1xuICAgIC8vIG5vbiByb290IG5vZGUgaW4gcHJlIGJsb2NrcyB3aXRoIG5vIGF0dHJpYnV0ZXNcbiAgICBlbC5wbGFpbiA9IHRydWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJvY2Vzc0tleSAoZWwpIHtcbiAgdmFyIGV4cCA9IGdldEJpbmRpbmdBdHRyKGVsLCAna2V5Jyk7XG4gIGlmIChleHApIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBlbC50YWcgPT09ICd0ZW1wbGF0ZScpIHtcbiAgICAgIHdhcm4kMShcIjx0ZW1wbGF0ZT4gY2Fubm90IGJlIGtleWVkLiBQbGFjZSB0aGUga2V5IG9uIHJlYWwgZWxlbWVudHMgaW5zdGVhZC5cIik7XG4gICAgfVxuICAgIGVsLmtleSA9IGV4cDtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzUmVmIChlbCkge1xuICB2YXIgcmVmID0gZ2V0QmluZGluZ0F0dHIoZWwsICdyZWYnKTtcbiAgaWYgKHJlZikge1xuICAgIGVsLnJlZiA9IHJlZjtcbiAgICBlbC5yZWZJbkZvciA9IGNoZWNrSW5Gb3IoZWwpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NGb3IgKGVsKSB7XG4gIHZhciBleHA7XG4gIGlmICgoZXhwID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3YtZm9yJykpKSB7XG4gICAgdmFyIGluTWF0Y2ggPSBleHAubWF0Y2goZm9yQWxpYXNSRSk7XG4gICAgaWYgKCFpbk1hdGNoKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4kMShcbiAgICAgICAgKFwiSW52YWxpZCB2LWZvciBleHByZXNzaW9uOiBcIiArIGV4cClcbiAgICAgICk7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgZWwuZm9yID0gaW5NYXRjaFsyXS50cmltKCk7XG4gICAgdmFyIGFsaWFzID0gaW5NYXRjaFsxXS50cmltKCk7XG4gICAgdmFyIGl0ZXJhdG9yTWF0Y2ggPSBhbGlhcy5tYXRjaChmb3JJdGVyYXRvclJFKTtcbiAgICBpZiAoaXRlcmF0b3JNYXRjaCkge1xuICAgICAgZWwuYWxpYXMgPSBpdGVyYXRvck1hdGNoWzFdLnRyaW0oKTtcbiAgICAgIGVsLml0ZXJhdG9yMSA9IGl0ZXJhdG9yTWF0Y2hbMl0udHJpbSgpO1xuICAgICAgaWYgKGl0ZXJhdG9yTWF0Y2hbM10pIHtcbiAgICAgICAgZWwuaXRlcmF0b3IyID0gaXRlcmF0b3JNYXRjaFszXS50cmltKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLmFsaWFzID0gYWxpYXM7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NJZiAoZWwpIHtcbiAgdmFyIGV4cCA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LWlmJyk7XG4gIGlmIChleHApIHtcbiAgICBlbC5pZiA9IGV4cDtcbiAgICBhZGRJZkNvbmRpdGlvbihlbCwge1xuICAgICAgZXhwOiBleHAsXG4gICAgICBibG9jazogZWxcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3YtZWxzZScpICE9IG51bGwpIHtcbiAgICAgIGVsLmVsc2UgPSB0cnVlO1xuICAgIH1cbiAgICB2YXIgZWxzZWlmID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3YtZWxzZS1pZicpO1xuICAgIGlmIChlbHNlaWYpIHtcbiAgICAgIGVsLmVsc2VpZiA9IGVsc2VpZjtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJvY2Vzc0lmQ29uZGl0aW9ucyAoZWwsIHBhcmVudCkge1xuICB2YXIgcHJldiA9IGZpbmRQcmV2RWxlbWVudChwYXJlbnQuY2hpbGRyZW4pO1xuICBpZiAocHJldiAmJiBwcmV2LmlmKSB7XG4gICAgYWRkSWZDb25kaXRpb24ocHJldiwge1xuICAgICAgZXhwOiBlbC5lbHNlaWYsXG4gICAgICBibG9jazogZWxcbiAgICB9KTtcbiAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgd2FybiQxKFxuICAgICAgXCJ2LVwiICsgKGVsLmVsc2VpZiA/ICgnZWxzZS1pZj1cIicgKyBlbC5lbHNlaWYgKyAnXCInKSA6ICdlbHNlJykgKyBcIiBcIiArXG4gICAgICBcInVzZWQgb24gZWxlbWVudCA8XCIgKyAoZWwudGFnKSArIFwiPiB3aXRob3V0IGNvcnJlc3BvbmRpbmcgdi1pZi5cIlxuICAgICk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZmluZFByZXZFbGVtZW50IChjaGlsZHJlbikge1xuICB2YXIgaSA9IGNoaWxkcmVuLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIGlmIChjaGlsZHJlbltpXS50eXBlID09PSAxKSB7XG4gICAgICByZXR1cm4gY2hpbGRyZW5baV1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY2hpbGRyZW5baV0udGV4dCAhPT0gJyAnKSB7XG4gICAgICAgIHdhcm4kMShcbiAgICAgICAgICBcInRleHQgXFxcIlwiICsgKGNoaWxkcmVuW2ldLnRleHQudHJpbSgpKSArIFwiXFxcIiBiZXR3ZWVuIHYtaWYgYW5kIHYtZWxzZSgtaWYpIFwiICtcbiAgICAgICAgICBcIndpbGwgYmUgaWdub3JlZC5cIlxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgY2hpbGRyZW4ucG9wKCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFkZElmQ29uZGl0aW9uIChlbCwgY29uZGl0aW9uKSB7XG4gIGlmICghZWwuaWZDb25kaXRpb25zKSB7XG4gICAgZWwuaWZDb25kaXRpb25zID0gW107XG4gIH1cbiAgZWwuaWZDb25kaXRpb25zLnB1c2goY29uZGl0aW9uKTtcbn1cblxuZnVuY3Rpb24gcHJvY2Vzc09uY2UgKGVsKSB7XG4gIHZhciBvbmNlID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3Ytb25jZScpO1xuICBpZiAob25jZSAhPSBudWxsKSB7XG4gICAgZWwub25jZSA9IHRydWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJvY2Vzc1Nsb3QgKGVsKSB7XG4gIGlmIChlbC50YWcgPT09ICdzbG90Jykge1xuICAgIGVsLnNsb3ROYW1lID0gZ2V0QmluZGluZ0F0dHIoZWwsICduYW1lJyk7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgZWwua2V5KSB7XG4gICAgICB3YXJuJDEoXG4gICAgICAgIFwiYGtleWAgZG9lcyBub3Qgd29yayBvbiA8c2xvdD4gYmVjYXVzZSBzbG90cyBhcmUgYWJzdHJhY3Qgb3V0bGV0cyBcIiArXG4gICAgICAgIFwiYW5kIGNhbiBwb3NzaWJseSBleHBhbmQgaW50byBtdWx0aXBsZSBlbGVtZW50cy4gXCIgK1xuICAgICAgICBcIlVzZSB0aGUga2V5IG9uIGEgd3JhcHBpbmcgZWxlbWVudCBpbnN0ZWFkLlwiXG4gICAgICApO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgc2xvdFRhcmdldCA9IGdldEJpbmRpbmdBdHRyKGVsLCAnc2xvdCcpO1xuICAgIGlmIChzbG90VGFyZ2V0KSB7XG4gICAgICBlbC5zbG90VGFyZ2V0ID0gc2xvdFRhcmdldCA9PT0gJ1wiXCInID8gJ1wiZGVmYXVsdFwiJyA6IHNsb3RUYXJnZXQ7XG4gICAgfVxuICAgIGlmIChlbC50YWcgPT09ICd0ZW1wbGF0ZScpIHtcbiAgICAgIGVsLnNsb3RTY29wZSA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICdzY29wZScpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzQ29tcG9uZW50IChlbCkge1xuICB2YXIgYmluZGluZztcbiAgaWYgKChiaW5kaW5nID0gZ2V0QmluZGluZ0F0dHIoZWwsICdpcycpKSkge1xuICAgIGVsLmNvbXBvbmVudCA9IGJpbmRpbmc7XG4gIH1cbiAgaWYgKGdldEFuZFJlbW92ZUF0dHIoZWwsICdpbmxpbmUtdGVtcGxhdGUnKSAhPSBudWxsKSB7XG4gICAgZWwuaW5saW5lVGVtcGxhdGUgPSB0cnVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NBdHRycyAoZWwpIHtcbiAgdmFyIGxpc3QgPSBlbC5hdHRyc0xpc3Q7XG4gIHZhciBpLCBsLCBuYW1lLCByYXdOYW1lLCB2YWx1ZSwgYXJnLCBtb2RpZmllcnMsIGlzUHJvcDtcbiAgZm9yIChpID0gMCwgbCA9IGxpc3QubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgbmFtZSA9IHJhd05hbWUgPSBsaXN0W2ldLm5hbWU7XG4gICAgdmFsdWUgPSBsaXN0W2ldLnZhbHVlO1xuICAgIGlmIChkaXJSRS50ZXN0KG5hbWUpKSB7XG4gICAgICAvLyBtYXJrIGVsZW1lbnQgYXMgZHluYW1pY1xuICAgICAgZWwuaGFzQmluZGluZ3MgPSB0cnVlO1xuICAgICAgLy8gbW9kaWZpZXJzXG4gICAgICBtb2RpZmllcnMgPSBwYXJzZU1vZGlmaWVycyhuYW1lKTtcbiAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZShtb2RpZmllclJFLCAnJyk7XG4gICAgICB9XG4gICAgICBpZiAoYmluZFJFLnRlc3QobmFtZSkpIHsgLy8gdi1iaW5kXG4gICAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoYmluZFJFLCAnJyk7XG4gICAgICAgIHZhbHVlID0gcGFyc2VGaWx0ZXJzKHZhbHVlKTtcbiAgICAgICAgaXNQcm9wID0gZmFsc2U7XG4gICAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgICBpZiAobW9kaWZpZXJzLnByb3ApIHtcbiAgICAgICAgICAgIGlzUHJvcCA9IHRydWU7XG4gICAgICAgICAgICBuYW1lID0gY2FtZWxpemUobmFtZSk7XG4gICAgICAgICAgICBpZiAobmFtZSA9PT0gJ2lubmVySHRtbCcpIHsgbmFtZSA9ICdpbm5lckhUTUwnOyB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChtb2RpZmllcnMuY2FtZWwpIHtcbiAgICAgICAgICAgIG5hbWUgPSBjYW1lbGl6ZShuYW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUHJvcCB8fCBwbGF0Zm9ybU11c3RVc2VQcm9wKGVsLnRhZywgZWwuYXR0cnNNYXAudHlwZSwgbmFtZSkpIHtcbiAgICAgICAgICBhZGRQcm9wKGVsLCBuYW1lLCB2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWRkQXR0cihlbCwgbmFtZSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKG9uUkUudGVzdChuYW1lKSkgeyAvLyB2LW9uXG4gICAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2Uob25SRSwgJycpO1xuICAgICAgICBhZGRIYW5kbGVyKGVsLCBuYW1lLCB2YWx1ZSwgbW9kaWZpZXJzKTtcbiAgICAgIH0gZWxzZSB7IC8vIG5vcm1hbCBkaXJlY3RpdmVzXG4gICAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoZGlyUkUsICcnKTtcbiAgICAgICAgLy8gcGFyc2UgYXJnXG4gICAgICAgIHZhciBhcmdNYXRjaCA9IG5hbWUubWF0Y2goYXJnUkUpO1xuICAgICAgICBpZiAoYXJnTWF0Y2ggJiYgKGFyZyA9IGFyZ01hdGNoWzFdKSkge1xuICAgICAgICAgIG5hbWUgPSBuYW1lLnNsaWNlKDAsIC0oYXJnLmxlbmd0aCArIDEpKTtcbiAgICAgICAgfVxuICAgICAgICBhZGREaXJlY3RpdmUoZWwsIG5hbWUsIHJhd05hbWUsIHZhbHVlLCBhcmcsIG1vZGlmaWVycyk7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIG5hbWUgPT09ICdtb2RlbCcpIHtcbiAgICAgICAgICBjaGVja0ZvckFsaWFzTW9kZWwoZWwsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBsaXRlcmFsIGF0dHJpYnV0ZVxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgdmFyIGV4cHJlc3Npb24gPSBwYXJzZVRleHQodmFsdWUsIGRlbGltaXRlcnMpO1xuICAgICAgICBpZiAoZXhwcmVzc2lvbikge1xuICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgIG5hbWUgKyBcIj1cXFwiXCIgKyB2YWx1ZSArIFwiXFxcIjogXCIgK1xuICAgICAgICAgICAgJ0ludGVycG9sYXRpb24gaW5zaWRlIGF0dHJpYnV0ZXMgaGFzIGJlZW4gcmVtb3ZlZC4gJyArXG4gICAgICAgICAgICAnVXNlIHYtYmluZCBvciB0aGUgY29sb24gc2hvcnRoYW5kIGluc3RlYWQuIEZvciBleGFtcGxlLCAnICtcbiAgICAgICAgICAgICdpbnN0ZWFkIG9mIDxkaXYgaWQ9XCJ7eyB2YWwgfX1cIj4sIHVzZSA8ZGl2IDppZD1cInZhbFwiPi4nXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYWRkQXR0cihlbCwgbmFtZSwgSlNPTi5zdHJpbmdpZnkodmFsdWUpKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tJbkZvciAoZWwpIHtcbiAgdmFyIHBhcmVudCA9IGVsO1xuICB3aGlsZSAocGFyZW50KSB7XG4gICAgaWYgKHBhcmVudC5mb3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuZnVuY3Rpb24gcGFyc2VNb2RpZmllcnMgKG5hbWUpIHtcbiAgdmFyIG1hdGNoID0gbmFtZS5tYXRjaChtb2RpZmllclJFKTtcbiAgaWYgKG1hdGNoKSB7XG4gICAgdmFyIHJldCA9IHt9O1xuICAgIG1hdGNoLmZvckVhY2goZnVuY3Rpb24gKG0pIHsgcmV0W20uc2xpY2UoMSldID0gdHJ1ZTsgfSk7XG4gICAgcmV0dXJuIHJldFxuICB9XG59XG5cbmZ1bmN0aW9uIG1ha2VBdHRyc01hcCAoYXR0cnMpIHtcbiAgdmFyIG1hcCA9IHt9O1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGF0dHJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIG1hcFthdHRyc1tpXS5uYW1lXSAmJiAhaXNJRSkge1xuICAgICAgd2FybiQxKCdkdXBsaWNhdGUgYXR0cmlidXRlOiAnICsgYXR0cnNbaV0ubmFtZSk7XG4gICAgfVxuICAgIG1hcFthdHRyc1tpXS5uYW1lXSA9IGF0dHJzW2ldLnZhbHVlO1xuICB9XG4gIHJldHVybiBtYXBcbn1cblxuZnVuY3Rpb24gaXNGb3JiaWRkZW5UYWcgKGVsKSB7XG4gIHJldHVybiAoXG4gICAgZWwudGFnID09PSAnc3R5bGUnIHx8XG4gICAgKGVsLnRhZyA9PT0gJ3NjcmlwdCcgJiYgKFxuICAgICAgIWVsLmF0dHJzTWFwLnR5cGUgfHxcbiAgICAgIGVsLmF0dHJzTWFwLnR5cGUgPT09ICd0ZXh0L2phdmFzY3JpcHQnXG4gICAgKSlcbiAgKVxufVxuXG52YXIgaWVOU0J1ZyA9IC9eeG1sbnM6TlNcXGQrLztcbnZhciBpZU5TUHJlZml4ID0gL15OU1xcZCs6LztcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIGd1YXJkSUVTVkdCdWcgKGF0dHJzKSB7XG4gIHZhciByZXMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhdHRycy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBhdHRyID0gYXR0cnNbaV07XG4gICAgaWYgKCFpZU5TQnVnLnRlc3QoYXR0ci5uYW1lKSkge1xuICAgICAgYXR0ci5uYW1lID0gYXR0ci5uYW1lLnJlcGxhY2UoaWVOU1ByZWZpeCwgJycpO1xuICAgICAgcmVzLnB1c2goYXR0cik7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gY2hlY2tGb3JBbGlhc01vZGVsIChlbCwgdmFsdWUpIHtcbiAgdmFyIF9lbCA9IGVsO1xuICB3aGlsZSAoX2VsKSB7XG4gICAgaWYgKF9lbC5mb3IgJiYgX2VsLmFsaWFzID09PSB2YWx1ZSkge1xuICAgICAgd2FybiQxKFxuICAgICAgICBcIjxcIiArIChlbC50YWcpICsgXCIgdi1tb2RlbD1cXFwiXCIgKyB2YWx1ZSArIFwiXFxcIj46IFwiICtcbiAgICAgICAgXCJZb3UgYXJlIGJpbmRpbmcgdi1tb2RlbCBkaXJlY3RseSB0byBhIHYtZm9yIGl0ZXJhdGlvbiBhbGlhcy4gXCIgK1xuICAgICAgICBcIlRoaXMgd2lsbCBub3QgYmUgYWJsZSB0byBtb2RpZnkgdGhlIHYtZm9yIHNvdXJjZSBhcnJheSBiZWNhdXNlIFwiICtcbiAgICAgICAgXCJ3cml0aW5nIHRvIHRoZSBhbGlhcyBpcyBsaWtlIG1vZGlmeWluZyBhIGZ1bmN0aW9uIGxvY2FsIHZhcmlhYmxlLiBcIiArXG4gICAgICAgIFwiQ29uc2lkZXIgdXNpbmcgYW4gYXJyYXkgb2Ygb2JqZWN0cyBhbmQgdXNlIHYtbW9kZWwgb24gYW4gb2JqZWN0IHByb3BlcnR5IGluc3RlYWQuXCJcbiAgICAgICk7XG4gICAgfVxuICAgIF9lbCA9IF9lbC5wYXJlbnQ7XG4gIH1cbn1cblxuLyogICovXG5cbnZhciBpc1N0YXRpY0tleTtcbnZhciBpc1BsYXRmb3JtUmVzZXJ2ZWRUYWc7XG5cbnZhciBnZW5TdGF0aWNLZXlzQ2FjaGVkID0gY2FjaGVkKGdlblN0YXRpY0tleXMkMSk7XG5cbi8qKlxuICogR29hbCBvZiB0aGUgb3B0aW1pemVyOiB3YWxrIHRoZSBnZW5lcmF0ZWQgdGVtcGxhdGUgQVNUIHRyZWVcbiAqIGFuZCBkZXRlY3Qgc3ViLXRyZWVzIHRoYXQgYXJlIHB1cmVseSBzdGF0aWMsIGkuZS4gcGFydHMgb2ZcbiAqIHRoZSBET00gdGhhdCBuZXZlciBuZWVkcyB0byBjaGFuZ2UuXG4gKlxuICogT25jZSB3ZSBkZXRlY3QgdGhlc2Ugc3ViLXRyZWVzLCB3ZSBjYW46XG4gKlxuICogMS4gSG9pc3QgdGhlbSBpbnRvIGNvbnN0YW50cywgc28gdGhhdCB3ZSBubyBsb25nZXIgbmVlZCB0b1xuICogICAgY3JlYXRlIGZyZXNoIG5vZGVzIGZvciB0aGVtIG9uIGVhY2ggcmUtcmVuZGVyO1xuICogMi4gQ29tcGxldGVseSBza2lwIHRoZW0gaW4gdGhlIHBhdGNoaW5nIHByb2Nlc3MuXG4gKi9cbmZ1bmN0aW9uIG9wdGltaXplIChyb290LCBvcHRpb25zKSB7XG4gIGlmICghcm9vdCkgeyByZXR1cm4gfVxuICBpc1N0YXRpY0tleSA9IGdlblN0YXRpY0tleXNDYWNoZWQob3B0aW9ucy5zdGF0aWNLZXlzIHx8ICcnKTtcbiAgaXNQbGF0Zm9ybVJlc2VydmVkVGFnID0gb3B0aW9ucy5pc1Jlc2VydmVkVGFnIHx8IG5vO1xuICAvLyBmaXJzdCBwYXNzOiBtYXJrIGFsbCBub24tc3RhdGljIG5vZGVzLlxuICBtYXJrU3RhdGljKHJvb3QpO1xuICAvLyBzZWNvbmQgcGFzczogbWFyayBzdGF0aWMgcm9vdHMuXG4gIG1hcmtTdGF0aWNSb290cyhyb290LCBmYWxzZSk7XG59XG5cbmZ1bmN0aW9uIGdlblN0YXRpY0tleXMkMSAoa2V5cykge1xuICByZXR1cm4gbWFrZU1hcChcbiAgICAndHlwZSx0YWcsYXR0cnNMaXN0LGF0dHJzTWFwLHBsYWluLHBhcmVudCxjaGlsZHJlbixhdHRycycgK1xuICAgIChrZXlzID8gJywnICsga2V5cyA6ICcnKVxuICApXG59XG5cbmZ1bmN0aW9uIG1hcmtTdGF0aWMgKG5vZGUpIHtcbiAgbm9kZS5zdGF0aWMgPSBpc1N0YXRpYyhub2RlKTtcbiAgaWYgKG5vZGUudHlwZSA9PT0gMSkge1xuICAgIC8vIGRvIG5vdCBtYWtlIGNvbXBvbmVudCBzbG90IGNvbnRlbnQgc3RhdGljLiB0aGlzIGF2b2lkc1xuICAgIC8vIDEuIGNvbXBvbmVudHMgbm90IGFibGUgdG8gbXV0YXRlIHNsb3Qgbm9kZXNcbiAgICAvLyAyLiBzdGF0aWMgc2xvdCBjb250ZW50IGZhaWxzIGZvciBob3QtcmVsb2FkaW5nXG4gICAgaWYgKFxuICAgICAgIWlzUGxhdGZvcm1SZXNlcnZlZFRhZyhub2RlLnRhZykgJiZcbiAgICAgIG5vZGUudGFnICE9PSAnc2xvdCcgJiZcbiAgICAgIG5vZGUuYXR0cnNNYXBbJ2lubGluZS10ZW1wbGF0ZSddID09IG51bGxcbiAgICApIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IG5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICB2YXIgY2hpbGQgPSBub2RlLmNoaWxkcmVuW2ldO1xuICAgICAgbWFya1N0YXRpYyhjaGlsZCk7XG4gICAgICBpZiAoIWNoaWxkLnN0YXRpYykge1xuICAgICAgICBub2RlLnN0YXRpYyA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBtYXJrU3RhdGljUm9vdHMgKG5vZGUsIGlzSW5Gb3IpIHtcbiAgaWYgKG5vZGUudHlwZSA9PT0gMSkge1xuICAgIGlmIChub2RlLnN0YXRpYyB8fCBub2RlLm9uY2UpIHtcbiAgICAgIG5vZGUuc3RhdGljSW5Gb3IgPSBpc0luRm9yO1xuICAgIH1cbiAgICAvLyBGb3IgYSBub2RlIHRvIHF1YWxpZnkgYXMgYSBzdGF0aWMgcm9vdCwgaXQgc2hvdWxkIGhhdmUgY2hpbGRyZW4gdGhhdFxuICAgIC8vIGFyZSBub3QganVzdCBzdGF0aWMgdGV4dC4gT3RoZXJ3aXNlIHRoZSBjb3N0IG9mIGhvaXN0aW5nIG91dCB3aWxsXG4gICAgLy8gb3V0d2VpZ2ggdGhlIGJlbmVmaXRzIGFuZCBpdCdzIGJldHRlciBvZmYgdG8ganVzdCBhbHdheXMgcmVuZGVyIGl0IGZyZXNoLlxuICAgIGlmIChub2RlLnN0YXRpYyAmJiBub2RlLmNoaWxkcmVuLmxlbmd0aCAmJiAhKFxuICAgICAgbm9kZS5jaGlsZHJlbi5sZW5ndGggPT09IDEgJiZcbiAgICAgIG5vZGUuY2hpbGRyZW5bMF0udHlwZSA9PT0gM1xuICAgICkpIHtcbiAgICAgIG5vZGUuc3RhdGljUm9vdCA9IHRydWU7XG4gICAgICByZXR1cm5cbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZS5zdGF0aWNSb290ID0gZmFsc2U7XG4gICAgfVxuICAgIGlmIChub2RlLmNoaWxkcmVuKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IG5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIG1hcmtTdGF0aWNSb290cyhub2RlLmNoaWxkcmVuW2ldLCBpc0luRm9yIHx8ICEhbm9kZS5mb3IpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAobm9kZS5pZkNvbmRpdGlvbnMpIHtcbiAgICAgIHdhbGtUaHJvdWdoQ29uZGl0aW9uc0Jsb2Nrcyhub2RlLmlmQ29uZGl0aW9ucywgaXNJbkZvcik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHdhbGtUaHJvdWdoQ29uZGl0aW9uc0Jsb2NrcyAoY29uZGl0aW9uQmxvY2tzLCBpc0luRm9yKSB7XG4gIGZvciAodmFyIGkgPSAxLCBsZW4gPSBjb25kaXRpb25CbG9ja3MubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBtYXJrU3RhdGljUm9vdHMoY29uZGl0aW9uQmxvY2tzW2ldLmJsb2NrLCBpc0luRm9yKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc1N0YXRpYyAobm9kZSkge1xuICBpZiAobm9kZS50eXBlID09PSAyKSB7IC8vIGV4cHJlc3Npb25cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICBpZiAobm9kZS50eXBlID09PSAzKSB7IC8vIHRleHRcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG4gIHJldHVybiAhIShub2RlLnByZSB8fCAoXG4gICAgIW5vZGUuaGFzQmluZGluZ3MgJiYgLy8gbm8gZHluYW1pYyBiaW5kaW5nc1xuICAgICFub2RlLmlmICYmICFub2RlLmZvciAmJiAvLyBub3Qgdi1pZiBvciB2LWZvciBvciB2LWVsc2VcbiAgICAhaXNCdWlsdEluVGFnKG5vZGUudGFnKSAmJiAvLyBub3QgYSBidWlsdC1pblxuICAgIGlzUGxhdGZvcm1SZXNlcnZlZFRhZyhub2RlLnRhZykgJiYgLy8gbm90IGEgY29tcG9uZW50XG4gICAgIWlzRGlyZWN0Q2hpbGRPZlRlbXBsYXRlRm9yKG5vZGUpICYmXG4gICAgT2JqZWN0LmtleXMobm9kZSkuZXZlcnkoaXNTdGF0aWNLZXkpXG4gICkpXG59XG5cbmZ1bmN0aW9uIGlzRGlyZWN0Q2hpbGRPZlRlbXBsYXRlRm9yIChub2RlKSB7XG4gIHdoaWxlIChub2RlLnBhcmVudCkge1xuICAgIG5vZGUgPSBub2RlLnBhcmVudDtcbiAgICBpZiAobm9kZS50YWcgIT09ICd0ZW1wbGF0ZScpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICBpZiAobm9kZS5mb3IpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG4vKiAgKi9cblxudmFyIGZuRXhwUkUgPSAvXlxccyooW1xcdyRfXSt8XFwoW14pXSo/XFwpKVxccyo9PnxeZnVuY3Rpb25cXHMqXFwoLztcbnZhciBzaW1wbGVQYXRoUkUgPSAvXlxccypbQS1aYS16XyRdW1xcdyRdKig/OlxcLltBLVphLXpfJF1bXFx3JF0qfFxcWycuKj8nXXxcXFtcIi4qP1wiXXxcXFtcXGQrXXxcXFtbQS1aYS16XyRdW1xcdyRdKl0pKlxccyokLztcblxuLy8ga2V5Q29kZSBhbGlhc2VzXG52YXIga2V5Q29kZXMgPSB7XG4gIGVzYzogMjcsXG4gIHRhYjogOSxcbiAgZW50ZXI6IDEzLFxuICBzcGFjZTogMzIsXG4gIHVwOiAzOCxcbiAgbGVmdDogMzcsXG4gIHJpZ2h0OiAzOSxcbiAgZG93bjogNDAsXG4gICdkZWxldGUnOiBbOCwgNDZdXG59O1xuXG52YXIgbW9kaWZpZXJDb2RlID0ge1xuICBzdG9wOiAnJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpOycsXG4gIHByZXZlbnQ6ICckZXZlbnQucHJldmVudERlZmF1bHQoKTsnLFxuICBzZWxmOiAnaWYoJGV2ZW50LnRhcmdldCAhPT0gJGV2ZW50LmN1cnJlbnRUYXJnZXQpcmV0dXJuOycsXG4gIGN0cmw6ICdpZighJGV2ZW50LmN0cmxLZXkpcmV0dXJuOycsXG4gIHNoaWZ0OiAnaWYoISRldmVudC5zaGlmdEtleSlyZXR1cm47JyxcbiAgYWx0OiAnaWYoISRldmVudC5hbHRLZXkpcmV0dXJuOycsXG4gIG1ldGE6ICdpZighJGV2ZW50Lm1ldGFLZXkpcmV0dXJuOydcbn07XG5cbmZ1bmN0aW9uIGdlbkhhbmRsZXJzIChldmVudHMsIG5hdGl2ZSkge1xuICB2YXIgcmVzID0gbmF0aXZlID8gJ25hdGl2ZU9uOnsnIDogJ29uOnsnO1xuICBmb3IgKHZhciBuYW1lIGluIGV2ZW50cykge1xuICAgIHJlcyArPSBcIlxcXCJcIiArIG5hbWUgKyBcIlxcXCI6XCIgKyAoZ2VuSGFuZGxlcihuYW1lLCBldmVudHNbbmFtZV0pKSArIFwiLFwiO1xuICB9XG4gIHJldHVybiByZXMuc2xpY2UoMCwgLTEpICsgJ30nXG59XG5cbmZ1bmN0aW9uIGdlbkhhbmRsZXIgKFxuICBuYW1lLFxuICBoYW5kbGVyXG4pIHtcbiAgaWYgKCFoYW5kbGVyKSB7XG4gICAgcmV0dXJuICdmdW5jdGlvbigpe30nXG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShoYW5kbGVyKSkge1xuICAgIHJldHVybiAoXCJbXCIgKyAoaGFuZGxlci5tYXAoZnVuY3Rpb24gKGhhbmRsZXIpIHsgcmV0dXJuIGdlbkhhbmRsZXIobmFtZSwgaGFuZGxlcik7IH0pLmpvaW4oJywnKSkgKyBcIl1cIilcbiAgfSBlbHNlIGlmICghaGFuZGxlci5tb2RpZmllcnMpIHtcbiAgICByZXR1cm4gZm5FeHBSRS50ZXN0KGhhbmRsZXIudmFsdWUpIHx8IHNpbXBsZVBhdGhSRS50ZXN0KGhhbmRsZXIudmFsdWUpXG4gICAgICA/IGhhbmRsZXIudmFsdWVcbiAgICAgIDogKFwiZnVuY3Rpb24oJGV2ZW50KXtcIiArIChoYW5kbGVyLnZhbHVlKSArIFwifVwiKVxuICB9IGVsc2Uge1xuICAgIHZhciBjb2RlID0gJyc7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gaGFuZGxlci5tb2RpZmllcnMpIHtcbiAgICAgIGlmIChtb2RpZmllckNvZGVba2V5XSkge1xuICAgICAgICBjb2RlICs9IG1vZGlmaWVyQ29kZVtrZXldO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChrZXlzLmxlbmd0aCkge1xuICAgICAgY29kZSA9IGdlbktleUZpbHRlcihrZXlzKSArIGNvZGU7XG4gICAgfVxuICAgIHZhciBoYW5kbGVyQ29kZSA9IHNpbXBsZVBhdGhSRS50ZXN0KGhhbmRsZXIudmFsdWUpXG4gICAgICA/IGhhbmRsZXIudmFsdWUgKyAnKCRldmVudCknXG4gICAgICA6IGhhbmRsZXIudmFsdWU7XG4gICAgcmV0dXJuICdmdW5jdGlvbigkZXZlbnQpeycgKyBjb2RlICsgaGFuZGxlckNvZGUgKyAnfSdcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5LZXlGaWx0ZXIgKGtleXMpIHtcbiAgcmV0dXJuIChcImlmKFwiICsgKGtleXMubWFwKGdlbkZpbHRlckNvZGUpLmpvaW4oJyYmJykpICsgXCIpcmV0dXJuO1wiKVxufVxuXG5mdW5jdGlvbiBnZW5GaWx0ZXJDb2RlIChrZXkpIHtcbiAgdmFyIGtleVZhbCA9IHBhcnNlSW50KGtleSwgMTApO1xuICBpZiAoa2V5VmFsKSB7XG4gICAgcmV0dXJuIChcIiRldmVudC5rZXlDb2RlIT09XCIgKyBrZXlWYWwpXG4gIH1cbiAgdmFyIGFsaWFzID0ga2V5Q29kZXNba2V5XTtcbiAgcmV0dXJuIChcIl9rKCRldmVudC5rZXlDb2RlLFwiICsgKEpTT04uc3RyaW5naWZ5KGtleSkpICsgKGFsaWFzID8gJywnICsgSlNPTi5zdHJpbmdpZnkoYWxpYXMpIDogJycpICsgXCIpXCIpXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBiaW5kJDIgKGVsLCBkaXIpIHtcbiAgZWwud3JhcERhdGEgPSBmdW5jdGlvbiAoY29kZSkge1xuICAgIHJldHVybiAoXCJfYihcIiArIGNvZGUgKyBcIiwnXCIgKyAoZWwudGFnKSArIFwiJyxcIiArIChkaXIudmFsdWUpICsgKGRpci5tb2RpZmllcnMgJiYgZGlyLm1vZGlmaWVycy5wcm9wID8gJyx0cnVlJyA6ICcnKSArIFwiKVwiKVxuICB9O1xufVxuXG4vKiAgKi9cblxudmFyIGJhc2VEaXJlY3RpdmVzID0ge1xuICBiaW5kOiBiaW5kJDIsXG4gIGNsb2FrOiBub29wXG59O1xuXG4vKiAgKi9cblxuLy8gY29uZmlndXJhYmxlIHN0YXRlXG52YXIgd2FybiQyO1xudmFyIHRyYW5zZm9ybXMkMTtcbnZhciBkYXRhR2VuRm5zO1xudmFyIHBsYXRmb3JtRGlyZWN0aXZlcyQxO1xudmFyIGlzUGxhdGZvcm1SZXNlcnZlZFRhZyQxO1xudmFyIHN0YXRpY1JlbmRlckZucztcbnZhciBvbmNlQ291bnQ7XG52YXIgY3VycmVudE9wdGlvbnM7XG5cbmZ1bmN0aW9uIGdlbmVyYXRlIChcbiAgYXN0LFxuICBvcHRpb25zXG4pIHtcbiAgLy8gc2F2ZSBwcmV2aW91cyBzdGF0aWNSZW5kZXJGbnMgc28gZ2VuZXJhdGUgY2FsbHMgY2FuIGJlIG5lc3RlZFxuICB2YXIgcHJldlN0YXRpY1JlbmRlckZucyA9IHN0YXRpY1JlbmRlckZucztcbiAgdmFyIGN1cnJlbnRTdGF0aWNSZW5kZXJGbnMgPSBzdGF0aWNSZW5kZXJGbnMgPSBbXTtcbiAgdmFyIHByZXZPbmNlQ291bnQgPSBvbmNlQ291bnQ7XG4gIG9uY2VDb3VudCA9IDA7XG4gIGN1cnJlbnRPcHRpb25zID0gb3B0aW9ucztcbiAgd2FybiQyID0gb3B0aW9ucy53YXJuIHx8IGJhc2VXYXJuO1xuICB0cmFuc2Zvcm1zJDEgPSBwbHVja01vZHVsZUZ1bmN0aW9uKG9wdGlvbnMubW9kdWxlcywgJ3RyYW5zZm9ybUNvZGUnKTtcbiAgZGF0YUdlbkZucyA9IHBsdWNrTW9kdWxlRnVuY3Rpb24ob3B0aW9ucy5tb2R1bGVzLCAnZ2VuRGF0YScpO1xuICBwbGF0Zm9ybURpcmVjdGl2ZXMkMSA9IG9wdGlvbnMuZGlyZWN0aXZlcyB8fCB7fTtcbiAgaXNQbGF0Zm9ybVJlc2VydmVkVGFnJDEgPSBvcHRpb25zLmlzUmVzZXJ2ZWRUYWcgfHwgbm87XG4gIHZhciBjb2RlID0gYXN0ID8gZ2VuRWxlbWVudChhc3QpIDogJ19jKFwiZGl2XCIpJztcbiAgc3RhdGljUmVuZGVyRm5zID0gcHJldlN0YXRpY1JlbmRlckZucztcbiAgb25jZUNvdW50ID0gcHJldk9uY2VDb3VudDtcbiAgcmV0dXJuIHtcbiAgICByZW5kZXI6IChcIndpdGgodGhpcyl7cmV0dXJuIFwiICsgY29kZSArIFwifVwiKSxcbiAgICBzdGF0aWNSZW5kZXJGbnM6IGN1cnJlbnRTdGF0aWNSZW5kZXJGbnNcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5FbGVtZW50IChlbCkge1xuICBpZiAoZWwuc3RhdGljUm9vdCAmJiAhZWwuc3RhdGljUHJvY2Vzc2VkKSB7XG4gICAgcmV0dXJuIGdlblN0YXRpYyhlbClcbiAgfSBlbHNlIGlmIChlbC5vbmNlICYmICFlbC5vbmNlUHJvY2Vzc2VkKSB7XG4gICAgcmV0dXJuIGdlbk9uY2UoZWwpXG4gIH0gZWxzZSBpZiAoZWwuZm9yICYmICFlbC5mb3JQcm9jZXNzZWQpIHtcbiAgICByZXR1cm4gZ2VuRm9yKGVsKVxuICB9IGVsc2UgaWYgKGVsLmlmICYmICFlbC5pZlByb2Nlc3NlZCkge1xuICAgIHJldHVybiBnZW5JZihlbClcbiAgfSBlbHNlIGlmIChlbC50YWcgPT09ICd0ZW1wbGF0ZScgJiYgIWVsLnNsb3RUYXJnZXQpIHtcbiAgICByZXR1cm4gZ2VuQ2hpbGRyZW4oZWwpIHx8ICd2b2lkIDAnXG4gIH0gZWxzZSBpZiAoZWwudGFnID09PSAnc2xvdCcpIHtcbiAgICByZXR1cm4gZ2VuU2xvdChlbClcbiAgfSBlbHNlIHtcbiAgICAvLyBjb21wb25lbnQgb3IgZWxlbWVudFxuICAgIHZhciBjb2RlO1xuICAgIGlmIChlbC5jb21wb25lbnQpIHtcbiAgICAgIGNvZGUgPSBnZW5Db21wb25lbnQoZWwuY29tcG9uZW50LCBlbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBkYXRhID0gZWwucGxhaW4gPyB1bmRlZmluZWQgOiBnZW5EYXRhKGVsKTtcblxuICAgICAgdmFyIGNoaWxkcmVuID0gZWwuaW5saW5lVGVtcGxhdGUgPyBudWxsIDogZ2VuQ2hpbGRyZW4oZWwsIHRydWUpO1xuICAgICAgY29kZSA9IFwiX2MoJ1wiICsgKGVsLnRhZykgKyBcIidcIiArIChkYXRhID8gKFwiLFwiICsgZGF0YSkgOiAnJykgKyAoY2hpbGRyZW4gPyAoXCIsXCIgKyBjaGlsZHJlbikgOiAnJykgKyBcIilcIjtcbiAgICB9XG4gICAgLy8gbW9kdWxlIHRyYW5zZm9ybXNcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRyYW5zZm9ybXMkMS5sZW5ndGg7IGkrKykge1xuICAgICAgY29kZSA9IHRyYW5zZm9ybXMkMVtpXShlbCwgY29kZSk7XG4gICAgfVxuICAgIHJldHVybiBjb2RlXG4gIH1cbn1cblxuLy8gaG9pc3Qgc3RhdGljIHN1Yi10cmVlcyBvdXRcbmZ1bmN0aW9uIGdlblN0YXRpYyAoZWwpIHtcbiAgZWwuc3RhdGljUHJvY2Vzc2VkID0gdHJ1ZTtcbiAgc3RhdGljUmVuZGVyRm5zLnB1c2goKFwid2l0aCh0aGlzKXtyZXR1cm4gXCIgKyAoZ2VuRWxlbWVudChlbCkpICsgXCJ9XCIpKTtcbiAgcmV0dXJuIChcIl9tKFwiICsgKHN0YXRpY1JlbmRlckZucy5sZW5ndGggLSAxKSArIChlbC5zdGF0aWNJbkZvciA/ICcsdHJ1ZScgOiAnJykgKyBcIilcIilcbn1cblxuLy8gdi1vbmNlXG5mdW5jdGlvbiBnZW5PbmNlIChlbCkge1xuICBlbC5vbmNlUHJvY2Vzc2VkID0gdHJ1ZTtcbiAgaWYgKGVsLmlmICYmICFlbC5pZlByb2Nlc3NlZCkge1xuICAgIHJldHVybiBnZW5JZihlbClcbiAgfSBlbHNlIGlmIChlbC5zdGF0aWNJbkZvcikge1xuICAgIHZhciBrZXkgPSAnJztcbiAgICB2YXIgcGFyZW50ID0gZWwucGFyZW50O1xuICAgIHdoaWxlIChwYXJlbnQpIHtcbiAgICAgIGlmIChwYXJlbnQuZm9yKSB7XG4gICAgICAgIGtleSA9IHBhcmVudC5rZXk7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xuICAgIH1cbiAgICBpZiAoIWtleSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuJDIoXG4gICAgICAgIFwidi1vbmNlIGNhbiBvbmx5IGJlIHVzZWQgaW5zaWRlIHYtZm9yIHRoYXQgaXMga2V5ZWQuIFwiXG4gICAgICApO1xuICAgICAgcmV0dXJuIGdlbkVsZW1lbnQoZWwpXG4gICAgfVxuICAgIHJldHVybiAoXCJfbyhcIiArIChnZW5FbGVtZW50KGVsKSkgKyBcIixcIiArIChvbmNlQ291bnQrKykgKyAoa2V5ID8gKFwiLFwiICsga2V5KSA6IFwiXCIpICsgXCIpXCIpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGdlblN0YXRpYyhlbClcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5JZiAoZWwpIHtcbiAgZWwuaWZQcm9jZXNzZWQgPSB0cnVlOyAvLyBhdm9pZCByZWN1cnNpb25cbiAgcmV0dXJuIGdlbklmQ29uZGl0aW9ucyhlbC5pZkNvbmRpdGlvbnMuc2xpY2UoKSlcbn1cblxuZnVuY3Rpb24gZ2VuSWZDb25kaXRpb25zIChjb25kaXRpb25zKSB7XG4gIGlmICghY29uZGl0aW9ucy5sZW5ndGgpIHtcbiAgICByZXR1cm4gJ19lKCknXG4gIH1cblxuICB2YXIgY29uZGl0aW9uID0gY29uZGl0aW9ucy5zaGlmdCgpO1xuICBpZiAoY29uZGl0aW9uLmV4cCkge1xuICAgIHJldHVybiAoXCIoXCIgKyAoY29uZGl0aW9uLmV4cCkgKyBcIik/XCIgKyAoZ2VuVGVybmFyeUV4cChjb25kaXRpb24uYmxvY2spKSArIFwiOlwiICsgKGdlbklmQ29uZGl0aW9ucyhjb25kaXRpb25zKSkpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIChcIlwiICsgKGdlblRlcm5hcnlFeHAoY29uZGl0aW9uLmJsb2NrKSkpXG4gIH1cblxuICAvLyB2LWlmIHdpdGggdi1vbmNlIHNob3VsZCBnZW5lcmF0ZSBjb2RlIGxpa2UgKGEpP19tKDApOl9tKDEpXG4gIGZ1bmN0aW9uIGdlblRlcm5hcnlFeHAgKGVsKSB7XG4gICAgcmV0dXJuIGVsLm9uY2UgPyBnZW5PbmNlKGVsKSA6IGdlbkVsZW1lbnQoZWwpXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuRm9yIChlbCkge1xuICB2YXIgZXhwID0gZWwuZm9yO1xuICB2YXIgYWxpYXMgPSBlbC5hbGlhcztcbiAgdmFyIGl0ZXJhdG9yMSA9IGVsLml0ZXJhdG9yMSA/IChcIixcIiArIChlbC5pdGVyYXRvcjEpKSA6ICcnO1xuICB2YXIgaXRlcmF0b3IyID0gZWwuaXRlcmF0b3IyID8gKFwiLFwiICsgKGVsLml0ZXJhdG9yMikpIDogJyc7XG4gIGVsLmZvclByb2Nlc3NlZCA9IHRydWU7IC8vIGF2b2lkIHJlY3Vyc2lvblxuICByZXR1cm4gXCJfbCgoXCIgKyBleHAgKyBcIiksXCIgK1xuICAgIFwiZnVuY3Rpb24oXCIgKyBhbGlhcyArIGl0ZXJhdG9yMSArIGl0ZXJhdG9yMiArIFwiKXtcIiArXG4gICAgICBcInJldHVybiBcIiArIChnZW5FbGVtZW50KGVsKSkgK1xuICAgICd9KSdcbn1cblxuZnVuY3Rpb24gZ2VuRGF0YSAoZWwpIHtcbiAgdmFyIGRhdGEgPSAneyc7XG5cbiAgLy8gZGlyZWN0aXZlcyBmaXJzdC5cbiAgLy8gZGlyZWN0aXZlcyBtYXkgbXV0YXRlIHRoZSBlbCdzIG90aGVyIHByb3BlcnRpZXMgYmVmb3JlIHRoZXkgYXJlIGdlbmVyYXRlZC5cbiAgdmFyIGRpcnMgPSBnZW5EaXJlY3RpdmVzKGVsKTtcbiAgaWYgKGRpcnMpIHsgZGF0YSArPSBkaXJzICsgJywnOyB9XG5cbiAgLy8ga2V5XG4gIGlmIChlbC5rZXkpIHtcbiAgICBkYXRhICs9IFwia2V5OlwiICsgKGVsLmtleSkgKyBcIixcIjtcbiAgfVxuICAvLyByZWZcbiAgaWYgKGVsLnJlZikge1xuICAgIGRhdGEgKz0gXCJyZWY6XCIgKyAoZWwucmVmKSArIFwiLFwiO1xuICB9XG4gIGlmIChlbC5yZWZJbkZvcikge1xuICAgIGRhdGEgKz0gXCJyZWZJbkZvcjp0cnVlLFwiO1xuICB9XG4gIC8vIHByZVxuICBpZiAoZWwucHJlKSB7XG4gICAgZGF0YSArPSBcInByZTp0cnVlLFwiO1xuICB9XG4gIC8vIHJlY29yZCBvcmlnaW5hbCB0YWcgbmFtZSBmb3IgY29tcG9uZW50cyB1c2luZyBcImlzXCIgYXR0cmlidXRlXG4gIGlmIChlbC5jb21wb25lbnQpIHtcbiAgICBkYXRhICs9IFwidGFnOlxcXCJcIiArIChlbC50YWcpICsgXCJcXFwiLFwiO1xuICB9XG4gIC8vIG1vZHVsZSBkYXRhIGdlbmVyYXRpb24gZnVuY3Rpb25zXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YUdlbkZucy5sZW5ndGg7IGkrKykge1xuICAgIGRhdGEgKz0gZGF0YUdlbkZuc1tpXShlbCk7XG4gIH1cbiAgLy8gYXR0cmlidXRlc1xuICBpZiAoZWwuYXR0cnMpIHtcbiAgICBkYXRhICs9IFwiYXR0cnM6e1wiICsgKGdlblByb3BzKGVsLmF0dHJzKSkgKyBcIn0sXCI7XG4gIH1cbiAgLy8gRE9NIHByb3BzXG4gIGlmIChlbC5wcm9wcykge1xuICAgIGRhdGEgKz0gXCJkb21Qcm9wczp7XCIgKyAoZ2VuUHJvcHMoZWwucHJvcHMpKSArIFwifSxcIjtcbiAgfVxuICAvLyBldmVudCBoYW5kbGVyc1xuICBpZiAoZWwuZXZlbnRzKSB7XG4gICAgZGF0YSArPSAoZ2VuSGFuZGxlcnMoZWwuZXZlbnRzKSkgKyBcIixcIjtcbiAgfVxuICBpZiAoZWwubmF0aXZlRXZlbnRzKSB7XG4gICAgZGF0YSArPSAoZ2VuSGFuZGxlcnMoZWwubmF0aXZlRXZlbnRzLCB0cnVlKSkgKyBcIixcIjtcbiAgfVxuICAvLyBzbG90IHRhcmdldFxuICBpZiAoZWwuc2xvdFRhcmdldCkge1xuICAgIGRhdGEgKz0gXCJzbG90OlwiICsgKGVsLnNsb3RUYXJnZXQpICsgXCIsXCI7XG4gIH1cbiAgLy8gc2NvcGVkIHNsb3RzXG4gIGlmIChlbC5zY29wZWRTbG90cykge1xuICAgIGRhdGEgKz0gKGdlblNjb3BlZFNsb3RzKGVsLnNjb3BlZFNsb3RzKSkgKyBcIixcIjtcbiAgfVxuICAvLyBpbmxpbmUtdGVtcGxhdGVcbiAgaWYgKGVsLmlubGluZVRlbXBsYXRlKSB7XG4gICAgdmFyIGlubGluZVRlbXBsYXRlID0gZ2VuSW5saW5lVGVtcGxhdGUoZWwpO1xuICAgIGlmIChpbmxpbmVUZW1wbGF0ZSkge1xuICAgICAgZGF0YSArPSBpbmxpbmVUZW1wbGF0ZSArIFwiLFwiO1xuICAgIH1cbiAgfVxuICBkYXRhID0gZGF0YS5yZXBsYWNlKC8sJC8sICcnKSArICd9JztcbiAgLy8gdi1iaW5kIGRhdGEgd3JhcFxuICBpZiAoZWwud3JhcERhdGEpIHtcbiAgICBkYXRhID0gZWwud3JhcERhdGEoZGF0YSk7XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxuZnVuY3Rpb24gZ2VuRGlyZWN0aXZlcyAoZWwpIHtcbiAgdmFyIGRpcnMgPSBlbC5kaXJlY3RpdmVzO1xuICBpZiAoIWRpcnMpIHsgcmV0dXJuIH1cbiAgdmFyIHJlcyA9ICdkaXJlY3RpdmVzOlsnO1xuICB2YXIgaGFzUnVudGltZSA9IGZhbHNlO1xuICB2YXIgaSwgbCwgZGlyLCBuZWVkUnVudGltZTtcbiAgZm9yIChpID0gMCwgbCA9IGRpcnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZGlyID0gZGlyc1tpXTtcbiAgICBuZWVkUnVudGltZSA9IHRydWU7XG4gICAgdmFyIGdlbiA9IHBsYXRmb3JtRGlyZWN0aXZlcyQxW2Rpci5uYW1lXSB8fCBiYXNlRGlyZWN0aXZlc1tkaXIubmFtZV07XG4gICAgaWYgKGdlbikge1xuICAgICAgLy8gY29tcGlsZS10aW1lIGRpcmVjdGl2ZSB0aGF0IG1hbmlwdWxhdGVzIEFTVC5cbiAgICAgIC8vIHJldHVybnMgdHJ1ZSBpZiBpdCBhbHNvIG5lZWRzIGEgcnVudGltZSBjb3VudGVycGFydC5cbiAgICAgIG5lZWRSdW50aW1lID0gISFnZW4oZWwsIGRpciwgd2FybiQyKTtcbiAgICB9XG4gICAgaWYgKG5lZWRSdW50aW1lKSB7XG4gICAgICBoYXNSdW50aW1lID0gdHJ1ZTtcbiAgICAgIHJlcyArPSBcIntuYW1lOlxcXCJcIiArIChkaXIubmFtZSkgKyBcIlxcXCIscmF3TmFtZTpcXFwiXCIgKyAoZGlyLnJhd05hbWUpICsgXCJcXFwiXCIgKyAoZGlyLnZhbHVlID8gKFwiLHZhbHVlOihcIiArIChkaXIudmFsdWUpICsgXCIpLGV4cHJlc3Npb246XCIgKyAoSlNPTi5zdHJpbmdpZnkoZGlyLnZhbHVlKSkpIDogJycpICsgKGRpci5hcmcgPyAoXCIsYXJnOlxcXCJcIiArIChkaXIuYXJnKSArIFwiXFxcIlwiKSA6ICcnKSArIChkaXIubW9kaWZpZXJzID8gKFwiLG1vZGlmaWVyczpcIiArIChKU09OLnN0cmluZ2lmeShkaXIubW9kaWZpZXJzKSkpIDogJycpICsgXCJ9LFwiO1xuICAgIH1cbiAgfVxuICBpZiAoaGFzUnVudGltZSkge1xuICAgIHJldHVybiByZXMuc2xpY2UoMCwgLTEpICsgJ10nXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuSW5saW5lVGVtcGxhdGUgKGVsKSB7XG4gIHZhciBhc3QgPSBlbC5jaGlsZHJlblswXTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgKFxuICAgIGVsLmNoaWxkcmVuLmxlbmd0aCA+IDEgfHwgYXN0LnR5cGUgIT09IDFcbiAgKSkge1xuICAgIHdhcm4kMignSW5saW5lLXRlbXBsYXRlIGNvbXBvbmVudHMgbXVzdCBoYXZlIGV4YWN0bHkgb25lIGNoaWxkIGVsZW1lbnQuJyk7XG4gIH1cbiAgaWYgKGFzdC50eXBlID09PSAxKSB7XG4gICAgdmFyIGlubGluZVJlbmRlckZucyA9IGdlbmVyYXRlKGFzdCwgY3VycmVudE9wdGlvbnMpO1xuICAgIHJldHVybiAoXCJpbmxpbmVUZW1wbGF0ZTp7cmVuZGVyOmZ1bmN0aW9uKCl7XCIgKyAoaW5saW5lUmVuZGVyRm5zLnJlbmRlcikgKyBcIn0sc3RhdGljUmVuZGVyRm5zOltcIiArIChpbmxpbmVSZW5kZXJGbnMuc3RhdGljUmVuZGVyRm5zLm1hcChmdW5jdGlvbiAoY29kZSkgeyByZXR1cm4gKFwiZnVuY3Rpb24oKXtcIiArIGNvZGUgKyBcIn1cIik7IH0pLmpvaW4oJywnKSkgKyBcIl19XCIpXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuU2NvcGVkU2xvdHMgKHNsb3RzKSB7XG4gIHJldHVybiAoXCJzY29wZWRTbG90czp7XCIgKyAoT2JqZWN0LmtleXMoc2xvdHMpLm1hcChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBnZW5TY29wZWRTbG90KGtleSwgc2xvdHNba2V5XSk7IH0pLmpvaW4oJywnKSkgKyBcIn1cIilcbn1cblxuZnVuY3Rpb24gZ2VuU2NvcGVkU2xvdCAoa2V5LCBlbCkge1xuICByZXR1cm4ga2V5ICsgXCI6ZnVuY3Rpb24oXCIgKyAoU3RyaW5nKGVsLmF0dHJzTWFwLnNjb3BlKSkgKyBcIil7XCIgK1xuICAgIFwicmV0dXJuIFwiICsgKGVsLnRhZyA9PT0gJ3RlbXBsYXRlJ1xuICAgICAgPyBnZW5DaGlsZHJlbihlbCkgfHwgJ3ZvaWQgMCdcbiAgICAgIDogZ2VuRWxlbWVudChlbCkpICsgXCJ9XCJcbn1cblxuZnVuY3Rpb24gZ2VuQ2hpbGRyZW4gKGVsLCBjaGVja1NraXApIHtcbiAgdmFyIGNoaWxkcmVuID0gZWwuY2hpbGRyZW47XG4gIGlmIChjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICB2YXIgZWwkMSA9IGNoaWxkcmVuWzBdO1xuICAgIC8vIG9wdGltaXplIHNpbmdsZSB2LWZvclxuICAgIGlmIChjaGlsZHJlbi5sZW5ndGggPT09IDEgJiZcbiAgICAgICAgZWwkMS5mb3IgJiZcbiAgICAgICAgZWwkMS50YWcgIT09ICd0ZW1wbGF0ZScgJiZcbiAgICAgICAgZWwkMS50YWcgIT09ICdzbG90Jykge1xuICAgICAgcmV0dXJuIGdlbkVsZW1lbnQoZWwkMSlcbiAgICB9XG4gICAgdmFyIG5vcm1hbGl6YXRpb25UeXBlID0gZ2V0Tm9ybWFsaXphdGlvblR5cGUoY2hpbGRyZW4pO1xuICAgIHJldHVybiAoXCJbXCIgKyAoY2hpbGRyZW4ubWFwKGdlbk5vZGUpLmpvaW4oJywnKSkgKyBcIl1cIiArIChjaGVja1NraXBcbiAgICAgICAgPyBub3JtYWxpemF0aW9uVHlwZSA/IChcIixcIiArIG5vcm1hbGl6YXRpb25UeXBlKSA6ICcnXG4gICAgICAgIDogJycpKVxuICB9XG59XG5cbi8vIGRldGVybWluZSB0aGUgbm9ybWFsaXphdGlvbiBuZWVkZWQgZm9yIHRoZSBjaGlsZHJlbiBhcnJheS5cbi8vIDA6IG5vIG5vcm1hbGl6YXRpb24gbmVlZGVkXG4vLyAxOiBzaW1wbGUgbm9ybWFsaXphdGlvbiBuZWVkZWQgKHBvc3NpYmxlIDEtbGV2ZWwgZGVlcCBuZXN0ZWQgYXJyYXkpXG4vLyAyOiBmdWxsIG5vcm1hbGl6YXRpb24gbmVlZGVkXG5mdW5jdGlvbiBnZXROb3JtYWxpemF0aW9uVHlwZSAoY2hpbGRyZW4pIHtcbiAgdmFyIHJlcyA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZWwgPSBjaGlsZHJlbltpXTtcbiAgICBpZiAoZWwudHlwZSAhPT0gMSkge1xuICAgICAgY29udGludWVcbiAgICB9XG4gICAgaWYgKG5lZWRzTm9ybWFsaXphdGlvbihlbCkgfHxcbiAgICAgICAgKGVsLmlmQ29uZGl0aW9ucyAmJiBlbC5pZkNvbmRpdGlvbnMuc29tZShmdW5jdGlvbiAoYykgeyByZXR1cm4gbmVlZHNOb3JtYWxpemF0aW9uKGMuYmxvY2spOyB9KSkpIHtcbiAgICAgIHJlcyA9IDI7XG4gICAgICBicmVha1xuICAgIH1cbiAgICBpZiAobWF5YmVDb21wb25lbnQoZWwpIHx8XG4gICAgICAgIChlbC5pZkNvbmRpdGlvbnMgJiYgZWwuaWZDb25kaXRpb25zLnNvbWUoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIG1heWJlQ29tcG9uZW50KGMuYmxvY2spOyB9KSkpIHtcbiAgICAgIHJlcyA9IDE7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gbmVlZHNOb3JtYWxpemF0aW9uIChlbCkge1xuICByZXR1cm4gZWwuZm9yICE9PSB1bmRlZmluZWQgfHwgZWwudGFnID09PSAndGVtcGxhdGUnIHx8IGVsLnRhZyA9PT0gJ3Nsb3QnXG59XG5cbmZ1bmN0aW9uIG1heWJlQ29tcG9uZW50IChlbCkge1xuICByZXR1cm4gIWlzUGxhdGZvcm1SZXNlcnZlZFRhZyQxKGVsLnRhZylcbn1cblxuZnVuY3Rpb24gZ2VuTm9kZSAobm9kZSkge1xuICBpZiAobm9kZS50eXBlID09PSAxKSB7XG4gICAgcmV0dXJuIGdlbkVsZW1lbnQobm9kZSlcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZ2VuVGV4dChub2RlKVxuICB9XG59XG5cbmZ1bmN0aW9uIGdlblRleHQgKHRleHQpIHtcbiAgcmV0dXJuIChcIl92KFwiICsgKHRleHQudHlwZSA9PT0gMlxuICAgID8gdGV4dC5leHByZXNzaW9uIC8vIG5vIG5lZWQgZm9yICgpIGJlY2F1c2UgYWxyZWFkeSB3cmFwcGVkIGluIF9zKClcbiAgICA6IHRyYW5zZm9ybVNwZWNpYWxOZXdsaW5lcyhKU09OLnN0cmluZ2lmeSh0ZXh0LnRleHQpKSkgKyBcIilcIilcbn1cblxuZnVuY3Rpb24gZ2VuU2xvdCAoZWwpIHtcbiAgdmFyIHNsb3ROYW1lID0gZWwuc2xvdE5hbWUgfHwgJ1wiZGVmYXVsdFwiJztcbiAgdmFyIGNoaWxkcmVuID0gZ2VuQ2hpbGRyZW4oZWwpO1xuICB2YXIgcmVzID0gXCJfdChcIiArIHNsb3ROYW1lICsgKGNoaWxkcmVuID8gKFwiLFwiICsgY2hpbGRyZW4pIDogJycpO1xuICB2YXIgYXR0cnMgPSBlbC5hdHRycyAmJiAoXCJ7XCIgKyAoZWwuYXR0cnMubWFwKGZ1bmN0aW9uIChhKSB7IHJldHVybiAoKGNhbWVsaXplKGEubmFtZSkpICsgXCI6XCIgKyAoYS52YWx1ZSkpOyB9KS5qb2luKCcsJykpICsgXCJ9XCIpO1xuICB2YXIgYmluZCQkMSA9IGVsLmF0dHJzTWFwWyd2LWJpbmQnXTtcbiAgaWYgKChhdHRycyB8fCBiaW5kJCQxKSAmJiAhY2hpbGRyZW4pIHtcbiAgICByZXMgKz0gXCIsbnVsbFwiO1xuICB9XG4gIGlmIChhdHRycykge1xuICAgIHJlcyArPSBcIixcIiArIGF0dHJzO1xuICB9XG4gIGlmIChiaW5kJCQxKSB7XG4gICAgcmVzICs9IChhdHRycyA/ICcnIDogJyxudWxsJykgKyBcIixcIiArIGJpbmQkJDE7XG4gIH1cbiAgcmV0dXJuIHJlcyArICcpJ1xufVxuXG4vLyBjb21wb25lbnROYW1lIGlzIGVsLmNvbXBvbmVudCwgdGFrZSBpdCBhcyBhcmd1bWVudCB0byBzaHVuIGZsb3cncyBwZXNzaW1pc3RpYyByZWZpbmVtZW50XG5mdW5jdGlvbiBnZW5Db21wb25lbnQgKGNvbXBvbmVudE5hbWUsIGVsKSB7XG4gIHZhciBjaGlsZHJlbiA9IGVsLmlubGluZVRlbXBsYXRlID8gbnVsbCA6IGdlbkNoaWxkcmVuKGVsLCB0cnVlKTtcbiAgcmV0dXJuIChcIl9jKFwiICsgY29tcG9uZW50TmFtZSArIFwiLFwiICsgKGdlbkRhdGEoZWwpKSArIChjaGlsZHJlbiA/IChcIixcIiArIGNoaWxkcmVuKSA6ICcnKSArIFwiKVwiKVxufVxuXG5mdW5jdGlvbiBnZW5Qcm9wcyAocHJvcHMpIHtcbiAgdmFyIHJlcyA9ICcnO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHByb3AgPSBwcm9wc1tpXTtcbiAgICByZXMgKz0gXCJcXFwiXCIgKyAocHJvcC5uYW1lKSArIFwiXFxcIjpcIiArICh0cmFuc2Zvcm1TcGVjaWFsTmV3bGluZXMocHJvcC52YWx1ZSkpICsgXCIsXCI7XG4gIH1cbiAgcmV0dXJuIHJlcy5zbGljZSgwLCAtMSlcbn1cblxuLy8gIzM4OTUsICM0MjY4XG5mdW5jdGlvbiB0cmFuc2Zvcm1TcGVjaWFsTmV3bGluZXMgKHRleHQpIHtcbiAgcmV0dXJuIHRleHRcbiAgICAucmVwbGFjZSgvXFx1MjAyOC9nLCAnXFxcXHUyMDI4JylcbiAgICAucmVwbGFjZSgvXFx1MjAyOS9nLCAnXFxcXHUyMDI5Jylcbn1cblxuLyogICovXG5cbi8qKlxuICogQ29tcGlsZSBhIHRlbXBsYXRlLlxuICovXG5mdW5jdGlvbiBjb21waWxlJDEgKFxuICB0ZW1wbGF0ZSxcbiAgb3B0aW9uc1xuKSB7XG4gIHZhciBhc3QgPSBwYXJzZSh0ZW1wbGF0ZS50cmltKCksIG9wdGlvbnMpO1xuICBvcHRpbWl6ZShhc3QsIG9wdGlvbnMpO1xuICB2YXIgY29kZSA9IGdlbmVyYXRlKGFzdCwgb3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgYXN0OiBhc3QsXG4gICAgcmVuZGVyOiBjb2RlLnJlbmRlcixcbiAgICBzdGF0aWNSZW5kZXJGbnM6IGNvZGUuc3RhdGljUmVuZGVyRm5zXG4gIH1cbn1cblxuLyogICovXG5cbi8vIG9wZXJhdG9ycyBsaWtlIHR5cGVvZiwgaW5zdGFuY2VvZiBhbmQgaW4gYXJlIGFsbG93ZWRcbnZhciBwcm9oaWJpdGVkS2V5d29yZFJFID0gbmV3IFJlZ0V4cCgnXFxcXGInICsgKFxuICAnZG8saWYsZm9yLGxldCxuZXcsdHJ5LHZhcixjYXNlLGVsc2Usd2l0aCxhd2FpdCxicmVhayxjYXRjaCxjbGFzcyxjb25zdCwnICtcbiAgJ3N1cGVyLHRocm93LHdoaWxlLHlpZWxkLGRlbGV0ZSxleHBvcnQsaW1wb3J0LHJldHVybixzd2l0Y2gsZGVmYXVsdCwnICtcbiAgJ2V4dGVuZHMsZmluYWxseSxjb250aW51ZSxkZWJ1Z2dlcixmdW5jdGlvbixhcmd1bWVudHMnXG4pLnNwbGl0KCcsJykuam9pbignXFxcXGJ8XFxcXGInKSArICdcXFxcYicpO1xuLy8gY2hlY2sgdmFsaWQgaWRlbnRpZmllciBmb3Igdi1mb3JcbnZhciBpZGVudFJFID0gL1tBLVphLXpfJF1bXFx3JF0qLztcbi8vIHN0cmlwIHN0cmluZ3MgaW4gZXhwcmVzc2lvbnNcbnZhciBzdHJpcFN0cmluZ1JFID0gLycoPzpbXidcXFxcXXxcXFxcLikqJ3xcIig/OlteXCJcXFxcXXxcXFxcLikqXCJ8YCg/OlteYFxcXFxdfFxcXFwuKSpcXCRcXHt8XFx9KD86W15gXFxcXF18XFxcXC4pKmB8YCg/OlteYFxcXFxdfFxcXFwuKSpgL2c7XG5cbi8vIGRldGVjdCBwcm9ibGVtYXRpYyBleHByZXNzaW9ucyBpbiBhIHRlbXBsYXRlXG5mdW5jdGlvbiBkZXRlY3RFcnJvcnMgKGFzdCkge1xuICB2YXIgZXJyb3JzID0gW107XG4gIGlmIChhc3QpIHtcbiAgICBjaGVja05vZGUoYXN0LCBlcnJvcnMpO1xuICB9XG4gIHJldHVybiBlcnJvcnNcbn1cblxuZnVuY3Rpb24gY2hlY2tOb2RlIChub2RlLCBlcnJvcnMpIHtcbiAgaWYgKG5vZGUudHlwZSA9PT0gMSkge1xuICAgIGZvciAodmFyIG5hbWUgaW4gbm9kZS5hdHRyc01hcCkge1xuICAgICAgaWYgKGRpclJFLnRlc3QobmFtZSkpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gbm9kZS5hdHRyc01hcFtuYW1lXTtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKG5hbWUgPT09ICd2LWZvcicpIHtcbiAgICAgICAgICAgIGNoZWNrRm9yKG5vZGUsIChcInYtZm9yPVxcXCJcIiArIHZhbHVlICsgXCJcXFwiXCIpLCBlcnJvcnMpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjaGVja0V4cHJlc3Npb24odmFsdWUsIChuYW1lICsgXCI9XFxcIlwiICsgdmFsdWUgKyBcIlxcXCJcIiksIGVycm9ycyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChub2RlLmNoaWxkcmVuKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY2hlY2tOb2RlKG5vZGUuY2hpbGRyZW5baV0sIGVycm9ycyk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKG5vZGUudHlwZSA9PT0gMikge1xuICAgIGNoZWNrRXhwcmVzc2lvbihub2RlLmV4cHJlc3Npb24sIG5vZGUudGV4dCwgZXJyb3JzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjaGVja0ZvciAobm9kZSwgdGV4dCwgZXJyb3JzKSB7XG4gIGNoZWNrRXhwcmVzc2lvbihub2RlLmZvciB8fCAnJywgdGV4dCwgZXJyb3JzKTtcbiAgY2hlY2tJZGVudGlmaWVyKG5vZGUuYWxpYXMsICd2LWZvciBhbGlhcycsIHRleHQsIGVycm9ycyk7XG4gIGNoZWNrSWRlbnRpZmllcihub2RlLml0ZXJhdG9yMSwgJ3YtZm9yIGl0ZXJhdG9yJywgdGV4dCwgZXJyb3JzKTtcbiAgY2hlY2tJZGVudGlmaWVyKG5vZGUuaXRlcmF0b3IyLCAndi1mb3IgaXRlcmF0b3InLCB0ZXh0LCBlcnJvcnMpO1xufVxuXG5mdW5jdGlvbiBjaGVja0lkZW50aWZpZXIgKGlkZW50LCB0eXBlLCB0ZXh0LCBlcnJvcnMpIHtcbiAgaWYgKHR5cGVvZiBpZGVudCA9PT0gJ3N0cmluZycgJiYgIWlkZW50UkUudGVzdChpZGVudCkpIHtcbiAgICBlcnJvcnMucHVzaCgoXCItIGludmFsaWQgXCIgKyB0eXBlICsgXCIgXFxcIlwiICsgaWRlbnQgKyBcIlxcXCIgaW4gZXhwcmVzc2lvbjogXCIgKyB0ZXh0KSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tFeHByZXNzaW9uIChleHAsIHRleHQsIGVycm9ycykge1xuICB0cnkge1xuICAgIG5ldyBGdW5jdGlvbigoXCJyZXR1cm4gXCIgKyBleHApKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHZhciBrZXl3b3JkTWF0Y2ggPSBleHAucmVwbGFjZShzdHJpcFN0cmluZ1JFLCAnJykubWF0Y2gocHJvaGliaXRlZEtleXdvcmRSRSk7XG4gICAgaWYgKGtleXdvcmRNYXRjaCkge1xuICAgICAgZXJyb3JzLnB1c2goXG4gICAgICAgIFwiLSBhdm9pZCB1c2luZyBKYXZhU2NyaXB0IGtleXdvcmQgYXMgcHJvcGVydHkgbmFtZTogXCIgK1xuICAgICAgICBcIlxcXCJcIiArIChrZXl3b3JkTWF0Y2hbMF0pICsgXCJcXFwiIGluIGV4cHJlc3Npb24gXCIgKyB0ZXh0XG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBlcnJvcnMucHVzaCgoXCItIGludmFsaWQgZXhwcmVzc2lvbjogXCIgKyB0ZXh0KSk7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiB0cmFuc2Zvcm1Ob2RlIChlbCwgb3B0aW9ucykge1xuICB2YXIgd2FybiA9IG9wdGlvbnMud2FybiB8fCBiYXNlV2FybjtcbiAgdmFyIHN0YXRpY0NsYXNzID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ2NsYXNzJyk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHN0YXRpY0NsYXNzKSB7XG4gICAgdmFyIGV4cHJlc3Npb24gPSBwYXJzZVRleHQoc3RhdGljQ2xhc3MsIG9wdGlvbnMuZGVsaW1pdGVycyk7XG4gICAgaWYgKGV4cHJlc3Npb24pIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIFwiY2xhc3M9XFxcIlwiICsgc3RhdGljQ2xhc3MgKyBcIlxcXCI6IFwiICtcbiAgICAgICAgJ0ludGVycG9sYXRpb24gaW5zaWRlIGF0dHJpYnV0ZXMgaGFzIGJlZW4gcmVtb3ZlZC4gJyArXG4gICAgICAgICdVc2Ugdi1iaW5kIG9yIHRoZSBjb2xvbiBzaG9ydGhhbmQgaW5zdGVhZC4gRm9yIGV4YW1wbGUsICcgK1xuICAgICAgICAnaW5zdGVhZCBvZiA8ZGl2IGNsYXNzPVwie3sgdmFsIH19XCI+LCB1c2UgPGRpdiA6Y2xhc3M9XCJ2YWxcIj4uJ1xuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgaWYgKHN0YXRpY0NsYXNzKSB7XG4gICAgZWwuc3RhdGljQ2xhc3MgPSBKU09OLnN0cmluZ2lmeShzdGF0aWNDbGFzcyk7XG4gIH1cbiAgdmFyIGNsYXNzQmluZGluZyA9IGdldEJpbmRpbmdBdHRyKGVsLCAnY2xhc3MnLCBmYWxzZSAvKiBnZXRTdGF0aWMgKi8pO1xuICBpZiAoY2xhc3NCaW5kaW5nKSB7XG4gICAgZWwuY2xhc3NCaW5kaW5nID0gY2xhc3NCaW5kaW5nO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdlbkRhdGEkMSAoZWwpIHtcbiAgdmFyIGRhdGEgPSAnJztcbiAgaWYgKGVsLnN0YXRpY0NsYXNzKSB7XG4gICAgZGF0YSArPSBcInN0YXRpY0NsYXNzOlwiICsgKGVsLnN0YXRpY0NsYXNzKSArIFwiLFwiO1xuICB9XG4gIGlmIChlbC5jbGFzc0JpbmRpbmcpIHtcbiAgICBkYXRhICs9IFwiY2xhc3M6XCIgKyAoZWwuY2xhc3NCaW5kaW5nKSArIFwiLFwiO1xuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbnZhciBrbGFzcyQxID0ge1xuICBzdGF0aWNLZXlzOiBbJ3N0YXRpY0NsYXNzJ10sXG4gIHRyYW5zZm9ybU5vZGU6IHRyYW5zZm9ybU5vZGUsXG4gIGdlbkRhdGE6IGdlbkRhdGEkMVxufTtcblxuLyogICovXG5cbmZ1bmN0aW9uIHRyYW5zZm9ybU5vZGUkMSAoZWwsIG9wdGlvbnMpIHtcbiAgdmFyIHdhcm4gPSBvcHRpb25zLndhcm4gfHwgYmFzZVdhcm47XG4gIHZhciBzdGF0aWNTdHlsZSA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICdzdHlsZScpO1xuICBpZiAoc3RhdGljU3R5bGUpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIGV4cHJlc3Npb24gPSBwYXJzZVRleHQoc3RhdGljU3R5bGUsIG9wdGlvbnMuZGVsaW1pdGVycyk7XG4gICAgICBpZiAoZXhwcmVzc2lvbikge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIFwic3R5bGU9XFxcIlwiICsgc3RhdGljU3R5bGUgKyBcIlxcXCI6IFwiICtcbiAgICAgICAgICAnSW50ZXJwb2xhdGlvbiBpbnNpZGUgYXR0cmlidXRlcyBoYXMgYmVlbiByZW1vdmVkLiAnICtcbiAgICAgICAgICAnVXNlIHYtYmluZCBvciB0aGUgY29sb24gc2hvcnRoYW5kIGluc3RlYWQuIEZvciBleGFtcGxlLCAnICtcbiAgICAgICAgICAnaW5zdGVhZCBvZiA8ZGl2IHN0eWxlPVwie3sgdmFsIH19XCI+LCB1c2UgPGRpdiA6c3R5bGU9XCJ2YWxcIj4uJ1xuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICBlbC5zdGF0aWNTdHlsZSA9IEpTT04uc3RyaW5naWZ5KHBhcnNlU3R5bGVUZXh0KHN0YXRpY1N0eWxlKSk7XG4gIH1cblxuICB2YXIgc3R5bGVCaW5kaW5nID0gZ2V0QmluZGluZ0F0dHIoZWwsICdzdHlsZScsIGZhbHNlIC8qIGdldFN0YXRpYyAqLyk7XG4gIGlmIChzdHlsZUJpbmRpbmcpIHtcbiAgICBlbC5zdHlsZUJpbmRpbmcgPSBzdHlsZUJpbmRpbmc7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuRGF0YSQyIChlbCkge1xuICB2YXIgZGF0YSA9ICcnO1xuICBpZiAoZWwuc3RhdGljU3R5bGUpIHtcbiAgICBkYXRhICs9IFwic3RhdGljU3R5bGU6XCIgKyAoZWwuc3RhdGljU3R5bGUpICsgXCIsXCI7XG4gIH1cbiAgaWYgKGVsLnN0eWxlQmluZGluZykge1xuICAgIGRhdGEgKz0gXCJzdHlsZTooXCIgKyAoZWwuc3R5bGVCaW5kaW5nKSArIFwiKSxcIjtcbiAgfVxuICByZXR1cm4gZGF0YVxufVxuXG52YXIgc3R5bGUkMSA9IHtcbiAgc3RhdGljS2V5czogWydzdGF0aWNTdHlsZSddLFxuICB0cmFuc2Zvcm1Ob2RlOiB0cmFuc2Zvcm1Ob2RlJDEsXG4gIGdlbkRhdGE6IGdlbkRhdGEkMlxufTtcblxudmFyIG1vZHVsZXMkMSA9IFtcbiAga2xhc3MkMSxcbiAgc3R5bGUkMVxuXTtcblxuLyogICovXG5cbnZhciB3YXJuJDM7XG5cbmZ1bmN0aW9uIG1vZGVsJDEgKFxuICBlbCxcbiAgZGlyLFxuICBfd2FyblxuKSB7XG4gIHdhcm4kMyA9IF93YXJuO1xuICB2YXIgdmFsdWUgPSBkaXIudmFsdWU7XG4gIHZhciBtb2RpZmllcnMgPSBkaXIubW9kaWZpZXJzO1xuICB2YXIgdGFnID0gZWwudGFnO1xuICB2YXIgdHlwZSA9IGVsLmF0dHJzTWFwLnR5cGU7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmFyIGR5bmFtaWNUeXBlID0gZWwuYXR0cnNNYXBbJ3YtYmluZDp0eXBlJ10gfHwgZWwuYXR0cnNNYXBbJzp0eXBlJ107XG4gICAgaWYgKHRhZyA9PT0gJ2lucHV0JyAmJiBkeW5hbWljVHlwZSkge1xuICAgICAgd2FybiQzKFxuICAgICAgICBcIjxpbnB1dCA6dHlwZT1cXFwiXCIgKyBkeW5hbWljVHlwZSArIFwiXFxcIiB2LW1vZGVsPVxcXCJcIiArIHZhbHVlICsgXCJcXFwiPjpcXG5cIiArXG4gICAgICAgIFwidi1tb2RlbCBkb2VzIG5vdCBzdXBwb3J0IGR5bmFtaWMgaW5wdXQgdHlwZXMuIFVzZSB2LWlmIGJyYW5jaGVzIGluc3RlYWQuXCJcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIGlmICh0YWcgPT09ICdzZWxlY3QnKSB7XG4gICAgZ2VuU2VsZWN0KGVsLCB2YWx1ZSwgbW9kaWZpZXJzKTtcbiAgfSBlbHNlIGlmICh0YWcgPT09ICdpbnB1dCcgJiYgdHlwZSA9PT0gJ2NoZWNrYm94Jykge1xuICAgIGdlbkNoZWNrYm94TW9kZWwoZWwsIHZhbHVlLCBtb2RpZmllcnMpO1xuICB9IGVsc2UgaWYgKHRhZyA9PT0gJ2lucHV0JyAmJiB0eXBlID09PSAncmFkaW8nKSB7XG4gICAgZ2VuUmFkaW9Nb2RlbChlbCwgdmFsdWUsIG1vZGlmaWVycyk7XG4gIH0gZWxzZSB7XG4gICAgZ2VuRGVmYXVsdE1vZGVsKGVsLCB2YWx1ZSwgbW9kaWZpZXJzKTtcbiAgfVxuICAvLyBlbnN1cmUgcnVudGltZSBkaXJlY3RpdmUgbWV0YWRhdGFcbiAgcmV0dXJuIHRydWVcbn1cblxuZnVuY3Rpb24gZ2VuQ2hlY2tib3hNb2RlbCAoXG4gIGVsLFxuICB2YWx1ZSxcbiAgbW9kaWZpZXJzXG4pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICBlbC5hdHRyc01hcC5jaGVja2VkICE9IG51bGwpIHtcbiAgICB3YXJuJDMoXG4gICAgICBcIjxcIiArIChlbC50YWcpICsgXCIgdi1tb2RlbD1cXFwiXCIgKyB2YWx1ZSArIFwiXFxcIiBjaGVja2VkPjpcXG5cIiArXG4gICAgICBcImlubGluZSBjaGVja2VkIGF0dHJpYnV0ZXMgd2lsbCBiZSBpZ25vcmVkIHdoZW4gdXNpbmcgdi1tb2RlbC4gXCIgK1xuICAgICAgJ0RlY2xhcmUgaW5pdGlhbCB2YWx1ZXMgaW4gdGhlIGNvbXBvbmVudFxcJ3MgZGF0YSBvcHRpb24gaW5zdGVhZC4nXG4gICAgKTtcbiAgfVxuICB2YXIgbnVtYmVyID0gbW9kaWZpZXJzICYmIG1vZGlmaWVycy5udW1iZXI7XG4gIHZhciB2YWx1ZUJpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ3ZhbHVlJykgfHwgJ251bGwnO1xuICB2YXIgdHJ1ZVZhbHVlQmluZGluZyA9IGdldEJpbmRpbmdBdHRyKGVsLCAndHJ1ZS12YWx1ZScpIHx8ICd0cnVlJztcbiAgdmFyIGZhbHNlVmFsdWVCaW5kaW5nID0gZ2V0QmluZGluZ0F0dHIoZWwsICdmYWxzZS12YWx1ZScpIHx8ICdmYWxzZSc7XG4gIGFkZFByb3AoZWwsICdjaGVja2VkJyxcbiAgICBcIkFycmF5LmlzQXJyYXkoXCIgKyB2YWx1ZSArIFwiKVwiICtcbiAgICAgIFwiP19pKFwiICsgdmFsdWUgKyBcIixcIiArIHZhbHVlQmluZGluZyArIFwiKT4tMVwiICsgKFxuICAgICAgICB0cnVlVmFsdWVCaW5kaW5nID09PSAndHJ1ZSdcbiAgICAgICAgICA/IChcIjooXCIgKyB2YWx1ZSArIFwiKVwiKVxuICAgICAgICAgIDogKFwiOl9xKFwiICsgdmFsdWUgKyBcIixcIiArIHRydWVWYWx1ZUJpbmRpbmcgKyBcIilcIilcbiAgICAgIClcbiAgKTtcbiAgYWRkSGFuZGxlcihlbCwgJ2NsaWNrJyxcbiAgICBcInZhciAkJGE9XCIgKyB2YWx1ZSArIFwiLFwiICtcbiAgICAgICAgJyQkZWw9JGV2ZW50LnRhcmdldCwnICtcbiAgICAgICAgXCIkJGM9JCRlbC5jaGVja2VkPyhcIiArIHRydWVWYWx1ZUJpbmRpbmcgKyBcIik6KFwiICsgZmFsc2VWYWx1ZUJpbmRpbmcgKyBcIik7XCIgK1xuICAgICdpZihBcnJheS5pc0FycmF5KCQkYSkpeycgK1xuICAgICAgXCJ2YXIgJCR2PVwiICsgKG51bWJlciA/ICdfbignICsgdmFsdWVCaW5kaW5nICsgJyknIDogdmFsdWVCaW5kaW5nKSArIFwiLFwiICtcbiAgICAgICAgICAnJCRpPV9pKCQkYSwkJHYpOycgK1xuICAgICAgXCJpZigkJGMpeyQkaTwwJiYoXCIgKyB2YWx1ZSArIFwiPSQkYS5jb25jYXQoJCR2KSl9XCIgK1xuICAgICAgXCJlbHNleyQkaT4tMSYmKFwiICsgdmFsdWUgKyBcIj0kJGEuc2xpY2UoMCwkJGkpLmNvbmNhdCgkJGEuc2xpY2UoJCRpKzEpKSl9XCIgK1xuICAgIFwifWVsc2V7XCIgKyB2YWx1ZSArIFwiPSQkY31cIixcbiAgICBudWxsLCB0cnVlXG4gICk7XG59XG5cbmZ1bmN0aW9uIGdlblJhZGlvTW9kZWwgKFxuICAgIGVsLFxuICAgIHZhbHVlLFxuICAgIG1vZGlmaWVyc1xuKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgZWwuYXR0cnNNYXAuY2hlY2tlZCAhPSBudWxsKSB7XG4gICAgd2FybiQzKFxuICAgICAgXCI8XCIgKyAoZWwudGFnKSArIFwiIHYtbW9kZWw9XFxcIlwiICsgdmFsdWUgKyBcIlxcXCIgY2hlY2tlZD46XFxuXCIgK1xuICAgICAgXCJpbmxpbmUgY2hlY2tlZCBhdHRyaWJ1dGVzIHdpbGwgYmUgaWdub3JlZCB3aGVuIHVzaW5nIHYtbW9kZWwuIFwiICtcbiAgICAgICdEZWNsYXJlIGluaXRpYWwgdmFsdWVzIGluIHRoZSBjb21wb25lbnRcXCdzIGRhdGEgb3B0aW9uIGluc3RlYWQuJ1xuICAgICk7XG4gIH1cbiAgdmFyIG51bWJlciA9IG1vZGlmaWVycyAmJiBtb2RpZmllcnMubnVtYmVyO1xuICB2YXIgdmFsdWVCaW5kaW5nID0gZ2V0QmluZGluZ0F0dHIoZWwsICd2YWx1ZScpIHx8ICdudWxsJztcbiAgdmFsdWVCaW5kaW5nID0gbnVtYmVyID8gKFwiX24oXCIgKyB2YWx1ZUJpbmRpbmcgKyBcIilcIikgOiB2YWx1ZUJpbmRpbmc7XG4gIGFkZFByb3AoZWwsICdjaGVja2VkJywgKFwiX3EoXCIgKyB2YWx1ZSArIFwiLFwiICsgdmFsdWVCaW5kaW5nICsgXCIpXCIpKTtcbiAgYWRkSGFuZGxlcihlbCwgJ2NsaWNrJywgZ2VuQXNzaWdubWVudENvZGUodmFsdWUsIHZhbHVlQmluZGluZyksIG51bGwsIHRydWUpO1xufVxuXG5mdW5jdGlvbiBnZW5EZWZhdWx0TW9kZWwgKFxuICBlbCxcbiAgdmFsdWUsXG4gIG1vZGlmaWVyc1xuKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGVsLnRhZyA9PT0gJ2lucHV0JyAmJiBlbC5hdHRyc01hcC52YWx1ZSkge1xuICAgICAgd2FybiQzKFxuICAgICAgICBcIjxcIiArIChlbC50YWcpICsgXCIgdi1tb2RlbD1cXFwiXCIgKyB2YWx1ZSArIFwiXFxcIiB2YWx1ZT1cXFwiXCIgKyAoZWwuYXR0cnNNYXAudmFsdWUpICsgXCJcXFwiPjpcXG5cIiArXG4gICAgICAgICdpbmxpbmUgdmFsdWUgYXR0cmlidXRlcyB3aWxsIGJlIGlnbm9yZWQgd2hlbiB1c2luZyB2LW1vZGVsLiAnICtcbiAgICAgICAgJ0RlY2xhcmUgaW5pdGlhbCB2YWx1ZXMgaW4gdGhlIGNvbXBvbmVudFxcJ3MgZGF0YSBvcHRpb24gaW5zdGVhZC4nXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoZWwudGFnID09PSAndGV4dGFyZWEnICYmIGVsLmNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgd2FybiQzKFxuICAgICAgICBcIjx0ZXh0YXJlYSB2LW1vZGVsPVxcXCJcIiArIHZhbHVlICsgXCJcXFwiPjpcXG5cIiArXG4gICAgICAgICdpbmxpbmUgY29udGVudCBpbnNpZGUgPHRleHRhcmVhPiB3aWxsIGJlIGlnbm9yZWQgd2hlbiB1c2luZyB2LW1vZGVsLiAnICtcbiAgICAgICAgJ0RlY2xhcmUgaW5pdGlhbCB2YWx1ZXMgaW4gdGhlIGNvbXBvbmVudFxcJ3MgZGF0YSBvcHRpb24gaW5zdGVhZC4nXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHZhciB0eXBlID0gZWwuYXR0cnNNYXAudHlwZTtcbiAgdmFyIHJlZiA9IG1vZGlmaWVycyB8fCB7fTtcbiAgdmFyIGxhenkgPSByZWYubGF6eTtcbiAgdmFyIG51bWJlciA9IHJlZi5udW1iZXI7XG4gIHZhciB0cmltID0gcmVmLnRyaW07XG4gIHZhciBldmVudCA9IGxhenkgfHwgKGlzSUUgJiYgdHlwZSA9PT0gJ3JhbmdlJykgPyAnY2hhbmdlJyA6ICdpbnB1dCc7XG4gIHZhciBuZWVkQ29tcG9zaXRpb25HdWFyZCA9ICFsYXp5ICYmIHR5cGUgIT09ICdyYW5nZSc7XG4gIHZhciBpc05hdGl2ZSA9IGVsLnRhZyA9PT0gJ2lucHV0JyB8fCBlbC50YWcgPT09ICd0ZXh0YXJlYSc7XG5cbiAgdmFyIHZhbHVlRXhwcmVzc2lvbiA9IGlzTmF0aXZlXG4gICAgPyAoXCIkZXZlbnQudGFyZ2V0LnZhbHVlXCIgKyAodHJpbSA/ICcudHJpbSgpJyA6ICcnKSlcbiAgICA6IHRyaW0gPyBcIih0eXBlb2YgJGV2ZW50ID09PSAnc3RyaW5nJyA/ICRldmVudC50cmltKCkgOiAkZXZlbnQpXCIgOiBcIiRldmVudFwiO1xuICB2YWx1ZUV4cHJlc3Npb24gPSBudW1iZXIgfHwgdHlwZSA9PT0gJ251bWJlcidcbiAgICA/IChcIl9uKFwiICsgdmFsdWVFeHByZXNzaW9uICsgXCIpXCIpXG4gICAgOiB2YWx1ZUV4cHJlc3Npb247XG5cbiAgdmFyIGNvZGUgPSBnZW5Bc3NpZ25tZW50Q29kZSh2YWx1ZSwgdmFsdWVFeHByZXNzaW9uKTtcbiAgaWYgKGlzTmF0aXZlICYmIG5lZWRDb21wb3NpdGlvbkd1YXJkKSB7XG4gICAgY29kZSA9IFwiaWYoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpcmV0dXJuO1wiICsgY29kZTtcbiAgfVxuXG4gIC8vIGlucHV0cyB3aXRoIHR5cGU9XCJmaWxlXCIgYXJlIHJlYWQgb25seSBhbmQgc2V0dGluZyB0aGUgaW5wdXQnc1xuICAvLyB2YWx1ZSB3aWxsIHRocm93IGFuIGVycm9yLlxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgdHlwZSA9PT0gJ2ZpbGUnKSB7XG4gICAgd2FybiQzKFxuICAgICAgXCI8XCIgKyAoZWwudGFnKSArIFwiIHYtbW9kZWw9XFxcIlwiICsgdmFsdWUgKyBcIlxcXCIgdHlwZT1cXFwiZmlsZVxcXCI+OlxcblwiICtcbiAgICAgIFwiRmlsZSBpbnB1dHMgYXJlIHJlYWQgb25seS4gVXNlIGEgdi1vbjpjaGFuZ2UgbGlzdGVuZXIgaW5zdGVhZC5cIlxuICAgICk7XG4gIH1cblxuICBhZGRQcm9wKGVsLCAndmFsdWUnLCBpc05hdGl2ZSA/IChcIl9zKFwiICsgdmFsdWUgKyBcIilcIikgOiAoXCIoXCIgKyB2YWx1ZSArIFwiKVwiKSk7XG4gIGFkZEhhbmRsZXIoZWwsIGV2ZW50LCBjb2RlLCBudWxsLCB0cnVlKTtcbiAgaWYgKHRyaW0gfHwgbnVtYmVyIHx8IHR5cGUgPT09ICdudW1iZXInKSB7XG4gICAgYWRkSGFuZGxlcihlbCwgJ2JsdXInLCAnJGZvcmNlVXBkYXRlKCknKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5TZWxlY3QgKFxuICAgIGVsLFxuICAgIHZhbHVlLFxuICAgIG1vZGlmaWVyc1xuKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgZWwuY2hpbGRyZW4uc29tZShjaGVja09wdGlvbldhcm5pbmcpO1xuICB9XG5cbiAgdmFyIG51bWJlciA9IG1vZGlmaWVycyAmJiBtb2RpZmllcnMubnVtYmVyO1xuICB2YXIgYXNzaWdubWVudCA9IFwiQXJyYXkucHJvdG90eXBlLmZpbHRlclwiICtcbiAgICBcIi5jYWxsKCRldmVudC50YXJnZXQub3B0aW9ucyxmdW5jdGlvbihvKXtyZXR1cm4gby5zZWxlY3RlZH0pXCIgK1xuICAgIFwiLm1hcChmdW5jdGlvbihvKXt2YXIgdmFsID0gXFxcIl92YWx1ZVxcXCIgaW4gbyA/IG8uX3ZhbHVlIDogby52YWx1ZTtcIiArXG4gICAgXCJyZXR1cm4gXCIgKyAobnVtYmVyID8gJ19uKHZhbCknIDogJ3ZhbCcpICsgXCJ9KVwiICtcbiAgICAoZWwuYXR0cnNNYXAubXVsdGlwbGUgPT0gbnVsbCA/ICdbMF0nIDogJycpO1xuXG4gIHZhciBjb2RlID0gZ2VuQXNzaWdubWVudENvZGUodmFsdWUsIGFzc2lnbm1lbnQpO1xuICBhZGRIYW5kbGVyKGVsLCAnY2hhbmdlJywgY29kZSwgbnVsbCwgdHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIGNoZWNrT3B0aW9uV2FybmluZyAob3B0aW9uKSB7XG4gIGlmIChvcHRpb24udHlwZSA9PT0gMSAmJlxuICAgIG9wdGlvbi50YWcgPT09ICdvcHRpb24nICYmXG4gICAgb3B0aW9uLmF0dHJzTWFwLnNlbGVjdGVkICE9IG51bGwpIHtcbiAgICB3YXJuJDMoXG4gICAgICBcIjxzZWxlY3Qgdi1tb2RlbD1cXFwiXCIgKyAob3B0aW9uLnBhcmVudC5hdHRyc01hcFsndi1tb2RlbCddKSArIFwiXFxcIj46XFxuXCIgK1xuICAgICAgJ2lubGluZSBzZWxlY3RlZCBhdHRyaWJ1dGVzIG9uIDxvcHRpb24+IHdpbGwgYmUgaWdub3JlZCB3aGVuIHVzaW5nIHYtbW9kZWwuICcgK1xuICAgICAgJ0RlY2xhcmUgaW5pdGlhbCB2YWx1ZXMgaW4gdGhlIGNvbXBvbmVudFxcJ3MgZGF0YSBvcHRpb24gaW5zdGVhZC4nXG4gICAgKTtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBnZW5Bc3NpZ25tZW50Q29kZSAodmFsdWUsIGFzc2lnbm1lbnQpIHtcbiAgdmFyIG1vZGVsUnMgPSBwYXJzZU1vZGVsKHZhbHVlKTtcbiAgaWYgKG1vZGVsUnMuaWR4ID09PSBudWxsKSB7XG4gICAgcmV0dXJuICh2YWx1ZSArIFwiPVwiICsgYXNzaWdubWVudClcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJ2YXIgJCRleHAgPSBcIiArIChtb2RlbFJzLmV4cCkgKyBcIiwgJCRpZHggPSBcIiArIChtb2RlbFJzLmlkeCkgKyBcIjtcIiArXG4gICAgICBcImlmICghQXJyYXkuaXNBcnJheSgkJGV4cCkpe1wiICtcbiAgICAgICAgdmFsdWUgKyBcIj1cIiArIGFzc2lnbm1lbnQgKyBcIn1cIiArXG4gICAgICBcImVsc2V7JCRleHAuc3BsaWNlKCQkaWR4LCAxLCBcIiArIGFzc2lnbm1lbnQgKyBcIil9XCJcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gdGV4dCAoZWwsIGRpcikge1xuICBpZiAoZGlyLnZhbHVlKSB7XG4gICAgYWRkUHJvcChlbCwgJ3RleHRDb250ZW50JywgKFwiX3MoXCIgKyAoZGlyLnZhbHVlKSArIFwiKVwiKSk7XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGh0bWwgKGVsLCBkaXIpIHtcbiAgaWYgKGRpci52YWx1ZSkge1xuICAgIGFkZFByb3AoZWwsICdpbm5lckhUTUwnLCAoXCJfcyhcIiArIChkaXIudmFsdWUpICsgXCIpXCIpKTtcbiAgfVxufVxuXG52YXIgZGlyZWN0aXZlcyQxID0ge1xuICBtb2RlbDogbW9kZWwkMSxcbiAgdGV4dDogdGV4dCxcbiAgaHRtbDogaHRtbFxufTtcblxuLyogICovXG5cbnZhciBjYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbnZhciBiYXNlT3B0aW9ucyA9IHtcbiAgZXhwZWN0SFRNTDogdHJ1ZSxcbiAgbW9kdWxlczogbW9kdWxlcyQxLFxuICBzdGF0aWNLZXlzOiBnZW5TdGF0aWNLZXlzKG1vZHVsZXMkMSksXG4gIGRpcmVjdGl2ZXM6IGRpcmVjdGl2ZXMkMSxcbiAgaXNSZXNlcnZlZFRhZzogaXNSZXNlcnZlZFRhZyxcbiAgaXNVbmFyeVRhZzogaXNVbmFyeVRhZyxcbiAgbXVzdFVzZVByb3A6IG11c3RVc2VQcm9wLFxuICBnZXRUYWdOYW1lc3BhY2U6IGdldFRhZ05hbWVzcGFjZSxcbiAgaXNQcmVUYWc6IGlzUHJlVGFnXG59O1xuXG5mdW5jdGlvbiBjb21waWxlJCQxIChcbiAgdGVtcGxhdGUsXG4gIG9wdGlvbnNcbikge1xuICBvcHRpb25zID0gb3B0aW9uc1xuICAgID8gZXh0ZW5kKGV4dGVuZCh7fSwgYmFzZU9wdGlvbnMpLCBvcHRpb25zKVxuICAgIDogYmFzZU9wdGlvbnM7XG4gIHJldHVybiBjb21waWxlJDEodGVtcGxhdGUsIG9wdGlvbnMpXG59XG5cbmZ1bmN0aW9uIGNvbXBpbGVUb0Z1bmN0aW9ucyAoXG4gIHRlbXBsYXRlLFxuICBvcHRpb25zLFxuICB2bVxuKSB7XG4gIHZhciBfd2FybiA9IChvcHRpb25zICYmIG9wdGlvbnMud2FybikgfHwgd2FybjtcbiAgLy8gZGV0ZWN0IHBvc3NpYmxlIENTUCByZXN0cmljdGlvblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB0cnkge1xuICAgICAgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gMScpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmIChlLnRvU3RyaW5nKCkubWF0Y2goL3Vuc2FmZS1ldmFsfENTUC8pKSB7XG4gICAgICAgIF93YXJuKFxuICAgICAgICAgICdJdCBzZWVtcyB5b3UgYXJlIHVzaW5nIHRoZSBzdGFuZGFsb25lIGJ1aWxkIG9mIFZ1ZS5qcyBpbiBhbiAnICtcbiAgICAgICAgICAnZW52aXJvbm1lbnQgd2l0aCBDb250ZW50IFNlY3VyaXR5IFBvbGljeSB0aGF0IHByb2hpYml0cyB1bnNhZmUtZXZhbC4gJyArXG4gICAgICAgICAgJ1RoZSB0ZW1wbGF0ZSBjb21waWxlciBjYW5ub3Qgd29yayBpbiB0aGlzIGVudmlyb25tZW50LiBDb25zaWRlciAnICtcbiAgICAgICAgICAncmVsYXhpbmcgdGhlIHBvbGljeSB0byBhbGxvdyB1bnNhZmUtZXZhbCBvciBwcmUtY29tcGlsaW5nIHlvdXIgJyArXG4gICAgICAgICAgJ3RlbXBsYXRlcyBpbnRvIHJlbmRlciBmdW5jdGlvbnMuJ1xuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICB2YXIga2V5ID0gb3B0aW9ucyAmJiBvcHRpb25zLmRlbGltaXRlcnNcbiAgICA/IFN0cmluZyhvcHRpb25zLmRlbGltaXRlcnMpICsgdGVtcGxhdGVcbiAgICA6IHRlbXBsYXRlO1xuICBpZiAoY2FjaGVba2V5XSkge1xuICAgIHJldHVybiBjYWNoZVtrZXldXG4gIH1cbiAgdmFyIHJlcyA9IHt9O1xuICB2YXIgY29tcGlsZWQgPSBjb21waWxlJCQxKHRlbXBsYXRlLCBvcHRpb25zKTtcbiAgcmVzLnJlbmRlciA9IG1ha2VGdW5jdGlvbihjb21waWxlZC5yZW5kZXIpO1xuICB2YXIgbCA9IGNvbXBpbGVkLnN0YXRpY1JlbmRlckZucy5sZW5ndGg7XG4gIHJlcy5zdGF0aWNSZW5kZXJGbnMgPSBuZXcgQXJyYXkobCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgcmVzLnN0YXRpY1JlbmRlckZuc1tpXSA9IG1ha2VGdW5jdGlvbihjb21waWxlZC5zdGF0aWNSZW5kZXJGbnNbaV0pO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKHJlcy5yZW5kZXIgPT09IG5vb3AgfHwgcmVzLnN0YXRpY1JlbmRlckZucy5zb21lKGZ1bmN0aW9uIChmbikgeyByZXR1cm4gZm4gPT09IG5vb3A7IH0pKSB7XG4gICAgICBfd2FybihcbiAgICAgICAgXCJmYWlsZWQgdG8gY29tcGlsZSB0ZW1wbGF0ZTpcXG5cXG5cIiArIHRlbXBsYXRlICsgXCJcXG5cXG5cIiArXG4gICAgICAgIGRldGVjdEVycm9ycyhjb21waWxlZC5hc3QpLmpvaW4oJ1xcbicpICtcbiAgICAgICAgJ1xcblxcbicsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gKGNhY2hlW2tleV0gPSByZXMpXG59XG5cbmZ1bmN0aW9uIG1ha2VGdW5jdGlvbiAoY29kZSkge1xuICB0cnkge1xuICAgIHJldHVybiBuZXcgRnVuY3Rpb24oY29kZSlcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBub29wXG4gIH1cbn1cblxuLyogICovXG5cbnZhciBpZFRvVGVtcGxhdGUgPSBjYWNoZWQoZnVuY3Rpb24gKGlkKSB7XG4gIHZhciBlbCA9IHF1ZXJ5KGlkKTtcbiAgcmV0dXJuIGVsICYmIGVsLmlubmVySFRNTFxufSk7XG5cbnZhciBtb3VudCA9IFZ1ZSQzLnByb3RvdHlwZS4kbW91bnQ7XG5WdWUkMy5wcm90b3R5cGUuJG1vdW50ID0gZnVuY3Rpb24gKFxuICBlbCxcbiAgaHlkcmF0aW5nXG4pIHtcbiAgZWwgPSBlbCAmJiBxdWVyeShlbCk7XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChlbCA9PT0gZG9jdW1lbnQuYm9keSB8fCBlbCA9PT0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgXCJEbyBub3QgbW91bnQgVnVlIHRvIDxodG1sPiBvciA8Ym9keT4gLSBtb3VudCB0byBub3JtYWwgZWxlbWVudHMgaW5zdGVhZC5cIlxuICAgICk7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHZhciBvcHRpb25zID0gdGhpcy4kb3B0aW9ucztcbiAgLy8gcmVzb2x2ZSB0ZW1wbGF0ZS9lbCBhbmQgY29udmVydCB0byByZW5kZXIgZnVuY3Rpb25cbiAgaWYgKCFvcHRpb25zLnJlbmRlcikge1xuICAgIHZhciB0ZW1wbGF0ZSA9IG9wdGlvbnMudGVtcGxhdGU7XG4gICAgaWYgKHRlbXBsYXRlKSB7XG4gICAgICBpZiAodHlwZW9mIHRlbXBsYXRlID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAodGVtcGxhdGUuY2hhckF0KDApID09PSAnIycpIHtcbiAgICAgICAgICB0ZW1wbGF0ZSA9IGlkVG9UZW1wbGF0ZSh0ZW1wbGF0ZSk7XG4gICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIXRlbXBsYXRlKSB7XG4gICAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgICAoXCJUZW1wbGF0ZSBlbGVtZW50IG5vdCBmb3VuZCBvciBpcyBlbXB0eTogXCIgKyAob3B0aW9ucy50ZW1wbGF0ZSkpLFxuICAgICAgICAgICAgICB0aGlzXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0ZW1wbGF0ZS5ub2RlVHlwZSkge1xuICAgICAgICB0ZW1wbGF0ZSA9IHRlbXBsYXRlLmlubmVySFRNTDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgd2FybignaW52YWxpZCB0ZW1wbGF0ZSBvcHRpb246JyArIHRlbXBsYXRlLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpc1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZWwpIHtcbiAgICAgIHRlbXBsYXRlID0gZ2V0T3V0ZXJIVE1MKGVsKTtcbiAgICB9XG4gICAgaWYgKHRlbXBsYXRlKSB7XG4gICAgICB2YXIgcmVmID0gY29tcGlsZVRvRnVuY3Rpb25zKHRlbXBsYXRlLCB7XG4gICAgICAgIHdhcm46IHdhcm4sXG4gICAgICAgIHNob3VsZERlY29kZU5ld2xpbmVzOiBzaG91bGREZWNvZGVOZXdsaW5lcyxcbiAgICAgICAgZGVsaW1pdGVyczogb3B0aW9ucy5kZWxpbWl0ZXJzXG4gICAgICB9LCB0aGlzKTtcbiAgICAgIHZhciByZW5kZXIgPSByZWYucmVuZGVyO1xuICAgICAgdmFyIHN0YXRpY1JlbmRlckZucyA9IHJlZi5zdGF0aWNSZW5kZXJGbnM7XG4gICAgICBvcHRpb25zLnJlbmRlciA9IHJlbmRlcjtcbiAgICAgIG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zID0gc3RhdGljUmVuZGVyRm5zO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbW91bnQuY2FsbCh0aGlzLCBlbCwgaHlkcmF0aW5nKVxufTtcblxuLyoqXG4gKiBHZXQgb3V0ZXJIVE1MIG9mIGVsZW1lbnRzLCB0YWtpbmcgY2FyZVxuICogb2YgU1ZHIGVsZW1lbnRzIGluIElFIGFzIHdlbGwuXG4gKi9cbmZ1bmN0aW9uIGdldE91dGVySFRNTCAoZWwpIHtcbiAgaWYgKGVsLm91dGVySFRNTCkge1xuICAgIHJldHVybiBlbC5vdXRlckhUTUxcbiAgfSBlbHNlIHtcbiAgICB2YXIgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGVsLmNsb25lTm9kZSh0cnVlKSk7XG4gICAgcmV0dXJuIGNvbnRhaW5lci5pbm5lckhUTUxcbiAgfVxufVxuXG5WdWUkMy5jb21waWxlID0gY29tcGlsZVRvRnVuY3Rpb25zO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFZ1ZSQzO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3Z1ZS9kaXN0L3Z1ZS5jb21tb24uanNcbi8vIG1vZHVsZSBpZCA9IDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9wcm9jZXNzL2Jyb3dzZXIuanNcbi8vIG1vZHVsZSBpZCA9IDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==