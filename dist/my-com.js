!function(t){function n(i){if(e[i])return e[i].exports;var o=e[i]={exports:{},id:i,loaded:!1};return t[i].call(o.exports,o,o.exports,n),o.loaded=!0,o.exports}var e={};return n.m=t,n.c=e,n.p="",n(0)}([function(t,n,e){"use strict";function i(t){return t&&t.__esModule?t:{default:t}}var o=e(1);i(o);"findPerson"==document.body.id&&!function(){var t=!0,n=document.querySelectorAll("#searchPerson input"),e=document.querySelector("#findPerson");n.forEach(function(n){0!=n.value.trim().length||"last-name"!=n.name&&"first-name"!=n.name||(t=!1)}),0==t?e.setAttribute("disabled","disabled"):null,n.forEach(function(t){t.addEventListener("input",function(){var t=!0;n.forEach(function(n){0!=n.value.trim().length||"last-name"!=n.name&&"first-name"!=n.name?n.classList.remove("myError"):(t=!1,n.classList.add("myError"))}),t===!0?e.removeAttribute("disabled"):null})})}()},function(t,n,e){var i,o,a;(function(e){!function(e,r){o=[],i=r,a="function"==typeof i?i.apply(n,o):i,!(void 0!==a&&(t.exports=a))}(this,function(){var t="undefined"!=typeof e?e:this||window,n=document.documentElement,i=document.body,o=null!=new RegExp("MSIE ([0-9]{1,}[.0-9]{0,})").exec(navigator.userAgent)&&parseFloat(RegExp.$1),a="data-toggle",r="data-dismiss",l="data-spy",c="data-ride",u="Affix",s="Alert",f="Button",d="Carousel",h="Collapse",p="Dropdown",m="Modal",v="Popover",g="ScrollSpy",x="Tab",b="Tooltip",y="data-backdrop",T="data-keyboard",w="data-target",I="data-interval",C="data-height",E="data-pause",L="data-original-title",A="data-original-text",M="data-dismissible",S="data-trigger",k="data-animation",D="data-container",H="data-placement",N="data-delay",B="data-offset-top",W="data-offset-bottom",P="backdrop",$="keyboard",q="delay",R="duration",z="content",O="target",j="interval",_="pause",F="animation",U="placement",X="container",Y="offsetTop",G="offsetBottom",J="offsetLeft",K="scrollTop",Q="scrollLeft",V="clientWidth",Z="clientHeight",tt="offsetWidth",nt="offsetHeight",et="innerWidth",it="innerHeight",ot="scrollHeight",at="height",rt="aria-expanded",lt="aria-hidden",ct="click",ut="hover",st="keydown",ft="resize",dt="scroll",ht="show",pt="shown",mt="hide",vt="hidden",gt="close",xt="closed",bt="slid",yt="slide",Tt="change",wt="getAttribute",It="setAttribute",Ct="hasAttribute",Et="getElementsByTagName",Lt="getBoundingClientRect",At="querySelectorAll",Mt="getElementsByClassName",St="indexOf",kt="parentNode",Dt="length",Ht="toLowerCase",Nt="Transition",Bt="Webkit",Wt="style",Pt="active",$t="in",qt="collapsing",Rt="disabled",zt="loading",Ot="left",jt="right",_t="top",Ft="bottom",Ut="onmouseleave"in document?["mouseenter","mouseleave"]:["mouseover","mouseout"],Xt=/\b(top|bottom|left|top)+/,Yt=Bt+Nt in n[Wt]||Nt[Ht]()in n[Wt],Gt=Bt+Nt in n[Wt]?Bt[Ht]()+Nt+"End":Nt[Ht]()+"end",Jt=function(t){t.focus?t.focus():t.setActive()},Kt=function(t,n){t.classList.add(n)},Qt=function(t,n){t.classList.remove(n)},Vt=function(t,n){return t.classList.contains(n)},Zt=function(t){for(var n=[],e=0,i=t[Dt];e<i;e++)n.push(t[e]);return n},tn=function(t,n){var e=8===o?At:Mt;return Zt(t[e](8===o?"."+n.replace(/\s(?=[a-z])/g,"."):n))},nn=function(t,n){var e=n?n:document;return"object"==typeof t?t:e.querySelector(t)},en=function(t,n){for(var e=n.charAt(0);t&&t!==document;t=t[kt]){if(("."===e||"#"!==e)&&null!==nn(n,t[kt]))return t;if("#"===e&&t.id===n.substr(1))return t}return!1},on=function(t,n,e){t.addEventListener(n,e,!1)},an=function(t,n,e){t.removeEventListener(n,e,!1)},rn=function(t,n,e){on(t,n,function i(){e(),an(t,n,i)})},ln=function(t,n){Yt?rn(t,Gt,n):n()},cn=function(t,n,e){var i=new CustomEvent(t+".bs."+n);i.relatedTarget=e,this.dispatchEvent(i)},un=document[Et]("*"),sn=function(t,n,e,i){for(var o=i&&i[Dt]?i:un,a=0;a<o[Dt];a++){var r=o[a][wt](e),l=t.replace(/spy/i,"")[Ht]();(r&&t===f&&r[St](l)>-1||r===l)&&new n(o[a])}},fn=function(n){var e=n&&(n.currentStyle||t.getComputedStyle(n)),i=/px/.test(e.borderTopWidth)?Math.round(e.borderTopWidth.replace("px","")):0,o=/px/.test(e.borderBottomWidth)?Math.round(e.borderBottomWidth.replace("px","")):0,a=/px/.test(e.marginTop)?Math.round(e.marginTop.replace("px","")):0,r=/px/.test(e.marginBottom)?Math.round(e.marginBottom.replace("px","")):0;return n[Z]+parseInt(i)+parseInt(o)+parseInt(a)+parseInt(r)},dn=function(t){for(var n=0,e=0,i=t.children[Dt];e<i;e++)n+=fn(t.children[e]);return n},hn=function(e){var i=e[Lt]();return i[_t]>=0&&i[Ot]>=0&&i[Ft]<=(t[it]||n[Z])&&i[jt]<=(t[et]||n[V])},pn=function(){return{y:t.pageYOffset||n[K],x:t.pageXOffset||n[Q]}},mn=function(t,n,e,o){var a=t[Lt](),r=o===i?pn():{x:o[J]+o[Q],y:o[Y]+o[K]},l={w:a[jt]-a[Ot],h:a[Ft]-a[_t]},c={w:n[tt],h:n[nt]};e===_t?(n[Wt][_t]=a[_t]+r.y-c.h+"px",n[Wt][Ot]=a[Ot]+r.x-c.w/2+l.w/2+"px"):e===Ft?(n[Wt][_t]=a[_t]+r.y+l.h+"px",n[Wt][Ot]=a[Ot]+r.x-c.w/2+l.w/2+"px"):e===Ot?(n[Wt][_t]=a[_t]+r.y-c.h/2+l.h/2+"px",n[Wt][Ot]=a[Ot]+r.x-c.w+"px"):e===jt&&(n[Wt][_t]=a[_t]+r.y-c.h/2+l.h/2+"px",n[Wt][Ot]=a[Ot]+r.x+l.w+"px"),n.className[St](e)===-1&&(n.className=n.className.replace(Xt,e))},vn=function(t){return t===_t?Ft:t===Ft?_t:t===Ot?jt:t===jt?Ot:t},gn=function(e,a){e=nn(e),a=a||{};var r=e[wt](w),l=e[wt](B),c=e[wt](W),s="affix",f="affixed",d="function",h="update",p="affix-top",m="affixed-top",v="affix-bottom",g="affixed-bottom";if(this[O]=a[O]?nn(a[O]):nn(r)||null,this[Y]=a[Y]?a[Y]:parseInt(l)||0,this[G]=a[G]?a[G]:parseInt(c)||0,this[O]||this[Y]||this[G]){var x,b,y,T,I,C,E=this,L=o&&o<10?500:50,A=!1,M=!1,S=function(){return Math.max(i[ot],i[nt],n[Z],n[ot],n[nt])},k=function(){return null!==E[O]?E[O][Lt]()[_t]+T:E[Y]?parseInt(typeof E[Y]===d?E[Y]():E[Y]||0):void 0},D=function(){if(E[G])return y-e[nt]-parseInt(typeof E[G]===d?E[G]():E[G]||0)},H=function(){y=S(),T=parseInt(pn().y,0),x=k(),b=D(),I=parseInt(x)-T<0&&T>parseInt(x),C=parseInt(b)-T<0&&T>parseInt(b)},N=function(){A||Vt(e,s)||(cn.call(e,s,s),cn.call(e,p,s),Kt(e,s),A=!0,cn.call(e,f,s),cn.call(e,m,s))},P=function(){A&&Vt(e,s)&&(Qt(e,s),A=!1)},$=function(){M||Vt(e,v)||(cn.call(e,s,s),cn.call(e,v,s),Kt(e,v),M=!0,cn.call(e,f,s),cn.call(e,g,s))},q=function(){M&&Vt(e,v)&&(Qt(e,v),M=!1)},R=function(){C?(I&&P(),$()):(q(),I?N():P())};this[h]=function(){H(),R()},u in e||(on(t,dt,this[h]),on(t,ft,function(){setTimeout(function(){E[h]()},L)})),e[u]=this,this[h]()}};sn(u,gn,l);var xn=function(t){t=nn(t);var n=this,e="alert",i=en(t,"."+e),o=function(o){var a=o[O];a=a[Ct](r)?a:a[kt],a&&a[Ct](r)&&(i=en(a,"."+e),t=nn("["+r+'="'+e+'"]',i),(t===a||t===a[kt])&&i&&n.close())},a=function(){cn.call(i,xt,e),an(t,ct,o),i[kt].removeChild(i)};this.close=function(){i&&t&&Vt(i,$t)&&(cn.call(i,gt,e),Qt(i,$t),setTimeout(function(){i&&ln(i,a)},R))},s in t||on(t,ct,o),t[s]=this};sn(s,xn,r);var bn=function(t,n){t=nn(t),n=n||null;var e=!1,i="button",o="checked",a="reset",r="LABEL",l="INPUT",c=function(){n&&n!==a&&(n===zt&&(Kt(t,Rt),t[It](Rt,Rt)),t[It](A,t.innerHTML.replace(/^\s+|\s+$/g,"")),t.innerHTML=t[wt]("data-"+n+"-text"))},u=function(){t[wt](A)&&((Vt(t,Rt)||t[wt](Rt)===Rt)&&(Qt(t,Rt),t.removeAttribute(Rt)),t.innerHTML=t[wt](A))},s=function(n){var a=n[O][kt],c=n[O].tagName===r?n[O]:a.tagName===r?a:null;if(c){var u=this,s=tn(u,"btn"),f=c[Et](l)[0];if(f){if("checkbox"===f.type&&(f[o]?(Qt(c,Pt),f[wt](o),f.removeAttribute(o),f[o]=!1):(Kt(c,Pt),f[wt](o),f[It](o,o),f[o]=!0),e||(e=!0,cn.call(f,Tt,i),cn.call(t,Tt,i))),"radio"===f.type&&!e&&!f[o]){Kt(c,Pt),f[It](o,o),f[o]=!0,cn.call(f,Tt,i),cn.call(t,Tt,i),e=!0;for(var d=0,h=s[Dt];d<h;d++){var p=s[d],m=p[Et](l)[0];p!==c&&Vt(p,Pt)&&(Qt(p,Pt),m.removeAttribute(o),m[o]=!1,cn.call(m,Tt,i))}}setTimeout(function(){e=!1},50)}}};Vt(t,"btn")&&null!==n&&(n!==a?c():u()),Vt(t,"btn-group")&&(f in t||on(t,ct,s),t[f]=this)};sn(f,bn,a);var yn=function(n,e){n=nn(n),e=e||{};var i="false"!==n[wt](I)&&(parseInt(n[wt](I))||5e3),o=n[wt](E)===ut||!1,a="true"===n[wt](T)||!1,r="carousel",l="paused",c="direction",u="data-slide-to";this[$]=e[$]===!0||a,this[_]=!(e[_]!==ut&&!o)&&ut,e[j]||i?this[j]=parseInt(e[j])||i:this[j]=!1;var s=this,f=n.index=0,h=n.timer=0,p=!1,m=tn(n,"item"),v=m[Dt],g=this[c]=Ot,x=tn(n,r+"-control"),b=x[0],y=x[1],w=nn("."+r+"-indicators",n),C=w[Et]("LI"),L=function(){s[j]===!1||Vt(n,l)||(Kt(n,l),!p&&clearInterval(h))},A=function(){s[j]!==!1&&Vt(n,l)&&(Qt(n,l),!p&&clearInterval(h),!p&&s.cycle())},M=function(t){if(t.preventDefault(),!p){var n=t[O],e=s.getActiveIndex();if(!n||Vt(n,Pt)||!n[wt](u))return!1;f=parseInt(n[wt](u),10),e<f||0===e&&f===v-1?g=s[c]=Ot:(e>f||e===v-1&&0===f)&&(g=s[c]=jt),s.slideTo(f)}},S=function(t){if(t.preventDefault(),!p){var n=t.currentTarget||t.srcElement;n===y?(f++,g=s[c]=Ot,f===v-1?f=v-1:f===v&&(f=0)):n===b&&(f--,g=s[c]=jt,0===f?f=0:f<0&&(f=v-1)),s.slideTo(f)}},k=function(t){if(!p){switch(t.which){case 39:f++,g=s[c]=Ot,f==v-1?f=v-1:f==v&&(f=0);break;case 37:f--,g=s[c]=jt,0==f?f=0:f<0&&(f=v-1);break;default:return}s.slideTo(f)}},D=function(t){for(var n=0,e=C[Dt];n<e;n++)Qt(C[n],Pt);C[t]&&Kt(C[t],Pt)};this.cycle=function(){g=this[c]=Ot,h=setInterval(function(){f++,f=f===v?0:f,s.slideTo(f)},this[j])},this.slideTo=function(t){var e=this.getActiveIndex(),i=g===Ot?"next":"prev";cn.call(n,yt,r,m[t]),p=this.isSliding=!0,clearInterval(h),D(t),Yt&&Vt(n,"slide")?(Kt(m[t],i),m[t][tt],Kt(m[t],g),Kt(m[e],g),rn(m[t],Gt,function(){p=s.isSliding=!1,Kt(m[t],Pt),Qt(m[e],Pt),Qt(m[t],i),Qt(m[t],g),Qt(m[e],g),s[j]&&!Vt(n,l)&&s.cycle(),cn.call(n,bt,r,m[t])})):(Kt(m[t],Pt),m[t][tt],Qt(m[e],Pt),setTimeout(function(){p=!1,s[j]&&!Vt(n,l)&&s.cycle(),cn.call(n,bt,r,m[t])},100))},this.getActiveIndex=function(){return m[St](tn(n,"item active")[0])||0},d in n||(this[_]&&this[j]&&(on(n,Ut[0],L),on(n,Ut[1],A),on(n,"touchstart",L),on(n,"touchend",A)),y&&on(y,ct,S),b&&on(b,ct,S),w&&on(w,ct,M,!1),this[$]===!0&&on(t,st,k,!1)),this.getActiveIndex()<0&&(m[Dt]&&Kt(m[0],Pt),C[Dt]&&D(0)),this[j]&&this.cycle(),n[d]=this};sn(d,yn,c);var Tn=function(t,n){t=nn(t),n=n||{};var e=null,i=null,o=this,a=!1,r=t[wt]("data-parent"),l="collapse",c="collapsed",u=function(t){cn.call(t,ht,l),a=!0,Kt(t,qt),Kt(t,$t),setTimeout(function(){t[Wt][at]=dn(t)+"px"},0),ln(t,function(){Qt(t,qt),t[Wt][at]="",a=!1,t[It](rt,"true"),cn.call(t,pt,l)})},s=function(t){cn.call(t,mt,l),a=!0,t[Wt][at]=dn(t)+"px",setTimeout(function(){Kt(t,qt),t[Wt][at]="0px"},0),ln(t,function(){Qt(t,qt),Qt(t,$t),t[Wt][at]="",a=!1,t[It](rt,"false"),cn.call(t,vt,l)})},f=function(){var n=t.href&&t[wt]("href"),e=t[wt](w),i=n||e&&/#/.test(e)&&e;return i&&nn(i)};this.toggle=function(t){t.preventDefault(),a||(Vt(i,$t)?o.hide():o.show())},this.hide=function(){s(i),Kt(t,c)},this.show=function(){if(u(i),Qt(t,c),null!==e)for(var n=tn(e,l+" "+$t),o=0,a=n[Dt];o<a;o++)n[o]!==i&&s(n[o])},h in t||on(t,ct,this.toggle),i=f(),e=nn(n.parent)||r&&en(t,r),t[h]=this};sn(h,Tn,a);var wn=function(t,n){t=nn(t),this.persist=n===!0||"true"===t[wt]("data-persist")||!1;var e=this,i=!1,o=t[kt],r="dropdown",l="open",c=null,u=nn(".dropdown-menu",o),s=Zt(u[Et]("*")),f=function(t){!i||27!=t.which&&27!=t.keyCode||(c=null,m())},d=function(n){var r,l=n[O];if(r=1!==l.nodeType&&(l[wt](a)||l[kt][wt](a)),l===t||l===o||l[kt]===t)n.preventDefault(),c=t,e.toggle();else if(i){if((l===u||s&&s[St](l)>-1)&&(e.persist||r))return;c=null,m()}(/\#$/.test(l.href)||l[kt]&&/\#$/.test(l[kt].href))&&n.preventDefault()},h=function(){cn.call(o,ht,r,c),Kt(o,l),u[It](rt,!0),cn.call(o,pt,r,c),on(document,st,f),i=!0},m=function(){cn.call(o,mt,r,c),Qt(o,l),u[It](rt,!1),cn.call(o,vt,r,c),an(document,st,f),i=!1};this.toggle=function(){Vt(o,l)&&i?m():h()},p in t||(u[It]("tabindex","0"),on(document,ct,d)),t[p]=this};sn(p,wn,a);var In=function(e,o){e=nn(e);var a=e[wt](w)||e[wt]("href"),l=nn(a),c=Vt(e,"modal")?e:l,u="modal",s="static",f="paddingLeft",d="paddingRight",h="modal-backdrop";if(Vt(e,"modal")&&(e=null),c){o=o||{},this[$]=o[$]!==!1&&"false"!==c[wt](T),this[P]=o[P]!==s&&c[wt](y)!==s||s,this[P]=o[P]!==!1&&"false"!==c[wt](y)&&this[P],this[z]=o[z];var p,v,g,x,b=this,I=this.open=!1,C=null,E=function(){var e=n[Lt]();return t[et]||e[jt]-Math.abs(e[Ot])},L=function(){var n=i.currentStyle||t.getComputedStyle(i),e=parseInt(n[d],10);p&&(i[Wt][d]=e+g+"px")},A=function(){i[Wt][d]=""},M=function(){var t,n=document.createElement("div");return n.className=u+"-scrollbar-measure",i.appendChild(n),t=n[tt]-n[V],i.removeChild(n),t},S=function(){p=i[V]<E(),v=c[ot]>n[Z],g=M()},k=function(){c[Wt][f]=!p&&v?g+"px":"",c[Wt][d]=p&&!v?g+"px":""},D=function(){c[Wt][f]="",c[Wt][d]=""},H=function(){var t=document.createElement("div");x=nn("."+h),null===x&&(t[It]("class",h+" fade"),x=t,i.appendChild(x))},N=function(){x=nn("."+h),x&&null!==x&&"object"==typeof x&&(i.removeChild(x),x=null)},B=function(){Vt(c,$t)?an(document,st,j):on(document,st,j)},W=function(){Vt(c,$t)?an(t,ft,b.update):on(t,ft,b.update)},q=function(){Vt(c,$t)?an(c,ct,_):on(c,ct,_)},R=function(t){var n=t[O];n=n[Ct](w)||n[Ct]("href")?n:n[kt],I||n!==e||Vt(c,$t)||(c.modalTrigger=e,C=e,b.show(),t.preventDefault())},j=function(t){var n=t.which||t.keyCode;b[$]&&27==n&&I&&b.hide()},_=function(t){var n=t[O];I&&(n[kt][wt](r)===u||n[wt](r)===u||n===c&&b[P]!==s)&&(b.hide(),C=null,t.preventDefault())};this.toggle=function(){I&&Vt(c,$t)?this.hide():this.show()},this.show=function(){cn.call(c,ht,u,C);var t=tn(document,u+" in")[0];t&&t!==c&&t.modalTrigger[m].hide(),this[P]&&H(),x&&!Vt(x,$t)&&setTimeout(function(){Kt(x,$t)},0),setTimeout(function(){c[Wt].display="block",S(),L(),k(),W(),q(),B(),Kt(i,u+"-open"),Kt(c,$t),c[It](lt,!1)},0),ln(c,function(){I=b.open=!0,Jt(c),cn.call(c,pt,u,C)})},this.hide=function(){cn.call(c,mt,u),x=nn("."+h),null!==x&&Qt(x,$t),Qt(c,$t),c[It](lt,!0),ln(c,function(){Qt(i,u+"-open"),W(),q(),B(),D(),A(),c[Wt].display="",tn(document,u+" "+$t)[0]||N(),I=b.open=!1,e&&Jt(e),cn.call(c,vt,u)})},this.setContent=function(t){nn("."+u+"-content",c).innerHTML=t},this.update=function(){I&&(S(),L(),k())},!e||m in e||on(e,ct,R),this[z]&&this.setContent(this[z]),!!e&&(e[m]=this)}};sn(m,In,a);var Cn=function(n,e){n=nn(n);var a=n[wt](S),r=n[wt](k),l=n[wt](H),c=n[wt](M),u=n[wt](N),s=n[wt](D),f="popover",d="template",h="trigger",p="class",m="div",g="fade",x="data-title",b="data-content",y="dismissible",T='<button type="button" class="close">×</button>';e=e||{},this[d]=e[d]?e[d]:null,this[h]=e[h]?e[h]:a||ut,this[F]=e[F]&&e[F]!==g?e[F]:r||g,this[U]=e[U]?e[U]:l||_t,this[q]=parseInt(e[q]||u)||200,this[y]=!(!e[y]&&"true"!==c),this[X]=nn(e[X])||nn(s)||i;var w=this,I=n[wt](x)||null,C=n[wt](b)||null;if(C||this[d]){var E=null,L=0,A=this[U],B=function(t){null!==E&&t[O]===nn(".close",E)&&w.hide()},W=function(){w[X].removeChild(E),L=null,E=null},P=function(){if(I=n[wt](x),C=n[wt](b),E=document.createElement(m),null!==C&&null===w[d]){if(E[It]("role","tooltip"),null!==I){var t=document.createElement("h3");t[It](p,f+"-title"),t.innerHTML=w[y]?I+T:I,E.appendChild(t)}var e=document.createElement(m),i=document.createElement(m);e[It](p,"arrow"),i[It](p,f+"-content"),E.appendChild(e),E.appendChild(i),i.innerHTML=w[y]&&null===I?C+T:C}else{var o=document.createElement(m);o.innerHTML=w[d],E.innerHTML=o.firstChild.innerHTML}w[X].appendChild(E),E[Wt].display="block",E[It](p,f+" "+A+" "+w[F])},$=function(){!Vt(E,$t)&&Kt(E,$t)},R=function(){mn(n,E,A,w[X]),hn(E)||(A=vn(A),mn(n,E,A,w[X]))};this.toggle=function(){null===E?w.show():w.hide()},this.show=function(){clearTimeout(L),L=setTimeout(function(){null===E&&(A=w[U],P(),R(),$(),cn.call(n,ht,f),ln(E,function(){cn.call(n,pt,f)}))},20)},this.hide=function(){clearTimeout(L),L=setTimeout(function(){E&&null!==E&&Vt(E,$t)&&(cn.call(n,mt,f),Qt(E,$t),ln(E,function(){W(),cn.call(n,vt,f)}))},w[q])},v in n||(w[h]===ut?(on(n,Ut[0],w.show),w[y]||on(n,Ut[1],w.hide)):/^(click|focus)$/.test(w[h])&&(on(n,w[h],w.toggle),w[y]||on(n,"blur",w.hide)),w[y]&&on(document,ct,B),o&&o<9||on(t,ft,w.hide)),n[v]=w}};sn(v,Cn,a);var En=function(n,e){n=nn(n);var i=nn(n[wt](w));if(e=e||{},e[O]||i){for(var a,r=e[O]&&nn(e[O])||i,l=r&&r[Et]("A"),c=[],u=[],s=n[nt]<n[ot]?n:t,f=s===t,d=0,h=l[Dt];d<h;d++){var p=l[d][wt]("href"),m=p&&/#[a-z0-9]+$/i.test(p)&&nn(p);m&&(c.push(l[d]),u.push(m))}var v=function(t){var e=c[t][kt],i=u[t],o=en(e,".dropdown"),r=f&&i[Lt](),l=Vt(e,Pt)||!1,s=f?r[_t]+a:i[Y]-(u[t-1]?0:10),d=f?r[Ft]+a:u[t+1]?u[t+1][Y]:n[ot],h=a>=s&&d>a;if(!l&&h)"LI"!==e.tagName||Vt(e,Pt)||(Kt(e,Pt),l=!0,o&&!Vt(o,Pt)&&Kt(o,Pt),cn.call(n,"activate","scrollspy",c[t]));else if(h){if(!h&&!l||l&&h)return}else"LI"===e.tagName&&Vt(e,Pt)&&(Qt(e,Pt),l=!1,o&&Vt(o,Pt)&&!tn(e[kt],Pt).length&&Qt(o,Pt))},x=function(){a=f?pn().y:n[K];for(var t=0,e=c[Dt];t<e;t++)v(t)};this.refresh=function(){x()},g in n||(on(s,dt,this.refresh),o&&o<9||on(t,ft,this.refresh)),this.refresh(),n[g]=this}};sn(g,En,l);var Ln=function(t,n){t=nn(t);var e=t[wt](C),i="tab",o="height",a="isAnimating";t[a]=!1,n=n||{},this[o]=!!Yt&&(n[o]||"true"===e);var r,l,c=this,u=en(t,".nav"),s=nn(".dropdown",u),f=function(){var t,n=tn(u,Pt);return 1!==n[Dt]||Vt(n[0],"dropdown")?n[Dt]>1&&(t=n[n[Dt]-1]):t=n[0],t[Et]("A")[0]},d=function(){return nn(f()[wt]("href"))},h=function(t){t.preventDefault(),r=t[O],c.show()};this.show=function(){var n=nn(r[wt]("href")),e=f(),c=d();e[a]&&r[a]||Vt(r[kt],Pt)||(e[a]=r[a]=!0,Qt(e[kt],Pt),Kt(r[kt],Pt),s&&(Vt(t[kt][kt],"dropdown-menu")?Vt(s,Pt)||Kt(s,Pt):Vt(s,Pt)&&Qt(s,Pt)),l&&(l[Wt][o]=dn(c)+"px"),cn.call(e,mt,i,r),setTimeout(function(){Qt(c,$t)},0),ln(c,function(){l&&Kt(l,qt),Qt(c,Pt),Kt(n,Pt),setTimeout(function(){Kt(n,$t),l&&(l[Wt][o]=dn(n)+"px")},0),cn.call(r,ht,i,e),cn.call(e,vt,i,r)}),ln(n,function(){cn.call(r,pt,i,e),l?setTimeout(function(){ln(l,function(){l[Wt][o]="",Qt(l,qt),e[a]=r[a]=!1})},0):e[a]=r[a]=!1}))},x in t||on(t,ct,h),this[o]&&(l=d()[kt]),t[x]=this};sn(x,Ln,a);var An=function(t,n){t=nn(t);var e=t[wt](k);placementData=t[wt](H),delayData=t[wt](N),containerData=t[wt](D),component="tooltip",classString="class",title="title",fade="fade",div="div",n=n||{},this[F]=n[F]&&n[F]!==fade?n[F]:e||fade,this[U]=n[U]?n[U]:placementData||_t,this[q]=parseInt(n[q]||delayData)||200,this[X]=nn(n[X])||nn(containerData)||i;var o=this,a=0,r=this[U],l=null,c=t[wt](title)||t[wt](L);if(c){var u=function(){o[X].removeChild(l),l=null,a=null},s=function(){c=t[wt](title)||t[wt](L),l=document.createElement(div),l[It]("role",component);var n=document.createElement(div),e=document.createElement(div);n[It](classString,component+"-arrow"),e[It](classString,component+"-inner"),l.appendChild(n),l.appendChild(e),e.innerHTML=c,o[X].appendChild(l),l[It](classString,component+" "+r+" "+o[F])},f=function(){mn(t,l,r,o[X]),hn(l)||(r=vn(r),mn(t,l,r,o[X]))},d=function(){!Vt(l,$t)&&Kt(l,$t)};this.show=function(){clearTimeout(a),a=setTimeout(function(){null===l&&(r=o[U],s(),f(),d(),cn.call(t,ht,component),ln(l,function(){cn.call(t,pt,component)}))},20)},this.hide=function(){clearTimeout(a),a=setTimeout(function(){l&&null!==l&&Vt(l,$t)&&(cn.call(t,mt,component),Qt(l,$t),ln(l,function(){u(),cn.call(t,vt,component)}))},o[q])},this.toggle=function(){l?o.hide():o.show()},b in t||(t[It](L,c),t.removeAttribute(title),on(t,Ut[0],this.show),on(t,Ut[1],this.hide)),t[b]=this}};return sn(b,An,a),{Affix:gn,Alert:xn,Button:bn,Carousel:yn,Collapse:Tn,Dropdown:wn,Modal:In,Popover:Cn,ScrollSpy:En,Tab:Ln,Tooltip:An}})}).call(n,function(){return this}())}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vbXktY29tLmpzIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCBkOTU4NWMyMzI2MjYwOTMxYWQzOSIsIndlYnBhY2s6Ly8vLi9qcy9sYXlvdXQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9ib290c3RyYXAubmF0aXZlL2Rpc3QvYm9vdHN0cmFwLW5hdGl2ZS5qcyJdLCJuYW1lcyI6WyJtb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiaW5zdGFsbGVkTW9kdWxlcyIsImV4cG9ydHMiLCJtb2R1bGUiLCJpZCIsImxvYWRlZCIsImNhbGwiLCJtIiwiYyIsInAiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0Iiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfYm9vdHN0cmFwIiwiZG9jdW1lbnQiLCJib2R5IiwiYmxuUmVtb3ZlU3VtYml0IiwiZWxtSW5wdXRzIiwicXVlcnlTZWxlY3RvckFsbCIsImJ0blN1bWJpdCIsInF1ZXJ5U2VsZWN0b3IiLCJmb3JFYWNoIiwiY3VyIiwidmFsdWUiLCJ0cmltIiwibGVuZ3RoIiwibmFtZSIsInNldEF0dHJpYnV0ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJibG5TdW1iaXQiLCJjdXJQbGFjZWQiLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJhZGQiLCJyZW1vdmVBdHRyaWJ1dGUiLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18iLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fIiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18iLCJnbG9iYWwiLCJyb290IiwiZmFjdG9yeSIsImFwcGx5IiwidW5kZWZpbmVkIiwidGhpcyIsImdsb2JhbE9iamVjdCIsIndpbmRvdyIsImRvYyIsImRvY3VtZW50RWxlbWVudCIsImlzSUUiLCJSZWdFeHAiLCJleGVjIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwicGFyc2VGbG9hdCIsIiQxIiwiZGF0YVRvZ2dsZSIsImRhdGFEaXNtaXNzIiwiZGF0YVNweSIsImRhdGFSaWRlIiwic3RyaW5nQWZmaXgiLCJzdHJpbmdBbGVydCIsInN0cmluZ0J1dHRvbiIsInN0cmluZ0Nhcm91c2VsIiwic3RyaW5nQ29sbGFwc2UiLCJzdHJpbmdEcm9wZG93biIsInN0cmluZ01vZGFsIiwic3RyaW5nUG9wb3ZlciIsInN0cmluZ1Njcm9sbFNweSIsInN0cmluZ1RhYiIsInN0cmluZ1Rvb2x0aXAiLCJkYXRhYmFja2Ryb3AiLCJkYXRhS2V5Ym9hcmQiLCJkYXRhVGFyZ2V0IiwiZGF0YUludGVydmFsIiwiZGF0YUhlaWdodCIsImRhdGFQYXVzZSIsImRhdGFPcmlnaW5hbFRpdGxlIiwiZGF0YU9yaWdpbmFsVGV4dCIsImRhdGFEaXNtaXNzaWJsZSIsImRhdGFUcmlnZ2VyIiwiZGF0YUFuaW1hdGlvbiIsImRhdGFDb250YWluZXIiLCJkYXRhUGxhY2VtZW50IiwiZGF0YURlbGF5IiwiZGF0YU9mZnNldFRvcCIsImRhdGFPZmZzZXRCb3R0b20iLCJiYWNrZHJvcCIsImtleWJvYXJkIiwiZGVsYXkiLCJkdXJhdGlvbiIsImNvbnRlbnQiLCJ0YXJnZXQiLCJpbnRlcnZhbCIsInBhdXNlIiwiYW5pbWF0aW9uIiwicGxhY2VtZW50IiwiY29udGFpbmVyIiwib2Zmc2V0VG9wIiwib2Zmc2V0Qm90dG9tIiwib2Zmc2V0TGVmdCIsInNjcm9sbFRvcCIsInNjcm9sbExlZnQiLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsIm9mZnNldFdpZHRoIiwib2Zmc2V0SGVpZ2h0IiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0Iiwic2Nyb2xsSGVpZ2h0IiwiaGVpZ2h0IiwiYXJpYUV4cGFuZGVkIiwiYXJpYUhpZGRlbiIsImNsaWNrRXZlbnQiLCJob3ZlckV2ZW50Iiwia2V5ZG93bkV2ZW50IiwicmVzaXplRXZlbnQiLCJzY3JvbGxFdmVudCIsInNob3dFdmVudCIsInNob3duRXZlbnQiLCJoaWRlRXZlbnQiLCJoaWRkZW5FdmVudCIsImNsb3NlRXZlbnQiLCJjbG9zZWRFdmVudCIsInNsaWRFdmVudCIsInNsaWRlRXZlbnQiLCJjaGFuZ2VFdmVudCIsImdldEF0dHJpYnV0ZSIsImhhc0F0dHJpYnV0ZSIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiZ2V0RWxlbWVudHNCeUNMQVNTTkFNRSIsImluZGV4T2YiLCJwYXJlbnROb2RlIiwidG9Mb3dlckNhc2UiLCJUcmFuc2l0aW9uIiwiV2Via2l0Iiwic3R5bGUiLCJhY3RpdmUiLCJpbkNsYXNzIiwiY29sbGFwc2luZyIsImRpc2FibGVkIiwibG9hZGluZyIsImxlZnQiLCJyaWdodCIsInRvcCIsImJvdHRvbSIsIm1vdXNlSG92ZXIiLCJ0aXBQb3NpdGlvbnMiLCJzdXBwb3J0VHJhbnNpdGlvbnMiLCJ0cmFuc2l0aW9uRW5kRXZlbnQiLCJzZXRGb2N1cyIsImVsZW1lbnQiLCJmb2N1cyIsInNldEFjdGl2ZSIsImFkZENsYXNzIiwiY2xhc3NOQU1FIiwicmVtb3ZlQ2xhc3MiLCJoYXNDbGFzcyIsImNvbnRhaW5zIiwibm9kZUxpc3RUb0FycmF5Iiwibm9kZUxpc3QiLCJjaGlsZEl0ZW1zIiwiaSIsIm5sbCIsInB1c2giLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwic2VsZWN0aW9uTWV0aG9kIiwicmVwbGFjZSIsInF1ZXJ5RWxlbWVudCIsInNlbGVjdG9yIiwicGFyZW50IiwibG9va1VwIiwiZ2V0Q2xvc2VzdCIsImZpcnN0Q2hhciIsImNoYXJBdCIsInN1YnN0ciIsIm9uIiwiZXZlbnQiLCJoYW5kbGVyIiwib2ZmIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIm9uZSIsImhhbmRsZXJXcmFwcGVyIiwiZW11bGF0ZVRyYW5zaXRpb25FbmQiLCJib290c3RyYXBDdXN0b21FdmVudCIsImV2ZW50TmFtZSIsImNvbXBvbmVudE5hbWUiLCJyZWxhdGVkIiwiT3JpZ2luYWxDdXN0b21FdmVudCIsIkN1c3RvbUV2ZW50IiwicmVsYXRlZFRhcmdldCIsImRpc3BhdGNoRXZlbnQiLCJBbGxET01FbGVtZW50cyIsImluaXRpYWxpemVEYXRhQVBJIiwiY29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJkYXRhQXR0cmlidXRlIiwiY29sbGVjdGlvbiIsImF0dHJWYWx1ZSIsImV4cGVjdGVkQXR0clZhbHVlIiwiZ2V0T3V0ZXJIZWlnaHQiLCJjaGlsZCIsImNoaWxkU3R5bGUiLCJjdXJyZW50U3R5bGUiLCJnZXRDb21wdXRlZFN0eWxlIiwiYnRwIiwidGVzdCIsImJvcmRlclRvcFdpZHRoIiwiTWF0aCIsInJvdW5kIiwiYnRiIiwiYm9yZGVyQm90dG9tV2lkdGgiLCJtdHAiLCJtYXJnaW5Ub3AiLCJtYnAiLCJtYXJnaW5Cb3R0b20iLCJwYXJzZUludCIsImdldE1heEhlaWdodCIsInBhcmVudEhlaWdodCIsImsiLCJsbCIsImNoaWxkcmVuIiwiaXNFbGVtZW50SW5WaWV3cG9ydCIsInJlY3QiLCJnZXRTY3JvbGwiLCJ5IiwicGFnZVlPZmZzZXQiLCJ4IiwicGFnZVhPZmZzZXQiLCJzdHlsZVRpcCIsImxpbmsiLCJwb3NpdGlvbiIsInNjcm9sbCIsImxpbmtEaW1lbnNpb25zIiwidyIsImgiLCJlbGVtZW50RGltZW5zaW9ucyIsImNsYXNzTmFtZSIsInVwZGF0ZVBsYWNlbWVudCIsIkFmZml4Iiwib3B0aW9ucyIsInRhcmdldERhdGEiLCJvZmZzZXRUb3BEYXRhIiwib2Zmc2V0Qm90dG9tRGF0YSIsImFmZml4IiwiYWZmaXhlZCIsImZuIiwidXBkYXRlIiwiYWZmaXhUb3AiLCJhZmZpeGVkVG9wIiwiYWZmaXhCb3R0b20iLCJhZmZpeGVkQm90dG9tIiwicGluT2Zmc2V0VG9wIiwicGluT2Zmc2V0Qm90dG9tIiwibWF4U2Nyb2xsIiwic2Nyb2xsWSIsInBpbm5lZFRvcCIsInBpbm5lZEJvdHRvbSIsInNlbGYiLCJyZXNpemVEZWxheSIsImFmZml4ZWRUb1RvcCIsImFmZml4ZWRUb0JvdHRvbSIsImdldE1heFNjcm9sbCIsIm1heCIsImdldE9mZnNldFRvcCIsImdldE9mZnNldEJvdHRvbSIsImNoZWNrUG9zaXRpb24iLCJwaW5Ub3AiLCJ1blBpblRvcCIsInBpbkJvdHRvbSIsInVuUGluQm90dG9tIiwidXBkYXRlUGluIiwic2V0VGltZW91dCIsIkFsZXJ0IiwiYWxlcnQiLCJjbGlja0hhbmRsZXIiLCJlIiwiZXZlbnRUYXJnZXQiLCJjbG9zZSIsInRyYW5zaXRpb25FbmRIYW5kbGVyIiwicmVtb3ZlQ2hpbGQiLCJCdXR0b24iLCJvcHRpb24iLCJ0b2dnbGVkIiwiY2hlY2tlZCIsInJlc2V0IiwiTEFCRUwiLCJJTlBVVCIsInNldFN0YXRlIiwiaW5uZXJIVE1MIiwicmVzZXRTdGF0ZSIsInRvZ2dsZSIsImxhYmVsIiwidGFnTmFtZSIsImxhYmVscyIsImlucHV0IiwidHlwZSIsIm90aGVyTGFiZWwiLCJvdGhlcklucHV0IiwiQ2Fyb3VzZWwiLCJpbnRlcnZhbERhdGEiLCJwYXVzZURhdGEiLCJrZXlib2FyZERhdGEiLCJwYXVzZWQiLCJkaXJlY3Rpb24iLCJkYXRhU2xpZGVUbyIsImluZGV4IiwidGltZXIiLCJpc1NsaWRpbmciLCJzbGlkZXMiLCJ0b3RhbCIsInNsaWRlRGlyZWN0aW9uIiwiY29udHJvbHMiLCJsZWZ0QXJyb3ciLCJyaWdodEFycm93IiwiaW5kaWNhdG9yIiwiaW5kaWNhdG9ycyIsInBhdXNlSGFuZGxlciIsImNsZWFySW50ZXJ2YWwiLCJyZXN1bWVIYW5kbGVyIiwiY3ljbGUiLCJpbmRpY2F0b3JIYW5kbGVyIiwicHJldmVudERlZmF1bHQiLCJhY3RpdmVJbmRpY2F0b3IiLCJnZXRBY3RpdmVJbmRleCIsInNsaWRlVG8iLCJjb250cm9sc0hhbmRsZXIiLCJjdXJyZW50VGFyZ2V0Iiwic3JjRWxlbWVudCIsImtleUhhbmRsZXIiLCJ3aGljaCIsInNldEFjdGl2ZVBhZ2UiLCJwYWdlSW5kZXgiLCJpY2wiLCJzZXRJbnRlcnZhbCIsIm5leHQiLCJhY3RpdmVJdGVtIiwib3JpZW50YXRpb24iLCJDb2xsYXBzZSIsImFjY29yZGlvbiIsImNvbGxhcHNlIiwiaXNBbmltYXRpbmciLCJhY2NvcmRpb25EYXRhIiwiY29sbGFwc2VkIiwib3BlbkFjdGlvbiIsImNvbGxhcHNlRWxlbWVudCIsImNsb3NlQWN0aW9uIiwiZ2V0VGFyZ2V0IiwiaHJlZiIsImhpZGUiLCJzaG93IiwiYWN0aXZlQ29sbGFwc2VzIiwiYWwiLCJEcm9wZG93biIsInBlcnNpc3QiLCJpc09wZW4iLCJvcGVuIiwibWVudSIsImtleUNvZGUiLCJoYXNEYXRhIiwibm9kZVR5cGUiLCJNb2RhbCIsImJ0bkNoZWNrIiwiY2hlY2tNb2RhbCIsIm1vZGFsIiwic3RhdGljU3RyaW5nIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJtb2RhbEJhY2tkcm9wU3RyaW5nIiwiYm9keUlzT3ZlcmZsb3dpbmciLCJtb2RhbElzT3ZlcmZsb3dpbmciLCJzY3JvbGxiYXJXaWR0aCIsIm92ZXJsYXkiLCJnZXRXaW5kb3dXaWR0aCIsImh0bWxSZWN0IiwiYWJzIiwic2V0U2Nyb2xsYmFyIiwiYm9keVN0eWxlIiwiYm9keVBhZCIsInJlc2V0U2Nyb2xsYmFyIiwibWVhc3VyZVNjcm9sbGJhciIsInNjcm9sbEJhcldpZHRoIiwic2Nyb2xsRGl2IiwiY3JlYXRlRWxlbWVudCIsImFwcGVuZENoaWxkIiwiY2hlY2tTY3JvbGxiYXIiLCJhZGp1c3REaWFsb2ciLCJyZXNldEFkanVzdG1lbnRzIiwiY3JlYXRlT3ZlcmxheSIsIm5ld092ZXJsYXkiLCJyZW1vdmVPdmVybGF5Iiwia2V5ZG93bkhhbmRsZXJUb2dnbGUiLCJyZXNpemVIYW5kbGVyVG9nZ2xlIiwiZGlzbWlzc0hhbmRsZXJUb2dnbGUiLCJkaXNtaXNzSGFuZGxlciIsImNsaWNrVGFyZ2V0IiwibW9kYWxUcmlnZ2VyIiwia2V5IiwiY3VycmVudE9wZW4iLCJkaXNwbGF5Iiwic2V0Q29udGVudCIsIlBvcG92ZXIiLCJ0cmlnZ2VyRGF0YSIsImFuaW1hdGlvbkRhdGEiLCJwbGFjZW1lbnREYXRhIiwiZGlzbWlzc2libGVEYXRhIiwiZGVsYXlEYXRhIiwiY29udGFpbmVyRGF0YSIsInRlbXBsYXRlIiwidHJpZ2dlciIsImNsYXNzU3RyaW5nIiwiZGl2IiwiZmFkZSIsImRhdGFUaXRsZSIsImRhdGFDb250ZW50IiwiZGlzbWlzc2libGUiLCJjbG9zZUJ0biIsInRpdGxlU3RyaW5nIiwiY29udGVudFN0cmluZyIsInBvcG92ZXIiLCJwbGFjZW1lbnRTZXR0aW5nIiwiZGlzbWlzc2libGVIYW5kbGVyIiwicmVtb3ZlUG9wb3ZlciIsImNyZWF0ZVBvcG92ZXIiLCJwb3BvdmVyVGl0bGUiLCJwb3BvdmVyQXJyb3ciLCJwb3BvdmVyQ29udGVudCIsInBvcG92ZXJUZW1wbGF0ZSIsImZpcnN0Q2hpbGQiLCJzaG93UG9wb3ZlciIsInVwZGF0ZVBvcG92ZXIiLCJjbGVhclRpbWVvdXQiLCJTY3JvbGxTcHkiLCJzY3JvbGxPZmZzZXQiLCJzcHlUYXJnZXQiLCJsaW5rcyIsIml0ZW1zIiwidGFyZ2V0SXRlbXMiLCJzY3JvbGxUYXJnZXQiLCJpc1dpbmRvdyIsImlsIiwidGFyZ2V0SXRlbSIsInVwZGF0ZUl0ZW0iLCJkcm9wZG93biIsInRhcmdldFJlY3QiLCJpc0FjdGl2ZSIsInRvcEVkZ2UiLCJib3R0b21FZGdlIiwiaW5zaWRlIiwidXBkYXRlSXRlbXMiLCJpdGwiLCJyZWZyZXNoIiwiVGFiIiwiaGVpZ2h0RGF0YSIsInRhYnNDb250ZW50Q29udGFpbmVyIiwidGFicyIsImdldEFjdGl2ZVRhYiIsImFjdGl2ZVRhYiIsImFjdGl2ZVRhYnMiLCJnZXRBY3RpdmVDb250ZW50IiwibmV4dENvbnRlbnQiLCJhY3RpdmVDb250ZW50IiwiVG9vbHRpcCIsInRpdGxlIiwidG9vbHRpcCIsInJlbW92ZVRvb2xUaXAiLCJjcmVhdGVUb29sVGlwIiwidG9vbHRpcEFycm93IiwidG9vbHRpcElubmVyIiwidXBkYXRlVG9vbHRpcCIsInNob3dUb29sdGlwIl0sIm1hcHBpbmdzIjoiQ0FBUyxTQUFVQSxHQ0luQixRQUFBQyxHQUFBQyxHQUdBLEdBQUFDLEVBQUFELEdBQ0EsTUFBQUMsR0FBQUQsR0FBQUUsT0FH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R0FDQUEsRUFBQW5DLFdBQUEsV0FDQWdNLEdBQUEsT0FBQUEsR0FBQW5ULEdBQUFtVCxFQUFBdFUsTUFDQThDLEdBQUFuTCxLQUFBa0osRUFBQWhDLEdBQUEyRSxXQUNBdEMsR0FBQW9ULEVBQUF0VSxJQUNBNkMsR0FBQXlSLEVBQUEsV0FDQUMsSUFDQXpSLEdBQUFuTCxLQUFBa0osRUFBQS9CLEdBQUEwRSxlQUdPZ0UsRUFBQTFLLEtBRVA3QyxLQUFBd1AsT0FBQSxXQUNBNkssRUFDWTlNLEVBQUEyRixPQURTM0YsRUFBQTRGLFFBS3JCelIsSUFBQWtGLEtBQ0FBLEVBQUE1SCxJQUFBaUQsRUFBQXFWLEdBQ0ExUSxFQUFBckgsZ0JBQUE2YSxPQUNBL1IsR0FBQXpCLEVBQUFMLEdBQUEsR0FBQXZHLEtBQUFtVCxNQUNBOUssR0FBQXpCLEVBQUFMLEdBQUEsR0FBQXZHLEtBQUFrVCxPQUVBdE0sRUFBQWxGLEdBQUExQixNQVFBLE9BSEFzSixJQUFBNUgsRUFBQXlZLEdBQUF2WixJQUlBd0wsU0FDQWtDLFNBQ0FRLFVBQ0FrQixZQUNBdUMsWUFDQWUsWUFDQVEsU0FDQXdDLFdBQ0ErQixhQUNBb0IsT0FDQVUsZ0JIc0c4QnpjLEtBQUtKLEVBQVUsV0FBYSxNQUFPMEMiLCJmaWxlIjoibXktY29tLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge30sXG4vKioqKioqLyBcdFx0XHRpZDogbW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRsb2FkZWQ6IGZhbHNlXG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIChbXG4vKiAwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHR2YXIgX2Jvb3RzdHJhcCA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cdFxuXHR2YXIgX2Jvb3RzdHJhcDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ib290c3RyYXApO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdGlmIChkb2N1bWVudC5ib2R5LmlkID09ICdmaW5kUGVyc29uJykge1xuXHQgICAgKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgYmxuUmVtb3ZlU3VtYml0ID0gdHJ1ZTtcblx0ICAgICAgICB2YXIgZWxtSW5wdXRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnI3NlYXJjaFBlcnNvbiBpbnB1dCcpO1xuXHQgICAgICAgIHZhciBidG5TdW1iaXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2ZpbmRQZXJzb25cIik7XG5cdFxuXHQgICAgICAgIGVsbUlucHV0cy5mb3JFYWNoKGZ1bmN0aW9uIChjdXIpIHtcblx0ICAgICAgICAgICAgaWYgKGN1ci52YWx1ZS50cmltKCkubGVuZ3RoID09IDAgJiYgKGN1ci5uYW1lID09ICdsYXN0LW5hbWUnIHx8IGN1ci5uYW1lID09ICdmaXJzdC1uYW1lJykpIHtcblx0ICAgICAgICAgICAgICAgIGJsblJlbW92ZVN1bWJpdCA9IGZhbHNlO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSk7XG5cdFxuXHQgICAgICAgIGJsblJlbW92ZVN1bWJpdCA9PSBmYWxzZSA/IGJ0blN1bWJpdC5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgJ2Rpc2FibGVkJykgOiBudWxsO1xuXHRcblx0ICAgICAgICBlbG1JbnB1dHMuZm9yRWFjaChmdW5jdGlvbiAoY3VyKSB7XG5cdCAgICAgICAgICAgIGN1ci5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBibG5TdW1iaXQgPSB0cnVlO1xuXHRcblx0ICAgICAgICAgICAgICAgIGVsbUlucHV0cy5mb3JFYWNoKGZ1bmN0aW9uIChjdXJQbGFjZWQpIHtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoY3VyUGxhY2VkLnZhbHVlLnRyaW0oKS5sZW5ndGggPT0gMCAmJiAoY3VyUGxhY2VkLm5hbWUgPT0gJ2xhc3QtbmFtZScgfHwgY3VyUGxhY2VkLm5hbWUgPT0gJ2ZpcnN0LW5hbWUnKSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBibG5TdW1iaXQgPSBmYWxzZTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY3VyUGxhY2VkLmNsYXNzTGlzdC5hZGQoJ215RXJyb3InKTtcblx0ICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBjdXJQbGFjZWQuY2xhc3NMaXN0LnJlbW92ZSgnbXlFcnJvcicpO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH0pO1xuXHRcblx0ICAgICAgICAgICAgICAgIGJsblN1bWJpdCA9PT0gdHJ1ZSA/IGJ0blN1bWJpdC5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJykgOiBudWxsO1xuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICB9KTtcblx0ICAgIH0pKCk7XG5cdH0gLypcblx0ICBmdW5jdGlvbiBjaGVja1ZhbHVlcyAoZWxtTmFtZSkge1xuXHQgICAgICBhbGVydChlbG1OYW1lKTtcblx0ICB9XG5cdCAgXG5cdCAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnI3NlYXJjaFBlcnNvbiBpbnB1dCcpLmZvckVhY2goKGN1cikgPT4ge1xuXHQgICAgICBjdXIuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBjaGVja1ZhbHVlcygnI3NlYXJjaFBlcnNvbicpKTtcblx0ICB9KTsqL1xuXG4vKioqLyB9LFxuLyogMSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0dmFyIF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXywgX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXywgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX187LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKGdsb2JhbCkgey8vIE5hdGl2ZSBKYXZhc2NyaXB0IGZvciBCb290c3RyYXAgMyB2Mi4wLjQgfCDCqSBkbnBfdGhlbWUgfCBNSVQtTGljZW5zZVxuXHQoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHtcblx0ICBpZiAodHJ1ZSkge1xuXHQgICAgLy8gQU1EIHN1cHBvcnQ6XG5cdCAgICAhKF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18gPSBbXSwgX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fID0gKGZhY3RvcnkpLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyA9ICh0eXBlb2YgX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fID09PSAnZnVuY3Rpb24nID8gKF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXy5hcHBseShleHBvcnRzLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fKSkgOiBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18pLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyAhPT0gdW5kZWZpbmVkICYmIChtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fKSk7XG5cdCAgfSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cykge1xuXHQgICAgLy8gQ29tbW9uSlMtbGlrZTpcblx0ICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHQgIH0gZWxzZSB7XG5cdCAgICAvLyBCcm93c2VyIGdsb2JhbHMgKHJvb3QgaXMgd2luZG93KVxuXHQgICAgdmFyIGJzbiA9IGZhY3RvcnkoKTtcblx0ICAgIHJvb3QuQWZmaXggPSBic24uQWZmaXg7XG5cdCAgICByb290LkFsZXJ0ID0gYnNuLkFsZXJ0O1xuXHQgICAgcm9vdC5CdXR0b24gPSBic24uQnV0dG9uO1xuXHQgICAgcm9vdC5DYXJvdXNlbCA9IGJzbi5DYXJvdXNlbDtcblx0ICAgIHJvb3QuQ29sbGFwc2UgPSBic24uQ29sbGFwc2U7XG5cdCAgICByb290LkRyb3Bkb3duID0gYnNuLkRyb3Bkb3duO1xuXHQgICAgcm9vdC5Nb2RhbCA9IGJzbi5Nb2RhbDtcblx0ICAgIHJvb3QuUG9wb3ZlciA9IGJzbi5Qb3BvdmVyO1xuXHQgICAgcm9vdC5TY3JvbGxTcHkgPSBic24uU2Nyb2xsU3B5O1xuXHQgICAgcm9vdC5UYWIgPSBic24uVGFiO1xuXHQgICAgcm9vdC5Ub29sdGlwID0gYnNuLlRvb2x0aXA7XG5cdCAgfVxuXHR9KHRoaXMsIGZ1bmN0aW9uICgpIHtcblx0ICBcblx0ICAvKiBOYXRpdmUgSmF2YXNjcmlwdCBmb3IgQm9vdHN0cmFwIDMgfCBJbnRlcm5hbCBVdGlsaXR5IEZ1bmN0aW9uc1xuXHQgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXHQgIFxuXHQgIC8vIGdsb2JhbHNcblx0ICB2YXIgZ2xvYmFsT2JqZWN0ID0gdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB0aGlzfHx3aW5kb3csXG5cdCAgICBkb2MgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIGJvZHkgPSBkb2N1bWVudC5ib2R5LFxuXHQgIFxuXHQgICAgLy8gSUUgYnJvd3NlciBkZXRlY3Rcblx0ICAgIGlzSUUgPSAobmV3IFJlZ0V4cChcIk1TSUUgKFswLTldezEsfVtcXC4wLTldezAsfSlcIikuZXhlYyhuYXZpZ2F0b3IudXNlckFnZW50KSAhPSBudWxsKSA/IHBhcnNlRmxvYXQoIFJlZ0V4cC4kMSApIDogZmFsc2UsICBcblx0ICBcblx0ICAgIC8vIGZ1bmN0aW9uIHRvZ2dsZSBhdHRyaWJ1dGVzXG5cdCAgICBkYXRhVG9nZ2xlICAgID0gJ2RhdGEtdG9nZ2xlJyxcblx0ICAgIGRhdGFEaXNtaXNzICAgPSAnZGF0YS1kaXNtaXNzJyxcblx0ICAgIGRhdGFTcHkgICAgICAgPSAnZGF0YS1zcHknLFxuXHQgICAgZGF0YVJpZGUgICAgICA9ICdkYXRhLXJpZGUnLFxuXHQgICAgXG5cdCAgICAvLyBjb21wb25lbnRzXG5cdCAgICBzdHJpbmdBZmZpeCAgICAgPSAnQWZmaXgnLFxuXHQgICAgc3RyaW5nQWxlcnQgICAgID0gJ0FsZXJ0Jyxcblx0ICAgIHN0cmluZ0J1dHRvbiAgICA9ICdCdXR0b24nLFxuXHQgICAgc3RyaW5nQ2Fyb3VzZWwgID0gJ0Nhcm91c2VsJyxcblx0ICAgIHN0cmluZ0NvbGxhcHNlICA9ICdDb2xsYXBzZScsXG5cdCAgICBzdHJpbmdEcm9wZG93biAgPSAnRHJvcGRvd24nLFxuXHQgICAgc3RyaW5nTW9kYWwgICAgID0gJ01vZGFsJyxcblx0ICAgIHN0cmluZ1BvcG92ZXIgICA9ICdQb3BvdmVyJyxcblx0ICAgIHN0cmluZ1Njcm9sbFNweSA9ICdTY3JvbGxTcHknLFxuXHQgICAgc3RyaW5nVGFiICAgICAgID0gJ1RhYicsXG5cdCAgICBzdHJpbmdUb29sdGlwICAgPSAnVG9vbHRpcCcsXG5cdCAgXG5cdCAgICAvLyBvcHRpb25zIERBVEEgQVBJXG5cdCAgICBkYXRhYmFja2Ryb3AgICAgICA9ICdkYXRhLWJhY2tkcm9wJyxcblx0ICAgIGRhdGFLZXlib2FyZCAgICAgID0gJ2RhdGEta2V5Ym9hcmQnLFxuXHQgICAgZGF0YVRhcmdldCAgICAgICAgPSAnZGF0YS10YXJnZXQnLFxuXHQgICAgZGF0YUludGVydmFsICAgICAgPSAnZGF0YS1pbnRlcnZhbCcsXG5cdCAgICBkYXRhSGVpZ2h0ICAgICAgICA9ICdkYXRhLWhlaWdodCcsXG5cdCAgICBkYXRhUGF1c2UgICAgICAgICA9ICdkYXRhLXBhdXNlJyxcblx0ICAgIGRhdGFPcmlnaW5hbFRpdGxlID0gJ2RhdGEtb3JpZ2luYWwtdGl0bGUnLFxuXHQgICAgZGF0YU9yaWdpbmFsVGV4dCAgPSAnZGF0YS1vcmlnaW5hbC10ZXh0Jyxcblx0ICAgIGRhdGFEaXNtaXNzaWJsZSAgID0gJ2RhdGEtZGlzbWlzc2libGUnLFxuXHQgICAgZGF0YVRyaWdnZXIgICAgICAgPSAnZGF0YS10cmlnZ2VyJyxcblx0ICAgIGRhdGFBbmltYXRpb24gICAgID0gJ2RhdGEtYW5pbWF0aW9uJyxcblx0ICAgIGRhdGFDb250YWluZXIgICAgID0gJ2RhdGEtY29udGFpbmVyJyxcblx0ICAgIGRhdGFQbGFjZW1lbnQgICAgID0gJ2RhdGEtcGxhY2VtZW50Jyxcblx0ICAgIGRhdGFEZWxheSAgICAgICAgID0gJ2RhdGEtZGVsYXknLFxuXHQgICAgZGF0YU9mZnNldFRvcCAgICAgPSAnZGF0YS1vZmZzZXQtdG9wJyxcblx0ICAgIGRhdGFPZmZzZXRCb3R0b20gID0gJ2RhdGEtb2Zmc2V0LWJvdHRvbScsXG5cdCAgXG5cdCAgICAvLyBvcHRpb24ga2V5c1xuXHQgICAgYmFja2Ryb3AgPSAnYmFja2Ryb3AnLCBrZXlib2FyZCA9ICdrZXlib2FyZCcsIGRlbGF5ID0gJ2RlbGF5Jyxcblx0ICAgIGR1cmF0aW9uID0gJ2R1cmF0aW9uJywgY29udGVudCA9ICdjb250ZW50JywgdGFyZ2V0ID0gJ3RhcmdldCcsIFxuXHQgICAgaW50ZXJ2YWwgPSAnaW50ZXJ2YWwnLCBwYXVzZSA9ICdwYXVzZScsIGFuaW1hdGlvbiA9ICdhbmltYXRpb24nLFxuXHQgICAgcGxhY2VtZW50ID0gJ3BsYWNlbWVudCcsIGNvbnRhaW5lciA9ICdjb250YWluZXInLCBcblx0ICBcblx0ICAgIC8vIGJveCBtb2RlbFxuXHQgICAgb2Zmc2V0VG9wICAgID0gJ29mZnNldFRvcCcsICAgICAgb2Zmc2V0Qm90dG9tICAgPSAnb2Zmc2V0Qm90dG9tJyxcblx0ICAgIG9mZnNldExlZnQgICA9ICdvZmZzZXRMZWZ0Jyxcblx0ICAgIHNjcm9sbFRvcCAgICA9ICdzY3JvbGxUb3AnLCAgICAgIHNjcm9sbExlZnQgICAgID0gJ3Njcm9sbExlZnQnLFxuXHQgICAgY2xpZW50V2lkdGggID0gJ2NsaWVudFdpZHRoJywgICAgY2xpZW50SGVpZ2h0ICAgPSAnY2xpZW50SGVpZ2h0Jyxcblx0ICAgIG9mZnNldFdpZHRoICA9ICdvZmZzZXRXaWR0aCcsICAgIG9mZnNldEhlaWdodCAgID0gJ29mZnNldEhlaWdodCcsXG5cdCAgICBpbm5lcldpZHRoICAgPSAnaW5uZXJXaWR0aCcsICAgICBpbm5lckhlaWdodCAgICA9ICdpbm5lckhlaWdodCcsXG5cdCAgICBzY3JvbGxIZWlnaHQgPSAnc2Nyb2xsSGVpZ2h0JywgICBoZWlnaHQgICAgICAgICA9ICdoZWlnaHQnLFxuXHQgIFxuXHQgICAgLy8gYXJpYVxuXHQgICAgYXJpYUV4cGFuZGVkID0gJ2FyaWEtZXhwYW5kZWQnLFxuXHQgICAgYXJpYUhpZGRlbiAgID0gJ2FyaWEtaGlkZGVuJyxcblx0ICBcblx0ICAgIC8vIGV2ZW50IG5hbWVzXG5cdCAgICBjbGlja0V2ZW50ICAgID0gJ2NsaWNrJyxcblx0ICAgIGhvdmVyRXZlbnQgICAgPSAnaG92ZXInLFxuXHQgICAga2V5ZG93bkV2ZW50ICA9ICdrZXlkb3duJyxcblx0ICAgIHJlc2l6ZUV2ZW50ICAgPSAncmVzaXplJyxcblx0ICAgIHNjcm9sbEV2ZW50ICAgPSAnc2Nyb2xsJyxcblx0ICAgIC8vIG9yaWdpbmFsRXZlbnRzXG5cdCAgICBzaG93RXZlbnQgICAgID0gJ3Nob3cnLFxuXHQgICAgc2hvd25FdmVudCAgICA9ICdzaG93bicsXG5cdCAgICBoaWRlRXZlbnQgICAgID0gJ2hpZGUnLFxuXHQgICAgaGlkZGVuRXZlbnQgICA9ICdoaWRkZW4nLFxuXHQgICAgY2xvc2VFdmVudCAgICA9ICdjbG9zZScsXG5cdCAgICBjbG9zZWRFdmVudCAgID0gJ2Nsb3NlZCcsXG5cdCAgICBzbGlkRXZlbnQgICAgID0gJ3NsaWQnLFxuXHQgICAgc2xpZGVFdmVudCAgICA9ICdzbGlkZScsXG5cdCAgICBjaGFuZ2VFdmVudCAgID0gJ2NoYW5nZScsXG5cdCAgXG5cdCAgICAvLyBvdGhlclxuXHQgICAgZ2V0QXR0cmlidXRlICAgICAgICAgPSAnZ2V0QXR0cmlidXRlJyxcblx0ICAgIHNldEF0dHJpYnV0ZSAgICAgICAgID0gJ3NldEF0dHJpYnV0ZScsXG5cdCAgICBoYXNBdHRyaWJ1dGUgICAgICAgICA9ICdoYXNBdHRyaWJ1dGUnLFxuXHQgICAgZ2V0RWxlbWVudHNCeVRhZ05hbWUgPSAnZ2V0RWxlbWVudHNCeVRhZ05hbWUnLFxuXHQgICAgZ2V0Qm91bmRpbmdDbGllbnRSZWN0PSAnZ2V0Qm91bmRpbmdDbGllbnRSZWN0Jyxcblx0ICAgIHF1ZXJ5U2VsZWN0b3JBbGwgICAgID0gJ3F1ZXJ5U2VsZWN0b3JBbGwnLFxuXHQgICAgZ2V0RWxlbWVudHNCeUNMQVNTTkFNRSA9ICdnZXRFbGVtZW50c0J5Q2xhc3NOYW1lJyxcblx0ICBcblx0ICAgIGluZGV4T2YgICAgICA9ICdpbmRleE9mJyxcblx0ICAgIHBhcmVudE5vZGUgICA9ICdwYXJlbnROb2RlJyxcblx0ICAgIGxlbmd0aCAgICAgICA9ICdsZW5ndGgnLFxuXHQgICAgdG9Mb3dlckNhc2UgID0gJ3RvTG93ZXJDYXNlJyxcblx0ICAgIFRyYW5zaXRpb24gICA9ICdUcmFuc2l0aW9uJyxcblx0ICAgIFdlYmtpdCAgICAgICA9ICdXZWJraXQnLFxuXHQgICAgc3R5bGUgICAgICAgID0gJ3N0eWxlJyxcblx0ICAgIFxuXHQgICAgYWN0aXZlICAgICA9ICdhY3RpdmUnLFxuXHQgICAgaW5DbGFzcyAgICA9ICdpbicsXG5cdCAgICBjb2xsYXBzaW5nID0gJ2NvbGxhcHNpbmcnLFxuXHQgICAgZGlzYWJsZWQgICA9ICdkaXNhYmxlZCcsXG5cdCAgICBsb2FkaW5nICAgID0gJ2xvYWRpbmcnLFxuXHQgICAgbGVmdCAgICAgICA9ICdsZWZ0Jyxcblx0ICAgIHJpZ2h0ICAgICAgPSAncmlnaHQnLFxuXHQgICAgdG9wICAgICAgICA9ICd0b3AnLFxuXHQgICAgYm90dG9tICAgICA9ICdib3R0b20nLFxuXHQgIFxuXHQgICAgLy8gdG9vbHRpcCAvIHBvcG92ZXJcblx0ICAgIG1vdXNlSG92ZXIgPSAoJ29ubW91c2VsZWF2ZScgaW4gZG9jdW1lbnQpID8gWyAnbW91c2VlbnRlcicsICdtb3VzZWxlYXZlJ10gOiBbICdtb3VzZW92ZXInLCAnbW91c2VvdXQnIF0sXG5cdCAgICB0aXBQb3NpdGlvbnMgPSAvXFxiKHRvcHxib3R0b218bGVmdHx0b3ApKy8sXG5cdCAgXG5cdCAgICAvLyB0cmFuc2l0aW9uRW5kIHNpbmNlIDIuMC40XG5cdCAgICBzdXBwb3J0VHJhbnNpdGlvbnMgPSBXZWJraXQrVHJhbnNpdGlvbiBpbiBkb2Nbc3R5bGVdIHx8IFRyYW5zaXRpb25bdG9Mb3dlckNhc2VdKCkgaW4gZG9jW3N0eWxlXSxcblx0ICAgIHRyYW5zaXRpb25FbmRFdmVudCA9IFdlYmtpdCtUcmFuc2l0aW9uIGluIGRvY1tzdHlsZV0gPyBXZWJraXRbdG9Mb3dlckNhc2VdKCkrVHJhbnNpdGlvbisnRW5kJyA6IFRyYW5zaXRpb25bdG9Mb3dlckNhc2VdKCkrJ2VuZCcsXG5cdCAgICBcblx0ICBcblx0ICAgIC8vIHNldCBuZXcgZm9jdXMgZWxlbWVudCBzaW5jZSAyLjAuM1xuXHQgICAgc2V0Rm9jdXMgPSBmdW5jdGlvbihlbGVtZW50KXtcblx0ICAgICAgZWxlbWVudC5mb2N1cyA/IGVsZW1lbnQuZm9jdXMoKSA6IGVsZW1lbnQuc2V0QWN0aXZlKCk7XG5cdCAgICB9LFxuXHQgIFxuXHQgICAgLy8gY2xhc3MgbWFuaXB1bGF0aW9uLCBzaW5jZSAyLjAuMCByZXF1aXJlcyBwb2x5ZmlsbC5qc1xuXHQgICAgYWRkQ2xhc3MgPSBmdW5jdGlvbihlbGVtZW50LGNsYXNzTkFNRSkge1xuXHQgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoY2xhc3NOQU1FKTtcblx0ICAgIH0sXG5cdCAgICByZW1vdmVDbGFzcyA9IGZ1bmN0aW9uKGVsZW1lbnQsY2xhc3NOQU1FKSB7XG5cdCAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShjbGFzc05BTUUpO1xuXHQgICAgfSxcblx0ICAgIGhhc0NsYXNzID0gZnVuY3Rpb24oZWxlbWVudCxjbGFzc05BTUUpeyAvLyBzaW5jZSAyLjAuMFxuXHQgICAgICByZXR1cm4gZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOQU1FKTtcblx0ICAgIH0sXG5cdCAgXG5cdCAgICAvLyBzZWxlY3Rpb24gbWV0aG9kc1xuXHQgICAgbm9kZUxpc3RUb0FycmF5ID0gZnVuY3Rpb24obm9kZUxpc3Qpe1xuXHQgICAgICB2YXIgY2hpbGRJdGVtcyA9IFtdOyBmb3IgKHZhciBpID0gMCwgbmxsID0gbm9kZUxpc3RbbGVuZ3RoXTsgaTxubGw7IGkrKykgeyBjaGlsZEl0ZW1zLnB1c2goIG5vZGVMaXN0W2ldICkgfVxuXHQgICAgICByZXR1cm4gY2hpbGRJdGVtcztcblx0ICAgIH0sXG5cdCAgICBnZXRFbGVtZW50c0J5Q2xhc3NOYW1lID0gZnVuY3Rpb24oZWxlbWVudCxjbGFzc05BTUUpIHsgLy8gZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSBJRTgrXG5cdCAgICAgIHZhciBzZWxlY3Rpb25NZXRob2QgPSBpc0lFID09PSA4ID8gcXVlcnlTZWxlY3RvckFsbCA6IGdldEVsZW1lbnRzQnlDTEFTU05BTUU7ICAgICAgXG5cdCAgICAgIHJldHVybiBub2RlTGlzdFRvQXJyYXkoZWxlbWVudFtzZWxlY3Rpb25NZXRob2RdKCBpc0lFID09PSA4ID8gJy4nICsgY2xhc3NOQU1FLnJlcGxhY2UoL1xccyg/PVthLXpdKS9nLCcuJykgOiBjbGFzc05BTUUgKSk7XG5cdCAgICB9LFxuXHQgICAgcXVlcnlFbGVtZW50ID0gZnVuY3Rpb24gKHNlbGVjdG9yLCBwYXJlbnQpIHtcblx0ICAgICAgdmFyIGxvb2tVcCA9IHBhcmVudCA/IHBhcmVudCA6IGRvY3VtZW50O1xuXHQgICAgICByZXR1cm4gdHlwZW9mIHNlbGVjdG9yID09PSAnb2JqZWN0JyA/IHNlbGVjdG9yIDogbG9va1VwLnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xuXHQgICAgfSxcblx0ICAgIGdldENsb3Nlc3QgPSBmdW5jdGlvbiAoZWxlbWVudCwgc2VsZWN0b3IpIHsgLy9lbGVtZW50IGlzIHRoZSBlbGVtZW50IGFuZCBzZWxlY3RvciBpcyBmb3IgdGhlIGNsb3Nlc3QgcGFyZW50IGVsZW1lbnQgdG8gZmluZFxuXHQgICAgLy8gc291cmNlIGh0dHA6Ly9nb21ha2V0aGluZ3MuY29tL2NsaW1iaW5nLXVwLWFuZC1kb3duLXRoZS1kb20tdHJlZS13aXRoLXZhbmlsbGEtamF2YXNjcmlwdC9cblx0ICAgICAgdmFyIGZpcnN0Q2hhciA9IHNlbGVjdG9yLmNoYXJBdCgwKTtcblx0ICAgICAgZm9yICggOyBlbGVtZW50ICYmIGVsZW1lbnQgIT09IGRvY3VtZW50OyBlbGVtZW50ID0gZWxlbWVudFtwYXJlbnROb2RlXSApIHsvLyBHZXQgY2xvc2VzdCBtYXRjaFxuXHQgICAgICAgIGlmICggZmlyc3RDaGFyID09PSAnLicgfHwgZmlyc3RDaGFyICE9PSAnIycpIHsvLyBJZiBzZWxlY3RvciBpcyBhIGNsYXNzXG5cdCAgICAgICAgICBpZiAoIHF1ZXJ5RWxlbWVudChzZWxlY3RvcixlbGVtZW50W3BhcmVudE5vZGVdKSAhPT0gbnVsbCApIHsgcmV0dXJuIGVsZW1lbnQ7IH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKCBmaXJzdENoYXIgPT09ICcjJyApIHsgLy8gSWYgc2VsZWN0b3IgaXMgYW4gSURcblx0ICAgICAgICAgIGlmICggZWxlbWVudC5pZCA9PT0gc2VsZWN0b3Iuc3Vic3RyKDEpICkgeyByZXR1cm4gZWxlbWVudDsgfVxuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICB9LFxuXHQgIFxuXHQgICAgLy8gZXZlbnQgYXR0YWNoIGpRdWVyeSBzdHlsZSAvIHRyaWdnZXIgIHNpbmNlIDEuMi4wXG5cdCAgICBvbiA9IGZ1bmN0aW9uIChlbGVtZW50LCBldmVudCwgaGFuZGxlcikge1xuXHQgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIsIGZhbHNlKTtcblx0ICAgIH0sXG5cdCAgICBvZmYgPSBmdW5jdGlvbihlbGVtZW50LCBldmVudCwgaGFuZGxlcikge1xuXHQgICAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIsIGZhbHNlKTtcblx0ICAgIH0sXG5cdCAgICBvbmUgPSBmdW5jdGlvbiAoZWxlbWVudCwgZXZlbnQsIGhhbmRsZXIpIHsgLy8gb25lIHNpbmNlIDIuMC40XG5cdCAgICAgIG9uKGVsZW1lbnQsIGV2ZW50LCBmdW5jdGlvbiBoYW5kbGVyV3JhcHBlcigpe1xuXHQgICAgICAgIGhhbmRsZXIoKTtcblx0ICAgICAgICBvZmYoZWxlbWVudCwgZXZlbnQsIGhhbmRsZXJXcmFwcGVyKTtcblx0ICAgICAgfSk7XG5cdCAgICB9LFxuXHQgICAgZW11bGF0ZVRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbihlbGVtZW50LGhhbmRsZXIpeyAvLyBlbXVsYXRlVHJhbnNpdGlvbkVuZCBzaW5jZSAyLjAuNFxuXHQgICAgICBpZiAoc3VwcG9ydFRyYW5zaXRpb25zKSB7IG9uZShlbGVtZW50LHRyYW5zaXRpb25FbmRFdmVudCwgaGFuZGxlcik7IH1cblx0ICAgICAgZWxzZSB7IGhhbmRsZXIoKTsgfVxuXHQgICAgfSwgIFxuXHQgICAgYm9vdHN0cmFwQ3VzdG9tRXZlbnQgPSBmdW5jdGlvbiAoZXZlbnROYW1lLCBjb21wb25lbnROYW1lLCByZWxhdGVkKSB7XG5cdCAgICAgIHZhciBPcmlnaW5hbEN1c3RvbUV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KCBldmVudE5hbWUgKyAnLmJzLicgKyBjb21wb25lbnROYW1lKTtcblx0ICAgICAgT3JpZ2luYWxDdXN0b21FdmVudC5yZWxhdGVkVGFyZ2V0ID0gcmVsYXRlZDtcblx0ICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KE9yaWdpbmFsQ3VzdG9tRXZlbnQpO1xuXHQgICAgfSxcblx0ICBcblx0ICAgIC8vIHJlZmVyZW5jZSBhIGxpdmUgY29sbGVjdGlvbiBvZiB0aGUgRE9NXG5cdCAgICBBbGxET01FbGVtZW50cyA9IGRvY3VtZW50W2dldEVsZW1lbnRzQnlUYWdOYW1lXSgnKicpLFxuXHQgIFxuXHQgICAgLy8gSW5pdCBEQVRBIEFQSVxuXHQgICAgaW5pdGlhbGl6ZURhdGFBUEkgPSBmdW5jdGlvbiggY29tcG9uZW50LCBjb25zdHJ1Y3RvciwgZGF0YUF0dHJpYnV0ZSwgY29sbGVjdGlvbiApe1xuXHQgICAgICB2YXIgbG9va1VwID0gY29sbGVjdGlvbiAmJiBjb2xsZWN0aW9uW2xlbmd0aF0gPyBjb2xsZWN0aW9uIDogQWxsRE9NRWxlbWVudHM7XG5cdCAgICAgIGZvciAodmFyIGk9MDsgaSA8IGxvb2tVcFtsZW5ndGhdOyBpKyspIHtcblx0ICAgICAgICB2YXIgYXR0clZhbHVlID0gbG9va1VwW2ldW2dldEF0dHJpYnV0ZV0oZGF0YUF0dHJpYnV0ZSksIGV4cGVjdGVkQXR0clZhbHVlID0gY29tcG9uZW50LnJlcGxhY2UoL3NweS9pLCcnKVt0b0xvd2VyQ2FzZV0oKTtcblx0ICAgICAgICBpZiAoIGF0dHJWYWx1ZSAmJiBjb21wb25lbnQgPT09IHN0cmluZ0J1dHRvbiAmJiAoIGF0dHJWYWx1ZVtpbmRleE9mXShleHBlY3RlZEF0dHJWYWx1ZSkgPiAtMSApIC8vIGRhdGEtdG9nZ2xlPVwiYnV0dG9uc1wiXG5cdCAgICAgICAgICAgIHx8IGF0dHJWYWx1ZSA9PT0gZXhwZWN0ZWRBdHRyVmFsdWUgKSB7IC8vIGFsbCBvdGhlciBjb21wb25lbnRzXG5cdCAgICAgICAgICBuZXcgY29uc3RydWN0b3IobG9va1VwW2ldKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH0sICBcblx0ICBcblx0ICAgIC8vIHRhYiAvIGNvbGxhcHNlIHN0dWZmXG5cdCAgICBnZXRPdXRlckhlaWdodCA9IGZ1bmN0aW9uIChjaGlsZCkge1xuXHQgICAgICB2YXIgY2hpbGRTdHlsZSA9IGNoaWxkICYmIChjaGlsZC5jdXJyZW50U3R5bGUgfHwgZ2xvYmFsT2JqZWN0LmdldENvbXB1dGVkU3R5bGUoY2hpbGQpKSwgXG5cdCAgICAgICAgYnRwID0gL3B4Ly50ZXN0KGNoaWxkU3R5bGUuYm9yZGVyVG9wV2lkdGgpID8gTWF0aC5yb3VuZChjaGlsZFN0eWxlLmJvcmRlclRvcFdpZHRoLnJlcGxhY2UoJ3B4JywnJykpIDogMCxcblx0ICAgICAgICBidGIgPSAvcHgvLnRlc3QoY2hpbGRTdHlsZS5ib3JkZXJCb3R0b21XaWR0aCkgPyBNYXRoLnJvdW5kKGNoaWxkU3R5bGUuYm9yZGVyQm90dG9tV2lkdGgucmVwbGFjZSgncHgnLCcnKSkgOiAwLFxuXHQgICAgICAgIG10cCA9IC9weC8udGVzdChjaGlsZFN0eWxlLm1hcmdpblRvcCkgPyBNYXRoLnJvdW5kKGNoaWxkU3R5bGUubWFyZ2luVG9wLnJlcGxhY2UoJ3B4JywnJykpIDogMCxcblx0ICAgICAgICBtYnAgPSAvcHgvLnRlc3QoY2hpbGRTdHlsZS5tYXJnaW5Cb3R0b20pID8gTWF0aC5yb3VuZChjaGlsZFN0eWxlLm1hcmdpbkJvdHRvbS5yZXBsYWNlKCdweCcsJycpKSA6IDA7XG5cdCAgICAgIHJldHVybiBjaGlsZFtjbGllbnRIZWlnaHRdICsgcGFyc2VJbnQoIGJ0cCApICsgcGFyc2VJbnQoIGJ0YiApICsgcGFyc2VJbnQoIG10cCApICsgcGFyc2VJbnQoIG1icCApO1xuXHQgICAgfSxcblx0ICAgIGdldE1heEhlaWdodCA9IGZ1bmN0aW9uKHBhcmVudCkgeyAvLyBnZXQgY29sbGFwc2UgdHJ1ZUhlaWdodCBhbmQgYm9yZGVyXG5cdCAgICAgIHZhciBwYXJlbnRIZWlnaHQgPSAwO1xuXHQgICAgICBmb3IgKHZhciBrID0gMCwgbGwgPSBwYXJlbnQuY2hpbGRyZW5bbGVuZ3RoXTsgayA8IGxsOyBrKyspIHtcblx0ICAgICAgICBwYXJlbnRIZWlnaHQgKz0gZ2V0T3V0ZXJIZWlnaHQocGFyZW50LmNoaWxkcmVuW2tdKTtcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gcGFyZW50SGVpZ2h0O1xuXHQgICAgfSxcblx0ICBcblx0ICAgIC8vIHRvb2x0aXAgLyBwb3BvdmVyIHN0dWZmXG5cdCAgICBpc0VsZW1lbnRJblZpZXdwb3J0ID0gZnVuY3Rpb24oZWxlbWVudCkgeyAvLyBjaGVjayBpZiB0aGlzLnRvb2x0aXAgaXMgaW4gdmlld3BvcnRcblx0ICAgICAgdmFyIHJlY3QgPSBlbGVtZW50W2dldEJvdW5kaW5nQ2xpZW50UmVjdF0oKTtcblx0ICAgICAgcmV0dXJuICggcmVjdFt0b3BdID49IDAgJiYgcmVjdFtsZWZ0XSA+PSAwICYmXG5cdCAgICAgICAgcmVjdFtib3R0b21dIDw9IChnbG9iYWxPYmplY3RbaW5uZXJIZWlnaHRdIHx8IGRvY1tjbGllbnRIZWlnaHRdKSAmJlxuXHQgICAgICAgIHJlY3RbcmlnaHRdIDw9IChnbG9iYWxPYmplY3RbaW5uZXJXaWR0aF0gfHwgZG9jW2NsaWVudFdpZHRoXSkgKVxuXHQgICAgfSxcblx0ICAgIGdldFNjcm9sbCA9IGZ1bmN0aW9uKCkgeyAvLyBhbHNvIEFmZml4IGFuZCBTY3JvbGxTcHkgdXNlcyBpdFxuXHQgICAgICByZXR1cm4ge1xuXHQgICAgICAgIHkgOiBnbG9iYWxPYmplY3QucGFnZVlPZmZzZXQgfHwgZG9jW3Njcm9sbFRvcF0sXG5cdCAgICAgICAgeCA6IGdsb2JhbE9iamVjdC5wYWdlWE9mZnNldCB8fCBkb2Nbc2Nyb2xsTGVmdF1cblx0ICAgICAgfVxuXHQgICAgfSxcblx0ICAgIHN0eWxlVGlwID0gZnVuY3Rpb24obGluayxlbGVtZW50LHBvc2l0aW9uLGNvbnRhaW5lcikgeyAvLyBib3RoIHBvcG92ZXJzIGFuZCB0b29sdGlwc1xuXHQgICAgICB2YXIgcmVjdCA9IGxpbmtbZ2V0Qm91bmRpbmdDbGllbnRSZWN0XSgpLCBcblx0ICAgICAgICAgIHNjcm9sbCA9IGNvbnRhaW5lciA9PT0gYm9keSA/IGdldFNjcm9sbCgpIDogeyB4OiBjb250YWluZXJbb2Zmc2V0TGVmdF0gKyBjb250YWluZXJbc2Nyb2xsTGVmdF0sIHk6IGNvbnRhaW5lcltvZmZzZXRUb3BdICsgY29udGFpbmVyW3Njcm9sbFRvcF0gfSxcblx0ICAgICAgICAgIGxpbmtEaW1lbnNpb25zID0geyB3OiByZWN0W3JpZ2h0XSAtIHJlY3RbbGVmdF0sIGg6IHJlY3RbYm90dG9tXSAtIHJlY3RbdG9wXSB9LFxuXHQgICAgICAgICAgZWxlbWVudERpbWVuc2lvbnMgPSB7IHcgOiBlbGVtZW50W29mZnNldFdpZHRoXSwgaDogZWxlbWVudFtvZmZzZXRIZWlnaHRdIH07XG5cdCAgXG5cdCAgICAgIC8vIGFwcGx5IHN0eWxpbmcgdG8gdG9vbHRpcCBvciBwb3BvdmVyXG5cdCAgICAgIGlmICggcG9zaXRpb24gPT09IHRvcCApIHsgLy8gVE9QXG5cdCAgICAgICAgZWxlbWVudFtzdHlsZV1bdG9wXSA9IHJlY3RbdG9wXSArIHNjcm9sbC55IC0gZWxlbWVudERpbWVuc2lvbnMuaCArICdweCc7XG5cdCAgICAgICAgZWxlbWVudFtzdHlsZV1bbGVmdF0gPSByZWN0W2xlZnRdICsgc2Nyb2xsLnggLSBlbGVtZW50RGltZW5zaW9ucy53LzIgKyBsaW5rRGltZW5zaW9ucy53LzIgKyAncHgnXG5cdCAgXG5cdCAgICAgIH0gZWxzZSBpZiAoIHBvc2l0aW9uID09PSBib3R0b20gKSB7IC8vIEJPVFRPTVxuXHQgICAgICAgIGVsZW1lbnRbc3R5bGVdW3RvcF0gPSByZWN0W3RvcF0gKyBzY3JvbGwueSArIGxpbmtEaW1lbnNpb25zLmggKyAncHgnO1xuXHQgICAgICAgIGVsZW1lbnRbc3R5bGVdW2xlZnRdID0gcmVjdFtsZWZ0XSArIHNjcm9sbC54IC0gZWxlbWVudERpbWVuc2lvbnMudy8yICsgbGlua0RpbWVuc2lvbnMudy8yICsgJ3B4Jztcblx0ICBcblx0ICAgICAgfSBlbHNlIGlmICggcG9zaXRpb24gPT09IGxlZnQgKSB7IC8vIExFRlRcblx0ICAgICAgICBlbGVtZW50W3N0eWxlXVt0b3BdID0gcmVjdFt0b3BdICsgc2Nyb2xsLnkgLSBlbGVtZW50RGltZW5zaW9ucy5oLzIgKyBsaW5rRGltZW5zaW9ucy5oLzIgKyAncHgnO1xuXHQgICAgICAgIGVsZW1lbnRbc3R5bGVdW2xlZnRdID0gcmVjdFtsZWZ0XSArIHNjcm9sbC54IC0gZWxlbWVudERpbWVuc2lvbnMudyArICdweCc7XG5cdCAgXG5cdCAgICAgIH0gZWxzZSBpZiAoIHBvc2l0aW9uID09PSByaWdodCApIHsgLy8gUklHSFRcblx0ICAgICAgICBlbGVtZW50W3N0eWxlXVt0b3BdID0gcmVjdFt0b3BdICsgc2Nyb2xsLnkgLSBlbGVtZW50RGltZW5zaW9ucy5oLzIgKyBsaW5rRGltZW5zaW9ucy5oLzIgKyAncHgnO1xuXHQgICAgICAgIGVsZW1lbnRbc3R5bGVdW2xlZnRdID0gcmVjdFtsZWZ0XSArIHNjcm9sbC54ICsgbGlua0RpbWVuc2lvbnMudyArICdweCc7XG5cdCAgICAgIH1cblx0ICAgICAgZWxlbWVudC5jbGFzc05hbWVbaW5kZXhPZl0ocG9zaXRpb24pID09PSAtMSAmJiAoZWxlbWVudC5jbGFzc05hbWUgPSBlbGVtZW50LmNsYXNzTmFtZS5yZXBsYWNlKHRpcFBvc2l0aW9ucyxwb3NpdGlvbikpO1xuXHQgICAgfSxcblx0ICAgIHVwZGF0ZVBsYWNlbWVudCA9IGZ1bmN0aW9uKHBvc2l0aW9uKSB7XG5cdCAgICAgIHJldHVybiBwb3NpdGlvbiA9PT0gdG9wID8gYm90dG9tIDogLy8gdG9wXG5cdCAgICAgICAgICAgICBwb3NpdGlvbiA9PT0gYm90dG9tID8gdG9wIDogLy8gYm90dG9tXG5cdCAgICAgICAgICAgICBwb3NpdGlvbiA9PT0gbGVmdCA/IHJpZ2h0IDogLy8gbGVmdFxuXHQgICAgICAgICAgICAgcG9zaXRpb24gPT09IHJpZ2h0ID8gbGVmdCA6IHBvc2l0aW9uOyAvLyByaWdodFxuXHQgICAgfTtcblx0ICBcblx0ICBcblx0ICBcblx0ICAvKiBOYXRpdmUgSmF2YXNjcmlwdCBmb3IgQm9vdHN0cmFwIDMgfCBBZmZpeFxuXHQgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXHQgIFxuXHQgIC8vQUZGSVggREVGSU5JVElPTlxuXHQgIHZhciBBZmZpeCA9IGZ1bmN0aW9uKGVsZW1lbnQsIG9wdGlvbnMpIHtcblx0ICBcblx0ICAgIC8vIGluaXRpYWxpemF0aW9uIGVsZW1lbnRcblx0ICAgIGVsZW1lbnQgPSBxdWVyeUVsZW1lbnQoZWxlbWVudCk7XG5cdCAgXG5cdCAgICAvLyBzZXQgb3B0aW9uc1xuXHQgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cdCAgXG5cdCAgICAvLyByZWFkIERBVEEgQVBJXG5cdCAgICB2YXIgdGFyZ2V0RGF0YSAgICAgICAgPSBlbGVtZW50W2dldEF0dHJpYnV0ZV0oZGF0YVRhcmdldCksXG5cdCAgICAgICAgb2Zmc2V0VG9wRGF0YSAgICAgPSBlbGVtZW50W2dldEF0dHJpYnV0ZV0oZGF0YU9mZnNldFRvcCksXG5cdCAgICAgICAgb2Zmc2V0Qm90dG9tRGF0YSAgPSBlbGVtZW50W2dldEF0dHJpYnV0ZV0oZGF0YU9mZnNldEJvdHRvbSksXG5cdCAgICAgICAgXG5cdCAgICAgICAgLy8gY29tcG9uZW50IHNwZWNpZmljIHN0cmluZ3Ncblx0ICAgICAgICBhZmZpeCA9ICdhZmZpeCcsIGFmZml4ZWQgPSAnYWZmaXhlZCcsIGZuID0gJ2Z1bmN0aW9uJywgdXBkYXRlID0gJ3VwZGF0ZScsXG5cdCAgICAgICAgYWZmaXhUb3AgPSAnYWZmaXgtdG9wJywgYWZmaXhlZFRvcCA9ICdhZmZpeGVkLXRvcCcsXG5cdCAgICAgICAgYWZmaXhCb3R0b20gPSAnYWZmaXgtYm90dG9tJywgYWZmaXhlZEJvdHRvbSA9ICdhZmZpeGVkLWJvdHRvbSc7XG5cdCAgXG5cdCAgICB0aGlzW3RhcmdldF0gPSBvcHRpb25zW3RhcmdldF0gPyBxdWVyeUVsZW1lbnQob3B0aW9uc1t0YXJnZXRdKSA6IHF1ZXJ5RWxlbWVudCh0YXJnZXREYXRhKSB8fCBudWxsOyAvLyB0YXJnZXQgaXMgYW4gb2JqZWN0XG5cdCAgICB0aGlzW29mZnNldFRvcF0gPSBvcHRpb25zW29mZnNldFRvcF0gPyBvcHRpb25zW29mZnNldFRvcF0gOiBwYXJzZUludChvZmZzZXRUb3BEYXRhKSB8fCAwOyAvLyBvZmZzZXQgb3B0aW9uIGlzIGFuIGludGVnZXIgbnVtYmVyIG9yIGZ1bmN0aW9uIHRvIGRldGVybWluZSB0aGF0IG51bWJlclxuXHQgICAgdGhpc1tvZmZzZXRCb3R0b21dID0gb3B0aW9uc1tvZmZzZXRCb3R0b21dID8gb3B0aW9uc1tvZmZzZXRCb3R0b21dOiBwYXJzZUludChvZmZzZXRCb3R0b21EYXRhKSB8fCAwO1xuXHQgIFxuXHQgICAgaWYgKCAhdGhpc1t0YXJnZXRdICYmICEoIHRoaXNbb2Zmc2V0VG9wXSB8fCB0aGlzW29mZnNldEJvdHRvbV0gKSApIHsgcmV0dXJuOyB9IC8vIGludmFsaWRhdGVcblx0ICBcblx0ICAgIC8vIGludGVybmFsIGJpbmRcblx0ICAgIHZhciBzZWxmID0gdGhpcyxcblx0ICBcblx0ICAgICAgLy8gY29uc3RhbnRzXG5cdCAgICAgIHJlc2l6ZURlbGF5ID0gKGlzSUUgJiYgaXNJRSA8IDEwKSA/IDUwMCA6IDUwLCAvLyBmb3IgbGVnYWN5IGJyb3dzZXJzIHdlIHRyeSB0byBsaW1pdCB0aGUgaW50ZXJ2YWwgZm9yIHVwZGF0aW5nIHRoZSBBZmZpeFxuXHQgICAgICBwaW5PZmZzZXRUb3AsIHBpbk9mZnNldEJvdHRvbSwgbWF4U2Nyb2xsLCBzY3JvbGxZLCBwaW5uZWRUb3AsIHBpbm5lZEJvdHRvbSxcblx0ICAgICAgYWZmaXhlZFRvVG9wID0gZmFsc2UsIGFmZml4ZWRUb0JvdHRvbSA9IGZhbHNlLFxuXHQgICAgICBcblx0ICAgICAgLy8gcHJpdmF0ZSBtZXRob2RzIFxuXHQgICAgICBnZXRNYXhTY3JvbGwgPSBmdW5jdGlvbigpe1xuXHQgICAgICAgIHJldHVybiBNYXRoLm1heCggYm9keVtzY3JvbGxIZWlnaHRdLCBib2R5W29mZnNldEhlaWdodF0sIGRvY1tjbGllbnRIZWlnaHRdLCBkb2Nbc2Nyb2xsSGVpZ2h0XSwgZG9jW29mZnNldEhlaWdodF0gKTtcblx0ICAgICAgfSxcblx0ICAgICAgZ2V0T2Zmc2V0VG9wID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGlmICggc2VsZlt0YXJnZXRdICE9PSBudWxsICkge1xuXHQgICAgICAgICAgcmV0dXJuIHNlbGZbdGFyZ2V0XVtnZXRCb3VuZGluZ0NsaWVudFJlY3RdKClbdG9wXSArIHNjcm9sbFk7XG5cdCAgICAgICAgfSBlbHNlIGlmICggc2VsZltvZmZzZXRUb3BdICkge1xuXHQgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KHR5cGVvZiBzZWxmW29mZnNldFRvcF0gPT09IGZuID8gc2VsZltvZmZzZXRUb3BdKCkgOiBzZWxmW29mZnNldFRvcF0gfHwgMCk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9LFxuXHQgICAgICBnZXRPZmZzZXRCb3R0b20gPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgaWYgKCBzZWxmW29mZnNldEJvdHRvbV0gKSB7XG5cdCAgICAgICAgICByZXR1cm4gbWF4U2Nyb2xsIC0gZWxlbWVudFtvZmZzZXRIZWlnaHRdIC0gcGFyc2VJbnQoIHR5cGVvZiBzZWxmW29mZnNldEJvdHRvbV0gPT09IGZuID8gc2VsZltvZmZzZXRCb3R0b21dKCkgOiBzZWxmW29mZnNldEJvdHRvbV0gfHwgMCApO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSxcblx0ICAgICAgY2hlY2tQb3NpdGlvbiA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBtYXhTY3JvbGwgPSBnZXRNYXhTY3JvbGwoKTtcblx0ICAgICAgICBzY3JvbGxZID0gcGFyc2VJbnQoZ2V0U2Nyb2xsKCkueSwwKTtcblx0ICAgICAgICBwaW5PZmZzZXRUb3AgPSBnZXRPZmZzZXRUb3AoKTtcblx0ICAgICAgICBwaW5PZmZzZXRCb3R0b20gPSBnZXRPZmZzZXRCb3R0b20oKTsgXG5cdCAgICAgICAgcGlubmVkVG9wID0gKCBwYXJzZUludChwaW5PZmZzZXRUb3ApIC0gc2Nyb2xsWSA8IDApICYmIChzY3JvbGxZID4gcGFyc2VJbnQocGluT2Zmc2V0VG9wKSApO1xuXHQgICAgICAgIHBpbm5lZEJvdHRvbSA9ICggcGFyc2VJbnQocGluT2Zmc2V0Qm90dG9tKSAtIHNjcm9sbFkgPCAwKSAmJiAoc2Nyb2xsWSA+IHBhcnNlSW50KHBpbk9mZnNldEJvdHRvbSkgKTtcblx0ICAgICAgfSxcblx0ICAgICAgcGluVG9wID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGlmICggIWFmZml4ZWRUb1RvcCAmJiAhaGFzQ2xhc3MoZWxlbWVudCxhZmZpeCkgKSB7IC8vIG9uIGxvYWRpbmcgYSBwYWdlIGhhbGZ3YXkgc2Nyb2xsZWQgdGhlc2UgZXZlbnRzIGRvbid0IHRyaWdnZXIgaW4gQ2hyb21lXG5cdCAgICAgICAgICBib290c3RyYXBDdXN0b21FdmVudC5jYWxsKGVsZW1lbnQsIGFmZml4LCBhZmZpeCk7XG5cdCAgICAgICAgICBib290c3RyYXBDdXN0b21FdmVudC5jYWxsKGVsZW1lbnQsIGFmZml4VG9wLCBhZmZpeCk7XG5cdCAgICAgICAgICBhZGRDbGFzcyhlbGVtZW50LGFmZml4KTtcblx0ICAgICAgICAgIGFmZml4ZWRUb1RvcCA9IHRydWU7XG5cdCAgICAgICAgICBib290c3RyYXBDdXN0b21FdmVudC5jYWxsKGVsZW1lbnQsIGFmZml4ZWQsIGFmZml4KTtcblx0ICAgICAgICAgIGJvb3RzdHJhcEN1c3RvbUV2ZW50LmNhbGwoZWxlbWVudCwgYWZmaXhlZFRvcCwgYWZmaXgpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSxcblx0ICAgICAgdW5QaW5Ub3AgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgaWYgKCBhZmZpeGVkVG9Ub3AgJiYgaGFzQ2xhc3MoZWxlbWVudCxhZmZpeCkgKSB7XG5cdCAgICAgICAgICByZW1vdmVDbGFzcyhlbGVtZW50LGFmZml4KTtcblx0ICAgICAgICAgIGFmZml4ZWRUb1RvcCA9IGZhbHNlO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSxcblx0ICAgICAgcGluQm90dG9tID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGlmICggIWFmZml4ZWRUb0JvdHRvbSAmJiAhaGFzQ2xhc3MoZWxlbWVudCwgYWZmaXhCb3R0b20pICkge1xuXHQgICAgICAgICAgYm9vdHN0cmFwQ3VzdG9tRXZlbnQuY2FsbChlbGVtZW50LCBhZmZpeCwgYWZmaXgpO1xuXHQgICAgICAgICAgYm9vdHN0cmFwQ3VzdG9tRXZlbnQuY2FsbChlbGVtZW50LCBhZmZpeEJvdHRvbSwgYWZmaXgpO1xuXHQgICAgICAgICAgYWRkQ2xhc3MoZWxlbWVudCxhZmZpeEJvdHRvbSk7XG5cdCAgICAgICAgICBhZmZpeGVkVG9Cb3R0b20gPSB0cnVlO1xuXHQgICAgICAgICAgYm9vdHN0cmFwQ3VzdG9tRXZlbnQuY2FsbChlbGVtZW50LCBhZmZpeGVkLCBhZmZpeCk7XG5cdCAgICAgICAgICBib290c3RyYXBDdXN0b21FdmVudC5jYWxsKGVsZW1lbnQsIGFmZml4ZWRCb3R0b20sIGFmZml4KTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0sXG5cdCAgICAgIHVuUGluQm90dG9tID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGlmICggYWZmaXhlZFRvQm90dG9tICYmIGhhc0NsYXNzKGVsZW1lbnQsYWZmaXhCb3R0b20pICkge1xuXHQgICAgICAgICAgcmVtb3ZlQ2xhc3MoZWxlbWVudCxhZmZpeEJvdHRvbSk7XG5cdCAgICAgICAgICBhZmZpeGVkVG9Cb3R0b20gPSBmYWxzZTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0sXG5cdCAgICAgIHVwZGF0ZVBpbiA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBpZiAoIHBpbm5lZEJvdHRvbSApIHtcblx0ICAgICAgICAgIGlmICggcGlubmVkVG9wICkgeyB1blBpblRvcCgpOyB9XG5cdCAgICAgICAgICBwaW5Cb3R0b20oKTsgXG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIHVuUGluQm90dG9tKCk7XG5cdCAgICAgICAgICBpZiAoIHBpbm5lZFRvcCApIHsgcGluVG9wKCk7IH0gXG5cdCAgICAgICAgICBlbHNlIHsgdW5QaW5Ub3AoKTsgfVxuXHQgICAgICAgIH1cblx0ICAgICAgfTtcblx0ICBcblx0ICAgIC8vIHB1YmxpYyBtZXRob2Rcblx0ICAgIHRoaXNbdXBkYXRlXSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgY2hlY2tQb3NpdGlvbigpO1xuXHQgICAgICB1cGRhdGVQaW4oKTsgXG5cdCAgICB9O1xuXHQgIFxuXHQgICAgLy8gaW5pdFxuXHQgICAgaWYgKCAhKHN0cmluZ0FmZml4IGluIGVsZW1lbnQgKSApIHsgLy8gcHJldmVudCBhZGRpbmcgZXZlbnQgaGFuZGxlcnMgdHdpY2Vcblx0ICAgICAgb24oIGdsb2JhbE9iamVjdCwgc2Nyb2xsRXZlbnQsIHRoaXNbdXBkYXRlXSApO1xuXHQgICAgICBvbiggZ2xvYmFsT2JqZWN0LCByZXNpemVFdmVudCwgZnVuY3Rpb24oKSB7IHNldFRpbWVvdXQoZnVuY3Rpb24oKXsgc2VsZlt1cGRhdGVdKCk7IH0sIHJlc2l6ZURlbGF5KTsgfSk7XG5cdCAgICB9XG5cdCAgICBlbGVtZW50W3N0cmluZ0FmZml4XSA9IHRoaXM7XG5cdCAgXG5cdCAgICB0aGlzW3VwZGF0ZV0oKTtcblx0ICB9O1xuXHQgIFxuXHQgIC8vIEFGRklYIERBVEEgQVBJXG5cdCAgLy8gPT09PT09PT09PT09PT09PT1cblx0ICBpbml0aWFsaXplRGF0YUFQSSggc3RyaW5nQWZmaXgsIEFmZml4LCBkYXRhU3B5ICk7XG5cdCAgXG5cdCAgXG5cdCAgLyogTmF0aXZlIEphdmFzY3JpcHQgZm9yIEJvb3RzdHJhcCAzIHwgQWxlcnRcblx0ICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblx0ICBcblx0ICAvLyBBTEVSVCBERUZJTklUSU9OXG5cdCAgLy8gPT09PT09PT09PT09PT09PVxuXHQgIHZhciBBbGVydCA9IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHQgICAgXG5cdCAgICAvLyBpbml0aWFsaXphdGlvbiBlbGVtZW50XG5cdCAgICBlbGVtZW50ID0gcXVlcnlFbGVtZW50KGVsZW1lbnQpO1xuXHQgIFxuXHQgICAgLy8gYmluZCwgdGFyZ2V0IGFsZXJ0LCBkdXJhdGlvbiBhbmQgc3R1ZmZcblx0ICAgIHZhciBzZWxmID0gdGhpcywgY29tcG9uZW50ID0gJ2FsZXJ0Jyxcblx0ICAgICAgYWxlcnQgPSBnZXRDbG9zZXN0KGVsZW1lbnQsJy4nK2NvbXBvbmVudCksXG5cdCAgICAgIC8vIGhhbmRsZXJzXG5cdCAgICAgIGNsaWNrSGFuZGxlciA9IGZ1bmN0aW9uKGUpe1xuXHQgICAgICAgIHZhciBldmVudFRhcmdldCA9IGVbdGFyZ2V0XTtcblx0ICAgICAgICBldmVudFRhcmdldCA9IGV2ZW50VGFyZ2V0W2hhc0F0dHJpYnV0ZV0oZGF0YURpc21pc3MpID8gZXZlbnRUYXJnZXQgOiBldmVudFRhcmdldFtwYXJlbnROb2RlXTtcblx0ICAgICAgICBpZiAoZXZlbnRUYXJnZXQgJiYgZXZlbnRUYXJnZXRbaGFzQXR0cmlidXRlXShkYXRhRGlzbWlzcykpIHsgLy8gd2UgZG91YmxlIGNoZWNrIHRoZSBkYXRhIGF0dHJpYnV0ZSwgaXQncyBpbXBvcnRhbnRcblx0ICAgICAgICAgIGFsZXJ0ID0gZ2V0Q2xvc2VzdChldmVudFRhcmdldCwnLicrY29tcG9uZW50KTtcblx0ICAgICAgICAgIGVsZW1lbnQgPSBxdWVyeUVsZW1lbnQoJ1snK2RhdGFEaXNtaXNzKyc9XCInK2NvbXBvbmVudCsnXCJdJyxhbGVydCk7XG5cdCAgICAgICAgICAoZWxlbWVudCA9PT0gZXZlbnRUYXJnZXQgfHwgZWxlbWVudCA9PT0gZXZlbnRUYXJnZXRbcGFyZW50Tm9kZV0pICYmIGFsZXJ0ICYmIHNlbGYuY2xvc2UoKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0sXG5cdCAgICAgIHRyYW5zaXRpb25FbmRIYW5kbGVyID0gZnVuY3Rpb24oKXtcblx0ICAgICAgICBib290c3RyYXBDdXN0b21FdmVudC5jYWxsKGFsZXJ0LCBjbG9zZWRFdmVudCwgY29tcG9uZW50KTtcblx0ICAgICAgICBvZmYoZWxlbWVudCwgY2xpY2tFdmVudCwgY2xpY2tIYW5kbGVyKTsgLy8gZGV0YWNoIGl0J3MgbGlzdGVuZXJcblx0ICAgICAgICBhbGVydFtwYXJlbnROb2RlXS5yZW1vdmVDaGlsZChhbGVydCk7XG5cdCAgICAgIH07XG5cdCAgICBcblx0ICAgIC8vIHB1YmxpYyBtZXRob2Rcblx0ICAgIHRoaXMuY2xvc2UgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgaWYgKCBhbGVydCAmJiBlbGVtZW50ICYmIGhhc0NsYXNzKGFsZXJ0LGluQ2xhc3MpICkge1xuXHQgICAgICAgIGJvb3RzdHJhcEN1c3RvbUV2ZW50LmNhbGwoYWxlcnQsIGNsb3NlRXZlbnQsIGNvbXBvbmVudCk7XG5cdCAgICAgICAgcmVtb3ZlQ2xhc3MoYWxlcnQsaW5DbGFzcyk7XG5cdCAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0ICAgICAgICAgIGlmIChhbGVydCkge1xuXHQgICAgICAgICAgICBlbXVsYXRlVHJhbnNpdGlvbkVuZChhbGVydCx0cmFuc2l0aW9uRW5kSGFuZGxlcik7XG5cdCAgICAgICAgICB9IFxuXHQgICAgICAgIH0sIGR1cmF0aW9uKTtcblx0ICAgICAgfVxuXHQgICAgfTtcblx0ICBcblx0ICAgIC8vIGluaXRcblx0ICAgIGlmICggIShzdHJpbmdBbGVydCBpbiBlbGVtZW50ICkgKSB7IC8vIHByZXZlbnQgYWRkaW5nIGV2ZW50IGhhbmRsZXJzIHR3aWNlXG5cdCAgICAgIG9uKGVsZW1lbnQsIGNsaWNrRXZlbnQsIGNsaWNrSGFuZGxlcik7XG5cdCAgICB9XG5cdCAgICBlbGVtZW50W3N0cmluZ0FsZXJ0XSA9IHRoaXM7XG5cdCAgfTtcblx0ICBcblx0ICAvLyBBTEVSVCBEQVRBIEFQSVxuXHQgIC8vID09PT09PT09PT09PT09XG5cdCAgaW5pdGlhbGl6ZURhdGFBUEkgKCBzdHJpbmdBbGVydCwgQWxlcnQsIGRhdGFEaXNtaXNzICk7XG5cdCAgXG5cdCAgXG5cdCAgLyogTmF0aXZlIEphdmFzY3JpcHQgZm9yIEJvb3RzdHJhcCAzIHwgQnV0dG9uXG5cdCAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblx0ICBcblx0ICAvLyBCVVRUT04gREVGSU5JVElPTlxuXHQgIC8vID09PT09PT09PT09PT09PT09PT1cblx0ICB2YXIgQnV0dG9uID0gZnVuY3Rpb24oIGVsZW1lbnQsIG9wdGlvbiApIHtcblx0ICBcblx0ICAgIC8vIGluaXRpYWxpemF0aW9uIGVsZW1lbnRcblx0ICAgIGVsZW1lbnQgPSBxdWVyeUVsZW1lbnQoZWxlbWVudCk7XG5cdCAgXG5cdCAgICAvLyBzZXQgb3B0aW9uXG5cdCAgICBvcHRpb24gPSBvcHRpb24gfHwgbnVsbDtcblx0ICBcblx0ICAgIC8vIGNvbnN0YW50XG5cdCAgICB2YXIgdG9nZ2xlZCA9IGZhbHNlLCAvLyB0b2dnbGVkIG1ha2VzIHN1cmUgdG8gcHJldmVudCB0cmlnZ2VyaW5nIHR3aWNlIHRoZSBjaGFuZ2UuYnMuYnV0dG9uIGV2ZW50c1xuXHQgIFxuXHQgICAgICAgIC8vIHN0cmluZ3Ncblx0ICAgICAgICBjb21wb25lbnQgPSAnYnV0dG9uJyxcblx0ICAgICAgICBjaGVja2VkID0gJ2NoZWNrZWQnLFxuXHQgICAgICAgIHJlc2V0ID0gJ3Jlc2V0Jyxcblx0ICAgICAgICBMQUJFTCA9ICdMQUJFTCcsXG5cdCAgICAgICAgSU5QVVQgPSAnSU5QVVQnLFxuXHQgIFxuXHQgICAgICAvLyBwcml2YXRlIG1ldGhvZHNcblx0ICAgICAgc2V0U3RhdGUgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgICBpZiAoICEhIG9wdGlvbiAmJiBvcHRpb24gIT09IHJlc2V0ICkge1xuXHQgICAgICAgICAgaWYgKCBvcHRpb24gPT09IGxvYWRpbmcgKSB7XG5cdCAgICAgICAgICAgIGFkZENsYXNzKGVsZW1lbnQsZGlzYWJsZWQpO1xuXHQgICAgICAgICAgICBlbGVtZW50W3NldEF0dHJpYnV0ZV0oZGlzYWJsZWQsZGlzYWJsZWQpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgZWxlbWVudFtzZXRBdHRyaWJ1dGVdKGRhdGFPcmlnaW5hbFRleHQsIGVsZW1lbnQuaW5uZXJIVE1MLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKSk7IC8vIHRyaW0gdGhlIHRleHRcblx0ICAgICAgICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gZWxlbWVudFtnZXRBdHRyaWJ1dGVdKCdkYXRhLScrb3B0aW9uKyctdGV4dCcpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSxcblx0ICAgICAgcmVzZXRTdGF0ZSA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIGlmIChlbGVtZW50W2dldEF0dHJpYnV0ZV0oZGF0YU9yaWdpbmFsVGV4dCkpIHtcblx0ICAgICAgICAgIGlmICggaGFzQ2xhc3MoZWxlbWVudCxkaXNhYmxlZCkgfHwgZWxlbWVudFtnZXRBdHRyaWJ1dGVdKGRpc2FibGVkKSA9PT0gZGlzYWJsZWQgKSB7XG5cdCAgICAgICAgICAgIHJlbW92ZUNsYXNzKGVsZW1lbnQsZGlzYWJsZWQpO1xuXHQgICAgICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShkaXNhYmxlZCk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICBlbGVtZW50LmlubmVySFRNTCA9IGVsZW1lbnRbZ2V0QXR0cmlidXRlXShkYXRhT3JpZ2luYWxUZXh0KTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0sXG5cdCAgICAgIHRvZ2dsZSA9IGZ1bmN0aW9uKGUpIHtcblx0ICAgICAgICB2YXIgcGFyZW50ID0gZVt0YXJnZXRdW3BhcmVudE5vZGVdLFxuXHQgICAgICAgICAgbGFiZWwgPSBlW3RhcmdldF0udGFnTmFtZSA9PT0gTEFCRUwgPyBlW3RhcmdldF0gOiBwYXJlbnQudGFnTmFtZSA9PT0gTEFCRUwgPyBwYXJlbnQgOiBudWxsOyAvLyB0aGUgLmJ0biBsYWJlbFxuXHQgIFxuXHQgICAgICAgIGlmICggIWxhYmVsICkgcmV0dXJuOyAvL3JlYWN0IGlmIGEgbGFiZWwgb3IgaXRzIGltbWVkaWF0ZSBjaGlsZCBpcyBjbGlja2VkXG5cdCAgXG5cdCAgICAgICAgdmFyIGV2ZW50VGFyZ2V0ID0gdGhpcywgLy8gdGhlIGJ1dHRvbiBncm91cCwgdGhlIHRhcmdldCBvZiB0aGUgaGFuZGxlciBmdW5jdGlvblxuXHQgICAgICAgICAgbGFiZWxzID0gZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShldmVudFRhcmdldCwnYnRuJyksIC8vIGFsbCB0aGUgYnV0dG9uIGdyb3VwIGJ1dHRvbnNcblx0ICAgICAgICAgIGlucHV0ID0gbGFiZWxbZ2V0RWxlbWVudHNCeVRhZ05hbWVdKElOUFVUKVswXTtcblx0ICBcblx0ICAgICAgICBpZiAoICFpbnB1dCApIHJldHVybjsgLy9yZXR1cm4gaWYgbm8gaW5wdXQgZm91bmRcblx0ICBcblx0ICAgICAgICAvLyBtYW5hZ2UgdGhlIGRvbSBtYW5pcHVsYXRpb25cblx0ICAgICAgICBpZiAoIGlucHV0LnR5cGUgPT09ICdjaGVja2JveCcgKSB7IC8vY2hlY2tib3hlc1xuXHQgICAgICAgICAgaWYgKCAhaW5wdXRbY2hlY2tlZF0gKSB7XG5cdCAgICAgICAgICAgIGFkZENsYXNzKGxhYmVsLGFjdGl2ZSk7XG5cdCAgICAgICAgICAgIGlucHV0W2dldEF0dHJpYnV0ZV0oY2hlY2tlZCk7XG5cdCAgICAgICAgICAgIGlucHV0W3NldEF0dHJpYnV0ZV0oY2hlY2tlZCxjaGVja2VkKTtcblx0ICAgICAgICAgICAgaW5wdXRbY2hlY2tlZF0gPSB0cnVlO1xuXHQgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgcmVtb3ZlQ2xhc3MobGFiZWwsYWN0aXZlKTtcblx0ICAgICAgICAgICAgaW5wdXRbZ2V0QXR0cmlidXRlXShjaGVja2VkKTtcblx0ICAgICAgICAgICAgaW5wdXQucmVtb3ZlQXR0cmlidXRlKGNoZWNrZWQpO1xuXHQgICAgICAgICAgICBpbnB1dFtjaGVja2VkXSA9IGZhbHNlO1xuXHQgICAgICAgICAgfVxuXHQgIFxuXHQgICAgICAgICAgaWYgKCF0b2dnbGVkKSB7IC8vIHByZXZlbnQgdHJpZ2dlcmluZyB0aGUgZXZlbnQgdHdpY2Vcblx0ICAgICAgICAgICAgdG9nZ2xlZCA9IHRydWU7XG5cdCAgICAgICAgICAgIGJvb3RzdHJhcEN1c3RvbUV2ZW50LmNhbGwoaW5wdXQsIGNoYW5nZUV2ZW50LCBjb21wb25lbnQpOyAvL3RyaWdnZXIgdGhlIGNoYW5nZSBmb3IgdGhlIGlucHV0XG5cdCAgICAgICAgICAgIGJvb3RzdHJhcEN1c3RvbUV2ZW50LmNhbGwoZWxlbWVudCwgY2hhbmdlRXZlbnQsIGNvbXBvbmVudCk7IC8vdHJpZ2dlciB0aGUgY2hhbmdlIGZvciB0aGUgYnRuLWdyb3VwXG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgIFxuXHQgICAgICAgIGlmICggaW5wdXQudHlwZSA9PT0gJ3JhZGlvJyAmJiAhdG9nZ2xlZCApIHsgLy8gcmFkaW8gYnV0dG9uc1xuXHQgICAgICAgICAgaWYgKCAhaW5wdXRbY2hlY2tlZF0gKSB7IC8vIGRvbid0IHRyaWdnZXIgaWYgYWxyZWFkeSBhY3RpdmVcblx0ICAgICAgICAgICAgYWRkQ2xhc3MobGFiZWwsYWN0aXZlKTtcblx0ICAgICAgICAgICAgaW5wdXRbc2V0QXR0cmlidXRlXShjaGVja2VkLGNoZWNrZWQpO1xuXHQgICAgICAgICAgICBpbnB1dFtjaGVja2VkXSA9IHRydWU7XG5cdCAgICAgICAgICAgIGJvb3RzdHJhcEN1c3RvbUV2ZW50LmNhbGwoaW5wdXQsIGNoYW5nZUV2ZW50LCBjb21wb25lbnQpOyAvL3RyaWdnZXIgdGhlIGNoYW5nZSBmb3IgdGhlIGlucHV0XG5cdCAgICAgICAgICAgIGJvb3RzdHJhcEN1c3RvbUV2ZW50LmNhbGwoZWxlbWVudCwgY2hhbmdlRXZlbnQsIGNvbXBvbmVudCk7IC8vdHJpZ2dlciB0aGUgY2hhbmdlIGZvciB0aGUgYnRuLWdyb3VwXG5cdCAgXG5cdCAgICAgICAgICAgIHRvZ2dsZWQgPSB0cnVlO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGwgPSBsYWJlbHNbbGVuZ3RoXTsgaTxsbDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgdmFyIG90aGVyTGFiZWwgPSBsYWJlbHNbaV0sIG90aGVySW5wdXQgPSBvdGhlckxhYmVsW2dldEVsZW1lbnRzQnlUYWdOYW1lXShJTlBVVClbMF07XG5cdCAgICAgICAgICAgICAgaWYgKCBvdGhlckxhYmVsICE9PSBsYWJlbCAmJiBoYXNDbGFzcyhvdGhlckxhYmVsLGFjdGl2ZSkgKSAge1xuXHQgICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3Mob3RoZXJMYWJlbCxhY3RpdmUpO1xuXHQgICAgICAgICAgICAgICAgb3RoZXJJbnB1dC5yZW1vdmVBdHRyaWJ1dGUoY2hlY2tlZCk7XG5cdCAgICAgICAgICAgICAgICBvdGhlcklucHV0W2NoZWNrZWRdID0gZmFsc2U7XG5cdCAgICAgICAgICAgICAgICBib290c3RyYXBDdXN0b21FdmVudC5jYWxsKG90aGVySW5wdXQsIGNoYW5nZUV2ZW50LCBjb21wb25lbnQpOyAvLyB0cmlnZ2VyIHRoZSBjaGFuZ2Vcblx0ICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24oKSB7IHRvZ2dsZWQgPSBmYWxzZTsgfSwgNTAgKTtcblx0ICAgICAgfTtcblx0ICBcblx0ICAgIC8vIGluaXRcblx0ICAgIGlmICggaGFzQ2xhc3MoZWxlbWVudCwnYnRuJykgKSB7IC8vIHdoZW4gQnV0dG9uIHRleHQgaXMgdXNlZCB3ZSBleGVjdXRlIGl0IGFzIGFuIGluc3RhbmNlIG1ldGhvZFxuXHQgICAgICBpZiAoIG9wdGlvbiAhPT0gbnVsbCApIHtcblx0ICAgICAgICBpZiAoIG9wdGlvbiAhPT0gcmVzZXQgKSB7IHNldFN0YXRlKCk7IH0gXG5cdCAgICAgICAgZWxzZSB7IHJlc2V0U3RhdGUoKTsgfVxuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICBpZiAoIGhhc0NsYXNzKGVsZW1lbnQsJ2J0bi1ncm91cCcpICkge1xuXHQgICAgICBpZiAoICEoIHN0cmluZ0J1dHRvbiBpbiBlbGVtZW50ICkgKSB7IC8vIHByZXZlbnQgYWRkaW5nIGV2ZW50IGhhbmRsZXJzIHR3aWNlXG5cdCAgICAgICAgb24oIGVsZW1lbnQsIGNsaWNrRXZlbnQsIHRvZ2dsZSApO1xuXHQgICAgICB9XG5cdCAgICAgIGVsZW1lbnRbc3RyaW5nQnV0dG9uXSA9IHRoaXM7XG5cdCAgICB9XG5cdCAgfTtcblx0ICBcblx0ICAvLyBCVVRUT04gREFUQSBBUElcblx0ICAvLyA9PT09PT09PT09PT09PT09PVxuXHQgIGluaXRpYWxpemVEYXRhQVBJKCBzdHJpbmdCdXR0b24sIEJ1dHRvbiwgZGF0YVRvZ2dsZSApO1xuXHQgIFxuXHQgIFxuXHQgIC8qIE5hdGl2ZSBKYXZhc2NyaXB0IGZvciBCb290c3RyYXAgMyB8IENhcm91c2VsXG5cdCAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cdCAgXG5cdCAgLy8gQ0FST1VTRUwgREVGSU5JVElPTlxuXHQgIC8vID09PT09PT09PT09PT09PT09PT1cblx0ICB2YXIgQ2Fyb3VzZWwgPSBmdW5jdGlvbiggZWxlbWVudCwgb3B0aW9ucyApIHtcblx0ICBcblx0ICAgIC8vIGluaXRpYWxpemF0aW9uIGVsZW1lbnRcblx0ICAgIGVsZW1lbnQgPSBxdWVyeUVsZW1lbnQoIGVsZW1lbnQgKTtcblx0ICBcblx0ICAgIC8vIHNldCBvcHRpb25zXG5cdCAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblx0ICBcblx0ICAgIC8vIERBVEEgQVBJXG5cdCAgICB2YXIgaW50ZXJ2YWxEYXRhID0gZWxlbWVudFtnZXRBdHRyaWJ1dGVdKGRhdGFJbnRlcnZhbCkgPT09ICdmYWxzZScgPyBmYWxzZSA6IHBhcnNlSW50KGVsZW1lbnRbZ2V0QXR0cmlidXRlXShkYXRhSW50ZXJ2YWwpKSB8fCA1MDAwLCAvLyBib290c3RyYXAgY2Fyb3VzZWwgZGVmYXVsdCBpbnRlcnZhbFxuXHQgICAgICAgIHBhdXNlRGF0YSA9IGVsZW1lbnRbZ2V0QXR0cmlidXRlXShkYXRhUGF1c2UpID09PSBob3ZlckV2ZW50IHx8IGZhbHNlLFxuXHQgICAgICAgIGtleWJvYXJkRGF0YSA9IGVsZW1lbnRbZ2V0QXR0cmlidXRlXShkYXRhS2V5Ym9hcmQpID09PSAndHJ1ZScgfHwgZmFsc2UsXG5cdCAgICAgIFxuXHQgICAgICAgIC8vIHN0cmluZ3Ncblx0ICAgICAgICBjb21wb25lbnQgPSAnY2Fyb3VzZWwnLFxuXHQgICAgICAgIHBhdXNlZCA9ICdwYXVzZWQnLFxuXHQgICAgICAgIGRpcmVjdGlvbiA9ICdkaXJlY3Rpb24nLFxuXHQgICAgICAgIGRhdGFTbGlkZVRvID0gJ2RhdGEtc2xpZGUtdG8nOyBcblx0ICBcblx0ICAgIHRoaXNba2V5Ym9hcmRdID0gb3B0aW9uc1trZXlib2FyZF0gPT09IHRydWUgfHwga2V5Ym9hcmREYXRhO1xuXHQgICAgdGhpc1twYXVzZV0gPSAob3B0aW9uc1twYXVzZV0gPT09IGhvdmVyRXZlbnQgfHwgcGF1c2VEYXRhKSA/IGhvdmVyRXZlbnQgOiBmYWxzZTsgLy8gZmFsc2UgLyBob3ZlclxuXHQgIFxuXHQgICAgaWYgKCAhKCBvcHRpb25zW2ludGVydmFsXSB8fCBpbnRlcnZhbERhdGEgKSApIHsgLy8gZGV0ZXJtaW5lIHNsaWRlIGludGVydmFsXG5cdCAgICAgIHRoaXNbaW50ZXJ2YWxdID0gZmFsc2U7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICB0aGlzW2ludGVydmFsXSA9IHBhcnNlSW50KG9wdGlvbnNbaW50ZXJ2YWxdKSB8fCBpbnRlcnZhbERhdGE7IC8vIGRlZmF1bHQgc2xpZGUgaW50ZXJ2YWxcblx0ICAgIH1cblx0ICBcblx0ICAgIC8vIGJpbmQsIGV2ZW50IHRhcmdldHNcblx0ICAgIHZhciBzZWxmID0gdGhpcywgaW5kZXggPSBlbGVtZW50LmluZGV4ID0gMCwgdGltZXIgPSBlbGVtZW50LnRpbWVyID0gMCwgXG5cdCAgICAgIGlzU2xpZGluZyA9IGZhbHNlLCAvLyBpc1NsaWRpbmcgcHJldmVudHMgY2xpY2sgZXZlbnQgaGFuZGxlcnMgd2hlbiBhbmltYXRpb24gaXMgcnVubmluZ1xuXHQgICAgICBzbGlkZXMgPSBnZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGVsZW1lbnQsJ2l0ZW0nKSwgdG90YWwgPSBzbGlkZXNbbGVuZ3RoXSxcblx0ICAgICAgc2xpZGVEaXJlY3Rpb24gPSB0aGlzW2RpcmVjdGlvbl0gPSBsZWZ0LFxuXHQgICAgICBjb250cm9scyA9IGdldEVsZW1lbnRzQnlDbGFzc05hbWUoZWxlbWVudCxjb21wb25lbnQrJy1jb250cm9sJyksXG5cdCAgICAgIGxlZnRBcnJvdyA9IGNvbnRyb2xzWzBdLCByaWdodEFycm93ID0gY29udHJvbHNbMV0sXG5cdCAgICAgIGluZGljYXRvciA9IHF1ZXJ5RWxlbWVudCggJy4nK2NvbXBvbmVudCsnLWluZGljYXRvcnMnLCBlbGVtZW50ICksXG5cdCAgICAgIGluZGljYXRvcnMgPSBpbmRpY2F0b3JbZ2V0RWxlbWVudHNCeVRhZ05hbWVdKCBcIkxJXCIgKTtcblx0ICBcblx0ICAgIC8vIGhhbmRsZXJzXG5cdCAgICB2YXIgcGF1c2VIYW5kbGVyID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGlmICggc2VsZltpbnRlcnZhbF0gIT09ZmFsc2UgJiYgIWhhc0NsYXNzKGVsZW1lbnQscGF1c2VkKSApIHtcblx0ICAgICAgICAgIGFkZENsYXNzKGVsZW1lbnQscGF1c2VkKTtcblx0ICAgICAgICAgICFpc1NsaWRpbmcgJiYgY2xlYXJJbnRlcnZhbCggdGltZXIgKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0sXG5cdCAgICAgIHJlc3VtZUhhbmRsZXIgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgICBpZiAoIHNlbGZbaW50ZXJ2YWxdICE9PSBmYWxzZSAmJiBoYXNDbGFzcyhlbGVtZW50LHBhdXNlZCkgKSB7XG5cdCAgICAgICAgICByZW1vdmVDbGFzcyhlbGVtZW50LHBhdXNlZCk7XG5cdCAgICAgICAgICAhaXNTbGlkaW5nICYmIGNsZWFySW50ZXJ2YWwoIHRpbWVyICk7XG5cdCAgICAgICAgICAhaXNTbGlkaW5nICYmIHNlbGYuY3ljbGUoKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0sXG5cdCAgICAgIGluZGljYXRvckhhbmRsZXIgPSBmdW5jdGlvbihlKSB7XG5cdCAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHQgICAgICAgIGlmIChpc1NsaWRpbmcpIHJldHVybjtcblx0ICBcblx0ICAgICAgICB2YXIgZXZlbnRUYXJnZXQgPSBlW3RhcmdldF0sIGFjdGl2ZUluZGljYXRvciA9IHNlbGYuZ2V0QWN0aXZlSW5kZXgoKTsgLy8gZXZlbnQgdGFyZ2V0IHwgdGhlIGN1cnJlbnQgYWN0aXZlIGl0ZW1cblx0ICBcblx0ICAgICAgICBpZiAoIGV2ZW50VGFyZ2V0ICYmICFoYXNDbGFzcyhldmVudFRhcmdldCxhY3RpdmUpICYmIGV2ZW50VGFyZ2V0W2dldEF0dHJpYnV0ZV0oZGF0YVNsaWRlVG8pICkge1xuXHQgICAgICAgICAgaW5kZXggPSBwYXJzZUludCggZXZlbnRUYXJnZXRbZ2V0QXR0cmlidXRlXShkYXRhU2xpZGVUbyksIDEwICk7XG5cdCAgXG5cdCAgICAgICAgICAvL2RldGVybWluZSBkaXJlY3Rpb24gZmlyc3Rcblx0ICAgICAgICAgIGlmICAoIChhY3RpdmVJbmRpY2F0b3IgPCBpbmRleCApIHx8IChhY3RpdmVJbmRpY2F0b3IgPT09IDAgJiYgaW5kZXggPT09IHRvdGFsIC0xICkgKSB7XG5cdCAgICAgICAgICAgIHNsaWRlRGlyZWN0aW9uID0gc2VsZltkaXJlY3Rpb25dID0gbGVmdDsgLy8gbmV4dFxuXHQgICAgICAgICAgfSBlbHNlIGlmICAoIChhY3RpdmVJbmRpY2F0b3IgPiBpbmRleCkgfHwgKGFjdGl2ZUluZGljYXRvciA9PT0gdG90YWwgLSAxICYmIGluZGV4ID09PSAwICkgKSB7XG5cdCAgICAgICAgICAgIHNsaWRlRGlyZWN0aW9uID0gc2VsZltkaXJlY3Rpb25dID0gcmlnaHQ7IC8vIHByZXZcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9IGVsc2UgeyByZXR1cm4gZmFsc2U7IH1cblx0ICBcblx0ICAgICAgICBzZWxmLnNsaWRlVG8oIGluZGV4ICk7IC8vRG8gdGhlIHNsaWRlXG5cdCAgICAgIH0sXG5cdCAgICAgIGNvbnRyb2xzSGFuZGxlciA9IGZ1bmN0aW9uIChlKSB7XG5cdCAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHQgICAgICAgIGlmIChpc1NsaWRpbmcpIHJldHVybjtcblx0ICBcblx0ICAgICAgICB2YXIgZXZlbnRUYXJnZXQgPSBlLmN1cnJlbnRUYXJnZXQgfHwgZS5zcmNFbGVtZW50O1xuXHQgIFxuXHQgICAgICAgIGlmICggZXZlbnRUYXJnZXQgPT09IHJpZ2h0QXJyb3cgKSB7XG5cdCAgICAgICAgICBpbmRleCsrO1xuXHQgICAgICAgICAgc2xpZGVEaXJlY3Rpb24gPSBzZWxmW2RpcmVjdGlvbl0gPSBsZWZ0OyAvL3NldCBkaXJlY3Rpb24gZmlyc3Rcblx0ICBcblx0ICAgICAgICAgIGlmKCBpbmRleCA9PT0gdG90YWwgLSAxICkge1xuXHQgICAgICAgICAgICBpbmRleCA9IHRvdGFsIC0gMTtcblx0ICAgICAgICAgIH0gZWxzZSBpZiAoIGluZGV4ID09PSB0b3RhbCApe1xuXHQgICAgICAgICAgICBpbmRleCA9IDA7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfSBlbHNlIGlmICggZXZlbnRUYXJnZXQgPT09IGxlZnRBcnJvdyApIHtcblx0ICAgICAgICAgIGluZGV4LS07XG5cdCAgICAgICAgICBzbGlkZURpcmVjdGlvbiA9IHNlbGZbZGlyZWN0aW9uXSA9IHJpZ2h0OyAvL3NldCBkaXJlY3Rpb24gZmlyc3Rcblx0ICBcblx0ICAgICAgICAgIGlmKCBpbmRleCA9PT0gMCApIHtcblx0ICAgICAgICAgICAgaW5kZXggPSAwO1xuXHQgICAgICAgICAgfSBlbHNlIGlmICggaW5kZXggPCAwICl7XG5cdCAgICAgICAgICAgIGluZGV4ID0gdG90YWwgLSAxXG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgIFxuXHQgICAgICAgIHNlbGYuc2xpZGVUbyggaW5kZXggKTsgLy9EbyB0aGUgc2xpZGVcblx0ICAgICAgfSxcblx0ICAgICAga2V5SGFuZGxlciA9IGZ1bmN0aW9uIChlKSB7XG5cdCAgICAgICAgaWYgKGlzU2xpZGluZykgcmV0dXJuO1xuXHQgICAgICAgIHN3aXRjaCAoZS53aGljaCkge1xuXHQgICAgICAgICAgY2FzZSAzOTpcblx0ICAgICAgICAgICAgaW5kZXgrKztcblx0ICAgICAgICAgICAgc2xpZGVEaXJlY3Rpb24gPSBzZWxmW2RpcmVjdGlvbl0gPSBsZWZ0O1xuXHQgICAgICAgICAgICBpZiggaW5kZXggPT0gdG90YWwgLSAxICkgeyBpbmRleCA9IHRvdGFsIC0gMTsgfSBlbHNlXG5cdCAgICAgICAgICAgIGlmICggaW5kZXggPT0gdG90YWwgKXsgaW5kZXggPSAwIH1cblx0ICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICBjYXNlIDM3OlxuXHQgICAgICAgICAgICBpbmRleC0tO1xuXHQgICAgICAgICAgICBzbGlkZURpcmVjdGlvbiA9IHNlbGZbZGlyZWN0aW9uXSA9IHJpZ2h0O1xuXHQgICAgICAgICAgICBpZiAoIGluZGV4ID09IDAgKSB7IGluZGV4ID0gMDsgfSBlbHNlXG5cdCAgICAgICAgICAgIGlmICggaW5kZXggPCAwICkgeyBpbmRleCA9IHRvdGFsIC0gMSB9XG5cdCAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgZGVmYXVsdDogcmV0dXJuO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBzZWxmLnNsaWRlVG8oIGluZGV4ICk7IC8vRG8gdGhlIHNsaWRlXG5cdCAgICAgIH0sXG5cdCAgICAgIC8vIHByaXZhdGUgbWV0aG9kc1xuXHQgICAgICBzZXRBY3RpdmVQYWdlID0gZnVuY3Rpb24oIHBhZ2VJbmRleCApIHsgLy9pbmRpY2F0b3JzXG5cdCAgICAgICAgZm9yICggdmFyIGkgPSAwLCBpY2wgPSBpbmRpY2F0b3JzW2xlbmd0aF07IGkgPCBpY2w7IGkrKyApIHtcblx0ICAgICAgICAgIHJlbW92ZUNsYXNzKGluZGljYXRvcnNbaV0sYWN0aXZlKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKGluZGljYXRvcnNbcGFnZUluZGV4XSkgYWRkQ2xhc3MoaW5kaWNhdG9yc1twYWdlSW5kZXhdLCBhY3RpdmUpO1xuXHQgICAgICB9O1xuXHQgIFxuXHQgIFxuXHQgICAgLy8gcHVibGljIG1ldGhvZHNcblx0ICAgIHRoaXMuY3ljbGUgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgc2xpZGVEaXJlY3Rpb24gPSB0aGlzW2RpcmVjdGlvbl0gPSBsZWZ0OyAvLyBtYWtlIHN1cmUgdG8gYWx3YXlzIGNvbWUgYmFjayB0byBkZWZhdWx0IHNsaWRlRGlyZWN0aW9uXG5cdCAgICAgIHRpbWVyID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgaW5kZXgrKztcblx0ICBcblx0ICAgICAgICBpbmRleCA9IGluZGV4ID09PSB0b3RhbCA/IDAgOiBpbmRleDtcblx0ICAgICAgICBzZWxmLnNsaWRlVG8oIGluZGV4ICk7XG5cdCAgICAgIH0sIHRoaXNbaW50ZXJ2YWxdKTtcblx0ICAgIH07XG5cdCAgICB0aGlzLnNsaWRlVG8gPSBmdW5jdGlvbiggbmV4dCApIHtcblx0ICAgICAgdmFyIGFjdGl2ZUl0ZW0gPSB0aGlzLmdldEFjdGl2ZUluZGV4KCksIC8vIHRoZSBjdXJyZW50IGFjdGl2ZVxuXHQgICAgICAgICAgb3JpZW50YXRpb24gPSBzbGlkZURpcmVjdGlvbiA9PT0gbGVmdCA/ICduZXh0JyA6ICdwcmV2JzsgLy9kZXRlcm1pbmUgdHlwZVxuXHQgIFxuXHQgICAgICBib290c3RyYXBDdXN0b21FdmVudC5jYWxsKGVsZW1lbnQsIHNsaWRlRXZlbnQsIGNvbXBvbmVudCwgc2xpZGVzW25leHRdKTsgLy8gaGVyZSB3ZSBnbyB3aXRoIHRoZSBzbGlkZVxuXHQgIFxuXHQgICAgICBpc1NsaWRpbmcgPSB0aGlzLmlzU2xpZGluZyA9IHRydWU7XG5cdCAgICAgIGNsZWFySW50ZXJ2YWwodGltZXIpO1xuXHQgICAgICBzZXRBY3RpdmVQYWdlKCBuZXh0ICk7XG5cdCAgXG5cdCAgICAgIGlmICggc3VwcG9ydFRyYW5zaXRpb25zICYmIGhhc0NsYXNzKGVsZW1lbnQsJ3NsaWRlJykgKSB7XG5cdCAgICAgICAgYWRkQ2xhc3Moc2xpZGVzW25leHRdLG9yaWVudGF0aW9uKTtcblx0ICAgICAgICBzbGlkZXNbbmV4dF1bb2Zmc2V0V2lkdGhdOyAgXG5cdCAgICAgICAgYWRkQ2xhc3Moc2xpZGVzW25leHRdLHNsaWRlRGlyZWN0aW9uKTtcblx0ICAgICAgICBhZGRDbGFzcyhzbGlkZXNbYWN0aXZlSXRlbV0sc2xpZGVEaXJlY3Rpb24pO1xuXHQgIFxuXHQgICAgICAgIG9uZShzbGlkZXNbbmV4dF0sIHRyYW5zaXRpb25FbmRFdmVudCwgZnVuY3Rpb24oKSB7IC8vd2UncmUgZ29ubmEgZmFrZSB3YWl0aW5nIGZvciB0aGUgYW5pbWF0aW9uIHRvIGZpbmlzaCwgY2xlYW5lciBhbmQgYmV0dGVyXG5cdCAgICAgICAgICBpc1NsaWRpbmcgPSBzZWxmLmlzU2xpZGluZyA9IGZhbHNlO1xuXHQgIFxuXHQgICAgICAgICAgYWRkQ2xhc3Moc2xpZGVzW25leHRdLGFjdGl2ZSk7XG5cdCAgICAgICAgICByZW1vdmVDbGFzcyhzbGlkZXNbYWN0aXZlSXRlbV0sYWN0aXZlKTtcblx0ICBcblx0ICAgICAgICAgIHJlbW92ZUNsYXNzKHNsaWRlc1tuZXh0XSxvcmllbnRhdGlvbik7XG5cdCAgICAgICAgICByZW1vdmVDbGFzcyhzbGlkZXNbbmV4dF0sc2xpZGVEaXJlY3Rpb24pO1xuXHQgICAgICAgICAgcmVtb3ZlQ2xhc3Moc2xpZGVzW2FjdGl2ZUl0ZW1dLHNsaWRlRGlyZWN0aW9uKTtcblx0ICBcblx0ICAgICAgICAgIGlmICggc2VsZltpbnRlcnZhbF0gJiYgIWhhc0NsYXNzKGVsZW1lbnQscGF1c2VkKSApIHtcblx0ICAgICAgICAgICAgc2VsZi5jeWNsZSgpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgYm9vdHN0cmFwQ3VzdG9tRXZlbnQuY2FsbChlbGVtZW50LCBzbGlkRXZlbnQsIGNvbXBvbmVudCwgc2xpZGVzW25leHRdKTsgLy8gaGVyZSB3ZSBnbyB3aXRoIHRoZSBzbGlkIGV2ZW50XG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgXG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgYWRkQ2xhc3Moc2xpZGVzW25leHRdLGFjdGl2ZSk7XG5cdCAgICAgICAgc2xpZGVzW25leHRdW29mZnNldFdpZHRoXTtcblx0ICAgICAgICByZW1vdmVDbGFzcyhzbGlkZXNbYWN0aXZlSXRlbV0sYWN0aXZlKTtcblx0ICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHQgICAgICAgICAgaXNTbGlkaW5nID0gZmFsc2U7XG5cdCAgICAgICAgICBpZiAoIHNlbGZbaW50ZXJ2YWxdICYmICFoYXNDbGFzcyhlbGVtZW50LHBhdXNlZCkgKSB7XG5cdCAgICAgICAgICAgIHNlbGYuY3ljbGUoKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIGJvb3RzdHJhcEN1c3RvbUV2ZW50LmNhbGwoZWxlbWVudCwgc2xpZEV2ZW50LCBjb21wb25lbnQsIHNsaWRlc1tuZXh0XSk7IC8vIGhlcmUgd2UgZ28gd2l0aCB0aGUgc2xpZCBldmVudFxuXHQgICAgICAgIH0sIDEwMCApO1xuXHQgICAgICB9XG5cdCAgICB9O1xuXHQgICAgdGhpcy5nZXRBY3RpdmVJbmRleCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgcmV0dXJuIHNsaWRlc1tpbmRleE9mXShnZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGVsZW1lbnQsJ2l0ZW0gYWN0aXZlJylbMF0pIHx8IDA7XG5cdCAgICB9O1xuXHQgIFxuXHQgICAgLy8gaW5pdFxuXHQgICAgaWYgKCAhKHN0cmluZ0Nhcm91c2VsIGluIGVsZW1lbnQgKSApIHsgLy8gcHJldmVudCBhZGRpbmcgZXZlbnQgaGFuZGxlcnMgdHdpY2Vcblx0ICBcblx0ICAgICAgaWYgKCB0aGlzW3BhdXNlXSAmJiB0aGlzW2ludGVydmFsXSApIHtcblx0ICAgICAgICBvbiggZWxlbWVudCwgbW91c2VIb3ZlclswXSwgcGF1c2VIYW5kbGVyICk7XG5cdCAgICAgICAgb24oIGVsZW1lbnQsIG1vdXNlSG92ZXJbMV0sIHJlc3VtZUhhbmRsZXIgKTtcblx0ICAgICAgICBvbiggZWxlbWVudCwgJ3RvdWNoc3RhcnQnLCBwYXVzZUhhbmRsZXIgKTtcblx0ICAgICAgICBvbiggZWxlbWVudCwgJ3RvdWNoZW5kJywgcmVzdW1lSGFuZGxlciApO1xuXHQgICAgICB9XG5cdCAgICBcblx0ICAgICAgcmlnaHRBcnJvdyAmJiBvbiggcmlnaHRBcnJvdywgY2xpY2tFdmVudCwgY29udHJvbHNIYW5kbGVyICk7XG5cdCAgICAgIGxlZnRBcnJvdyAmJiBvbiggbGVmdEFycm93LCBjbGlja0V2ZW50LCBjb250cm9sc0hhbmRsZXIgKTtcblx0ICAgIFxuXHQgICAgICBpbmRpY2F0b3IgJiYgb24oIGluZGljYXRvciwgY2xpY2tFdmVudCwgaW5kaWNhdG9ySGFuZGxlciwgZmFsc2UpO1xuXHQgICAgICB0aGlzW2tleWJvYXJkXSA9PT0gdHJ1ZSAmJiBvbiggZ2xvYmFsT2JqZWN0LCBrZXlkb3duRXZlbnQsIGtleUhhbmRsZXIsIGZhbHNlKTtcblx0ICBcblx0ICAgIH1cblx0ICAgIGlmICh0aGlzLmdldEFjdGl2ZUluZGV4KCk8MCkge1xuXHQgICAgICBzbGlkZXNbbGVuZ3RoXSAmJiBhZGRDbGFzcyhzbGlkZXNbMF0sYWN0aXZlKTtcblx0ICAgICAgaW5kaWNhdG9yc1tsZW5ndGhdICYmIHNldEFjdGl2ZVBhZ2UoMCk7XG5cdCAgICB9XG5cdCAgXG5cdCAgICBpZiAoIHRoaXNbaW50ZXJ2YWxdICl7IHRoaXMuY3ljbGUoKTsgfVxuXHQgICAgZWxlbWVudFtzdHJpbmdDYXJvdXNlbF0gPSB0aGlzO1xuXHQgIH07XG5cdCAgXG5cdCAgLy8gQ0FST1VTRUwgREFUQSBBUElcblx0ICAvLyA9PT09PT09PT09PT09PT09PVxuXHQgIGluaXRpYWxpemVEYXRhQVBJKCBzdHJpbmdDYXJvdXNlbCwgQ2Fyb3VzZWwsIGRhdGFSaWRlICk7XG5cdCAgXG5cdCAgXG5cdCAgLyogTmF0aXZlIEphdmFzY3JpcHQgZm9yIEJvb3RzdHJhcCAzIHwgQ29sbGFwc2Vcblx0ICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cdCAgXG5cdCAgLy8gQ09MTEFQU0UgREVGSU5JVElPTlxuXHQgIC8vID09PT09PT09PT09PT09PT09PT1cblx0ICB2YXIgQ29sbGFwc2UgPSBmdW5jdGlvbiggZWxlbWVudCwgb3B0aW9ucyApIHtcblx0ICBcblx0ICAgIC8vIGluaXRpYWxpemF0aW9uIGVsZW1lbnRcblx0ICAgIGVsZW1lbnQgPSBxdWVyeUVsZW1lbnQoZWxlbWVudCk7XG5cdCAgXG5cdCAgICAvLyBzZXQgb3B0aW9uc1xuXHQgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cdCAgXG5cdCAgXG5cdCAgICAvLyBldmVudCB0YXJnZXRzIGFuZCBjb25zdGFudHNcblx0ICAgIHZhciBhY2NvcmRpb24gPSBudWxsLCBjb2xsYXBzZSA9IG51bGwsIHNlbGYgPSB0aGlzLCBcblx0ICAgICAgaXNBbmltYXRpbmcgPSBmYWxzZSwgLy8gd2hlbiB0cnVlIGl0IHdpbGwgcHJldmVudCBjbGljayBoYW5kbGVyc1xuXHQgICAgICBhY2NvcmRpb25EYXRhID0gZWxlbWVudFtnZXRBdHRyaWJ1dGVdKCdkYXRhLXBhcmVudCcpLFxuXHQgIFxuXHQgICAgICAvLyBjb21wb25lbnQgc3RyaW5nc1xuXHQgICAgICBjb21wb25lbnQgPSAnY29sbGFwc2UnLFxuXHQgICAgICBjb2xsYXBzZWQgPSAnY29sbGFwc2VkJyxcblx0ICBcblx0ICAgICAgLy8gcHJpdmF0ZSBtZXRob2RzXG5cdCAgICAgIG9wZW5BY3Rpb24gPSBmdW5jdGlvbihjb2xsYXBzZUVsZW1lbnQpIHtcblx0ICAgICAgICBib290c3RyYXBDdXN0b21FdmVudC5jYWxsKGNvbGxhcHNlRWxlbWVudCwgc2hvd0V2ZW50LCBjb21wb25lbnQpO1xuXHQgICAgICAgIGlzQW5pbWF0aW5nID0gdHJ1ZTtcblx0ICAgICAgICBhZGRDbGFzcyhjb2xsYXBzZUVsZW1lbnQsY29sbGFwc2luZyk7XG5cdCAgICAgICAgYWRkQ2xhc3MoY29sbGFwc2VFbGVtZW50LGluQ2xhc3MpO1xuXHQgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgICBjb2xsYXBzZUVsZW1lbnRbc3R5bGVdW2hlaWdodF0gPSBnZXRNYXhIZWlnaHQoY29sbGFwc2VFbGVtZW50KSArICdweCc7XG5cdCAgICAgICAgfSwgMCk7XG5cdCAgXG5cdCAgICAgICAgZW11bGF0ZVRyYW5zaXRpb25FbmQoY29sbGFwc2VFbGVtZW50LCBmdW5jdGlvbigpIHtcblx0ICAgICAgICAgIHJlbW92ZUNsYXNzKGNvbGxhcHNlRWxlbWVudCxjb2xsYXBzaW5nKTtcblx0ICAgICAgICAgIGNvbGxhcHNlRWxlbWVudFtzdHlsZV1baGVpZ2h0XSA9ICcnO1xuXHQgICAgICAgICAgaXNBbmltYXRpbmcgPSBmYWxzZTtcblx0ICAgICAgICAgIGNvbGxhcHNlRWxlbWVudFtzZXRBdHRyaWJ1dGVdKGFyaWFFeHBhbmRlZCwndHJ1ZScpO1xuXHQgICAgICAgICAgYm9vdHN0cmFwQ3VzdG9tRXZlbnQuY2FsbChjb2xsYXBzZUVsZW1lbnQsIHNob3duRXZlbnQsIGNvbXBvbmVudCk7XG5cdCAgICAgICAgfSk7XG5cdCAgICAgIH0sXG5cdCAgICAgIGNsb3NlQWN0aW9uID0gZnVuY3Rpb24oY29sbGFwc2VFbGVtZW50KSB7XG5cdCAgICAgICAgYm9vdHN0cmFwQ3VzdG9tRXZlbnQuY2FsbChjb2xsYXBzZUVsZW1lbnQsIGhpZGVFdmVudCwgY29tcG9uZW50KTtcblx0ICAgICAgICBpc0FuaW1hdGluZyA9IHRydWU7XG5cdCAgICAgICAgY29sbGFwc2VFbGVtZW50W3N0eWxlXVtoZWlnaHRdID0gZ2V0TWF4SGVpZ2h0KGNvbGxhcHNlRWxlbWVudCkgKyAncHgnO1xuXHQgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgICBhZGRDbGFzcyhjb2xsYXBzZUVsZW1lbnQsY29sbGFwc2luZyk7XG5cdCAgICAgICAgICBjb2xsYXBzZUVsZW1lbnRbc3R5bGVdW2hlaWdodF0gPSAnMHB4Jztcblx0ICAgICAgICB9LCAwKTtcblx0ICBcblx0ICAgICAgICBlbXVsYXRlVHJhbnNpdGlvbkVuZChjb2xsYXBzZUVsZW1lbnQsIGZ1bmN0aW9uKCkge1xuXHQgICAgICAgICAgcmVtb3ZlQ2xhc3MoY29sbGFwc2VFbGVtZW50LGNvbGxhcHNpbmcpO1xuXHQgICAgICAgICAgcmVtb3ZlQ2xhc3MoY29sbGFwc2VFbGVtZW50LGluQ2xhc3MpO1xuXHQgICAgICAgICAgY29sbGFwc2VFbGVtZW50W3N0eWxlXVtoZWlnaHRdID0gJyc7XG5cdCAgICAgICAgICBpc0FuaW1hdGluZyA9IGZhbHNlO1xuXHQgICAgICAgICAgY29sbGFwc2VFbGVtZW50W3NldEF0dHJpYnV0ZV0oYXJpYUV4cGFuZGVkLCdmYWxzZScpO1xuXHQgICAgICAgICAgYm9vdHN0cmFwQ3VzdG9tRXZlbnQuY2FsbChjb2xsYXBzZUVsZW1lbnQsIGhpZGRlbkV2ZW50LCBjb21wb25lbnQpO1xuXHQgICAgICAgIH0pO1xuXHQgICAgICB9LFxuXHQgICAgICBnZXRUYXJnZXQgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgICB2YXIgaHJlZiA9IGVsZW1lbnQuaHJlZiAmJiBlbGVtZW50W2dldEF0dHJpYnV0ZV0oJ2hyZWYnKSxcblx0ICAgICAgICAgIHBhcmVudCA9IGVsZW1lbnRbZ2V0QXR0cmlidXRlXShkYXRhVGFyZ2V0KSxcblx0ICAgICAgICAgIGlkID0gaHJlZiB8fCAoIHBhcmVudCAmJiAvIy8udGVzdChwYXJlbnQpICkgJiYgcGFyZW50O1xuXHQgICAgICAgIHJldHVybiBpZCAmJiBxdWVyeUVsZW1lbnQoaWQpO1xuXHQgICAgICB9O1xuXHQgICAgXG5cdCAgICAvLyBwdWJsaWMgbWV0aG9kc1xuXHQgICAgdGhpcy50b2dnbGUgPSBmdW5jdGlvbihlKSB7XG5cdCAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblx0ICAgICAgaWYgKGlzQW5pbWF0aW5nKSByZXR1cm47XG5cdCAgICAgIGlmICghaGFzQ2xhc3MoY29sbGFwc2UsaW5DbGFzcykpIHsgc2VsZi5zaG93KCk7IH0gXG5cdCAgICAgIGVsc2UgeyBzZWxmLmhpZGUoKTsgfVxuXHQgICAgfTtcblx0ICAgIHRoaXMuaGlkZSA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICBjbG9zZUFjdGlvbihjb2xsYXBzZSk7XG5cdCAgICAgIGFkZENsYXNzKGVsZW1lbnQsY29sbGFwc2VkKTtcblx0ICAgIH07XG5cdCAgICB0aGlzLnNob3cgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgb3BlbkFjdGlvbihjb2xsYXBzZSk7XG5cdCAgICAgIHJlbW92ZUNsYXNzKGVsZW1lbnQsY29sbGFwc2VkKTtcblx0ICBcblx0ICAgICAgaWYgKCBhY2NvcmRpb24gIT09IG51bGwgKSB7XG5cdCAgICAgICAgdmFyIGFjdGl2ZUNvbGxhcHNlcyA9IGdldEVsZW1lbnRzQnlDbGFzc05hbWUoYWNjb3JkaW9uLGNvbXBvbmVudCsnICcraW5DbGFzcyk7XG5cdCAgICAgICAgZm9yICh2YXIgaT0wLCBhbD1hY3RpdmVDb2xsYXBzZXNbbGVuZ3RoXTsgaTxhbDsgaSsrKSB7XG5cdCAgICAgICAgICBpZiAoIGFjdGl2ZUNvbGxhcHNlc1tpXSAhPT0gY29sbGFwc2UpIGNsb3NlQWN0aW9uKGFjdGl2ZUNvbGxhcHNlc1tpXSk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9O1xuXHQgIFxuXHQgICAgLy8gaW5pdFxuXHQgICAgaWYgKCAhKHN0cmluZ0NvbGxhcHNlIGluIGVsZW1lbnQgKSApIHsgLy8gcHJldmVudCBhZGRpbmcgZXZlbnQgaGFuZGxlcnMgdHdpY2Vcblx0ICAgICAgb24oZWxlbWVudCwgY2xpY2tFdmVudCwgdGhpcy50b2dnbGUpO1xuXHQgICAgfVxuXHQgICAgY29sbGFwc2UgPSBnZXRUYXJnZXQoKTtcblx0ICAgIGFjY29yZGlvbiA9IHF1ZXJ5RWxlbWVudChvcHRpb25zLnBhcmVudCkgfHwgYWNjb3JkaW9uRGF0YSAmJiBnZXRDbG9zZXN0KGVsZW1lbnQsIGFjY29yZGlvbkRhdGEpO1xuXHQgICAgZWxlbWVudFtzdHJpbmdDb2xsYXBzZV0gPSB0aGlzO1xuXHQgIH07XG5cdCAgXG5cdCAgLy8gQ09MTEFQU0UgREFUQSBBUElcblx0ICAvLyA9PT09PT09PT09PT09PT09PVxuXHQgIGluaXRpYWxpemVEYXRhQVBJKHN0cmluZ0NvbGxhcHNlLCBDb2xsYXBzZSwgZGF0YVRvZ2dsZSk7XG5cdCAgXG5cdCAgXG5cdCAgLyogTmF0aXZlIEphdmFzY3JpcHQgZm9yIEJvb3RzdHJhcCAzIHwgRHJvcGRvd25cblx0ICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblx0ICBcblx0ICAvLyBEUk9QRE9XTiBERUZJTklUSU9OXG5cdCAgLy8gPT09PT09PT09PT09PT09PT09PVxuXHQgIHZhciBEcm9wZG93biA9IGZ1bmN0aW9uKCBlbGVtZW50LCBvcHRpb24gKSB7XG5cdCAgICAgIFxuXHQgICAgLy8gaW5pdGlhbGl6YXRpb24gZWxlbWVudFxuXHQgICAgZWxlbWVudCA9IHF1ZXJ5RWxlbWVudChlbGVtZW50KTtcblx0ICBcblx0ICAgIC8vIHNldCBvcHRpb25cblx0ICAgIHRoaXMucGVyc2lzdCA9IG9wdGlvbiA9PT0gdHJ1ZSB8fCBlbGVtZW50W2dldEF0dHJpYnV0ZV0oJ2RhdGEtcGVyc2lzdCcpID09PSAndHJ1ZScgfHwgZmFsc2U7XG5cdCAgXG5cdCAgICAvLyBjb25zdGFudHMsIGV2ZW50IHRhcmdldHMsIHN0cmluZ3Ncblx0ICAgIHZhciBzZWxmID0gdGhpcywgaXNPcGVuID0gZmFsc2UsXG5cdCAgICAgIHBhcmVudCA9IGVsZW1lbnRbcGFyZW50Tm9kZV0sXG5cdCAgICAgIGNvbXBvbmVudCA9ICdkcm9wZG93bicsIG9wZW4gPSAnb3BlbicsXG5cdCAgICAgIHJlbGF0ZWRUYXJnZXQgPSBudWxsLFxuXHQgICAgICBtZW51ID0gcXVlcnlFbGVtZW50KCcuZHJvcGRvd24tbWVudScsIHBhcmVudCksXG5cdCAgICAgIGNoaWxkcmVuID0gbm9kZUxpc3RUb0FycmF5KCBtZW51W2dldEVsZW1lbnRzQnlUYWdOYW1lXSgnKicpKSxcblx0ICBcblx0ICAgICAgLy8gaGFuZGxlcnNcblx0ICAgICAga2V5SGFuZGxlciA9IGZ1bmN0aW9uKGUpIHtcblx0ICAgICAgICBpZiAoaXNPcGVuICYmIChlLndoaWNoID09IDI3IHx8IGUua2V5Q29kZSA9PSAyNykpIHsgcmVsYXRlZFRhcmdldCA9IG51bGw7IGhpZGUoKTsgfSAvLyBlLmtleUNvZGUgZm9yIElFOFxuXHQgICAgICB9LFxuXHQgICAgICBjbGlja0hhbmRsZXIgPSBmdW5jdGlvbihlKSB7XG5cdCAgICAgICAgdmFyIGV2ZW50VGFyZ2V0ID0gZVt0YXJnZXRdLCBoYXNEYXRhO1xuXHQgICAgICAgIGhhc0RhdGEgPSAoIGV2ZW50VGFyZ2V0Lm5vZGVUeXBlICE9PSAxICYmIChldmVudFRhcmdldFtnZXRBdHRyaWJ1dGVdKGRhdGFUb2dnbGUpIHx8IGV2ZW50VGFyZ2V0W3BhcmVudE5vZGVdW2dldEF0dHJpYnV0ZV0oZGF0YVRvZ2dsZSkpICk7XG5cdCAgICAgICAgaWYgKCBldmVudFRhcmdldCA9PT0gZWxlbWVudCB8fCBldmVudFRhcmdldCA9PT0gcGFyZW50IHx8IGV2ZW50VGFyZ2V0W3BhcmVudE5vZGVdID09PSBlbGVtZW50ICkge1xuXHQgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOyAvLyBjb21tZW50IHRoaXMgbGluZSB0byBzdG9wIHByZXZlbnRpbmcgbmF2aWdhdGlvbiB3aGVuIGNsaWNrIHRhcmdldCBpcyBhIGxpbmsgXG5cdCAgICAgICAgICByZWxhdGVkVGFyZ2V0ID0gZWxlbWVudDtcblx0ICAgICAgICAgIHNlbGYudG9nZ2xlKCk7XG5cdCAgICAgICAgfSBlbHNlIGlmICggaXNPcGVuICkge1xuXHQgICAgICAgICAgaWYgKCAoZXZlbnRUYXJnZXQgPT09IG1lbnUgfHwgY2hpbGRyZW4gJiYgY2hpbGRyZW5baW5kZXhPZl0oZXZlbnRUYXJnZXQpID4gLTEpICYmICggc2VsZi5wZXJzaXN0IHx8IGhhc0RhdGEgKSApIHtcblx0ICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgICAgfSBlbHNlIHsgcmVsYXRlZFRhcmdldCA9IG51bGw7IGhpZGUoKTsgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICAoL1xcIyQvLnRlc3QoZXZlbnRUYXJnZXQuaHJlZikgfHwgZXZlbnRUYXJnZXRbcGFyZW50Tm9kZV0gJiYgL1xcIyQvLnRlc3QoZXZlbnRUYXJnZXRbcGFyZW50Tm9kZV0uaHJlZikpICYmIGUucHJldmVudERlZmF1bHQoKTsgLy8gc2hvdWxkIGJlIGhlcmUgdG8gcHJldmVudCBqdW1wc1xuXHQgICAgICB9LFxuXHQgICAgICAvLyBwcml2YXRlIG1ldGhvZHNcblx0ICAgICAgc2hvdyA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIGJvb3RzdHJhcEN1c3RvbUV2ZW50LmNhbGwocGFyZW50LCBzaG93RXZlbnQsIGNvbXBvbmVudCwgcmVsYXRlZFRhcmdldCk7XG5cdCAgICAgICAgYWRkQ2xhc3MocGFyZW50LG9wZW4pO1xuXHQgICAgICAgIG1lbnVbc2V0QXR0cmlidXRlXShhcmlhRXhwYW5kZWQsdHJ1ZSk7XG5cdCAgICAgICAgYm9vdHN0cmFwQ3VzdG9tRXZlbnQuY2FsbChwYXJlbnQsIHNob3duRXZlbnQsIGNvbXBvbmVudCwgcmVsYXRlZFRhcmdldCk7XG5cdCAgICAgICAgb24oZG9jdW1lbnQsIGtleWRvd25FdmVudCwga2V5SGFuZGxlcik7XG5cdCAgICAgICAgaXNPcGVuID0gdHJ1ZTtcblx0ICAgICAgfSxcblx0ICAgICAgaGlkZSA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIGJvb3RzdHJhcEN1c3RvbUV2ZW50LmNhbGwocGFyZW50LCBoaWRlRXZlbnQsIGNvbXBvbmVudCwgcmVsYXRlZFRhcmdldCk7XG5cdCAgICAgICAgcmVtb3ZlQ2xhc3MocGFyZW50LG9wZW4pO1xuXHQgICAgICAgIG1lbnVbc2V0QXR0cmlidXRlXShhcmlhRXhwYW5kZWQsZmFsc2UpO1xuXHQgICAgICAgIGJvb3RzdHJhcEN1c3RvbUV2ZW50LmNhbGwocGFyZW50LCBoaWRkZW5FdmVudCwgY29tcG9uZW50LCByZWxhdGVkVGFyZ2V0KTtcblx0ICAgICAgICBvZmYoZG9jdW1lbnQsIGtleWRvd25FdmVudCwga2V5SGFuZGxlcik7XG5cdCAgICAgICAgaXNPcGVuID0gZmFsc2U7XG5cdCAgICAgIH07XG5cdCAgXG5cdCAgICAvLyBwdWJsaWMgbWV0aG9kc1xuXHQgICAgdGhpcy50b2dnbGUgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgaWYgKGhhc0NsYXNzKHBhcmVudCxvcGVuKSAmJiBpc09wZW4pIHsgaGlkZSgpOyB9IFxuXHQgICAgICBlbHNlIHsgc2hvdygpOyB9XG5cdCAgICB9O1xuXHQgIFxuXHQgICAgLy8gaW5pdFxuXHQgICAgaWYgKCAhKHN0cmluZ0Ryb3Bkb3duIGluIGVsZW1lbnQpICkgeyAvLyBwcmV2ZW50IGFkZGluZyBldmVudCBoYW5kbGVycyB0d2ljZVxuXHQgICAgICBtZW51W3NldEF0dHJpYnV0ZV0oJ3RhYmluZGV4JywgJzAnKTsgLy8gRml4IG9uYmx1ciBvbiBDaHJvbWUgfCBTYWZhcmlcblx0ICAgICAgb24oZG9jdW1lbnQsIGNsaWNrRXZlbnQsIGNsaWNrSGFuZGxlcik7XG5cdCAgICB9XG5cdCAgICBlbGVtZW50W3N0cmluZ0Ryb3Bkb3duXSA9IHRoaXM7XG5cdCAgfTtcblx0ICBcblx0ICAvLyBEUk9QRE9XTiBEQVRBIEFQSVxuXHQgIC8vID09PT09PT09PT09PT09PT09XG5cdCAgaW5pdGlhbGl6ZURhdGFBUEkoIHN0cmluZ0Ryb3Bkb3duLCBEcm9wZG93biwgZGF0YVRvZ2dsZSApO1xuXHQgIFxuXHQgIFxuXHQgIC8qIE5hdGl2ZSBKYXZhc2NyaXB0IGZvciBCb290c3RyYXAgMyB8IE1vZGFsXG5cdCAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cdCAgICBcblx0ICAvLyBNT0RBTCBERUZJTklUSU9OXG5cdCAgLy8gPT09PT09PT09PT09PT09XG5cdCAgdmFyIE1vZGFsID0gZnVuY3Rpb24oZWxlbWVudCwgb3B0aW9ucykgeyAvLyBlbGVtZW50IGNhbiBiZSB0aGUgbW9kYWwvdHJpZ2dlcmluZyBidXR0b25cblx0ICBcblx0ICAgIC8vIHRoZSBtb2RhbCAoYm90aCBKYXZhU2NyaXB0IC8gREFUQSBBUEkgaW5pdCkgLyB0cmlnZ2VyaW5nIGJ1dHRvbiBlbGVtZW50IChEQVRBIEFQSSlcblx0ICAgIGVsZW1lbnQgPSBxdWVyeUVsZW1lbnQoZWxlbWVudCk7XG5cdCAgXG5cdCAgICAvLyBkZXRlcm1pbmUgbW9kYWwsIHRyaWdnZXJpbmcgZWxlbWVudCBcblx0ICAgIHZhciBidG5DaGVjayA9IGVsZW1lbnRbZ2V0QXR0cmlidXRlXShkYXRhVGFyZ2V0KXx8ZWxlbWVudFtnZXRBdHRyaWJ1dGVdKCdocmVmJyksXG5cdCAgICAgIGNoZWNrTW9kYWwgPSBxdWVyeUVsZW1lbnQoIGJ0bkNoZWNrICksXG5cdCAgICAgIG1vZGFsID0gaGFzQ2xhc3MoZWxlbWVudCwnbW9kYWwnKSA/IGVsZW1lbnQgOiBjaGVja01vZGFsLFxuXHQgIFxuXHQgICAgICAvLyBzdHJpbmdzXG5cdCAgICAgIGNvbXBvbmVudCA9ICdtb2RhbCcsXG5cdCAgICAgIHN0YXRpY1N0cmluZyA9ICdzdGF0aWMnLFxuXHQgICAgICBwYWRkaW5nTGVmdCA9ICdwYWRkaW5nTGVmdCcsXG5cdCAgICAgIHBhZGRpbmdSaWdodCA9ICdwYWRkaW5nUmlnaHQnLFxuXHQgICAgICBtb2RhbEJhY2tkcm9wU3RyaW5nID0gJ21vZGFsLWJhY2tkcm9wJztcblx0ICBcblx0ICAgIGlmICggaGFzQ2xhc3MoZWxlbWVudCwnbW9kYWwnKSApIHsgZWxlbWVudCA9IG51bGw7IH0gLy8gbW9kYWwgaXMgbm93IGluZGVwZW5kZW50IG9mIGl0J3MgdHJpZ2dlcmluZyBlbGVtZW50XG5cdCAgXG5cdCAgICBpZiAoICFtb2RhbCApIHsgcmV0dXJuOyB9IC8vIGludmFsaWRhdGVcblx0ICBcblx0ICAgIC8vIHNldCBvcHRpb25zXG5cdCAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblx0ICBcblx0ICAgIHRoaXNba2V5Ym9hcmRdID0gb3B0aW9uc1trZXlib2FyZF0gPT09IGZhbHNlIHx8IG1vZGFsW2dldEF0dHJpYnV0ZV0oZGF0YUtleWJvYXJkKSA9PT0gJ2ZhbHNlJyA/IGZhbHNlIDogdHJ1ZTtcblx0ICAgIHRoaXNbYmFja2Ryb3BdID0gb3B0aW9uc1tiYWNrZHJvcF0gPT09IHN0YXRpY1N0cmluZyB8fCBtb2RhbFtnZXRBdHRyaWJ1dGVdKGRhdGFiYWNrZHJvcCkgPT09IHN0YXRpY1N0cmluZyA/IHN0YXRpY1N0cmluZyA6IHRydWU7XG5cdCAgICB0aGlzW2JhY2tkcm9wXSA9IG9wdGlvbnNbYmFja2Ryb3BdID09PSBmYWxzZSB8fCBtb2RhbFtnZXRBdHRyaWJ1dGVdKGRhdGFiYWNrZHJvcCkgPT09ICdmYWxzZScgPyBmYWxzZSA6IHRoaXNbYmFja2Ryb3BdO1xuXHQgICAgdGhpc1tjb250ZW50XSAgPSBvcHRpb25zW2NvbnRlbnRdOyAvLyBKYXZhU2NyaXB0IG9ubHlcblx0ICBcblx0ICAgIC8vIGJpbmQsIGNvbnN0YW50cywgZXZlbnQgdGFyZ2V0cyBhbmQgb3RoZXIgdmFyc1xuXHQgICAgdmFyIHNlbGYgPSB0aGlzLCBvcGVuID0gdGhpcy5vcGVuID0gZmFsc2UsIHJlbGF0ZWRUYXJnZXQgPSBudWxsLFxuXHQgICAgICBib2R5SXNPdmVyZmxvd2luZywgbW9kYWxJc092ZXJmbG93aW5nLCBzY3JvbGxiYXJXaWR0aCwgb3ZlcmxheSxcblx0ICBcblx0ICAgICAgLy8gcHJpdmF0ZSBtZXRob2RzXG5cdCAgICAgIGdldFdpbmRvd1dpZHRoID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgdmFyIGh0bWxSZWN0ID0gZG9jW2dldEJvdW5kaW5nQ2xpZW50UmVjdF0oKTtcblx0ICAgICAgICByZXR1cm4gZ2xvYmFsT2JqZWN0W2lubmVyV2lkdGhdIHx8IChodG1sUmVjdFtyaWdodF0gLSBNYXRoLmFicyhodG1sUmVjdFtsZWZ0XSkpO1xuXHQgICAgICB9LFxuXHQgICAgICBzZXRTY3JvbGxiYXIgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIGJvZHlTdHlsZSA9IGJvZHkuY3VycmVudFN0eWxlIHx8IGdsb2JhbE9iamVjdC5nZXRDb21wdXRlZFN0eWxlKGJvZHkpLCBib2R5UGFkID0gcGFyc2VJbnQoKGJvZHlTdHlsZVtwYWRkaW5nUmlnaHRdKSwgMTApO1xuXHQgICAgICAgIGlmIChib2R5SXNPdmVyZmxvd2luZykgeyBib2R5W3N0eWxlXVtwYWRkaW5nUmlnaHRdID0gKGJvZHlQYWQgKyBzY3JvbGxiYXJXaWR0aCkgKyAncHgnOyB9XG5cdCAgICAgIH0sXG5cdCAgICAgIHJlc2V0U2Nyb2xsYmFyID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGJvZHlbc3R5bGVdW3BhZGRpbmdSaWdodF0gPSAnJztcblx0ICAgICAgfSxcblx0ICAgICAgbWVhc3VyZVNjcm9sbGJhciA9IGZ1bmN0aW9uICgpIHsgLy8gdGh4IHdhbHNoXG5cdCAgICAgICAgdmFyIHNjcm9sbERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLCBzY3JvbGxCYXJXaWR0aDtcblx0ICAgICAgICBzY3JvbGxEaXYuY2xhc3NOYW1lID0gY29tcG9uZW50Kyctc2Nyb2xsYmFyLW1lYXN1cmUnOyAvLyB0aGlzIGlzIGhlcmUgdG8gc3RheVxuXHQgICAgICAgIGJvZHkuYXBwZW5kQ2hpbGQoc2Nyb2xsRGl2KTtcblx0ICAgICAgICBzY3JvbGxCYXJXaWR0aCA9IHNjcm9sbERpdltvZmZzZXRXaWR0aF0gLSBzY3JvbGxEaXZbY2xpZW50V2lkdGhdO1xuXHQgICAgICAgIGJvZHkucmVtb3ZlQ2hpbGQoc2Nyb2xsRGl2KTtcblx0ICAgICAgICByZXR1cm4gc2Nyb2xsQmFyV2lkdGg7XG5cdCAgICAgIH0sXG5cdCAgICAgIGNoZWNrU2Nyb2xsYmFyID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGJvZHlJc092ZXJmbG93aW5nID0gYm9keVtjbGllbnRXaWR0aF0gPCBnZXRXaW5kb3dXaWR0aCgpO1xuXHQgICAgICAgIG1vZGFsSXNPdmVyZmxvd2luZyA9IG1vZGFsW3Njcm9sbEhlaWdodF0gPiBkb2NbY2xpZW50SGVpZ2h0XTtcblx0ICAgICAgICBzY3JvbGxiYXJXaWR0aCA9IG1lYXN1cmVTY3JvbGxiYXIoKTtcblx0ICAgICAgfSxcblx0ICAgICAgYWRqdXN0RGlhbG9nID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIG1vZGFsW3N0eWxlXVtwYWRkaW5nTGVmdF0gPSAhYm9keUlzT3ZlcmZsb3dpbmcgJiYgbW9kYWxJc092ZXJmbG93aW5nID8gc2Nyb2xsYmFyV2lkdGggKyAncHgnIDogJyc7XG5cdCAgICAgICAgbW9kYWxbc3R5bGVdW3BhZGRpbmdSaWdodF0gPSBib2R5SXNPdmVyZmxvd2luZyAmJiAhbW9kYWxJc092ZXJmbG93aW5nID8gc2Nyb2xsYmFyV2lkdGggKyAncHgnIDogJyc7XG5cdCAgICAgIH0sXG5cdCAgICAgIHJlc2V0QWRqdXN0bWVudHMgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgbW9kYWxbc3R5bGVdW3BhZGRpbmdMZWZ0XSA9ICcnO1xuXHQgICAgICAgIG1vZGFsW3N0eWxlXVtwYWRkaW5nUmlnaHRdID0gJyc7XG5cdCAgICAgIH0sXG5cdCAgICAgIGNyZWF0ZU92ZXJsYXkgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgICB2YXIgbmV3T3ZlcmxheSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXHQgICAgICAgIG92ZXJsYXkgPSBxdWVyeUVsZW1lbnQoJy4nK21vZGFsQmFja2Ryb3BTdHJpbmcpO1xuXHQgIFxuXHQgICAgICAgIGlmICggb3ZlcmxheSA9PT0gbnVsbCApIHtcblx0ICAgICAgICAgIG5ld092ZXJsYXlbc2V0QXR0cmlidXRlXSgnY2xhc3MnLG1vZGFsQmFja2Ryb3BTdHJpbmcrJyBmYWRlJyk7XG5cdCAgICAgICAgICBvdmVybGF5ID0gbmV3T3ZlcmxheTtcblx0ICAgICAgICAgIGJvZHkuYXBwZW5kQ2hpbGQob3ZlcmxheSk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9LFxuXHQgICAgICByZW1vdmVPdmVybGF5ID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgb3ZlcmxheSA9IHF1ZXJ5RWxlbWVudCgnLicrbW9kYWxCYWNrZHJvcFN0cmluZyk7IFxuXHQgICAgICAgIGlmICggb3ZlcmxheSAmJiBvdmVybGF5ICE9PSBudWxsICYmIHR5cGVvZiBvdmVybGF5ID09PSAnb2JqZWN0JyApIHtcblx0ICAgICAgICAgIGJvZHkucmVtb3ZlQ2hpbGQob3ZlcmxheSk7IG92ZXJsYXkgPSBudWxsO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSxcblx0ICAgICAga2V5ZG93bkhhbmRsZXJUb2dnbGUgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgICBpZiAoIWhhc0NsYXNzKG1vZGFsLGluQ2xhc3MpKSB7XG5cdCAgICAgICAgICBvbihkb2N1bWVudCwga2V5ZG93bkV2ZW50LCBrZXlIYW5kbGVyKTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgb2ZmKGRvY3VtZW50LCBrZXlkb3duRXZlbnQsIGtleUhhbmRsZXIpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSxcblx0ICAgICAgcmVzaXplSGFuZGxlclRvZ2dsZSA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIGlmICghaGFzQ2xhc3MobW9kYWwsaW5DbGFzcykpIHtcblx0ICAgICAgICAgIG9uKGdsb2JhbE9iamVjdCwgcmVzaXplRXZlbnQsIHNlbGYudXBkYXRlKTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgb2ZmKGdsb2JhbE9iamVjdCwgcmVzaXplRXZlbnQsIHNlbGYudXBkYXRlKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0sXG5cdCAgICAgIGRpc21pc3NIYW5kbGVyVG9nZ2xlID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgaWYgKCFoYXNDbGFzcyhtb2RhbCxpbkNsYXNzKSkge1xuXHQgICAgICAgICAgb24obW9kYWwsIGNsaWNrRXZlbnQsIGRpc21pc3NIYW5kbGVyKTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgb2ZmKG1vZGFsLCBjbGlja0V2ZW50LCBkaXNtaXNzSGFuZGxlcik7XG5cdCAgICAgICAgfVxuXHQgICAgICB9LFxuXHQgICAgICAvLyBoYW5kbGVyc1xuXHQgICAgICBjbGlja0hhbmRsZXIgPSBmdW5jdGlvbihlKSB7XG5cdCAgICAgICAgdmFyIGNsaWNrVGFyZ2V0ID0gZVt0YXJnZXRdOyBcblx0ICAgICAgICBjbGlja1RhcmdldCA9IGNsaWNrVGFyZ2V0W2hhc0F0dHJpYnV0ZV0oZGF0YVRhcmdldCkgfHwgY2xpY2tUYXJnZXRbaGFzQXR0cmlidXRlXSgnaHJlZicpID8gY2xpY2tUYXJnZXQgOiBjbGlja1RhcmdldFtwYXJlbnROb2RlXTtcblx0ICAgICAgICBpZiAoICFvcGVuICYmIGNsaWNrVGFyZ2V0ID09PSBlbGVtZW50ICYmICFoYXNDbGFzcyhtb2RhbCxpbkNsYXNzKSApIHtcblx0ICAgICAgICAgIG1vZGFsLm1vZGFsVHJpZ2dlciA9IGVsZW1lbnQ7XG5cdCAgICAgICAgICByZWxhdGVkVGFyZ2V0ID0gZWxlbWVudDtcblx0ICAgICAgICAgIHNlbGYuc2hvdygpO1xuXHQgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSxcblx0ICAgICAga2V5SGFuZGxlciA9IGZ1bmN0aW9uKGUpIHtcblx0ICAgICAgICB2YXIga2V5ID0gZS53aGljaCB8fCBlLmtleUNvZGU7IC8vIGtleUNvZGUgZm9yIElFOFxuXHQgICAgICAgIGlmIChzZWxmW2tleWJvYXJkXSAmJiBrZXkgPT0gMjcgJiYgb3Blbikge1xuXHQgICAgICAgICAgc2VsZi5oaWRlKCk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9LFxuXHQgICAgICBkaXNtaXNzSGFuZGxlciA9IGZ1bmN0aW9uKGUpIHtcblx0ICAgICAgICB2YXIgY2xpY2tUYXJnZXQgPSBlW3RhcmdldF07XG5cdCAgICAgICAgaWYgKCBvcGVuICYmIChjbGlja1RhcmdldFtwYXJlbnROb2RlXVtnZXRBdHRyaWJ1dGVdKGRhdGFEaXNtaXNzKSA9PT0gY29tcG9uZW50IFxuXHQgICAgICAgICAgICB8fCBjbGlja1RhcmdldFtnZXRBdHRyaWJ1dGVdKGRhdGFEaXNtaXNzKSA9PT0gY29tcG9uZW50XG5cdCAgICAgICAgICAgIHx8IChjbGlja1RhcmdldCA9PT0gbW9kYWwgJiYgc2VsZltiYWNrZHJvcF0gIT09IHN0YXRpY1N0cmluZykgKSApIHtcblx0ICAgICAgICAgIHNlbGYuaGlkZSgpOyByZWxhdGVkVGFyZ2V0ID0gbnVsbDtcblx0ICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH07XG5cdCAgXG5cdCAgICAvLyBwdWJsaWMgbWV0aG9kc1xuXHQgICAgdGhpcy50b2dnbGUgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgaWYgKG9wZW4gJiYgaGFzQ2xhc3MobW9kYWwsaW5DbGFzcykpIHt0aGlzLmhpZGUoKTt9IGVsc2Uge3RoaXMuc2hvdygpO31cblx0ICAgIH07XG5cdCAgICB0aGlzLnNob3cgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgYm9vdHN0cmFwQ3VzdG9tRXZlbnQuY2FsbChtb2RhbCwgc2hvd0V2ZW50LCBjb21wb25lbnQsIHJlbGF0ZWRUYXJnZXQpO1xuXHQgIFxuXHQgICAgICAvLyB3ZSBlbGVnYW50bHkgaGlkZSBhbnkgb3BlbmVkIG1vZGFsXG5cdCAgICAgIHZhciBjdXJyZW50T3BlbiA9IGdldEVsZW1lbnRzQnlDbGFzc05hbWUoZG9jdW1lbnQsY29tcG9uZW50KycgaW4nKVswXTtcblx0ICAgICAgY3VycmVudE9wZW4gJiYgY3VycmVudE9wZW4gIT09IG1vZGFsICYmIGN1cnJlbnRPcGVuLm1vZGFsVHJpZ2dlcltzdHJpbmdNb2RhbF0uaGlkZSgpOyBcblx0ICBcblx0ICAgICAgaWYgKCB0aGlzW2JhY2tkcm9wXSApIHtcblx0ICAgICAgICBjcmVhdGVPdmVybGF5KCk7XG5cdCAgICAgIH1cblx0ICBcblx0ICAgICAgaWYgKCBvdmVybGF5ICYmICFoYXNDbGFzcyhvdmVybGF5LGluQ2xhc3MpKSB7XG5cdCAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24oKSB7IGFkZENsYXNzKG92ZXJsYXksaW5DbGFzcyk7IH0sIDApO1xuXHQgICAgICB9XG5cdCAgXG5cdCAgICAgIHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIG1vZGFsW3N0eWxlXS5kaXNwbGF5ID0gJ2Jsb2NrJztcblx0ICBcblx0ICAgICAgICBjaGVja1Njcm9sbGJhcigpO1xuXHQgICAgICAgIHNldFNjcm9sbGJhcigpO1xuXHQgICAgICAgIGFkanVzdERpYWxvZygpO1xuXHQgIFxuXHQgICAgICAgIHJlc2l6ZUhhbmRsZXJUb2dnbGUoKTtcblx0ICAgICAgICBkaXNtaXNzSGFuZGxlclRvZ2dsZSgpO1xuXHQgICAgICAgIGtleWRvd25IYW5kbGVyVG9nZ2xlKCk7XG5cdCAgXG5cdCAgICAgICAgYWRkQ2xhc3MoYm9keSxjb21wb25lbnQrJy1vcGVuJyk7XG5cdCAgICAgICAgYWRkQ2xhc3MobW9kYWwsaW5DbGFzcyk7XG5cdCAgICAgICAgbW9kYWxbc2V0QXR0cmlidXRlXShhcmlhSGlkZGVuLCBmYWxzZSk7XG5cdCAgICAgIH0sIDApO1xuXHQgIFxuXHQgICAgICBlbXVsYXRlVHJhbnNpdGlvbkVuZChtb2RhbCwgZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgb3BlbiA9IHNlbGYub3BlbiA9IHRydWU7XG5cdCAgICAgICAgc2V0Rm9jdXMobW9kYWwpO1xuXHQgICAgICAgIGJvb3RzdHJhcEN1c3RvbUV2ZW50LmNhbGwobW9kYWwsIHNob3duRXZlbnQsIGNvbXBvbmVudCwgcmVsYXRlZFRhcmdldCk7XG5cdCAgICAgIH0pO1xuXHQgICAgfTtcblx0ICAgIHRoaXMuaGlkZSA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICBib290c3RyYXBDdXN0b21FdmVudC5jYWxsKG1vZGFsLCBoaWRlRXZlbnQsIGNvbXBvbmVudCk7XG5cdCAgICAgIG92ZXJsYXkgPSBxdWVyeUVsZW1lbnQoJy4nK21vZGFsQmFja2Ryb3BTdHJpbmcpO1xuXHQgIFxuXHQgICAgICBpZiAoIG92ZXJsYXkgIT09IG51bGwgKSB7XG5cdCAgICAgICAgcmVtb3ZlQ2xhc3Mob3ZlcmxheSxpbkNsYXNzKTtcblx0ICAgICAgfVxuXHQgICAgICByZW1vdmVDbGFzcyhtb2RhbCxpbkNsYXNzKTtcblx0ICAgICAgbW9kYWxbc2V0QXR0cmlidXRlXShhcmlhSGlkZGVuLCB0cnVlKTtcblx0ICBcblx0ICAgICAgZW11bGF0ZVRyYW5zaXRpb25FbmQobW9kYWwsIGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHJlbW92ZUNsYXNzKGJvZHksY29tcG9uZW50Kyctb3BlbicpO1xuXHQgICAgICAgIHJlc2l6ZUhhbmRsZXJUb2dnbGUoKTtcblx0ICAgICAgICBkaXNtaXNzSGFuZGxlclRvZ2dsZSgpO1xuXHQgICAgICAgIGtleWRvd25IYW5kbGVyVG9nZ2xlKCk7XG5cdCAgXG5cdCAgICAgICAgcmVzZXRBZGp1c3RtZW50cygpO1xuXHQgICAgICAgIHJlc2V0U2Nyb2xsYmFyKCk7XG5cdCAgICAgICAgbW9kYWxbc3R5bGVdLmRpc3BsYXkgPSAnJztcblx0ICBcblx0ICAgICAgICBpZiAoIWdldEVsZW1lbnRzQnlDbGFzc05hbWUoZG9jdW1lbnQsY29tcG9uZW50KycgJytpbkNsYXNzKVswXSkgeyByZW1vdmVPdmVybGF5KCk7IH1cblx0ICAgICAgICBvcGVuID0gc2VsZi5vcGVuID0gZmFsc2U7XG5cdCAgICAgICAgZWxlbWVudCAmJiAoc2V0Rm9jdXMoZWxlbWVudCkpO1xuXHQgICAgICAgIGJvb3RzdHJhcEN1c3RvbUV2ZW50LmNhbGwobW9kYWwsIGhpZGRlbkV2ZW50LCBjb21wb25lbnQpO1xuXHQgICAgICB9KTtcblx0ICAgIH07XG5cdCAgICB0aGlzLnNldENvbnRlbnQgPSBmdW5jdGlvbiggY29udGVudCApIHtcblx0ICAgICAgcXVlcnlFbGVtZW50KCcuJytjb21wb25lbnQrJy1jb250ZW50Jyxtb2RhbCkuaW5uZXJIVE1MID0gY29udGVudDtcblx0ICAgIH07XG5cdCAgICB0aGlzLnVwZGF0ZSA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICBpZiAob3Blbikge1xuXHQgICAgICAgIGNoZWNrU2Nyb2xsYmFyKCk7XG5cdCAgICAgICAgc2V0U2Nyb2xsYmFyKCk7XG5cdCAgICAgICAgYWRqdXN0RGlhbG9nKCk7XG5cdCAgICAgIH1cblx0ICAgIH07XG5cdCAgXG5cdCAgICAvLyBpbml0XG5cdCAgICAvLyBwcmV2ZW50IGFkZGluZyBldmVudCBoYW5kbGVycyBvdmVyIGFuZCBvdmVyXG5cdCAgICAvLyBtb2RhbCBpcyBpbmRlcGVuZGVudCBvZiBhIHRyaWdnZXJpbmcgZWxlbWVudCBcblx0ICAgIGlmICggISFlbGVtZW50ICYmICEoc3RyaW5nTW9kYWwgaW4gZWxlbWVudCkgKSB7XG5cdCAgICAgIG9uKGVsZW1lbnQsIGNsaWNrRXZlbnQsIGNsaWNrSGFuZGxlcik7XG5cdCAgICB9XG5cdCAgICBpZiAoICEhdGhpc1tjb250ZW50XSApIHsgdGhpcy5zZXRDb250ZW50KCB0aGlzW2NvbnRlbnRdICk7IH1cblx0ICAgICEhZWxlbWVudCAmJiAoZWxlbWVudFtzdHJpbmdNb2RhbF0gPSB0aGlzKTtcblx0ICB9O1xuXHQgIFxuXHQgIC8vIERBVEEgQVBJXG5cdCAgaW5pdGlhbGl6ZURhdGFBUEkoc3RyaW5nTW9kYWwsIE1vZGFsLCBkYXRhVG9nZ2xlKTtcblx0ICBcblx0ICBcblx0ICAvKiBOYXRpdmUgSmF2YXNjcmlwdCBmb3IgQm9vdHN0cmFwIDMgfCBQb3BvdmVyXG5cdCAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cdCAgXG5cdCAgLy8gUE9QT1ZFUiBERUZJTklUSU9OXG5cdCAgLy8gPT09PT09PT09PT09PT09PT09XG5cdCAgdmFyIFBvcG92ZXIgPSBmdW5jdGlvbiggZWxlbWVudCwgb3B0aW9ucyApIHtcblx0ICBcblx0ICAgIC8vIGluaXRpYWxpemF0aW9uIGVsZW1lbnRcblx0ICAgIGVsZW1lbnQgPSBxdWVyeUVsZW1lbnQoZWxlbWVudCk7XG5cdCAgXG5cdCAgICAvLyBEQVRBIEFQSVxuXHQgICAgdmFyIHRyaWdnZXJEYXRhID0gZWxlbWVudFtnZXRBdHRyaWJ1dGVdKGRhdGFUcmlnZ2VyKSwgLy8gY2xpY2sgLyBob3ZlciAvIGZvY3VzXG5cdCAgICAgICAgYW5pbWF0aW9uRGF0YSA9IGVsZW1lbnRbZ2V0QXR0cmlidXRlXShkYXRhQW5pbWF0aW9uKSwgLy8gdHJ1ZSAvIGZhbHNlXG5cdCAgICAgICAgcGxhY2VtZW50RGF0YSA9IGVsZW1lbnRbZ2V0QXR0cmlidXRlXShkYXRhUGxhY2VtZW50KSxcblx0ICAgICAgICBkaXNtaXNzaWJsZURhdGEgPSBlbGVtZW50W2dldEF0dHJpYnV0ZV0oZGF0YURpc21pc3NpYmxlKSxcblx0ICAgICAgICBkZWxheURhdGEgPSBlbGVtZW50W2dldEF0dHJpYnV0ZV0oZGF0YURlbGF5KSxcblx0ICAgICAgICBjb250YWluZXJEYXRhID0gZWxlbWVudFtnZXRBdHRyaWJ1dGVdKGRhdGFDb250YWluZXIpLFxuXHQgIFxuXHQgICAgICAgIC8vIGludGVybmFsIHN0cmluZ3Ncblx0ICAgICAgICBjb21wb25lbnQgPSAncG9wb3ZlcicsXG5cdCAgICAgICAgdGVtcGxhdGUgPSAndGVtcGxhdGUnLFxuXHQgICAgICAgIHRyaWdnZXIgPSAndHJpZ2dlcicsXG5cdCAgICAgICAgY2xhc3NTdHJpbmcgPSAnY2xhc3MnLFxuXHQgICAgICAgIGRpdiA9ICdkaXYnLFxuXHQgICAgICAgIGZhZGUgPSAnZmFkZScsXG5cdCAgICAgICAgdGl0bGUgPSAndGl0bGUnLFxuXHQgICAgICAgIGNvbnRlbnQgPSAnY29udGVudCcsXG5cdCAgICAgICAgZGF0YVRpdGxlID0gJ2RhdGEtdGl0bGUnLFxuXHQgICAgICAgIGRhdGFDb250ZW50ID0gJ2RhdGEtY29udGVudCcsXG5cdCAgICAgICAgZGlzbWlzc2libGUgPSAnZGlzbWlzc2libGUnLFxuXHQgICAgICAgIGNsb3NlQnRuID0gJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiY2xvc2VcIj7DlzwvYnV0dG9uPic7XG5cdCAgXG5cdCAgICAvLyBzZXQgb3B0aW9uc1xuXHQgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cdCAgICB0aGlzW3RlbXBsYXRlXSA9IG9wdGlvbnNbdGVtcGxhdGVdID8gb3B0aW9uc1t0ZW1wbGF0ZV0gOiBudWxsOyAvLyBKYXZhU2NyaXB0IG9ubHlcblx0ICAgIHRoaXNbdHJpZ2dlcl0gPSBvcHRpb25zW3RyaWdnZXJdID8gb3B0aW9uc1t0cmlnZ2VyXSA6IHRyaWdnZXJEYXRhIHx8IGhvdmVyRXZlbnQ7XG5cdCAgICB0aGlzW2FuaW1hdGlvbl0gPSBvcHRpb25zW2FuaW1hdGlvbl0gJiYgb3B0aW9uc1thbmltYXRpb25dICE9PSBmYWRlID8gb3B0aW9uc1thbmltYXRpb25dIDogYW5pbWF0aW9uRGF0YSB8fCBmYWRlO1xuXHQgICAgdGhpc1twbGFjZW1lbnRdID0gb3B0aW9uc1twbGFjZW1lbnRdID8gb3B0aW9uc1twbGFjZW1lbnRdIDogcGxhY2VtZW50RGF0YSB8fCB0b3A7XG5cdCAgICB0aGlzW2RlbGF5XSA9IHBhcnNlSW50KG9wdGlvbnNbZGVsYXldIHx8IGRlbGF5RGF0YSkgfHwgMjAwO1xuXHQgICAgdGhpc1tkaXNtaXNzaWJsZV0gPSBvcHRpb25zW2Rpc21pc3NpYmxlXSB8fCBkaXNtaXNzaWJsZURhdGEgPT09ICd0cnVlJyA/IHRydWUgOiBmYWxzZTtcblx0ICAgIHRoaXNbY29udGFpbmVyXSA9IHF1ZXJ5RWxlbWVudChvcHRpb25zW2NvbnRhaW5lcl0pIHx8IHF1ZXJ5RWxlbWVudChjb250YWluZXJEYXRhKSB8fCBib2R5O1xuXHQgICAgXG5cdCAgICAvLyBiaW5kLCBjb250ZW50XG5cdCAgICB2YXIgc2VsZiA9IHRoaXMsIFxuXHQgICAgICB0aXRsZVN0cmluZyA9IGVsZW1lbnRbZ2V0QXR0cmlidXRlXShkYXRhVGl0bGUpIHx8IG51bGwsXG5cdCAgICAgIGNvbnRlbnRTdHJpbmcgPSBlbGVtZW50W2dldEF0dHJpYnV0ZV0oZGF0YUNvbnRlbnQpIHx8IG51bGw7XG5cdCAgXG5cdCAgICBpZiAoICFjb250ZW50U3RyaW5nICYmICF0aGlzW3RlbXBsYXRlXSApIHJldHVybjsgLy8gaW52YWxpZGF0ZVxuXHQgIFxuXHQgICAgLy8gY29uc3RhbnRzLCB2YXJzXG5cdCAgICB2YXIgcG9wb3ZlciA9IG51bGwsIHRpbWVyID0gMCwgcGxhY2VtZW50U2V0dGluZyA9IHRoaXNbcGxhY2VtZW50XSxcblx0ICAgICAgXG5cdCAgICAgIC8vIGhhbmRsZXJzXG5cdCAgICAgIGRpc21pc3NpYmxlSGFuZGxlciA9IGZ1bmN0aW9uKGUpIHtcblx0ICAgICAgICBpZiAocG9wb3ZlciAhPT0gbnVsbCAmJiBlW3RhcmdldF0gPT09IHF1ZXJ5RWxlbWVudCgnLmNsb3NlJyxwb3BvdmVyKSkge1xuXHQgICAgICAgICAgc2VsZi5oaWRlKCk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9LFxuXHQgIFxuXHQgICAgICAvLyBwcml2YXRlIG1ldGhvZHNcblx0ICAgICAgcmVtb3ZlUG9wb3ZlciA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHNlbGZbY29udGFpbmVyXS5yZW1vdmVDaGlsZChwb3BvdmVyKTtcblx0ICAgICAgICB0aW1lciA9IG51bGw7IHBvcG92ZXIgPSBudWxsOyBcblx0ICAgICAgfSxcblx0ICAgICAgY3JlYXRlUG9wb3ZlciA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHRpdGxlU3RyaW5nID0gZWxlbWVudFtnZXRBdHRyaWJ1dGVdKGRhdGFUaXRsZSk7IC8vIGNoZWNrIGNvbnRlbnQgYWdhaW5cblx0ICAgICAgICBjb250ZW50U3RyaW5nID0gZWxlbWVudFtnZXRBdHRyaWJ1dGVdKGRhdGFDb250ZW50KTtcblx0ICBcblx0ICAgICAgICBwb3BvdmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChkaXYpO1xuXHQgIFxuXHQgICAgICAgIGlmICggY29udGVudFN0cmluZyAhPT0gbnVsbCAmJiBzZWxmW3RlbXBsYXRlXSA9PT0gbnVsbCApIHsgLy9jcmVhdGUgdGhlIHBvcG92ZXIgZnJvbSBkYXRhIGF0dHJpYnV0ZXNcblx0ICBcblx0ICAgICAgICAgIHBvcG92ZXJbc2V0QXR0cmlidXRlXSgncm9sZScsJ3Rvb2x0aXAnKTtcblx0ICBcblx0ICAgICAgICAgIGlmICh0aXRsZVN0cmluZyAhPT0gbnVsbCkge1xuXHQgICAgICAgICAgICB2YXIgcG9wb3ZlclRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDMnKTtcblx0ICAgICAgICAgICAgcG9wb3ZlclRpdGxlW3NldEF0dHJpYnV0ZV0oY2xhc3NTdHJpbmcsY29tcG9uZW50KyctdGl0bGUnKTtcblx0ICBcblx0ICAgICAgICAgICAgcG9wb3ZlclRpdGxlLmlubmVySFRNTCA9IHNlbGZbZGlzbWlzc2libGVdID8gdGl0bGVTdHJpbmcgKyBjbG9zZUJ0biA6IHRpdGxlU3RyaW5nO1xuXHQgICAgICAgICAgICBwb3BvdmVyLmFwcGVuZENoaWxkKHBvcG92ZXJUaXRsZSk7XG5cdCAgICAgICAgICB9XG5cdCAgXG5cdCAgICAgICAgICB2YXIgcG9wb3ZlckFycm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChkaXYpLCBwb3BvdmVyQ29udGVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoZGl2KTtcblx0ICAgICAgICAgIHBvcG92ZXJBcnJvd1tzZXRBdHRyaWJ1dGVdKGNsYXNzU3RyaW5nLCdhcnJvdycpOyBwb3BvdmVyQ29udGVudFtzZXRBdHRyaWJ1dGVdKGNsYXNzU3RyaW5nLGNvbXBvbmVudCsnLWNvbnRlbnQnKTtcblx0ICAgICAgICAgIHBvcG92ZXIuYXBwZW5kQ2hpbGQocG9wb3ZlckFycm93KTsgcG9wb3Zlci5hcHBlbmRDaGlsZChwb3BvdmVyQ29udGVudCk7XG5cdCAgXG5cdCAgICAgICAgICAvL3NldCBwb3BvdmVyIGNvbnRlbnRcblx0ICAgICAgICAgIHBvcG92ZXJDb250ZW50LmlubmVySFRNTCA9IHNlbGZbZGlzbWlzc2libGVdICYmIHRpdGxlU3RyaW5nID09PSBudWxsID8gY29udGVudFN0cmluZyArIGNsb3NlQnRuIDogY29udGVudFN0cmluZztcblx0ICBcblx0ICAgICAgICB9IGVsc2UgeyAgLy8gb3IgY3JlYXRlIHRoZSBwb3BvdmVyIGZyb20gdGVtcGxhdGVcblx0ICAgICAgICAgIHZhciBwb3BvdmVyVGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGRpdik7XG5cdCAgICAgICAgICBwb3BvdmVyVGVtcGxhdGUuaW5uZXJIVE1MID0gc2VsZlt0ZW1wbGF0ZV07XG5cdCAgICAgICAgICBwb3BvdmVyLmlubmVySFRNTCA9IHBvcG92ZXJUZW1wbGF0ZS5maXJzdENoaWxkLmlubmVySFRNTDtcblx0ICAgICAgICB9XG5cdCAgXG5cdCAgICAgICAgLy9hcHBlbmQgdG8gdGhlIGNvbnRhaW5lclxuXHQgICAgICAgIHNlbGZbY29udGFpbmVyXS5hcHBlbmRDaGlsZChwb3BvdmVyKTtcblx0ICAgICAgICBwb3BvdmVyW3N0eWxlXS5kaXNwbGF5ID0gJ2Jsb2NrJztcblx0ICAgICAgICBwb3BvdmVyW3NldEF0dHJpYnV0ZV0oY2xhc3NTdHJpbmcsIGNvbXBvbmVudCsgJyAnICsgcGxhY2VtZW50U2V0dGluZyArICcgJyArIHNlbGZbYW5pbWF0aW9uXSk7XG5cdCAgICAgIH0sXG5cdCAgICAgIHNob3dQb3BvdmVyID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICFoYXNDbGFzcyhwb3BvdmVyLGluQ2xhc3MpICYmICggYWRkQ2xhc3MocG9wb3ZlcixpbkNsYXNzKSApO1xuXHQgICAgICB9LFxuXHQgICAgICB1cGRhdGVQb3BvdmVyID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgc3R5bGVUaXAoZWxlbWVudCxwb3BvdmVyLHBsYWNlbWVudFNldHRpbmcsc2VsZltjb250YWluZXJdKTtcblx0ICAgICAgICBpZiAoIWlzRWxlbWVudEluVmlld3BvcnQocG9wb3ZlcikgKSB7IFxuXHQgICAgICAgICAgcGxhY2VtZW50U2V0dGluZyA9IHVwZGF0ZVBsYWNlbWVudChwbGFjZW1lbnRTZXR0aW5nKTsgXG5cdCAgICAgICAgICBzdHlsZVRpcChlbGVtZW50LHBvcG92ZXIscGxhY2VtZW50U2V0dGluZyxzZWxmW2NvbnRhaW5lcl0pOyBcblx0ICAgICAgICB9XG5cdCAgICAgIH07XG5cdCAgXG5cdCAgICAvLyBwdWJsaWMgbWV0aG9kcyAvIGhhbmRsZXJzXG5cdCAgICB0aGlzLnRvZ2dsZSA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICBpZiAocG9wb3ZlciA9PT0gbnVsbCkgeyBzZWxmLnNob3coKTsgfSBcblx0ICAgICAgZWxzZSB7IHNlbGYuaGlkZSgpOyB9XG5cdCAgICB9O1xuXHQgICAgdGhpcy5zaG93ID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG5cdCAgICAgIHRpbWVyID0gc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgaWYgKHBvcG92ZXIgPT09IG51bGwpIHtcblx0ICAgICAgICAgIHBsYWNlbWVudFNldHRpbmcgPSBzZWxmW3BsYWNlbWVudF07IC8vIHdlIHJlc2V0IHBsYWNlbWVudCBpbiBhbGwgY2FzZXNcblx0ICAgICAgICAgIGNyZWF0ZVBvcG92ZXIoKTtcblx0ICAgICAgICAgIHVwZGF0ZVBvcG92ZXIoKTtcblx0ICAgICAgICAgIHNob3dQb3BvdmVyKCk7XG5cdCAgICAgICAgICBib290c3RyYXBDdXN0b21FdmVudC5jYWxsKGVsZW1lbnQsIHNob3dFdmVudCwgY29tcG9uZW50KTtcblx0ICAgICAgICAgIGVtdWxhdGVUcmFuc2l0aW9uRW5kKHBvcG92ZXIsIGZ1bmN0aW9uKCkge1xuXHQgICAgICAgICAgICBib290c3RyYXBDdXN0b21FdmVudC5jYWxsKGVsZW1lbnQsIHNob3duRXZlbnQsIGNvbXBvbmVudCk7XG5cdCAgICAgICAgICB9KTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0sIDIwICk7XG5cdCAgICB9O1xuXHQgICAgdGhpcy5oaWRlID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG5cdCAgICAgIHRpbWVyID0gc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgaWYgKHBvcG92ZXIgJiYgcG9wb3ZlciAhPT0gbnVsbCAmJiBoYXNDbGFzcyhwb3BvdmVyLGluQ2xhc3MpKSB7XG5cdCAgICAgICAgICBib290c3RyYXBDdXN0b21FdmVudC5jYWxsKGVsZW1lbnQsIGhpZGVFdmVudCwgY29tcG9uZW50KTtcblx0ICAgICAgICAgIHJlbW92ZUNsYXNzKHBvcG92ZXIsaW5DbGFzcyk7XG5cdCAgICAgICAgICBlbXVsYXRlVHJhbnNpdGlvbkVuZChwb3BvdmVyLCBmdW5jdGlvbigpIHtcblx0ICAgICAgICAgICAgcmVtb3ZlUG9wb3ZlcigpO1xuXHQgICAgICAgICAgICBib290c3RyYXBDdXN0b21FdmVudC5jYWxsKGVsZW1lbnQsIGhpZGRlbkV2ZW50LCBjb21wb25lbnQpO1xuXHQgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9LCBzZWxmW2RlbGF5XSApO1xuXHQgICAgfTtcblx0ICBcblx0ICAgIC8vIGluaXRcblx0ICAgIGlmICggIShzdHJpbmdQb3BvdmVyIGluIGVsZW1lbnQpICkgeyAvLyBwcmV2ZW50IGFkZGluZyBldmVudCBoYW5kbGVycyB0d2ljZVxuXHQgICAgICBpZiAoc2VsZlt0cmlnZ2VyXSA9PT0gaG92ZXJFdmVudCkge1xuXHQgICAgICAgIG9uKCBlbGVtZW50LCBtb3VzZUhvdmVyWzBdLCBzZWxmLnNob3cgKTtcblx0ICAgICAgICBpZiAoIXNlbGZbZGlzbWlzc2libGVdKSB7IG9uKCBlbGVtZW50LCBtb3VzZUhvdmVyWzFdLCBzZWxmLmhpZGUgKTsgfVxuXHQgICAgICB9IGVsc2UgaWYgKC9eKGNsaWNrfGZvY3VzKSQvLnRlc3Qoc2VsZlt0cmlnZ2VyXSkpIHtcblx0ICAgICAgICBvbiggZWxlbWVudCwgc2VsZlt0cmlnZ2VyXSwgc2VsZi50b2dnbGUgKTtcblx0ICAgICAgICBpZiAoIXNlbGZbZGlzbWlzc2libGVdKSB7IG9uKCBlbGVtZW50LCAnYmx1cicsIHNlbGYuaGlkZSApOyB9XG5cdCAgICAgIH1cblx0ICAgICAgXG5cdCAgICAgIGlmIChzZWxmW2Rpc21pc3NpYmxlXSkgeyBvbiggZG9jdW1lbnQsIGNsaWNrRXZlbnQsIGRpc21pc3NpYmxlSGFuZGxlciApOyB9XG5cdCAgICBcblx0ICAgICAgLy8gZGlzbWlzcyBvbiB3aW5kb3cgcmVzaXplXG5cdCAgICAgIGlmICggIShpc0lFICYmIGlzSUUgPCA5KSApIHsgb24oIGdsb2JhbE9iamVjdCwgcmVzaXplRXZlbnQsIHNlbGYuaGlkZSApOyB9XG5cdCAgXG5cdCAgICB9XG5cdCAgICBlbGVtZW50W3N0cmluZ1BvcG92ZXJdID0gc2VsZjtcblx0ICB9O1xuXHQgIFxuXHQgIC8vIFBPUE9WRVIgREFUQSBBUElcblx0ICAvLyA9PT09PT09PT09PT09PT09XG5cdCAgaW5pdGlhbGl6ZURhdGFBUEkoc3RyaW5nUG9wb3ZlciwgUG9wb3ZlciwgZGF0YVRvZ2dsZSk7XG5cdCAgXG5cdCAgXG5cdCAgLyogTmF0aXZlIEphdmFzY3JpcHQgZm9yIEJvb3RzdHJhcCAzIHwgU2Nyb2xsU3B5XG5cdCAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXHQgIFxuXHQgIC8vIFNDUk9MTFNQWSBERUZJTklUSU9OXG5cdCAgLy8gPT09PT09PT09PT09PT09PT09PT1cblx0ICB2YXIgU2Nyb2xsU3B5ID0gZnVuY3Rpb24oZWxlbWVudCwgb3B0aW9ucykge1xuXHQgIFxuXHQgICAgLy8gaW5pdGlhbGl6YXRpb24gZWxlbWVudCwgdGhlIGVsZW1lbnQgd2Ugc3B5IG9uXG5cdCAgICBlbGVtZW50ID0gcXVlcnlFbGVtZW50KGVsZW1lbnQpOyBcblx0ICBcblx0ICAgIC8vIERBVEEgQVBJXG5cdCAgICB2YXIgdGFyZ2V0RGF0YSA9IHF1ZXJ5RWxlbWVudChlbGVtZW50W2dldEF0dHJpYnV0ZV0oZGF0YVRhcmdldCkpO1xuXHQgIFxuXHQgICAgLy8gc2V0IG9wdGlvbnNcblx0ICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXHQgICAgaWYgKCAhb3B0aW9uc1t0YXJnZXRdICYmICF0YXJnZXREYXRhICkgeyByZXR1cm47IH0gLy8gaW52YWxpZGF0ZVxuXHQgIFxuXHQgICAgLy8gZXZlbnQgdGFyZ2V0cywgY29uc3RhbnRzXG5cdCAgICB2YXIgc3B5VGFyZ2V0ID0gb3B0aW9uc1t0YXJnZXRdICYmIHF1ZXJ5RWxlbWVudChvcHRpb25zW3RhcmdldF0pIHx8IHRhcmdldERhdGEsXG5cdCAgICAgICAgbGlua3MgPSBzcHlUYXJnZXQgJiYgc3B5VGFyZ2V0W2dldEVsZW1lbnRzQnlUYWdOYW1lXSgnQScpLCBcblx0ICAgICAgICBpdGVtcyA9IFtdLCB0YXJnZXRJdGVtcyA9IFtdLCBzY3JvbGxPZmZzZXQsXG5cdCAgICAgICAgc2Nyb2xsVGFyZ2V0ID0gZWxlbWVudFtvZmZzZXRIZWlnaHRdIDwgZWxlbWVudFtzY3JvbGxIZWlnaHRdID8gZWxlbWVudCA6IGdsb2JhbE9iamVjdCwgLy8gZGV0ZXJtaW5lIHdoaWNoIGlzIHRoZSByZWFsIHNjcm9sbFRhcmdldFxuXHQgICAgICAgIGlzV2luZG93ID0gc2Nyb2xsVGFyZ2V0ID09PSBnbG9iYWxPYmplY3Q7ICBcblx0ICBcblx0ICAgIC8vIHBvcHVsYXRlIGl0ZW1zIGFuZCB0YXJnZXRzXG5cdCAgICBmb3IgKHZhciBpPTAsIGlsPWxpbmtzW2xlbmd0aF07IGk8aWw7IGkrKykge1xuXHQgICAgICB2YXIgaHJlZiA9IGxpbmtzW2ldW2dldEF0dHJpYnV0ZV0oJ2hyZWYnKSwgXG5cdCAgICAgICAgICB0YXJnZXRJdGVtID0gaHJlZiAmJiAvI1thLXowLTldKyQvaS50ZXN0KGhyZWYpICYmIHF1ZXJ5RWxlbWVudChocmVmKTtcblx0ICAgICAgaWYgKCAhIXRhcmdldEl0ZW0gKSB7XG5cdCAgICAgICAgaXRlbXMucHVzaChsaW5rc1tpXSk7XG5cdCAgICAgICAgdGFyZ2V0SXRlbXMucHVzaCh0YXJnZXRJdGVtKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIFxuXHQgICAgLy8gcHJpdmF0ZSBtZXRob2RzXG5cdCAgICB2YXIgdXBkYXRlSXRlbSA9IGZ1bmN0aW9uKGluZGV4KSB7XG5cdCAgICAgICAgdmFyIHBhcmVudCA9IGl0ZW1zW2luZGV4XVtwYXJlbnROb2RlXSwgLy8gaXRlbSdzIHBhcmVudCBMSSBlbGVtZW50XG5cdCAgICAgICAgICB0YXJnZXRJdGVtID0gdGFyZ2V0SXRlbXNbaW5kZXhdLCAvLyB0aGUgbWVudSBpdGVtIHRhcmdldHMgdGhpcyBlbGVtZW50XG5cdCAgICAgICAgICBkcm9wZG93biA9IGdldENsb3Nlc3QocGFyZW50LCcuZHJvcGRvd24nKSxcblx0ICAgICAgICAgIHRhcmdldFJlY3QgPSBpc1dpbmRvdyAmJiB0YXJnZXRJdGVtW2dldEJvdW5kaW5nQ2xpZW50UmVjdF0oKSxcblx0ICBcblx0ICAgICAgICAgIGlzQWN0aXZlID0gaGFzQ2xhc3MocGFyZW50LGFjdGl2ZSkgfHwgZmFsc2UsXG5cdCAgXG5cdCAgICAgICAgICB0b3BFZGdlID0gaXNXaW5kb3cgPyB0YXJnZXRSZWN0W3RvcF0gKyBzY3JvbGxPZmZzZXQgOiB0YXJnZXRJdGVtW29mZnNldFRvcF0gLSAodGFyZ2V0SXRlbXNbaW5kZXgtMV0gPyAwIDogMTApLFxuXHQgICAgICAgICAgYm90dG9tRWRnZSA9IGlzV2luZG93ID8gdGFyZ2V0UmVjdFtib3R0b21dICsgc2Nyb2xsT2Zmc2V0IDogdGFyZ2V0SXRlbXNbaW5kZXgrMV0gPyB0YXJnZXRJdGVtc1tpbmRleCsxXVtvZmZzZXRUb3BdIDogZWxlbWVudFtzY3JvbGxIZWlnaHRdLFxuXHQgIFxuXHQgICAgICAgICAgaW5zaWRlID0gc2Nyb2xsT2Zmc2V0ID49IHRvcEVkZ2UgJiYgYm90dG9tRWRnZSA+IHNjcm9sbE9mZnNldDtcblx0ICBcblx0ICAgICAgICBpZiAoICFpc0FjdGl2ZSAmJiBpbnNpZGUgKSB7XG5cdCAgICAgICAgICBpZiAoIHBhcmVudC50YWdOYW1lID09PSAnTEknICYmICFoYXNDbGFzcyhwYXJlbnQsYWN0aXZlKSApIHtcblx0ICAgICAgICAgICAgYWRkQ2xhc3MocGFyZW50LGFjdGl2ZSk7XG5cdCAgICAgICAgICAgIGlzQWN0aXZlID0gdHJ1ZTtcblx0ICAgICAgICAgICAgaWYgKGRyb3Bkb3duICYmICFoYXNDbGFzcyhkcm9wZG93bixhY3RpdmUpICkge1xuXHQgICAgICAgICAgICAgIGFkZENsYXNzKGRyb3Bkb3duLGFjdGl2ZSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgYm9vdHN0cmFwQ3VzdG9tRXZlbnQuY2FsbChlbGVtZW50LCAnYWN0aXZhdGUnLCAnc2Nyb2xsc3B5JywgaXRlbXNbaW5kZXhdKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9IGVsc2UgaWYgKCAhaW5zaWRlICkge1xuXHQgICAgICAgICAgaWYgKCBwYXJlbnQudGFnTmFtZSA9PT0gJ0xJJyAmJiBoYXNDbGFzcyhwYXJlbnQsYWN0aXZlKSApIHtcblx0ICAgICAgICAgICAgcmVtb3ZlQ2xhc3MocGFyZW50LGFjdGl2ZSk7XG5cdCAgICAgICAgICAgIGlzQWN0aXZlID0gZmFsc2U7XG5cdCAgICAgICAgICAgIGlmIChkcm9wZG93biAmJiBoYXNDbGFzcyhkcm9wZG93bixhY3RpdmUpICYmICFnZXRFbGVtZW50c0J5Q2xhc3NOYW1lKHBhcmVudFtwYXJlbnROb2RlXSxhY3RpdmUpLmxlbmd0aCApIHtcblx0ICAgICAgICAgICAgICByZW1vdmVDbGFzcyhkcm9wZG93bixhY3RpdmUpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfSBlbHNlIGlmICggIWluc2lkZSAmJiAhaXNBY3RpdmUgfHwgaXNBY3RpdmUgJiYgaW5zaWRlICkge1xuXHQgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSxcblx0ICAgICAgdXBkYXRlSXRlbXMgPSBmdW5jdGlvbigpe1xuXHQgICAgICAgIHNjcm9sbE9mZnNldCA9IGlzV2luZG93ID8gZ2V0U2Nyb2xsKCkueSA6IGVsZW1lbnRbc2Nyb2xsVG9wXTtcblx0ICAgICAgICBmb3IgKHZhciBpbmRleD0wLCBpdGw9aXRlbXNbbGVuZ3RoXTsgaW5kZXg8aXRsOyBpbmRleCsrKSB7XG5cdCAgICAgICAgICB1cGRhdGVJdGVtKGluZGV4KVxuXHQgICAgICAgIH1cblx0ICAgICAgfTtcblx0ICBcblx0ICAgIC8vIHB1YmxpYyBtZXRob2Rcblx0ICAgIHRoaXMucmVmcmVzaCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgdXBkYXRlSXRlbXMoKTtcblx0ICAgIH1cblx0ICBcblx0ICAgIC8vIGluaXRcblx0ICAgIGlmICggIShzdHJpbmdTY3JvbGxTcHkgaW4gZWxlbWVudCkgKSB7IC8vIHByZXZlbnQgYWRkaW5nIGV2ZW50IGhhbmRsZXJzIHR3aWNlXG5cdCAgICAgIG9uKCBzY3JvbGxUYXJnZXQsIHNjcm9sbEV2ZW50LCB0aGlzLnJlZnJlc2ggKTtcblx0ICAgICAgaWYgKCAhKGlzSUUgJiYgaXNJRSA8IDkpKSB7IFxuXHQgICAgICAgIG9uKCBnbG9iYWxPYmplY3QsIHJlc2l6ZUV2ZW50LCB0aGlzLnJlZnJlc2ggKTsgXG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICAgIHRoaXMucmVmcmVzaCgpO1xuXHQgICAgZWxlbWVudFtzdHJpbmdTY3JvbGxTcHldID0gdGhpcztcblx0ICB9O1xuXHQgIFxuXHQgIC8vIFNDUk9MTFNQWSBEQVRBIEFQSVxuXHQgIC8vID09PT09PT09PT09PT09PT09PVxuXHQgIGluaXRpYWxpemVEYXRhQVBJKHN0cmluZ1Njcm9sbFNweSwgU2Nyb2xsU3B5LCBkYXRhU3B5KTtcblx0ICBcblx0ICBcblx0ICAvKiBOYXRpdmUgSmF2YXNjcmlwdCBmb3IgQm9vdHN0cmFwIDMgfCBUYWJcblx0ICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cdCAgXG5cdCAgLy8gVEFCIERFRklOSVRJT05cblx0ICAvLyA9PT09PT09PT09PT09PVxuXHQgIHZhciBUYWIgPSBmdW5jdGlvbiggZWxlbWVudCwgb3B0aW9ucyApIHtcblx0ICBcblx0ICAgIC8vIGluaXRpYWxpemF0aW9uIGVsZW1lbnRcblx0ICAgIGVsZW1lbnQgPSBxdWVyeUVsZW1lbnQoZWxlbWVudCk7XG5cdCAgXG5cdCAgICAvLyBEQVRBIEFQSVxuXHQgICAgdmFyIGhlaWdodERhdGEgPSBlbGVtZW50W2dldEF0dHJpYnV0ZV0oZGF0YUhlaWdodCksXG5cdCAgICAgIFxuXHQgICAgICAgIC8vIHN0cmluZ3Ncblx0ICAgICAgICBjb21wb25lbnQgPSAndGFiJywgaGVpZ2h0ID0gJ2hlaWdodCcsIGlzQW5pbWF0aW5nID0gJ2lzQW5pbWF0aW5nJztcblx0ICBcblx0ICAgIC8vIHNldCBkZWZhdWx0IGFuaW1hdGlvbiBzdGF0ZVxuXHQgICAgZWxlbWVudFtpc0FuaW1hdGluZ10gPSBmYWxzZTtcblx0ICBcblx0ICAgIC8vIHNldCBvcHRpb25zXG5cdCAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblx0ICAgIHRoaXNbaGVpZ2h0XSA9IHN1cHBvcnRUcmFuc2l0aW9ucyA/IChvcHRpb25zW2hlaWdodF0gfHwgaGVpZ2h0RGF0YSA9PT0gJ3RydWUnKSA6IGZhbHNlOyAvLyBmaWx0ZXIgbGVnYWN5IGJyb3dzZXJzXG5cdCAgXG5cdCAgICAvLyBiaW5kLCBldmVudCB0YXJnZXRzXG5cdCAgICB2YXIgc2VsZiA9IHRoaXMsIG5leHQsXG5cdCAgICAgIHRhYnMgPSBnZXRDbG9zZXN0KGVsZW1lbnQsJy5uYXYnKSxcblx0ICAgICAgdGFic0NvbnRlbnRDb250YWluZXIsXG5cdCAgICAgIGRyb3Bkb3duID0gcXVlcnlFbGVtZW50KCcuZHJvcGRvd24nLHRhYnMpO1xuXHQgIFxuXHQgICAgLy8gcHJpdmF0ZSBtZXRob2RzXG5cdCAgICB2YXIgZ2V0QWN0aXZlVGFiID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgdmFyIGFjdGl2ZVRhYnMgPSBnZXRFbGVtZW50c0J5Q2xhc3NOYW1lKHRhYnMsYWN0aXZlKSwgYWN0aXZlVGFiO1xuXHQgICAgICAgIGlmICggYWN0aXZlVGFic1tsZW5ndGhdID09PSAxICYmICFoYXNDbGFzcyhhY3RpdmVUYWJzWzBdLCdkcm9wZG93bicpICkge1xuXHQgICAgICAgICAgYWN0aXZlVGFiID0gYWN0aXZlVGFic1swXTtcblx0ICAgICAgICB9IGVsc2UgaWYgKCBhY3RpdmVUYWJzW2xlbmd0aF0gPiAxICkge1xuXHQgICAgICAgICAgYWN0aXZlVGFiID0gYWN0aXZlVGFic1thY3RpdmVUYWJzW2xlbmd0aF0tMV07XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiBhY3RpdmVUYWJbZ2V0RWxlbWVudHNCeVRhZ05hbWVdKCdBJylbMF07XG5cdCAgICAgIH0sXG5cdCAgICAgIGdldEFjdGl2ZUNvbnRlbnQgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgICByZXR1cm4gcXVlcnlFbGVtZW50KGdldEFjdGl2ZVRhYigpW2dldEF0dHJpYnV0ZV0oJ2hyZWYnKSk7XG5cdCAgICAgIH0sXG5cdCAgICAgIC8vIGhhbmRsZXIgXG5cdCAgICAgIGNsaWNrSGFuZGxlciA9IGZ1bmN0aW9uKGUpIHtcblx0ICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cdCAgICAgICAgbmV4dCA9IGVbdGFyZ2V0XTtcblx0ICAgICAgICBzZWxmLnNob3coKTtcblx0ICAgICAgfTtcblx0ICBcblx0ICAgIC8vIHB1YmxpYyBtZXRob2Rcblx0ICAgIHRoaXMuc2hvdyA9IGZ1bmN0aW9uKCkgeyAvLyB0aGUgdGFiIHdlIGNsaWNrZWQgaXMgbm93IHRoZSBuZXh0IHRhYlxuXHQgICAgICB2YXIgbmV4dENvbnRlbnQgPSBxdWVyeUVsZW1lbnQobmV4dFtnZXRBdHRyaWJ1dGVdKCdocmVmJykpLCAvL3RoaXMgaXMgdGhlIGFjdHVhbCBvYmplY3QsIHRoZSBuZXh0IHRhYiBjb250ZW50IHRvIGFjdGl2YXRlXG5cdCAgICAgICAgYWN0aXZlVGFiID0gZ2V0QWN0aXZlVGFiKCksIGFjdGl2ZUNvbnRlbnQgPSBnZXRBY3RpdmVDb250ZW50KCk7XG5cdCAgICAgIFxuXHQgICAgICBpZiAoICghYWN0aXZlVGFiW2lzQW5pbWF0aW5nXSB8fCAhbmV4dFtpc0FuaW1hdGluZ10pICYmICFoYXNDbGFzcyhuZXh0W3BhcmVudE5vZGVdLGFjdGl2ZSkgKSB7XG5cdCAgICAgICAgYWN0aXZlVGFiW2lzQW5pbWF0aW5nXSA9IG5leHRbaXNBbmltYXRpbmddID0gdHJ1ZTtcblx0ICAgICAgICByZW1vdmVDbGFzcyhhY3RpdmVUYWJbcGFyZW50Tm9kZV0sYWN0aXZlKTtcblx0ICAgICAgICBhZGRDbGFzcyhuZXh0W3BhcmVudE5vZGVdLGFjdGl2ZSk7XG5cdCAgXG5cdCAgICAgICAgaWYgKCBkcm9wZG93biApIHtcblx0ICAgICAgICAgIGlmICggIWhhc0NsYXNzKGVsZW1lbnRbcGFyZW50Tm9kZV1bcGFyZW50Tm9kZV0sJ2Ryb3Bkb3duLW1lbnUnKSApIHtcblx0ICAgICAgICAgICAgaWYgKGhhc0NsYXNzKGRyb3Bkb3duLGFjdGl2ZSkpIHJlbW92ZUNsYXNzKGRyb3Bkb3duLGFjdGl2ZSk7XG5cdCAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICBpZiAoIWhhc0NsYXNzKGRyb3Bkb3duLGFjdGl2ZSkpIGFkZENsYXNzKGRyb3Bkb3duLGFjdGl2ZSk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIFxuXHQgICAgICAgIGlmICh0YWJzQ29udGVudENvbnRhaW5lcikgdGFic0NvbnRlbnRDb250YWluZXJbc3R5bGVdW2hlaWdodF0gPSBnZXRNYXhIZWlnaHQoYWN0aXZlQ29udGVudCkgKyAncHgnOyAvLyBoZWlnaHQgYW5pbWF0aW9uXG5cdCAgXG5cdCAgICAgICAgYm9vdHN0cmFwQ3VzdG9tRXZlbnQuY2FsbChhY3RpdmVUYWIsIGhpZGVFdmVudCwgY29tcG9uZW50LCBuZXh0KTtcblx0ICBcblx0ICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHQgICAgICAgICAgcmVtb3ZlQ2xhc3MoYWN0aXZlQ29udGVudCxpbkNsYXNzKTtcblx0ICAgICAgICB9LCAwKTtcblx0ICBcblx0ICAgICAgICBlbXVsYXRlVHJhbnNpdGlvbkVuZChhY3RpdmVDb250ZW50LCBmdW5jdGlvbigpIHtcblx0ICAgICAgICAgIGlmICh0YWJzQ29udGVudENvbnRhaW5lcikgYWRkQ2xhc3ModGFic0NvbnRlbnRDb250YWluZXIsY29sbGFwc2luZyk7XG5cdCAgICAgICAgICByZW1vdmVDbGFzcyhhY3RpdmVDb250ZW50LGFjdGl2ZSk7XG5cdCAgICAgICAgICBhZGRDbGFzcyhuZXh0Q29udGVudCxhY3RpdmUpO1xuXHQgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0ICAgICAgICAgICAgYWRkQ2xhc3MobmV4dENvbnRlbnQsaW5DbGFzcyk7XG5cdCAgICAgICAgICAgIGlmKHRhYnNDb250ZW50Q29udGFpbmVyKSB0YWJzQ29udGVudENvbnRhaW5lcltzdHlsZV1baGVpZ2h0XSA9IGdldE1heEhlaWdodChuZXh0Q29udGVudCkgKyAncHgnOyAvLyBoZWlnaHQgYW5pbWF0aW9uXG5cdCAgICAgICAgICB9LCAwKTtcblx0ICBcblx0ICAgICAgICAgIGJvb3RzdHJhcEN1c3RvbUV2ZW50LmNhbGwobmV4dCwgc2hvd0V2ZW50LCBjb21wb25lbnQsIGFjdGl2ZVRhYik7XG5cdCAgICAgICAgICBib290c3RyYXBDdXN0b21FdmVudC5jYWxsKGFjdGl2ZVRhYiwgaGlkZGVuRXZlbnQsIGNvbXBvbmVudCwgbmV4dCk7XG5cdCAgXG5cdCAgICAgICAgfSk7XG5cdCAgXG5cdCAgICAgICAgZW11bGF0ZVRyYW5zaXRpb25FbmQobmV4dENvbnRlbnQsIGZ1bmN0aW9uKCkge1xuXHQgICAgICAgICAgYm9vdHN0cmFwQ3VzdG9tRXZlbnQuY2FsbChuZXh0LCBzaG93bkV2ZW50LCBjb21wb25lbnQsIGFjdGl2ZVRhYik7XG5cdCAgICAgICAgICBpZiAodGFic0NvbnRlbnRDb250YWluZXIpIHsgLy8gaGVpZ2h0IGFuaW1hdGlvblxuXHQgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG5cdCAgICAgICAgICAgICAgZW11bGF0ZVRyYW5zaXRpb25FbmQodGFic0NvbnRlbnRDb250YWluZXIsIGZ1bmN0aW9uKCl7XG5cdCAgICAgICAgICAgICAgICB0YWJzQ29udGVudENvbnRhaW5lcltzdHlsZV1baGVpZ2h0XSA9ICAnJztcblx0ICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzKHRhYnNDb250ZW50Q29udGFpbmVyLGNvbGxhcHNpbmcpO1xuXHQgICAgICAgICAgICAgICAgYWN0aXZlVGFiW2lzQW5pbWF0aW5nXSA9IG5leHRbaXNBbmltYXRpbmddID0gZmFsc2U7XG5cdCAgICAgICAgICAgICAgfSlcblx0ICAgICAgICAgICAgfSwwKTtcblx0ICAgICAgICAgIH0gZWxzZSB7IGFjdGl2ZVRhYltpc0FuaW1hdGluZ10gPSBuZXh0W2lzQW5pbWF0aW5nXSA9IGZhbHNlOyB9XG5cdCAgICAgICAgfSk7XG5cdCAgICAgIH1cblx0ICAgIH07XG5cdCAgXG5cdCAgICAvLyBpbml0XG5cdCAgICBpZiAoICEoc3RyaW5nVGFiIGluIGVsZW1lbnQpICkgeyAvLyBwcmV2ZW50IGFkZGluZyBldmVudCBoYW5kbGVycyB0d2ljZVxuXHQgICAgICBvbihlbGVtZW50LCBjbGlja0V2ZW50LCBjbGlja0hhbmRsZXIpO1xuXHQgICAgfVxuXHQgICAgaWYgKHRoaXNbaGVpZ2h0XSkgeyB0YWJzQ29udGVudENvbnRhaW5lciA9IGdldEFjdGl2ZUNvbnRlbnQoKVtwYXJlbnROb2RlXTsgfVxuXHQgICAgZWxlbWVudFtzdHJpbmdUYWJdID0gdGhpcztcblx0ICB9O1xuXHQgIFxuXHQgIC8vIFRBQiBEQVRBIEFQSVxuXHQgIC8vID09PT09PT09PT09PVxuXHQgIGluaXRpYWxpemVEYXRhQVBJKHN0cmluZ1RhYiwgVGFiLCBkYXRhVG9nZ2xlKTtcblx0ICBcblx0ICBcblx0ICAvKiBOYXRpdmUgSmF2YXNjcmlwdCBmb3IgQm9vdHN0cmFwIDMgfCBUb29sdGlwXG5cdCAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblx0ICBcblx0ICAvLyBUT09MVElQIERFRklOSVRJT05cblx0ICAvLyA9PT09PT09PT09PT09PT09PT1cblx0ICB2YXIgVG9vbHRpcCA9IGZ1bmN0aW9uKCBlbGVtZW50LG9wdGlvbnMgKSB7XG5cdCAgXG5cdCAgICAvLyBpbml0aWFsaXphdGlvbiBlbGVtZW50XG5cdCAgICBlbGVtZW50ID0gcXVlcnlFbGVtZW50KGVsZW1lbnQpO1xuXHQgIFxuXHQgICAgLy8gREFUQSBBUElcblx0ICAgIHZhciBhbmltYXRpb25EYXRhID0gZWxlbWVudFtnZXRBdHRyaWJ1dGVdKGRhdGFBbmltYXRpb24pO1xuXHQgICAgICAgIHBsYWNlbWVudERhdGEgPSBlbGVtZW50W2dldEF0dHJpYnV0ZV0oZGF0YVBsYWNlbWVudCk7XG5cdCAgICAgICAgZGVsYXlEYXRhID0gZWxlbWVudFtnZXRBdHRyaWJ1dGVdKGRhdGFEZWxheSksXG5cdCAgICAgICAgY29udGFpbmVyRGF0YSA9IGVsZW1lbnRbZ2V0QXR0cmlidXRlXShkYXRhQ29udGFpbmVyKSxcblx0ICAgICAgICBcblx0ICAgICAgICAvLyBzdHJpbmdzXG5cdCAgICAgICAgY29tcG9uZW50ID0gJ3Rvb2x0aXAnLFxuXHQgICAgICAgIGNsYXNzU3RyaW5nID0gJ2NsYXNzJyxcblx0ICAgICAgICB0aXRsZSA9ICd0aXRsZScsXG5cdCAgICAgICAgZmFkZSA9ICdmYWRlJyxcblx0ICAgICAgICBkaXYgPSAnZGl2Jztcblx0ICBcblx0ICAgIC8vIHNldCBvcHRpb25zXG5cdCAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblx0ICAgIHRoaXNbYW5pbWF0aW9uXSA9IG9wdGlvbnNbYW5pbWF0aW9uXSAmJiBvcHRpb25zW2FuaW1hdGlvbl0gIT09IGZhZGUgPyBvcHRpb25zW2FuaW1hdGlvbl0gOiBhbmltYXRpb25EYXRhIHx8IGZhZGU7XG5cdCAgICB0aGlzW3BsYWNlbWVudF0gPSBvcHRpb25zW3BsYWNlbWVudF0gPyBvcHRpb25zW3BsYWNlbWVudF0gOiBwbGFjZW1lbnREYXRhIHx8IHRvcDtcblx0ICAgIHRoaXNbZGVsYXldID0gcGFyc2VJbnQob3B0aW9uc1tkZWxheV0gfHwgZGVsYXlEYXRhKSB8fCAyMDA7XG5cdCAgICB0aGlzW2NvbnRhaW5lcl0gPSBxdWVyeUVsZW1lbnQob3B0aW9uc1tjb250YWluZXJdKSB8fCBxdWVyeUVsZW1lbnQoY29udGFpbmVyRGF0YSkgfHwgYm9keTtcblx0ICBcblx0ICAgIC8vIGJpbmQsIGV2ZW50IHRhcmdldHMsIHRpdGxlIGFuZCBjb25zdGFudHNcblx0ICAgIHZhciBzZWxmID0gdGhpcywgdGltZXIgPSAwLCBwbGFjZW1lbnRTZXR0aW5nID0gdGhpc1twbGFjZW1lbnRdLCB0b29sdGlwID0gbnVsbCxcblx0ICAgICAgdGl0bGVTdHJpbmcgPSBlbGVtZW50W2dldEF0dHJpYnV0ZV0odGl0bGUpIHx8IGVsZW1lbnRbZ2V0QXR0cmlidXRlXShkYXRhT3JpZ2luYWxUaXRsZSk7XG5cdCAgXG5cdCAgICBpZiAoICF0aXRsZVN0cmluZyApIHJldHVybjsgLy8gaW52YWxpZGF0ZVxuXHQgIFxuXHQgICAgLy8gcHJpdmF0ZSBtZXRob2RzXG5cdCAgICB2YXIgcmVtb3ZlVG9vbFRpcCA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHNlbGZbY29udGFpbmVyXS5yZW1vdmVDaGlsZCh0b29sdGlwKTtcblx0ICAgICAgICB0b29sdGlwID0gbnVsbDsgdGltZXIgPSBudWxsO1xuXHQgICAgICB9LFxuXHQgICAgICBjcmVhdGVUb29sVGlwID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgdGl0bGVTdHJpbmcgPSBlbGVtZW50W2dldEF0dHJpYnV0ZV0odGl0bGUpIHx8IGVsZW1lbnRbZ2V0QXR0cmlidXRlXShkYXRhT3JpZ2luYWxUaXRsZSk7IC8vIHJlYWQgdGhlIHRpdGxlIGFnYWluXG5cdCAgICAgICAgdG9vbHRpcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoZGl2KTtcblx0ICAgICAgICB0b29sdGlwW3NldEF0dHJpYnV0ZV0oJ3JvbGUnLGNvbXBvbmVudCk7XG5cdCAgXG5cdCAgICAgICAgdmFyIHRvb2x0aXBBcnJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoZGl2KSwgdG9vbHRpcElubmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChkaXYpO1xuXHQgICAgICAgIHRvb2x0aXBBcnJvd1tzZXRBdHRyaWJ1dGVdKGNsYXNzU3RyaW5nLCBjb21wb25lbnQrJy1hcnJvdycpOyB0b29sdGlwSW5uZXJbc2V0QXR0cmlidXRlXShjbGFzc1N0cmluZyxjb21wb25lbnQrJy1pbm5lcicpO1xuXHQgIFxuXHQgICAgICAgIHRvb2x0aXAuYXBwZW5kQ2hpbGQodG9vbHRpcEFycm93KTsgdG9vbHRpcC5hcHBlbmRDaGlsZCh0b29sdGlwSW5uZXIpO1xuXHQgIFxuXHQgICAgICAgIHRvb2x0aXBJbm5lci5pbm5lckhUTUwgPSB0aXRsZVN0cmluZztcblx0ICBcblx0ICAgICAgICBzZWxmW2NvbnRhaW5lcl0uYXBwZW5kQ2hpbGQodG9vbHRpcCk7XG5cdCAgICAgICAgdG9vbHRpcFtzZXRBdHRyaWJ1dGVdKGNsYXNzU3RyaW5nLCBjb21wb25lbnQgKyAnICcgKyBwbGFjZW1lbnRTZXR0aW5nICsgJyAnICsgc2VsZlthbmltYXRpb25dKTtcblx0ICAgICAgfSxcblx0ICAgICAgdXBkYXRlVG9vbHRpcCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBzdHlsZVRpcChlbGVtZW50LHRvb2x0aXAscGxhY2VtZW50U2V0dGluZyxzZWxmW2NvbnRhaW5lcl0pO1xuXHQgICAgICAgIGlmICghaXNFbGVtZW50SW5WaWV3cG9ydCh0b29sdGlwKSApIHsgXG5cdCAgICAgICAgICBwbGFjZW1lbnRTZXR0aW5nID0gdXBkYXRlUGxhY2VtZW50KHBsYWNlbWVudFNldHRpbmcpOyBcblx0ICAgICAgICAgIHN0eWxlVGlwKGVsZW1lbnQsdG9vbHRpcCxwbGFjZW1lbnRTZXR0aW5nLHNlbGZbY29udGFpbmVyXSk7IFxuXHQgICAgICAgIH1cblx0ICAgICAgfSxcblx0ICAgICAgc2hvd1Rvb2x0aXAgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgIWhhc0NsYXNzKHRvb2x0aXAsaW5DbGFzcykgJiYgKCBhZGRDbGFzcyh0b29sdGlwLGluQ2xhc3MpICk7XG5cdCAgICAgIH07XG5cdCAgXG5cdCAgICAvLyBwdWJsaWMgbWV0aG9kc1xuXHQgICAgdGhpcy5zaG93ID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG5cdCAgICAgIHRpbWVyID0gc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgaWYgKHRvb2x0aXAgPT09IG51bGwpIHtcblx0ICAgICAgICAgIHBsYWNlbWVudFNldHRpbmcgPSBzZWxmW3BsYWNlbWVudF07IC8vIHdlIHJlc2V0IHBsYWNlbWVudCBpbiBhbGwgY2FzZXNcblx0ICAgICAgICAgIGNyZWF0ZVRvb2xUaXAoKTtcblx0ICAgICAgICAgIHVwZGF0ZVRvb2x0aXAoKTtcblx0ICAgICAgICAgIHNob3dUb29sdGlwKCk7XG5cdCAgICAgICAgICBib290c3RyYXBDdXN0b21FdmVudC5jYWxsKGVsZW1lbnQsIHNob3dFdmVudCwgY29tcG9uZW50KTtcblx0ICAgICAgICAgIGVtdWxhdGVUcmFuc2l0aW9uRW5kKHRvb2x0aXAsIGZ1bmN0aW9uKCkge1xuXHQgICAgICAgICAgICBib290c3RyYXBDdXN0b21FdmVudC5jYWxsKGVsZW1lbnQsIHNob3duRXZlbnQsIGNvbXBvbmVudCk7XG5cdCAgICAgICAgICB9KTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0sIDIwICk7XG5cdCAgICB9O1xuXHQgICAgdGhpcy5oaWRlID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG5cdCAgICAgIHRpbWVyID0gc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgaWYgKHRvb2x0aXAgJiYgdG9vbHRpcCAhPT0gbnVsbCAmJiBoYXNDbGFzcyh0b29sdGlwLGluQ2xhc3MpKSB7XG5cdCAgICAgICAgICBib290c3RyYXBDdXN0b21FdmVudC5jYWxsKGVsZW1lbnQsIGhpZGVFdmVudCwgY29tcG9uZW50KTtcblx0ICAgICAgICAgIHJlbW92ZUNsYXNzKHRvb2x0aXAsaW5DbGFzcyk7XG5cdCAgICAgICAgICBlbXVsYXRlVHJhbnNpdGlvbkVuZCh0b29sdGlwLCBmdW5jdGlvbigpIHtcblx0ICAgICAgICAgICAgcmVtb3ZlVG9vbFRpcCgpO1xuXHQgICAgICAgICAgICBib290c3RyYXBDdXN0b21FdmVudC5jYWxsKGVsZW1lbnQsIGhpZGRlbkV2ZW50LCBjb21wb25lbnQpO1xuXHQgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9LCBzZWxmW2RlbGF5XSk7XG5cdCAgICB9O1xuXHQgICAgdGhpcy50b2dnbGUgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgaWYgKCF0b29sdGlwKSB7IHNlbGYuc2hvdygpOyB9IFxuXHQgICAgICBlbHNlIHsgc2VsZi5oaWRlKCk7IH1cblx0ICAgIH07XG5cdCAgXG5cdCAgICAvLyBpbml0XG5cdCAgICBpZiAoICEoc3RyaW5nVG9vbHRpcCBpbiBlbGVtZW50KSApIHsgLy8gcHJldmVudCBhZGRpbmcgZXZlbnQgaGFuZGxlcnMgdHdpY2Vcblx0ICAgICAgZWxlbWVudFtzZXRBdHRyaWJ1dGVdKGRhdGFPcmlnaW5hbFRpdGxlLHRpdGxlU3RyaW5nKTtcblx0ICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUodGl0bGUpO1xuXHQgICAgICBvbihlbGVtZW50LCBtb3VzZUhvdmVyWzBdLCB0aGlzLnNob3cpO1xuXHQgICAgICBvbihlbGVtZW50LCBtb3VzZUhvdmVyWzFdLCB0aGlzLmhpZGUpO1xuXHQgICAgfVxuXHQgICAgZWxlbWVudFtzdHJpbmdUb29sdGlwXSA9IHRoaXM7XG5cdCAgfTtcblx0ICBcblx0ICAvLyBUT09MVElQIERBVEEgQVBJXG5cdCAgLy8gPT09PT09PT09PT09PT09PT1cblx0ICBpbml0aWFsaXplRGF0YUFQSShzdHJpbmdUb29sdGlwLCBUb29sdGlwLCBkYXRhVG9nZ2xlKTtcblx0ICBcblx0ICBcblx0ICByZXR1cm4ge1xuXHQgICAgQWZmaXg6IEFmZml4LFxuXHQgICAgQWxlcnQ6IEFsZXJ0LFxuXHQgICAgQnV0dG9uOiBCdXR0b24sXG5cdCAgICBDYXJvdXNlbDogQ2Fyb3VzZWwsXG5cdCAgICBDb2xsYXBzZTogQ29sbGFwc2UsXG5cdCAgICBEcm9wZG93bjogRHJvcGRvd24sXG5cdCAgICBNb2RhbDogTW9kYWwsXG5cdCAgICBQb3BvdmVyOiBQb3BvdmVyLFxuXHQgICAgU2Nyb2xsU3B5OiBTY3JvbGxTcHksXG5cdCAgICBUYWI6IFRhYixcblx0ICAgIFRvb2x0aXA6IFRvb2x0aXBcblx0ICB9O1xuXHR9KSk7XG5cdFxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywgKGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSgpKSkpXG5cbi8qKiovIH1cbi8qKioqKiovIF0pO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBteS1jb20uanMiLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSlcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcblxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0ZXhwb3J0czoge30sXG4gXHRcdFx0aWQ6IG1vZHVsZUlkLFxuIFx0XHRcdGxvYWRlZDogZmFsc2VcbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyB3ZWJwYWNrL2Jvb3RzdHJhcCBkOTU4NWMyMzI2MjYwOTMxYWQzOSIsIi8qXG5mdW5jdGlvbiBjaGVja1ZhbHVlcyAoZWxtTmFtZSkge1xuICAgIGFsZXJ0KGVsbU5hbWUpO1xufVxuXG5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcjc2VhcmNoUGVyc29uIGlucHV0JykuZm9yRWFjaCgoY3VyKSA9PiB7XG4gICAgY3VyLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgY2hlY2tWYWx1ZXMoJyNzZWFyY2hQZXJzb24nKSk7XG59KTsqL1xuaW1wb3J0IGJzbiBmcm9tICdib290c3RyYXAubmF0aXZlJztcblxuaWYoZG9jdW1lbnQuYm9keS5pZCA9PSAnZmluZFBlcnNvbicpIHtcbiAgICBsZXQgYmxuUmVtb3ZlU3VtYml0ID0gdHJ1ZTtcbiAgICBjb25zdCBlbG1JbnB1dHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcjc2VhcmNoUGVyc29uIGlucHV0Jyk7XG4gICAgY29uc3QgYnRuU3VtYml0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNmaW5kUGVyc29uXCIpO1xuXG4gICAgZWxtSW5wdXRzLmZvckVhY2goKGN1cikgPT4ge1xuICAgICAgICBpZigoY3VyLnZhbHVlLnRyaW0oKS5sZW5ndGggPT0gMCkgJiYgKChjdXIubmFtZSA9PSAnbGFzdC1uYW1lJykgfHwgKGN1ci5uYW1lID09ICdmaXJzdC1uYW1lJykpKSB7XG4gICAgICAgICAgICBibG5SZW1vdmVTdW1iaXQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgYmxuUmVtb3ZlU3VtYml0ID09IGZhbHNlID8gYnRuU3VtYml0LnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCdkaXNhYmxlZCcpIDogbnVsbDtcblxuICAgIGVsbUlucHV0cy5mb3JFYWNoKChjdXIpID0+IHtcbiAgICAgICAgY3VyLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKCkgPT4ge1xuICAgICAgICAgICAgbGV0IGJsblN1bWJpdCA9IHRydWU7XG5cbiAgICAgICAgICAgIGVsbUlucHV0cy5mb3JFYWNoKChjdXJQbGFjZWQpID0+IHtcbiAgICAgICAgICAgICAgICBpZigoY3VyUGxhY2VkLnZhbHVlLnRyaW0oKS5sZW5ndGggPT0gMCkgJiYgKChjdXJQbGFjZWQubmFtZSA9PSAnbGFzdC1uYW1lJykgfHwgKGN1clBsYWNlZC5uYW1lID09ICdmaXJzdC1uYW1lJykpKSB7XG4gICAgICAgICAgICAgICAgICAgIGJsblN1bWJpdCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBjdXJQbGFjZWQuY2xhc3NMaXN0LmFkZCgnbXlFcnJvcicpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGN1clBsYWNlZC5jbGFzc0xpc3QucmVtb3ZlKCdteUVycm9yJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGJsblN1bWJpdCA9PT0gdHJ1ZSA/IGJ0blN1bWJpdC5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJykgOiBudWxsO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9qcy9sYXlvdXQuanMiLCIvLyBOYXRpdmUgSmF2YXNjcmlwdCBmb3IgQm9vdHN0cmFwIDMgdjIuMC40IHwgwqkgZG5wX3RoZW1lIHwgTUlULUxpY2Vuc2VcbihmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgLy8gQU1EIHN1cHBvcnQ6XG4gICAgZGVmaW5lKFtdLCBmYWN0b3J5KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgIC8vIENvbW1vbkpTLWxpa2U6XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gQnJvd3NlciBnbG9iYWxzIChyb290IGlzIHdpbmRvdylcbiAgICB2YXIgYnNuID0gZmFjdG9yeSgpO1xuICAgIHJvb3QuQWZmaXggPSBic24uQWZmaXg7XG4gICAgcm9vdC5BbGVydCA9IGJzbi5BbGVydDtcbiAgICByb290LkJ1dHRvbiA9IGJzbi5CdXR0b247XG4gICAgcm9vdC5DYXJvdXNlbCA9IGJzbi5DYXJvdXNlbDtcbiAgICByb290LkNvbGxhcHNlID0gYnNuLkNvbGxhcHNlO1xuICAgIHJvb3QuRHJvcGRvd24gPSBic24uRHJvcGRvd247XG4gICAgcm9vdC5Nb2RhbCA9IGJzbi5Nb2RhbDtcbiAgICByb290LlBvcG92ZXIgPSBic24uUG9wb3ZlcjtcbiAgICByb290LlNjcm9sbFNweSA9IGJzbi5TY3JvbGxTcHk7XG4gICAgcm9vdC5UYWIgPSBic24uVGFiO1xuICAgIHJvb3QuVG9vbHRpcCA9IGJzbi5Ub29sdGlwO1xuICB9XG59KHRoaXMsIGZ1bmN0aW9uICgpIHtcbiAgXG4gIC8qIE5hdGl2ZSBKYXZhc2NyaXB0IGZvciBCb290c3RyYXAgMyB8IEludGVybmFsIFV0aWxpdHkgRnVuY3Rpb25zXG4gIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuICBcbiAgLy8gZ2xvYmFsc1xuICB2YXIgZ2xvYmFsT2JqZWN0ID0gdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB0aGlzfHx3aW5kb3csXG4gICAgZG9jID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCBib2R5ID0gZG9jdW1lbnQuYm9keSxcbiAgXG4gICAgLy8gSUUgYnJvd3NlciBkZXRlY3RcbiAgICBpc0lFID0gKG5ldyBSZWdFeHAoXCJNU0lFIChbMC05XXsxLH1bXFwuMC05XXswLH0pXCIpLmV4ZWMobmF2aWdhdG9yLnVzZXJBZ2VudCkgIT0gbnVsbCkgPyBwYXJzZUZsb2F0KCBSZWdFeHAuJDEgKSA6IGZhbHNlLCAgXG4gIFxuICAgIC8vIGZ1bmN0aW9uIHRvZ2dsZSBhdHRyaWJ1dGVzXG4gICAgZGF0YVRvZ2dsZSAgICA9ICdkYXRhLXRvZ2dsZScsXG4gICAgZGF0YURpc21pc3MgICA9ICdkYXRhLWRpc21pc3MnLFxuICAgIGRhdGFTcHkgICAgICAgPSAnZGF0YS1zcHknLFxuICAgIGRhdGFSaWRlICAgICAgPSAnZGF0YS1yaWRlJyxcbiAgICBcbiAgICAvLyBjb21wb25lbnRzXG4gICAgc3RyaW5nQWZmaXggICAgID0gJ0FmZml4JyxcbiAgICBzdHJpbmdBbGVydCAgICAgPSAnQWxlcnQnLFxuICAgIHN0cmluZ0J1dHRvbiAgICA9ICdCdXR0b24nLFxuICAgIHN0cmluZ0Nhcm91c2VsICA9ICdDYXJvdXNlbCcsXG4gICAgc3RyaW5nQ29sbGFwc2UgID0gJ0NvbGxhcHNlJyxcbiAgICBzdHJpbmdEcm9wZG93biAgPSAnRHJvcGRvd24nLFxuICAgIHN0cmluZ01vZGFsICAgICA9ICdNb2RhbCcsXG4gICAgc3RyaW5nUG9wb3ZlciAgID0gJ1BvcG92ZXInLFxuICAgIHN0cmluZ1Njcm9sbFNweSA9ICdTY3JvbGxTcHknLFxuICAgIHN0cmluZ1RhYiAgICAgICA9ICdUYWInLFxuICAgIHN0cmluZ1Rvb2x0aXAgICA9ICdUb29sdGlwJyxcbiAgXG4gICAgLy8gb3B0aW9ucyBEQVRBIEFQSVxuICAgIGRhdGFiYWNrZHJvcCAgICAgID0gJ2RhdGEtYmFja2Ryb3AnLFxuICAgIGRhdGFLZXlib2FyZCAgICAgID0gJ2RhdGEta2V5Ym9hcmQnLFxuICAgIGRhdGFUYXJnZXQgICAgICAgID0gJ2RhdGEtdGFyZ2V0JyxcbiAgICBkYXRhSW50ZXJ2YWwgICAgICA9ICdkYXRhLWludGVydmFsJyxcbiAgICBkYXRhSGVpZ2h0ICAgICAgICA9ICdkYXRhLWhlaWdodCcsXG4gICAgZGF0YVBhdXNlICAgICAgICAgPSAnZGF0YS1wYXVzZScsXG4gICAgZGF0YU9yaWdpbmFsVGl0bGUgPSAnZGF0YS1vcmlnaW5hbC10aXRsZScsXG4gICAgZGF0YU9yaWdpbmFsVGV4dCAgPSAnZGF0YS1vcmlnaW5hbC10ZXh0JyxcbiAgICBkYXRhRGlzbWlzc2libGUgICA9ICdkYXRhLWRpc21pc3NpYmxlJyxcbiAgICBkYXRhVHJpZ2dlciAgICAgICA9ICdkYXRhLXRyaWdnZXInLFxuICAgIGRhdGFBbmltYXRpb24gICAgID0gJ2RhdGEtYW5pbWF0aW9uJyxcbiAgICBkYXRhQ29udGFpbmVyICAgICA9ICdkYXRhLWNvbnRhaW5lcicsXG4gICAgZGF0YVBsYWNlbWVudCAgICAgPSAnZGF0YS1wbGFjZW1lbnQnLFxuICAgIGRhdGFEZWxheSAgICAgICAgID0gJ2RhdGEtZGVsYXknLFxuICAgIGRhdGFPZmZzZXRUb3AgICAgID0gJ2RhdGEtb2Zmc2V0LXRvcCcsXG4gICAgZGF0YU9mZnNldEJvdHRvbSAgPSAnZGF0YS1vZmZzZXQtYm90dG9tJyxcbiAgXG4gICAgLy8gb3B0aW9uIGtleXNcbiAgICBiYWNrZHJvcCA9ICdiYWNrZHJvcCcsIGtleWJvYXJkID0gJ2tleWJvYXJkJywgZGVsYXkgPSAnZGVsYXknLFxuICAgIGR1cmF0aW9uID0gJ2R1cmF0aW9uJywgY29udGVudCA9ICdjb250ZW50JywgdGFyZ2V0ID0gJ3RhcmdldCcsIFxuICAgIGludGVydmFsID0gJ2ludGVydmFsJywgcGF1c2UgPSAncGF1c2UnLCBhbmltYXRpb24gPSAnYW5pbWF0aW9uJyxcbiAgICBwbGFjZW1lbnQgPSAncGxhY2VtZW50JywgY29udGFpbmVyID0gJ2NvbnRhaW5lcicsIFxuICBcbiAgICAvLyBib3ggbW9kZWxcbiAgICBvZmZzZXRUb3AgICAgPSAnb2Zmc2V0VG9wJywgICAgICBvZmZzZXRCb3R0b20gICA9ICdvZmZzZXRCb3R0b20nLFxuICAgIG9mZnNldExlZnQgICA9ICdvZmZzZXRMZWZ0JyxcbiAgICBzY3JvbGxUb3AgICAgPSAnc2Nyb2xsVG9wJywgICAgICBzY3JvbGxMZWZ0ICAgICA9ICdzY3JvbGxMZWZ0JyxcbiAgICBjbGllbnRXaWR0aCAgPSAnY2xpZW50V2lkdGgnLCAgICBjbGllbnRIZWlnaHQgICA9ICdjbGllbnRIZWlnaHQnLFxuICAgIG9mZnNldFdpZHRoICA9ICdvZmZzZXRXaWR0aCcsICAgIG9mZnNldEhlaWdodCAgID0gJ29mZnNldEhlaWdodCcsXG4gICAgaW5uZXJXaWR0aCAgID0gJ2lubmVyV2lkdGgnLCAgICAgaW5uZXJIZWlnaHQgICAgPSAnaW5uZXJIZWlnaHQnLFxuICAgIHNjcm9sbEhlaWdodCA9ICdzY3JvbGxIZWlnaHQnLCAgIGhlaWdodCAgICAgICAgID0gJ2hlaWdodCcsXG4gIFxuICAgIC8vIGFyaWFcbiAgICBhcmlhRXhwYW5kZWQgPSAnYXJpYS1leHBhbmRlZCcsXG4gICAgYXJpYUhpZGRlbiAgID0gJ2FyaWEtaGlkZGVuJyxcbiAgXG4gICAgLy8gZXZlbnQgbmFtZXNcbiAgICBjbGlja0V2ZW50ICAgID0gJ2NsaWNrJyxcbiAgICBob3ZlckV2ZW50ICAgID0gJ2hvdmVyJyxcbiAgICBrZXlkb3duRXZlbnQgID0gJ2tleWRvd24nLFxuICAgIHJlc2l6ZUV2ZW50ICAgPSAncmVzaXplJyxcbiAgICBzY3JvbGxFdmVudCAgID0gJ3Njcm9sbCcsXG4gICAgLy8gb3JpZ2luYWxFdmVudHNcbiAgICBzaG93RXZlbnQgICAgID0gJ3Nob3cnLFxuICAgIHNob3duRXZlbnQgICAgPSAnc2hvd24nLFxuICAgIGhpZGVFdmVudCAgICAgPSAnaGlkZScsXG4gICAgaGlkZGVuRXZlbnQgICA9ICdoaWRkZW4nLFxuICAgIGNsb3NlRXZlbnQgICAgPSAnY2xvc2UnLFxuICAgIGNsb3NlZEV2ZW50ICAgPSAnY2xvc2VkJyxcbiAgICBzbGlkRXZlbnQgICAgID0gJ3NsaWQnLFxuICAgIHNsaWRlRXZlbnQgICAgPSAnc2xpZGUnLFxuICAgIGNoYW5nZUV2ZW50ICAgPSAnY2hhbmdlJyxcbiAgXG4gICAgLy8gb3RoZXJcbiAgICBnZXRBdHRyaWJ1dGUgICAgICAgICA9ICdnZXRBdHRyaWJ1dGUnLFxuICAgIHNldEF0dHJpYnV0ZSAgICAgICAgID0gJ3NldEF0dHJpYnV0ZScsXG4gICAgaGFzQXR0cmlidXRlICAgICAgICAgPSAnaGFzQXR0cmlidXRlJyxcbiAgICBnZXRFbGVtZW50c0J5VGFnTmFtZSA9ICdnZXRFbGVtZW50c0J5VGFnTmFtZScsXG4gICAgZ2V0Qm91bmRpbmdDbGllbnRSZWN0PSAnZ2V0Qm91bmRpbmdDbGllbnRSZWN0JyxcbiAgICBxdWVyeVNlbGVjdG9yQWxsICAgICA9ICdxdWVyeVNlbGVjdG9yQWxsJyxcbiAgICBnZXRFbGVtZW50c0J5Q0xBU1NOQU1FID0gJ2dldEVsZW1lbnRzQnlDbGFzc05hbWUnLFxuICBcbiAgICBpbmRleE9mICAgICAgPSAnaW5kZXhPZicsXG4gICAgcGFyZW50Tm9kZSAgID0gJ3BhcmVudE5vZGUnLFxuICAgIGxlbmd0aCAgICAgICA9ICdsZW5ndGgnLFxuICAgIHRvTG93ZXJDYXNlICA9ICd0b0xvd2VyQ2FzZScsXG4gICAgVHJhbnNpdGlvbiAgID0gJ1RyYW5zaXRpb24nLFxuICAgIFdlYmtpdCAgICAgICA9ICdXZWJraXQnLFxuICAgIHN0eWxlICAgICAgICA9ICdzdHlsZScsXG4gICAgXG4gICAgYWN0aXZlICAgICA9ICdhY3RpdmUnLFxuICAgIGluQ2xhc3MgICAgPSAnaW4nLFxuICAgIGNvbGxhcHNpbmcgPSAnY29sbGFwc2luZycsXG4gICAgZGlzYWJsZWQgICA9ICdkaXNhYmxlZCcsXG4gICAgbG9hZGluZyAgICA9ICdsb2FkaW5nJyxcbiAgICBsZWZ0ICAgICAgID0gJ2xlZnQnLFxuICAgIHJpZ2h0ICAgICAgPSAncmlnaHQnLFxuICAgIHRvcCAgICAgICAgPSAndG9wJyxcbiAgICBib3R0b20gICAgID0gJ2JvdHRvbScsXG4gIFxuICAgIC8vIHRvb2x0aXAgLyBwb3BvdmVyXG4gICAgbW91c2VIb3ZlciA9ICgnb25tb3VzZWxlYXZlJyBpbiBkb2N1bWVudCkgPyBbICdtb3VzZWVudGVyJywgJ21vdXNlbGVhdmUnXSA6IFsgJ21vdXNlb3ZlcicsICdtb3VzZW91dCcgXSxcbiAgICB0aXBQb3NpdGlvbnMgPSAvXFxiKHRvcHxib3R0b218bGVmdHx0b3ApKy8sXG4gIFxuICAgIC8vIHRyYW5zaXRpb25FbmQgc2luY2UgMi4wLjRcbiAgICBzdXBwb3J0VHJhbnNpdGlvbnMgPSBXZWJraXQrVHJhbnNpdGlvbiBpbiBkb2Nbc3R5bGVdIHx8IFRyYW5zaXRpb25bdG9Mb3dlckNhc2VdKCkgaW4gZG9jW3N0eWxlXSxcbiAgICB0cmFuc2l0aW9uRW5kRXZlbnQgPSBXZWJraXQrVHJhbnNpdGlvbiBpbiBkb2Nbc3R5bGVdID8gV2Via2l0W3RvTG93ZXJDYXNlXSgpK1RyYW5zaXRpb24rJ0VuZCcgOiBUcmFuc2l0aW9uW3RvTG93ZXJDYXNlXSgpKydlbmQnLFxuICAgIFxuICBcbiAgICAvLyBzZXQgbmV3IGZvY3VzIGVsZW1lbnQgc2luY2UgMi4wLjNcbiAgICBzZXRGb2N1cyA9IGZ1bmN0aW9uKGVsZW1lbnQpe1xuICAgICAgZWxlbWVudC5mb2N1cyA/IGVsZW1lbnQuZm9jdXMoKSA6IGVsZW1lbnQuc2V0QWN0aXZlKCk7XG4gICAgfSxcbiAgXG4gICAgLy8gY2xhc3MgbWFuaXB1bGF0aW9uLCBzaW5jZSAyLjAuMCByZXF1aXJlcyBwb2x5ZmlsbC5qc1xuICAgIGFkZENsYXNzID0gZnVuY3Rpb24oZWxlbWVudCxjbGFzc05BTUUpIHtcbiAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChjbGFzc05BTUUpO1xuICAgIH0sXG4gICAgcmVtb3ZlQ2xhc3MgPSBmdW5jdGlvbihlbGVtZW50LGNsYXNzTkFNRSkge1xuICAgICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTkFNRSk7XG4gICAgfSxcbiAgICBoYXNDbGFzcyA9IGZ1bmN0aW9uKGVsZW1lbnQsY2xhc3NOQU1FKXsgLy8gc2luY2UgMi4wLjBcbiAgICAgIHJldHVybiBlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05BTUUpO1xuICAgIH0sXG4gIFxuICAgIC8vIHNlbGVjdGlvbiBtZXRob2RzXG4gICAgbm9kZUxpc3RUb0FycmF5ID0gZnVuY3Rpb24obm9kZUxpc3Qpe1xuICAgICAgdmFyIGNoaWxkSXRlbXMgPSBbXTsgZm9yICh2YXIgaSA9IDAsIG5sbCA9IG5vZGVMaXN0W2xlbmd0aF07IGk8bmxsOyBpKyspIHsgY2hpbGRJdGVtcy5wdXNoKCBub2RlTGlzdFtpXSApIH1cbiAgICAgIHJldHVybiBjaGlsZEl0ZW1zO1xuICAgIH0sXG4gICAgZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSA9IGZ1bmN0aW9uKGVsZW1lbnQsY2xhc3NOQU1FKSB7IC8vIGdldEVsZW1lbnRzQnlDbGFzc05hbWUgSUU4K1xuICAgICAgdmFyIHNlbGVjdGlvbk1ldGhvZCA9IGlzSUUgPT09IDggPyBxdWVyeVNlbGVjdG9yQWxsIDogZ2V0RWxlbWVudHNCeUNMQVNTTkFNRTsgICAgICBcbiAgICAgIHJldHVybiBub2RlTGlzdFRvQXJyYXkoZWxlbWVudFtzZWxlY3Rpb25NZXRob2RdKCBpc0lFID09PSA4ID8gJy4nICsgY2xhc3NOQU1FLnJlcGxhY2UoL1xccyg/PVthLXpdKS9nLCcuJykgOiBjbGFzc05BTUUgKSk7XG4gICAgfSxcbiAgICBxdWVyeUVsZW1lbnQgPSBmdW5jdGlvbiAoc2VsZWN0b3IsIHBhcmVudCkge1xuICAgICAgdmFyIGxvb2tVcCA9IHBhcmVudCA/IHBhcmVudCA6IGRvY3VtZW50O1xuICAgICAgcmV0dXJuIHR5cGVvZiBzZWxlY3RvciA9PT0gJ29iamVjdCcgPyBzZWxlY3RvciA6IGxvb2tVcC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICB9LFxuICAgIGdldENsb3Nlc3QgPSBmdW5jdGlvbiAoZWxlbWVudCwgc2VsZWN0b3IpIHsgLy9lbGVtZW50IGlzIHRoZSBlbGVtZW50IGFuZCBzZWxlY3RvciBpcyBmb3IgdGhlIGNsb3Nlc3QgcGFyZW50IGVsZW1lbnQgdG8gZmluZFxuICAgIC8vIHNvdXJjZSBodHRwOi8vZ29tYWtldGhpbmdzLmNvbS9jbGltYmluZy11cC1hbmQtZG93bi10aGUtZG9tLXRyZWUtd2l0aC12YW5pbGxhLWphdmFzY3JpcHQvXG4gICAgICB2YXIgZmlyc3RDaGFyID0gc2VsZWN0b3IuY2hhckF0KDApO1xuICAgICAgZm9yICggOyBlbGVtZW50ICYmIGVsZW1lbnQgIT09IGRvY3VtZW50OyBlbGVtZW50ID0gZWxlbWVudFtwYXJlbnROb2RlXSApIHsvLyBHZXQgY2xvc2VzdCBtYXRjaFxuICAgICAgICBpZiAoIGZpcnN0Q2hhciA9PT0gJy4nIHx8IGZpcnN0Q2hhciAhPT0gJyMnKSB7Ly8gSWYgc2VsZWN0b3IgaXMgYSBjbGFzc1xuICAgICAgICAgIGlmICggcXVlcnlFbGVtZW50KHNlbGVjdG9yLGVsZW1lbnRbcGFyZW50Tm9kZV0pICE9PSBudWxsICkgeyByZXR1cm4gZWxlbWVudDsgfVxuICAgICAgICB9XG4gICAgICAgIGlmICggZmlyc3RDaGFyID09PSAnIycgKSB7IC8vIElmIHNlbGVjdG9yIGlzIGFuIElEXG4gICAgICAgICAgaWYgKCBlbGVtZW50LmlkID09PSBzZWxlY3Rvci5zdWJzdHIoMSkgKSB7IHJldHVybiBlbGVtZW50OyB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuICBcbiAgICAvLyBldmVudCBhdHRhY2ggalF1ZXJ5IHN0eWxlIC8gdHJpZ2dlciAgc2luY2UgMS4yLjBcbiAgICBvbiA9IGZ1bmN0aW9uIChlbGVtZW50LCBldmVudCwgaGFuZGxlcikge1xuICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLCBmYWxzZSk7XG4gICAgfSxcbiAgICBvZmYgPSBmdW5jdGlvbihlbGVtZW50LCBldmVudCwgaGFuZGxlcikge1xuICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLCBmYWxzZSk7XG4gICAgfSxcbiAgICBvbmUgPSBmdW5jdGlvbiAoZWxlbWVudCwgZXZlbnQsIGhhbmRsZXIpIHsgLy8gb25lIHNpbmNlIDIuMC40XG4gICAgICBvbihlbGVtZW50LCBldmVudCwgZnVuY3Rpb24gaGFuZGxlcldyYXBwZXIoKXtcbiAgICAgICAgaGFuZGxlcigpO1xuICAgICAgICBvZmYoZWxlbWVudCwgZXZlbnQsIGhhbmRsZXJXcmFwcGVyKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZW11bGF0ZVRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbihlbGVtZW50LGhhbmRsZXIpeyAvLyBlbXVsYXRlVHJhbnNpdGlvbkVuZCBzaW5jZSAyLjAuNFxuICAgICAgaWYgKHN1cHBvcnRUcmFuc2l0aW9ucykgeyBvbmUoZWxlbWVudCx0cmFuc2l0aW9uRW5kRXZlbnQsIGhhbmRsZXIpOyB9XG4gICAgICBlbHNlIHsgaGFuZGxlcigpOyB9XG4gICAgfSwgIFxuICAgIGJvb3RzdHJhcEN1c3RvbUV2ZW50ID0gZnVuY3Rpb24gKGV2ZW50TmFtZSwgY29tcG9uZW50TmFtZSwgcmVsYXRlZCkge1xuICAgICAgdmFyIE9yaWdpbmFsQ3VzdG9tRXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoIGV2ZW50TmFtZSArICcuYnMuJyArIGNvbXBvbmVudE5hbWUpO1xuICAgICAgT3JpZ2luYWxDdXN0b21FdmVudC5yZWxhdGVkVGFyZ2V0ID0gcmVsYXRlZDtcbiAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChPcmlnaW5hbEN1c3RvbUV2ZW50KTtcbiAgICB9LFxuICBcbiAgICAvLyByZWZlcmVuY2UgYSBsaXZlIGNvbGxlY3Rpb24gb2YgdGhlIERPTVxuICAgIEFsbERPTUVsZW1lbnRzID0gZG9jdW1lbnRbZ2V0RWxlbWVudHNCeVRhZ05hbWVdKCcqJyksXG4gIFxuICAgIC8vIEluaXQgREFUQSBBUElcbiAgICBpbml0aWFsaXplRGF0YUFQSSA9IGZ1bmN0aW9uKCBjb21wb25lbnQsIGNvbnN0cnVjdG9yLCBkYXRhQXR0cmlidXRlLCBjb2xsZWN0aW9uICl7XG4gICAgICB2YXIgbG9va1VwID0gY29sbGVjdGlvbiAmJiBjb2xsZWN0aW9uW2xlbmd0aF0gPyBjb2xsZWN0aW9uIDogQWxsRE9NRWxlbWVudHM7XG4gICAgICBmb3IgKHZhciBpPTA7IGkgPCBsb29rVXBbbGVuZ3RoXTsgaSsrKSB7XG4gICAgICAgIHZhciBhdHRyVmFsdWUgPSBsb29rVXBbaV1bZ2V0QXR0cmlidXRlXShkYXRhQXR0cmlidXRlKSwgZXhwZWN0ZWRBdHRyVmFsdWUgPSBjb21wb25lbnQucmVwbGFjZSgvc3B5L2ksJycpW3RvTG93ZXJDYXNlXSgpO1xuICAgICAgICBpZiAoIGF0dHJWYWx1ZSAmJiBjb21wb25lbnQgPT09IHN0cmluZ0J1dHRvbiAmJiAoIGF0dHJWYWx1ZVtpbmRleE9mXShleHBlY3RlZEF0dHJWYWx1ZSkgPiAtMSApIC8vIGRhdGEtdG9nZ2xlPVwiYnV0dG9uc1wiXG4gICAgICAgICAgICB8fCBhdHRyVmFsdWUgPT09IGV4cGVjdGVkQXR0clZhbHVlICkgeyAvLyBhbGwgb3RoZXIgY29tcG9uZW50c1xuICAgICAgICAgIG5ldyBjb25zdHJ1Y3Rvcihsb29rVXBbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgIFxuICBcbiAgICAvLyB0YWIgLyBjb2xsYXBzZSBzdHVmZlxuICAgIGdldE91dGVySGVpZ2h0ID0gZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICB2YXIgY2hpbGRTdHlsZSA9IGNoaWxkICYmIChjaGlsZC5jdXJyZW50U3R5bGUgfHwgZ2xvYmFsT2JqZWN0LmdldENvbXB1dGVkU3R5bGUoY2hpbGQpKSwgXG4gICAgICAgIGJ0cCA9IC9weC8udGVzdChjaGlsZFN0eWxlLmJvcmRlclRvcFdpZHRoKSA/IE1hdGgucm91bmQoY2hpbGRTdHlsZS5ib3JkZXJUb3BXaWR0aC5yZXBsYWNlKCdweCcsJycpKSA6IDAsXG4gICAgICAgIGJ0YiA9IC9weC8udGVzdChjaGlsZFN0eWxlLmJvcmRlckJvdHRvbVdpZHRoKSA/IE1hdGgucm91bmQoY2hpbGRTdHlsZS5ib3JkZXJCb3R0b21XaWR0aC5yZXBsYWNlKCdweCcsJycpKSA6IDAsXG4gICAgICAgIG10cCA9IC9weC8udGVzdChjaGlsZFN0eWxlLm1hcmdpblRvcCkgPyBNYXRoLnJvdW5kKGNoaWxkU3R5bGUubWFyZ2luVG9wLnJlcGxhY2UoJ3B4JywnJykpIDogMCxcbiAgICAgICAgbWJwID0gL3B4Ly50ZXN0KGNoaWxkU3R5bGUubWFyZ2luQm90dG9tKSA/IE1hdGgucm91bmQoY2hpbGRTdHlsZS5tYXJnaW5Cb3R0b20ucmVwbGFjZSgncHgnLCcnKSkgOiAwO1xuICAgICAgcmV0dXJuIGNoaWxkW2NsaWVudEhlaWdodF0gKyBwYXJzZUludCggYnRwICkgKyBwYXJzZUludCggYnRiICkgKyBwYXJzZUludCggbXRwICkgKyBwYXJzZUludCggbWJwICk7XG4gICAgfSxcbiAgICBnZXRNYXhIZWlnaHQgPSBmdW5jdGlvbihwYXJlbnQpIHsgLy8gZ2V0IGNvbGxhcHNlIHRydWVIZWlnaHQgYW5kIGJvcmRlclxuICAgICAgdmFyIHBhcmVudEhlaWdodCA9IDA7XG4gICAgICBmb3IgKHZhciBrID0gMCwgbGwgPSBwYXJlbnQuY2hpbGRyZW5bbGVuZ3RoXTsgayA8IGxsOyBrKyspIHtcbiAgICAgICAgcGFyZW50SGVpZ2h0ICs9IGdldE91dGVySGVpZ2h0KHBhcmVudC5jaGlsZHJlbltrXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcGFyZW50SGVpZ2h0O1xuICAgIH0sXG4gIFxuICAgIC8vIHRvb2x0aXAgLyBwb3BvdmVyIHN0dWZmXG4gICAgaXNFbGVtZW50SW5WaWV3cG9ydCA9IGZ1bmN0aW9uKGVsZW1lbnQpIHsgLy8gY2hlY2sgaWYgdGhpcy50b29sdGlwIGlzIGluIHZpZXdwb3J0XG4gICAgICB2YXIgcmVjdCA9IGVsZW1lbnRbZ2V0Qm91bmRpbmdDbGllbnRSZWN0XSgpO1xuICAgICAgcmV0dXJuICggcmVjdFt0b3BdID49IDAgJiYgcmVjdFtsZWZ0XSA+PSAwICYmXG4gICAgICAgIHJlY3RbYm90dG9tXSA8PSAoZ2xvYmFsT2JqZWN0W2lubmVySGVpZ2h0XSB8fCBkb2NbY2xpZW50SGVpZ2h0XSkgJiZcbiAgICAgICAgcmVjdFtyaWdodF0gPD0gKGdsb2JhbE9iamVjdFtpbm5lcldpZHRoXSB8fCBkb2NbY2xpZW50V2lkdGhdKSApXG4gICAgfSxcbiAgICBnZXRTY3JvbGwgPSBmdW5jdGlvbigpIHsgLy8gYWxzbyBBZmZpeCBhbmQgU2Nyb2xsU3B5IHVzZXMgaXRcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHkgOiBnbG9iYWxPYmplY3QucGFnZVlPZmZzZXQgfHwgZG9jW3Njcm9sbFRvcF0sXG4gICAgICAgIHggOiBnbG9iYWxPYmplY3QucGFnZVhPZmZzZXQgfHwgZG9jW3Njcm9sbExlZnRdXG4gICAgICB9XG4gICAgfSxcbiAgICBzdHlsZVRpcCA9IGZ1bmN0aW9uKGxpbmssZWxlbWVudCxwb3NpdGlvbixjb250YWluZXIpIHsgLy8gYm90aCBwb3BvdmVycyBhbmQgdG9vbHRpcHNcbiAgICAgIHZhciByZWN0ID0gbGlua1tnZXRCb3VuZGluZ0NsaWVudFJlY3RdKCksIFxuICAgICAgICAgIHNjcm9sbCA9IGNvbnRhaW5lciA9PT0gYm9keSA/IGdldFNjcm9sbCgpIDogeyB4OiBjb250YWluZXJbb2Zmc2V0TGVmdF0gKyBjb250YWluZXJbc2Nyb2xsTGVmdF0sIHk6IGNvbnRhaW5lcltvZmZzZXRUb3BdICsgY29udGFpbmVyW3Njcm9sbFRvcF0gfSxcbiAgICAgICAgICBsaW5rRGltZW5zaW9ucyA9IHsgdzogcmVjdFtyaWdodF0gLSByZWN0W2xlZnRdLCBoOiByZWN0W2JvdHRvbV0gLSByZWN0W3RvcF0gfSxcbiAgICAgICAgICBlbGVtZW50RGltZW5zaW9ucyA9IHsgdyA6IGVsZW1lbnRbb2Zmc2V0V2lkdGhdLCBoOiBlbGVtZW50W29mZnNldEhlaWdodF0gfTtcbiAgXG4gICAgICAvLyBhcHBseSBzdHlsaW5nIHRvIHRvb2x0aXAgb3IgcG9wb3ZlclxuICAgICAgaWYgKCBwb3NpdGlvbiA9PT0gdG9wICkgeyAvLyBUT1BcbiAgICAgICAgZWxlbWVudFtzdHlsZV1bdG9wXSA9IHJlY3RbdG9wXSArIHNjcm9sbC55IC0gZWxlbWVudERpbWVuc2lvbnMuaCArICdweCc7XG4gICAgICAgIGVsZW1lbnRbc3R5bGVdW2xlZnRdID0gcmVjdFtsZWZ0XSArIHNjcm9sbC54IC0gZWxlbWVudERpbWVuc2lvbnMudy8yICsgbGlua0RpbWVuc2lvbnMudy8yICsgJ3B4J1xuICBcbiAgICAgIH0gZWxzZSBpZiAoIHBvc2l0aW9uID09PSBib3R0b20gKSB7IC8vIEJPVFRPTVxuICAgICAgICBlbGVtZW50W3N0eWxlXVt0b3BdID0gcmVjdFt0b3BdICsgc2Nyb2xsLnkgKyBsaW5rRGltZW5zaW9ucy5oICsgJ3B4JztcbiAgICAgICAgZWxlbWVudFtzdHlsZV1bbGVmdF0gPSByZWN0W2xlZnRdICsgc2Nyb2xsLnggLSBlbGVtZW50RGltZW5zaW9ucy53LzIgKyBsaW5rRGltZW5zaW9ucy53LzIgKyAncHgnO1xuICBcbiAgICAgIH0gZWxzZSBpZiAoIHBvc2l0aW9uID09PSBsZWZ0ICkgeyAvLyBMRUZUXG4gICAgICAgIGVsZW1lbnRbc3R5bGVdW3RvcF0gPSByZWN0W3RvcF0gKyBzY3JvbGwueSAtIGVsZW1lbnREaW1lbnNpb25zLmgvMiArIGxpbmtEaW1lbnNpb25zLmgvMiArICdweCc7XG4gICAgICAgIGVsZW1lbnRbc3R5bGVdW2xlZnRdID0gcmVjdFtsZWZ0XSArIHNjcm9sbC54IC0gZWxlbWVudERpbWVuc2lvbnMudyArICdweCc7XG4gIFxuICAgICAgfSBlbHNlIGlmICggcG9zaXRpb24gPT09IHJpZ2h0ICkgeyAvLyBSSUdIVFxuICAgICAgICBlbGVtZW50W3N0eWxlXVt0b3BdID0gcmVjdFt0b3BdICsgc2Nyb2xsLnkgLSBlbGVtZW50RGltZW5zaW9ucy5oLzIgKyBsaW5rRGltZW5zaW9ucy5oLzIgKyAncHgnO1xuICAgICAgICBlbGVtZW50W3N0eWxlXVtsZWZ0XSA9IHJlY3RbbGVmdF0gKyBzY3JvbGwueCArIGxpbmtEaW1lbnNpb25zLncgKyAncHgnO1xuICAgICAgfVxuICAgICAgZWxlbWVudC5jbGFzc05hbWVbaW5kZXhPZl0ocG9zaXRpb24pID09PSAtMSAmJiAoZWxlbWVudC5jbGFzc05hbWUgPSBlbGVtZW50LmNsYXNzTmFtZS5yZXBsYWNlKHRpcFBvc2l0aW9ucyxwb3NpdGlvbikpO1xuICAgIH0sXG4gICAgdXBkYXRlUGxhY2VtZW50ID0gZnVuY3Rpb24ocG9zaXRpb24pIHtcbiAgICAgIHJldHVybiBwb3NpdGlvbiA9PT0gdG9wID8gYm90dG9tIDogLy8gdG9wXG4gICAgICAgICAgICAgcG9zaXRpb24gPT09IGJvdHRvbSA/IHRvcCA6IC8vIGJvdHRvbVxuICAgICAgICAgICAgIHBvc2l0aW9uID09PSBsZWZ0ID8gcmlnaHQgOiAvLyBsZWZ0XG4gICAgICAgICAgICAgcG9zaXRpb24gPT09IHJpZ2h0ID8gbGVmdCA6IHBvc2l0aW9uOyAvLyByaWdodFxuICAgIH07XG4gIFxuICBcbiAgXG4gIC8qIE5hdGl2ZSBKYXZhc2NyaXB0IGZvciBCb290c3RyYXAgMyB8IEFmZml4XG4gIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuICBcbiAgLy9BRkZJWCBERUZJTklUSU9OXG4gIHZhciBBZmZpeCA9IGZ1bmN0aW9uKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgXG4gICAgLy8gaW5pdGlhbGl6YXRpb24gZWxlbWVudFxuICAgIGVsZW1lbnQgPSBxdWVyeUVsZW1lbnQoZWxlbWVudCk7XG4gIFxuICAgIC8vIHNldCBvcHRpb25zXG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIFxuICAgIC8vIHJlYWQgREFUQSBBUElcbiAgICB2YXIgdGFyZ2V0RGF0YSAgICAgICAgPSBlbGVtZW50W2dldEF0dHJpYnV0ZV0oZGF0YVRhcmdldCksXG4gICAgICAgIG9mZnNldFRvcERhdGEgICAgID0gZWxlbWVudFtnZXRBdHRyaWJ1dGVdKGRhdGFPZmZzZXRUb3ApLFxuICAgICAgICBvZmZzZXRCb3R0b21EYXRhICA9IGVsZW1lbnRbZ2V0QXR0cmlidXRlXShkYXRhT2Zmc2V0Qm90dG9tKSxcbiAgICAgICAgXG4gICAgICAgIC8vIGNvbXBvbmVudCBzcGVjaWZpYyBzdHJpbmdzXG4gICAgICAgIGFmZml4ID0gJ2FmZml4JywgYWZmaXhlZCA9ICdhZmZpeGVkJywgZm4gPSAnZnVuY3Rpb24nLCB1cGRhdGUgPSAndXBkYXRlJyxcbiAgICAgICAgYWZmaXhUb3AgPSAnYWZmaXgtdG9wJywgYWZmaXhlZFRvcCA9ICdhZmZpeGVkLXRvcCcsXG4gICAgICAgIGFmZml4Qm90dG9tID0gJ2FmZml4LWJvdHRvbScsIGFmZml4ZWRCb3R0b20gPSAnYWZmaXhlZC1ib3R0b20nO1xuICBcbiAgICB0aGlzW3RhcmdldF0gPSBvcHRpb25zW3RhcmdldF0gPyBxdWVyeUVsZW1lbnQob3B0aW9uc1t0YXJnZXRdKSA6IHF1ZXJ5RWxlbWVudCh0YXJnZXREYXRhKSB8fCBudWxsOyAvLyB0YXJnZXQgaXMgYW4gb2JqZWN0XG4gICAgdGhpc1tvZmZzZXRUb3BdID0gb3B0aW9uc1tvZmZzZXRUb3BdID8gb3B0aW9uc1tvZmZzZXRUb3BdIDogcGFyc2VJbnQob2Zmc2V0VG9wRGF0YSkgfHwgMDsgLy8gb2Zmc2V0IG9wdGlvbiBpcyBhbiBpbnRlZ2VyIG51bWJlciBvciBmdW5jdGlvbiB0byBkZXRlcm1pbmUgdGhhdCBudW1iZXJcbiAgICB0aGlzW29mZnNldEJvdHRvbV0gPSBvcHRpb25zW29mZnNldEJvdHRvbV0gPyBvcHRpb25zW29mZnNldEJvdHRvbV06IHBhcnNlSW50KG9mZnNldEJvdHRvbURhdGEpIHx8IDA7XG4gIFxuICAgIGlmICggIXRoaXNbdGFyZ2V0XSAmJiAhKCB0aGlzW29mZnNldFRvcF0gfHwgdGhpc1tvZmZzZXRCb3R0b21dICkgKSB7IHJldHVybjsgfSAvLyBpbnZhbGlkYXRlXG4gIFxuICAgIC8vIGludGVybmFsIGJpbmRcbiAgICB2YXIgc2VsZiA9IHRoaXMsXG4gIFxuICAgICAgLy8gY29uc3RhbnRzXG4gICAgICByZXNpemVEZWxheSA9IChpc0lFICYmIGlzSUUgPCAxMCkgPyA1MDAgOiA1MCwgLy8gZm9yIGxlZ2FjeSBicm93c2VycyB3ZSB0cnkgdG8gbGltaXQgdGhlIGludGVydmFsIGZvciB1cGRhdGluZyB0aGUgQWZmaXhcbiAgICAgIHBpbk9mZnNldFRvcCwgcGluT2Zmc2V0Qm90dG9tLCBtYXhTY3JvbGwsIHNjcm9sbFksIHBpbm5lZFRvcCwgcGlubmVkQm90dG9tLFxuICAgICAgYWZmaXhlZFRvVG9wID0gZmFsc2UsIGFmZml4ZWRUb0JvdHRvbSA9IGZhbHNlLFxuICAgICAgXG4gICAgICAvLyBwcml2YXRlIG1ldGhvZHMgXG4gICAgICBnZXRNYXhTY3JvbGwgPSBmdW5jdGlvbigpe1xuICAgICAgICByZXR1cm4gTWF0aC5tYXgoIGJvZHlbc2Nyb2xsSGVpZ2h0XSwgYm9keVtvZmZzZXRIZWlnaHRdLCBkb2NbY2xpZW50SGVpZ2h0XSwgZG9jW3Njcm9sbEhlaWdodF0sIGRvY1tvZmZzZXRIZWlnaHRdICk7XG4gICAgICB9LFxuICAgICAgZ2V0T2Zmc2V0VG9wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIHNlbGZbdGFyZ2V0XSAhPT0gbnVsbCApIHtcbiAgICAgICAgICByZXR1cm4gc2VsZlt0YXJnZXRdW2dldEJvdW5kaW5nQ2xpZW50UmVjdF0oKVt0b3BdICsgc2Nyb2xsWTtcbiAgICAgICAgfSBlbHNlIGlmICggc2VsZltvZmZzZXRUb3BdICkge1xuICAgICAgICAgIHJldHVybiBwYXJzZUludCh0eXBlb2Ygc2VsZltvZmZzZXRUb3BdID09PSBmbiA/IHNlbGZbb2Zmc2V0VG9wXSgpIDogc2VsZltvZmZzZXRUb3BdIHx8IDApO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZ2V0T2Zmc2V0Qm90dG9tID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIHNlbGZbb2Zmc2V0Qm90dG9tXSApIHtcbiAgICAgICAgICByZXR1cm4gbWF4U2Nyb2xsIC0gZWxlbWVudFtvZmZzZXRIZWlnaHRdIC0gcGFyc2VJbnQoIHR5cGVvZiBzZWxmW29mZnNldEJvdHRvbV0gPT09IGZuID8gc2VsZltvZmZzZXRCb3R0b21dKCkgOiBzZWxmW29mZnNldEJvdHRvbV0gfHwgMCApO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgY2hlY2tQb3NpdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbWF4U2Nyb2xsID0gZ2V0TWF4U2Nyb2xsKCk7XG4gICAgICAgIHNjcm9sbFkgPSBwYXJzZUludChnZXRTY3JvbGwoKS55LDApO1xuICAgICAgICBwaW5PZmZzZXRUb3AgPSBnZXRPZmZzZXRUb3AoKTtcbiAgICAgICAgcGluT2Zmc2V0Qm90dG9tID0gZ2V0T2Zmc2V0Qm90dG9tKCk7IFxuICAgICAgICBwaW5uZWRUb3AgPSAoIHBhcnNlSW50KHBpbk9mZnNldFRvcCkgLSBzY3JvbGxZIDwgMCkgJiYgKHNjcm9sbFkgPiBwYXJzZUludChwaW5PZmZzZXRUb3ApICk7XG4gICAgICAgIHBpbm5lZEJvdHRvbSA9ICggcGFyc2VJbnQocGluT2Zmc2V0Qm90dG9tKSAtIHNjcm9sbFkgPCAwKSAmJiAoc2Nyb2xsWSA+IHBhcnNlSW50KHBpbk9mZnNldEJvdHRvbSkgKTtcbiAgICAgIH0sXG4gICAgICBwaW5Ub3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICggIWFmZml4ZWRUb1RvcCAmJiAhaGFzQ2xhc3MoZWxlbWVudCxhZmZpeCkgKSB7IC8vIG9uIGxvYWRpbmcgYSBwYWdlIGhhbGZ3YXkgc2Nyb2xsZWQgdGhlc2UgZXZlbnRzIGRvbid0IHRyaWdnZXIgaW4gQ2hyb21lXG4gICAgICAgICAgYm9vdHN0cmFwQ3VzdG9tRXZlbnQuY2FsbChlbGVtZW50LCBhZmZpeCwgYWZmaXgpO1xuICAgICAgICAgIGJvb3RzdHJhcEN1c3RvbUV2ZW50LmNhbGwoZWxlbWVudCwgYWZmaXhUb3AsIGFmZml4KTtcbiAgICAgICAgICBhZGRDbGFzcyhlbGVtZW50LGFmZml4KTtcbiAgICAgICAgICBhZmZpeGVkVG9Ub3AgPSB0cnVlO1xuICAgICAgICAgIGJvb3RzdHJhcEN1c3RvbUV2ZW50LmNhbGwoZWxlbWVudCwgYWZmaXhlZCwgYWZmaXgpO1xuICAgICAgICAgIGJvb3RzdHJhcEN1c3RvbUV2ZW50LmNhbGwoZWxlbWVudCwgYWZmaXhlZFRvcCwgYWZmaXgpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdW5QaW5Ub3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICggYWZmaXhlZFRvVG9wICYmIGhhc0NsYXNzKGVsZW1lbnQsYWZmaXgpICkge1xuICAgICAgICAgIHJlbW92ZUNsYXNzKGVsZW1lbnQsYWZmaXgpO1xuICAgICAgICAgIGFmZml4ZWRUb1RvcCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcGluQm90dG9tID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoICFhZmZpeGVkVG9Cb3R0b20gJiYgIWhhc0NsYXNzKGVsZW1lbnQsIGFmZml4Qm90dG9tKSApIHtcbiAgICAgICAgICBib290c3RyYXBDdXN0b21FdmVudC5jYWxsKGVsZW1lbnQsIGFmZml4LCBhZmZpeCk7XG4gICAgICAgICAgYm9vdHN0cmFwQ3VzdG9tRXZlbnQuY2FsbChlbGVtZW50LCBhZmZpeEJvdHRvbSwgYWZmaXgpO1xuICAgICAgICAgIGFkZENsYXNzKGVsZW1lbnQsYWZmaXhCb3R0b20pO1xuICAgICAgICAgIGFmZml4ZWRUb0JvdHRvbSA9IHRydWU7XG4gICAgICAgICAgYm9vdHN0cmFwQ3VzdG9tRXZlbnQuY2FsbChlbGVtZW50LCBhZmZpeGVkLCBhZmZpeCk7XG4gICAgICAgICAgYm9vdHN0cmFwQ3VzdG9tRXZlbnQuY2FsbChlbGVtZW50LCBhZmZpeGVkQm90dG9tLCBhZmZpeCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB1blBpbkJvdHRvbSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCBhZmZpeGVkVG9Cb3R0b20gJiYgaGFzQ2xhc3MoZWxlbWVudCxhZmZpeEJvdHRvbSkgKSB7XG4gICAgICAgICAgcmVtb3ZlQ2xhc3MoZWxlbWVudCxhZmZpeEJvdHRvbSk7XG4gICAgICAgICAgYWZmaXhlZFRvQm90dG9tID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB1cGRhdGVQaW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICggcGlubmVkQm90dG9tICkge1xuICAgICAgICAgIGlmICggcGlubmVkVG9wICkgeyB1blBpblRvcCgpOyB9XG4gICAgICAgICAgcGluQm90dG9tKCk7IFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHVuUGluQm90dG9tKCk7XG4gICAgICAgICAgaWYgKCBwaW5uZWRUb3AgKSB7IHBpblRvcCgpOyB9IFxuICAgICAgICAgIGVsc2UgeyB1blBpblRvcCgpOyB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gIFxuICAgIC8vIHB1YmxpYyBtZXRob2RcbiAgICB0aGlzW3VwZGF0ZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja1Bvc2l0aW9uKCk7XG4gICAgICB1cGRhdGVQaW4oKTsgXG4gICAgfTtcbiAgXG4gICAgLy8gaW5pdFxuICAgIGlmICggIShzdHJpbmdBZmZpeCBpbiBlbGVtZW50ICkgKSB7IC8vIHByZXZlbnQgYWRkaW5nIGV2ZW50IGhhbmRsZXJzIHR3aWNlXG4gICAgICBvbiggZ2xvYmFsT2JqZWN0LCBzY3JvbGxFdmVudCwgdGhpc1t1cGRhdGVdICk7XG4gICAgICBvbiggZ2xvYmFsT2JqZWN0LCByZXNpemVFdmVudCwgZnVuY3Rpb24oKSB7IHNldFRpbWVvdXQoZnVuY3Rpb24oKXsgc2VsZlt1cGRhdGVdKCk7IH0sIHJlc2l6ZURlbGF5KTsgfSk7XG4gICAgfVxuICAgIGVsZW1lbnRbc3RyaW5nQWZmaXhdID0gdGhpcztcbiAgXG4gICAgdGhpc1t1cGRhdGVdKCk7XG4gIH07XG4gIFxuICAvLyBBRkZJWCBEQVRBIEFQSVxuICAvLyA9PT09PT09PT09PT09PT09PVxuICBpbml0aWFsaXplRGF0YUFQSSggc3RyaW5nQWZmaXgsIEFmZml4LCBkYXRhU3B5ICk7XG4gIFxuICBcbiAgLyogTmF0aXZlIEphdmFzY3JpcHQgZm9yIEJvb3RzdHJhcCAzIHwgQWxlcnRcbiAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4gIFxuICAvLyBBTEVSVCBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT1cbiAgdmFyIEFsZXJ0ID0gZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG4gICAgXG4gICAgLy8gaW5pdGlhbGl6YXRpb24gZWxlbWVudFxuICAgIGVsZW1lbnQgPSBxdWVyeUVsZW1lbnQoZWxlbWVudCk7XG4gIFxuICAgIC8vIGJpbmQsIHRhcmdldCBhbGVydCwgZHVyYXRpb24gYW5kIHN0dWZmXG4gICAgdmFyIHNlbGYgPSB0aGlzLCBjb21wb25lbnQgPSAnYWxlcnQnLFxuICAgICAgYWxlcnQgPSBnZXRDbG9zZXN0KGVsZW1lbnQsJy4nK2NvbXBvbmVudCksXG4gICAgICAvLyBoYW5kbGVyc1xuICAgICAgY2xpY2tIYW5kbGVyID0gZnVuY3Rpb24oZSl7XG4gICAgICAgIHZhciBldmVudFRhcmdldCA9IGVbdGFyZ2V0XTtcbiAgICAgICAgZXZlbnRUYXJnZXQgPSBldmVudFRhcmdldFtoYXNBdHRyaWJ1dGVdKGRhdGFEaXNtaXNzKSA/IGV2ZW50VGFyZ2V0IDogZXZlbnRUYXJnZXRbcGFyZW50Tm9kZV07XG4gICAgICAgIGlmIChldmVudFRhcmdldCAmJiBldmVudFRhcmdldFtoYXNBdHRyaWJ1dGVdKGRhdGFEaXNtaXNzKSkgeyAvLyB3ZSBkb3VibGUgY2hlY2sgdGhlIGRhdGEgYXR0cmlidXRlLCBpdCdzIGltcG9ydGFudFxuICAgICAgICAgIGFsZXJ0ID0gZ2V0Q2xvc2VzdChldmVudFRhcmdldCwnLicrY29tcG9uZW50KTtcbiAgICAgICAgICBlbGVtZW50ID0gcXVlcnlFbGVtZW50KCdbJytkYXRhRGlzbWlzcysnPVwiJytjb21wb25lbnQrJ1wiXScsYWxlcnQpO1xuICAgICAgICAgIChlbGVtZW50ID09PSBldmVudFRhcmdldCB8fCBlbGVtZW50ID09PSBldmVudFRhcmdldFtwYXJlbnROb2RlXSkgJiYgYWxlcnQgJiYgc2VsZi5jbG9zZSgpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdHJhbnNpdGlvbkVuZEhhbmRsZXIgPSBmdW5jdGlvbigpe1xuICAgICAgICBib290c3RyYXBDdXN0b21FdmVudC5jYWxsKGFsZXJ0LCBjbG9zZWRFdmVudCwgY29tcG9uZW50KTtcbiAgICAgICAgb2ZmKGVsZW1lbnQsIGNsaWNrRXZlbnQsIGNsaWNrSGFuZGxlcik7IC8vIGRldGFjaCBpdCdzIGxpc3RlbmVyXG4gICAgICAgIGFsZXJ0W3BhcmVudE5vZGVdLnJlbW92ZUNoaWxkKGFsZXJ0KTtcbiAgICAgIH07XG4gICAgXG4gICAgLy8gcHVibGljIG1ldGhvZFxuICAgIHRoaXMuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICggYWxlcnQgJiYgZWxlbWVudCAmJiBoYXNDbGFzcyhhbGVydCxpbkNsYXNzKSApIHtcbiAgICAgICAgYm9vdHN0cmFwQ3VzdG9tRXZlbnQuY2FsbChhbGVydCwgY2xvc2VFdmVudCwgY29tcG9uZW50KTtcbiAgICAgICAgcmVtb3ZlQ2xhc3MoYWxlcnQsaW5DbGFzcyk7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKGFsZXJ0KSB7XG4gICAgICAgICAgICBlbXVsYXRlVHJhbnNpdGlvbkVuZChhbGVydCx0cmFuc2l0aW9uRW5kSGFuZGxlcik7XG4gICAgICAgICAgfSBcbiAgICAgICAgfSwgZHVyYXRpb24pO1xuICAgICAgfVxuICAgIH07XG4gIFxuICAgIC8vIGluaXRcbiAgICBpZiAoICEoc3RyaW5nQWxlcnQgaW4gZWxlbWVudCApICkgeyAvLyBwcmV2ZW50IGFkZGluZyBldmVudCBoYW5kbGVycyB0d2ljZVxuICAgICAgb24oZWxlbWVudCwgY2xpY2tFdmVudCwgY2xpY2tIYW5kbGVyKTtcbiAgICB9XG4gICAgZWxlbWVudFtzdHJpbmdBbGVydF0gPSB0aGlzO1xuICB9O1xuICBcbiAgLy8gQUxFUlQgREFUQSBBUElcbiAgLy8gPT09PT09PT09PT09PT1cbiAgaW5pdGlhbGl6ZURhdGFBUEkgKCBzdHJpbmdBbGVydCwgQWxlcnQsIGRhdGFEaXNtaXNzICk7XG4gIFxuICBcbiAgLyogTmF0aXZlIEphdmFzY3JpcHQgZm9yIEJvb3RzdHJhcCAzIHwgQnV0dG9uXG4gIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4gIFxuICAvLyBCVVRUT04gREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09XG4gIHZhciBCdXR0b24gPSBmdW5jdGlvbiggZWxlbWVudCwgb3B0aW9uICkge1xuICBcbiAgICAvLyBpbml0aWFsaXphdGlvbiBlbGVtZW50XG4gICAgZWxlbWVudCA9IHF1ZXJ5RWxlbWVudChlbGVtZW50KTtcbiAgXG4gICAgLy8gc2V0IG9wdGlvblxuICAgIG9wdGlvbiA9IG9wdGlvbiB8fCBudWxsO1xuICBcbiAgICAvLyBjb25zdGFudFxuICAgIHZhciB0b2dnbGVkID0gZmFsc2UsIC8vIHRvZ2dsZWQgbWFrZXMgc3VyZSB0byBwcmV2ZW50IHRyaWdnZXJpbmcgdHdpY2UgdGhlIGNoYW5nZS5icy5idXR0b24gZXZlbnRzXG4gIFxuICAgICAgICAvLyBzdHJpbmdzXG4gICAgICAgIGNvbXBvbmVudCA9ICdidXR0b24nLFxuICAgICAgICBjaGVja2VkID0gJ2NoZWNrZWQnLFxuICAgICAgICByZXNldCA9ICdyZXNldCcsXG4gICAgICAgIExBQkVMID0gJ0xBQkVMJyxcbiAgICAgICAgSU5QVVQgPSAnSU5QVVQnLFxuICBcbiAgICAgIC8vIHByaXZhdGUgbWV0aG9kc1xuICAgICAgc2V0U3RhdGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCAhISBvcHRpb24gJiYgb3B0aW9uICE9PSByZXNldCApIHtcbiAgICAgICAgICBpZiAoIG9wdGlvbiA9PT0gbG9hZGluZyApIHtcbiAgICAgICAgICAgIGFkZENsYXNzKGVsZW1lbnQsZGlzYWJsZWQpO1xuICAgICAgICAgICAgZWxlbWVudFtzZXRBdHRyaWJ1dGVdKGRpc2FibGVkLGRpc2FibGVkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxlbWVudFtzZXRBdHRyaWJ1dGVdKGRhdGFPcmlnaW5hbFRleHQsIGVsZW1lbnQuaW5uZXJIVE1MLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKSk7IC8vIHRyaW0gdGhlIHRleHRcbiAgICAgICAgICBlbGVtZW50LmlubmVySFRNTCA9IGVsZW1lbnRbZ2V0QXR0cmlidXRlXSgnZGF0YS0nK29wdGlvbisnLXRleHQnKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHJlc2V0U3RhdGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKGVsZW1lbnRbZ2V0QXR0cmlidXRlXShkYXRhT3JpZ2luYWxUZXh0KSkge1xuICAgICAgICAgIGlmICggaGFzQ2xhc3MoZWxlbWVudCxkaXNhYmxlZCkgfHwgZWxlbWVudFtnZXRBdHRyaWJ1dGVdKGRpc2FibGVkKSA9PT0gZGlzYWJsZWQgKSB7XG4gICAgICAgICAgICByZW1vdmVDbGFzcyhlbGVtZW50LGRpc2FibGVkKTtcbiAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGRpc2FibGVkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxlbWVudC5pbm5lckhUTUwgPSBlbGVtZW50W2dldEF0dHJpYnV0ZV0oZGF0YU9yaWdpbmFsVGV4dCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB0b2dnbGUgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIHZhciBwYXJlbnQgPSBlW3RhcmdldF1bcGFyZW50Tm9kZV0sXG4gICAgICAgICAgbGFiZWwgPSBlW3RhcmdldF0udGFnTmFtZSA9PT0gTEFCRUwgPyBlW3RhcmdldF0gOiBwYXJlbnQudGFnTmFtZSA9PT0gTEFCRUwgPyBwYXJlbnQgOiBudWxsOyAvLyB0aGUgLmJ0biBsYWJlbFxuICBcbiAgICAgICAgaWYgKCAhbGFiZWwgKSByZXR1cm47IC8vcmVhY3QgaWYgYSBsYWJlbCBvciBpdHMgaW1tZWRpYXRlIGNoaWxkIGlzIGNsaWNrZWRcbiAgXG4gICAgICAgIHZhciBldmVudFRhcmdldCA9IHRoaXMsIC8vIHRoZSBidXR0b24gZ3JvdXAsIHRoZSB0YXJnZXQgb2YgdGhlIGhhbmRsZXIgZnVuY3Rpb25cbiAgICAgICAgICBsYWJlbHMgPSBnZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGV2ZW50VGFyZ2V0LCdidG4nKSwgLy8gYWxsIHRoZSBidXR0b24gZ3JvdXAgYnV0dG9uc1xuICAgICAgICAgIGlucHV0ID0gbGFiZWxbZ2V0RWxlbWVudHNCeVRhZ05hbWVdKElOUFVUKVswXTtcbiAgXG4gICAgICAgIGlmICggIWlucHV0ICkgcmV0dXJuOyAvL3JldHVybiBpZiBubyBpbnB1dCBmb3VuZFxuICBcbiAgICAgICAgLy8gbWFuYWdlIHRoZSBkb20gbWFuaXB1bGF0aW9uXG4gICAgICAgIGlmICggaW5wdXQudHlwZSA9PT0gJ2NoZWNrYm94JyApIHsgLy9jaGVja2JveGVzXG4gICAgICAgICAgaWYgKCAhaW5wdXRbY2hlY2tlZF0gKSB7XG4gICAgICAgICAgICBhZGRDbGFzcyhsYWJlbCxhY3RpdmUpO1xuICAgICAgICAgICAgaW5wdXRbZ2V0QXR0cmlidXRlXShjaGVja2VkKTtcbiAgICAgICAgICAgIGlucHV0W3NldEF0dHJpYnV0ZV0oY2hlY2tlZCxjaGVja2VkKTtcbiAgICAgICAgICAgIGlucHV0W2NoZWNrZWRdID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVtb3ZlQ2xhc3MobGFiZWwsYWN0aXZlKTtcbiAgICAgICAgICAgIGlucHV0W2dldEF0dHJpYnV0ZV0oY2hlY2tlZCk7XG4gICAgICAgICAgICBpbnB1dC5yZW1vdmVBdHRyaWJ1dGUoY2hlY2tlZCk7XG4gICAgICAgICAgICBpbnB1dFtjaGVja2VkXSA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgXG4gICAgICAgICAgaWYgKCF0b2dnbGVkKSB7IC8vIHByZXZlbnQgdHJpZ2dlcmluZyB0aGUgZXZlbnQgdHdpY2VcbiAgICAgICAgICAgIHRvZ2dsZWQgPSB0cnVlO1xuICAgICAgICAgICAgYm9vdHN0cmFwQ3VzdG9tRXZlbnQuY2FsbChpbnB1dCwgY2hhbmdlRXZlbnQsIGNvbXBvbmVudCk7IC8vdHJpZ2dlciB0aGUgY2hhbmdlIGZvciB0aGUgaW5wdXRcbiAgICAgICAgICAgIGJvb3RzdHJhcEN1c3RvbUV2ZW50LmNhbGwoZWxlbWVudCwgY2hhbmdlRXZlbnQsIGNvbXBvbmVudCk7IC8vdHJpZ2dlciB0aGUgY2hhbmdlIGZvciB0aGUgYnRuLWdyb3VwXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gIFxuICAgICAgICBpZiAoIGlucHV0LnR5cGUgPT09ICdyYWRpbycgJiYgIXRvZ2dsZWQgKSB7IC8vIHJhZGlvIGJ1dHRvbnNcbiAgICAgICAgICBpZiAoICFpbnB1dFtjaGVja2VkXSApIHsgLy8gZG9uJ3QgdHJpZ2dlciBpZiBhbHJlYWR5IGFjdGl2ZVxuICAgICAgICAgICAgYWRkQ2xhc3MobGFiZWwsYWN0aXZlKTtcbiAgICAgICAgICAgIGlucHV0W3NldEF0dHJpYnV0ZV0oY2hlY2tlZCxjaGVja2VkKTtcbiAgICAgICAgICAgIGlucHV0W2NoZWNrZWRdID0gdHJ1ZTtcbiAgICAgICAgICAgIGJvb3RzdHJhcEN1c3RvbUV2ZW50LmNhbGwoaW5wdXQsIGNoYW5nZUV2ZW50LCBjb21wb25lbnQpOyAvL3RyaWdnZXIgdGhlIGNoYW5nZSBmb3IgdGhlIGlucHV0XG4gICAgICAgICAgICBib290c3RyYXBDdXN0b21FdmVudC5jYWxsKGVsZW1lbnQsIGNoYW5nZUV2ZW50LCBjb21wb25lbnQpOyAvL3RyaWdnZXIgdGhlIGNoYW5nZSBmb3IgdGhlIGJ0bi1ncm91cFxuICBcbiAgICAgICAgICAgIHRvZ2dsZWQgPSB0cnVlO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxsID0gbGFiZWxzW2xlbmd0aF07IGk8bGw7IGkrKykge1xuICAgICAgICAgICAgICB2YXIgb3RoZXJMYWJlbCA9IGxhYmVsc1tpXSwgb3RoZXJJbnB1dCA9IG90aGVyTGFiZWxbZ2V0RWxlbWVudHNCeVRhZ05hbWVdKElOUFVUKVswXTtcbiAgICAgICAgICAgICAgaWYgKCBvdGhlckxhYmVsICE9PSBsYWJlbCAmJiBoYXNDbGFzcyhvdGhlckxhYmVsLGFjdGl2ZSkgKSAge1xuICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzKG90aGVyTGFiZWwsYWN0aXZlKTtcbiAgICAgICAgICAgICAgICBvdGhlcklucHV0LnJlbW92ZUF0dHJpYnV0ZShjaGVja2VkKTtcbiAgICAgICAgICAgICAgICBvdGhlcklucHV0W2NoZWNrZWRdID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgYm9vdHN0cmFwQ3VzdG9tRXZlbnQuY2FsbChvdGhlcklucHV0LCBjaGFuZ2VFdmVudCwgY29tcG9uZW50KTsgLy8gdHJpZ2dlciB0aGUgY2hhbmdlXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24oKSB7IHRvZ2dsZWQgPSBmYWxzZTsgfSwgNTAgKTtcbiAgICAgIH07XG4gIFxuICAgIC8vIGluaXRcbiAgICBpZiAoIGhhc0NsYXNzKGVsZW1lbnQsJ2J0bicpICkgeyAvLyB3aGVuIEJ1dHRvbiB0ZXh0IGlzIHVzZWQgd2UgZXhlY3V0ZSBpdCBhcyBhbiBpbnN0YW5jZSBtZXRob2RcbiAgICAgIGlmICggb3B0aW9uICE9PSBudWxsICkge1xuICAgICAgICBpZiAoIG9wdGlvbiAhPT0gcmVzZXQgKSB7IHNldFN0YXRlKCk7IH0gXG4gICAgICAgIGVsc2UgeyByZXNldFN0YXRlKCk7IH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCBoYXNDbGFzcyhlbGVtZW50LCdidG4tZ3JvdXAnKSApIHtcbiAgICAgIGlmICggISggc3RyaW5nQnV0dG9uIGluIGVsZW1lbnQgKSApIHsgLy8gcHJldmVudCBhZGRpbmcgZXZlbnQgaGFuZGxlcnMgdHdpY2VcbiAgICAgICAgb24oIGVsZW1lbnQsIGNsaWNrRXZlbnQsIHRvZ2dsZSApO1xuICAgICAgfVxuICAgICAgZWxlbWVudFtzdHJpbmdCdXR0b25dID0gdGhpcztcbiAgICB9XG4gIH07XG4gIFxuICAvLyBCVVRUT04gREFUQSBBUElcbiAgLy8gPT09PT09PT09PT09PT09PT1cbiAgaW5pdGlhbGl6ZURhdGFBUEkoIHN0cmluZ0J1dHRvbiwgQnV0dG9uLCBkYXRhVG9nZ2xlICk7XG4gIFxuICBcbiAgLyogTmF0aXZlIEphdmFzY3JpcHQgZm9yIEJvb3RzdHJhcCAzIHwgQ2Fyb3VzZWxcbiAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4gIFxuICAvLyBDQVJPVVNFTCBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT1cbiAgdmFyIENhcm91c2VsID0gZnVuY3Rpb24oIGVsZW1lbnQsIG9wdGlvbnMgKSB7XG4gIFxuICAgIC8vIGluaXRpYWxpemF0aW9uIGVsZW1lbnRcbiAgICBlbGVtZW50ID0gcXVlcnlFbGVtZW50KCBlbGVtZW50ICk7XG4gIFxuICAgIC8vIHNldCBvcHRpb25zXG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIFxuICAgIC8vIERBVEEgQVBJXG4gICAgdmFyIGludGVydmFsRGF0YSA9IGVsZW1lbnRbZ2V0QXR0cmlidXRlXShkYXRhSW50ZXJ2YWwpID09PSAnZmFsc2UnID8gZmFsc2UgOiBwYXJzZUludChlbGVtZW50W2dldEF0dHJpYnV0ZV0oZGF0YUludGVydmFsKSkgfHwgNTAwMCwgLy8gYm9vdHN0cmFwIGNhcm91c2VsIGRlZmF1bHQgaW50ZXJ2YWxcbiAgICAgICAgcGF1c2VEYXRhID0gZWxlbWVudFtnZXRBdHRyaWJ1dGVdKGRhdGFQYXVzZSkgPT09IGhvdmVyRXZlbnQgfHwgZmFsc2UsXG4gICAgICAgIGtleWJvYXJkRGF0YSA9IGVsZW1lbnRbZ2V0QXR0cmlidXRlXShkYXRhS2V5Ym9hcmQpID09PSAndHJ1ZScgfHwgZmFsc2UsXG4gICAgICBcbiAgICAgICAgLy8gc3RyaW5nc1xuICAgICAgICBjb21wb25lbnQgPSAnY2Fyb3VzZWwnLFxuICAgICAgICBwYXVzZWQgPSAncGF1c2VkJyxcbiAgICAgICAgZGlyZWN0aW9uID0gJ2RpcmVjdGlvbicsXG4gICAgICAgIGRhdGFTbGlkZVRvID0gJ2RhdGEtc2xpZGUtdG8nOyBcbiAgXG4gICAgdGhpc1trZXlib2FyZF0gPSBvcHRpb25zW2tleWJvYXJkXSA9PT0gdHJ1ZSB8fCBrZXlib2FyZERhdGE7XG4gICAgdGhpc1twYXVzZV0gPSAob3B0aW9uc1twYXVzZV0gPT09IGhvdmVyRXZlbnQgfHwgcGF1c2VEYXRhKSA/IGhvdmVyRXZlbnQgOiBmYWxzZTsgLy8gZmFsc2UgLyBob3ZlclxuICBcbiAgICBpZiAoICEoIG9wdGlvbnNbaW50ZXJ2YWxdIHx8IGludGVydmFsRGF0YSApICkgeyAvLyBkZXRlcm1pbmUgc2xpZGUgaW50ZXJ2YWxcbiAgICAgIHRoaXNbaW50ZXJ2YWxdID0gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXNbaW50ZXJ2YWxdID0gcGFyc2VJbnQob3B0aW9uc1tpbnRlcnZhbF0pIHx8IGludGVydmFsRGF0YTsgLy8gZGVmYXVsdCBzbGlkZSBpbnRlcnZhbFxuICAgIH1cbiAgXG4gICAgLy8gYmluZCwgZXZlbnQgdGFyZ2V0c1xuICAgIHZhciBzZWxmID0gdGhpcywgaW5kZXggPSBlbGVtZW50LmluZGV4ID0gMCwgdGltZXIgPSBlbGVtZW50LnRpbWVyID0gMCwgXG4gICAgICBpc1NsaWRpbmcgPSBmYWxzZSwgLy8gaXNTbGlkaW5nIHByZXZlbnRzIGNsaWNrIGV2ZW50IGhhbmRsZXJzIHdoZW4gYW5pbWF0aW9uIGlzIHJ1bm5pbmdcbiAgICAgIHNsaWRlcyA9IGdldEVsZW1lbnRzQnlDbGFzc05hbWUoZWxlbWVudCwnaXRlbScpLCB0b3RhbCA9IHNsaWRlc1tsZW5ndGhdLFxuICAgICAgc2xpZGVEaXJlY3Rpb24gPSB0aGlzW2RpcmVjdGlvbl0gPSBsZWZ0LFxuICAgICAgY29udHJvbHMgPSBnZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGVsZW1lbnQsY29tcG9uZW50KyctY29udHJvbCcpLFxuICAgICAgbGVmdEFycm93ID0gY29udHJvbHNbMF0sIHJpZ2h0QXJyb3cgPSBjb250cm9sc1sxXSxcbiAgICAgIGluZGljYXRvciA9IHF1ZXJ5RWxlbWVudCggJy4nK2NvbXBvbmVudCsnLWluZGljYXRvcnMnLCBlbGVtZW50ICksXG4gICAgICBpbmRpY2F0b3JzID0gaW5kaWNhdG9yW2dldEVsZW1lbnRzQnlUYWdOYW1lXSggXCJMSVwiICk7XG4gIFxuICAgIC8vIGhhbmRsZXJzXG4gICAgdmFyIHBhdXNlSGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCBzZWxmW2ludGVydmFsXSAhPT1mYWxzZSAmJiAhaGFzQ2xhc3MoZWxlbWVudCxwYXVzZWQpICkge1xuICAgICAgICAgIGFkZENsYXNzKGVsZW1lbnQscGF1c2VkKTtcbiAgICAgICAgICAhaXNTbGlkaW5nICYmIGNsZWFySW50ZXJ2YWwoIHRpbWVyICk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICByZXN1bWVIYW5kbGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICggc2VsZltpbnRlcnZhbF0gIT09IGZhbHNlICYmIGhhc0NsYXNzKGVsZW1lbnQscGF1c2VkKSApIHtcbiAgICAgICAgICByZW1vdmVDbGFzcyhlbGVtZW50LHBhdXNlZCk7XG4gICAgICAgICAgIWlzU2xpZGluZyAmJiBjbGVhckludGVydmFsKCB0aW1lciApO1xuICAgICAgICAgICFpc1NsaWRpbmcgJiYgc2VsZi5jeWNsZSgpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgaW5kaWNhdG9ySGFuZGxlciA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBpZiAoaXNTbGlkaW5nKSByZXR1cm47XG4gIFxuICAgICAgICB2YXIgZXZlbnRUYXJnZXQgPSBlW3RhcmdldF0sIGFjdGl2ZUluZGljYXRvciA9IHNlbGYuZ2V0QWN0aXZlSW5kZXgoKTsgLy8gZXZlbnQgdGFyZ2V0IHwgdGhlIGN1cnJlbnQgYWN0aXZlIGl0ZW1cbiAgXG4gICAgICAgIGlmICggZXZlbnRUYXJnZXQgJiYgIWhhc0NsYXNzKGV2ZW50VGFyZ2V0LGFjdGl2ZSkgJiYgZXZlbnRUYXJnZXRbZ2V0QXR0cmlidXRlXShkYXRhU2xpZGVUbykgKSB7XG4gICAgICAgICAgaW5kZXggPSBwYXJzZUludCggZXZlbnRUYXJnZXRbZ2V0QXR0cmlidXRlXShkYXRhU2xpZGVUbyksIDEwICk7XG4gIFxuICAgICAgICAgIC8vZGV0ZXJtaW5lIGRpcmVjdGlvbiBmaXJzdFxuICAgICAgICAgIGlmICAoIChhY3RpdmVJbmRpY2F0b3IgPCBpbmRleCApIHx8IChhY3RpdmVJbmRpY2F0b3IgPT09IDAgJiYgaW5kZXggPT09IHRvdGFsIC0xICkgKSB7XG4gICAgICAgICAgICBzbGlkZURpcmVjdGlvbiA9IHNlbGZbZGlyZWN0aW9uXSA9IGxlZnQ7IC8vIG5leHRcbiAgICAgICAgICB9IGVsc2UgaWYgICggKGFjdGl2ZUluZGljYXRvciA+IGluZGV4KSB8fCAoYWN0aXZlSW5kaWNhdG9yID09PSB0b3RhbCAtIDEgJiYgaW5kZXggPT09IDAgKSApIHtcbiAgICAgICAgICAgIHNsaWRlRGlyZWN0aW9uID0gc2VsZltkaXJlY3Rpb25dID0gcmlnaHQ7IC8vIHByZXZcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7IHJldHVybiBmYWxzZTsgfVxuICBcbiAgICAgICAgc2VsZi5zbGlkZVRvKCBpbmRleCApOyAvL0RvIHRoZSBzbGlkZVxuICAgICAgfSxcbiAgICAgIGNvbnRyb2xzSGFuZGxlciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgaWYgKGlzU2xpZGluZykgcmV0dXJuO1xuICBcbiAgICAgICAgdmFyIGV2ZW50VGFyZ2V0ID0gZS5jdXJyZW50VGFyZ2V0IHx8IGUuc3JjRWxlbWVudDtcbiAgXG4gICAgICAgIGlmICggZXZlbnRUYXJnZXQgPT09IHJpZ2h0QXJyb3cgKSB7XG4gICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgICBzbGlkZURpcmVjdGlvbiA9IHNlbGZbZGlyZWN0aW9uXSA9IGxlZnQ7IC8vc2V0IGRpcmVjdGlvbiBmaXJzdFxuICBcbiAgICAgICAgICBpZiggaW5kZXggPT09IHRvdGFsIC0gMSApIHtcbiAgICAgICAgICAgIGluZGV4ID0gdG90YWwgLSAxO1xuICAgICAgICAgIH0gZWxzZSBpZiAoIGluZGV4ID09PSB0b3RhbCApe1xuICAgICAgICAgICAgaW5kZXggPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICggZXZlbnRUYXJnZXQgPT09IGxlZnRBcnJvdyApIHtcbiAgICAgICAgICBpbmRleC0tO1xuICAgICAgICAgIHNsaWRlRGlyZWN0aW9uID0gc2VsZltkaXJlY3Rpb25dID0gcmlnaHQ7IC8vc2V0IGRpcmVjdGlvbiBmaXJzdFxuICBcbiAgICAgICAgICBpZiggaW5kZXggPT09IDAgKSB7XG4gICAgICAgICAgICBpbmRleCA9IDA7XG4gICAgICAgICAgfSBlbHNlIGlmICggaW5kZXggPCAwICl7XG4gICAgICAgICAgICBpbmRleCA9IHRvdGFsIC0gMVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICBcbiAgICAgICAgc2VsZi5zbGlkZVRvKCBpbmRleCApOyAvL0RvIHRoZSBzbGlkZVxuICAgICAgfSxcbiAgICAgIGtleUhhbmRsZXIgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICBpZiAoaXNTbGlkaW5nKSByZXR1cm47XG4gICAgICAgIHN3aXRjaCAoZS53aGljaCkge1xuICAgICAgICAgIGNhc2UgMzk6XG4gICAgICAgICAgICBpbmRleCsrO1xuICAgICAgICAgICAgc2xpZGVEaXJlY3Rpb24gPSBzZWxmW2RpcmVjdGlvbl0gPSBsZWZ0O1xuICAgICAgICAgICAgaWYoIGluZGV4ID09IHRvdGFsIC0gMSApIHsgaW5kZXggPSB0b3RhbCAtIDE7IH0gZWxzZVxuICAgICAgICAgICAgaWYgKCBpbmRleCA9PSB0b3RhbCApeyBpbmRleCA9IDAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAzNzpcbiAgICAgICAgICAgIGluZGV4LS07XG4gICAgICAgICAgICBzbGlkZURpcmVjdGlvbiA9IHNlbGZbZGlyZWN0aW9uXSA9IHJpZ2h0O1xuICAgICAgICAgICAgaWYgKCBpbmRleCA9PSAwICkgeyBpbmRleCA9IDA7IH0gZWxzZVxuICAgICAgICAgICAgaWYgKCBpbmRleCA8IDAgKSB7IGluZGV4ID0gdG90YWwgLSAxIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGRlZmF1bHQ6IHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBzZWxmLnNsaWRlVG8oIGluZGV4ICk7IC8vRG8gdGhlIHNsaWRlXG4gICAgICB9LFxuICAgICAgLy8gcHJpdmF0ZSBtZXRob2RzXG4gICAgICBzZXRBY3RpdmVQYWdlID0gZnVuY3Rpb24oIHBhZ2VJbmRleCApIHsgLy9pbmRpY2F0b3JzXG4gICAgICAgIGZvciAoIHZhciBpID0gMCwgaWNsID0gaW5kaWNhdG9yc1tsZW5ndGhdOyBpIDwgaWNsOyBpKysgKSB7XG4gICAgICAgICAgcmVtb3ZlQ2xhc3MoaW5kaWNhdG9yc1tpXSxhY3RpdmUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbmRpY2F0b3JzW3BhZ2VJbmRleF0pIGFkZENsYXNzKGluZGljYXRvcnNbcGFnZUluZGV4XSwgYWN0aXZlKTtcbiAgICAgIH07XG4gIFxuICBcbiAgICAvLyBwdWJsaWMgbWV0aG9kc1xuICAgIHRoaXMuY3ljbGUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHNsaWRlRGlyZWN0aW9uID0gdGhpc1tkaXJlY3Rpb25dID0gbGVmdDsgLy8gbWFrZSBzdXJlIHRvIGFsd2F5cyBjb21lIGJhY2sgdG8gZGVmYXVsdCBzbGlkZURpcmVjdGlvblxuICAgICAgdGltZXIgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpIHtcbiAgICAgICAgaW5kZXgrKztcbiAgXG4gICAgICAgIGluZGV4ID0gaW5kZXggPT09IHRvdGFsID8gMCA6IGluZGV4O1xuICAgICAgICBzZWxmLnNsaWRlVG8oIGluZGV4ICk7XG4gICAgICB9LCB0aGlzW2ludGVydmFsXSk7XG4gICAgfTtcbiAgICB0aGlzLnNsaWRlVG8gPSBmdW5jdGlvbiggbmV4dCApIHtcbiAgICAgIHZhciBhY3RpdmVJdGVtID0gdGhpcy5nZXRBY3RpdmVJbmRleCgpLCAvLyB0aGUgY3VycmVudCBhY3RpdmVcbiAgICAgICAgICBvcmllbnRhdGlvbiA9IHNsaWRlRGlyZWN0aW9uID09PSBsZWZ0ID8gJ25leHQnIDogJ3ByZXYnOyAvL2RldGVybWluZSB0eXBlXG4gIFxuICAgICAgYm9vdHN0cmFwQ3VzdG9tRXZlbnQuY2FsbChlbGVtZW50LCBzbGlkZUV2ZW50LCBjb21wb25lbnQsIHNsaWRlc1tuZXh0XSk7IC8vIGhlcmUgd2UgZ28gd2l0aCB0aGUgc2xpZGVcbiAgXG4gICAgICBpc1NsaWRpbmcgPSB0aGlzLmlzU2xpZGluZyA9IHRydWU7XG4gICAgICBjbGVhckludGVydmFsKHRpbWVyKTtcbiAgICAgIHNldEFjdGl2ZVBhZ2UoIG5leHQgKTtcbiAgXG4gICAgICBpZiAoIHN1cHBvcnRUcmFuc2l0aW9ucyAmJiBoYXNDbGFzcyhlbGVtZW50LCdzbGlkZScpICkge1xuICAgICAgICBhZGRDbGFzcyhzbGlkZXNbbmV4dF0sb3JpZW50YXRpb24pO1xuICAgICAgICBzbGlkZXNbbmV4dF1bb2Zmc2V0V2lkdGhdOyAgXG4gICAgICAgIGFkZENsYXNzKHNsaWRlc1tuZXh0XSxzbGlkZURpcmVjdGlvbik7XG4gICAgICAgIGFkZENsYXNzKHNsaWRlc1thY3RpdmVJdGVtXSxzbGlkZURpcmVjdGlvbik7XG4gIFxuICAgICAgICBvbmUoc2xpZGVzW25leHRdLCB0cmFuc2l0aW9uRW5kRXZlbnQsIGZ1bmN0aW9uKCkgeyAvL3dlJ3JlIGdvbm5hIGZha2Ugd2FpdGluZyBmb3IgdGhlIGFuaW1hdGlvbiB0byBmaW5pc2gsIGNsZWFuZXIgYW5kIGJldHRlclxuICAgICAgICAgIGlzU2xpZGluZyA9IHNlbGYuaXNTbGlkaW5nID0gZmFsc2U7XG4gIFxuICAgICAgICAgIGFkZENsYXNzKHNsaWRlc1tuZXh0XSxhY3RpdmUpO1xuICAgICAgICAgIHJlbW92ZUNsYXNzKHNsaWRlc1thY3RpdmVJdGVtXSxhY3RpdmUpO1xuICBcbiAgICAgICAgICByZW1vdmVDbGFzcyhzbGlkZXNbbmV4dF0sb3JpZW50YXRpb24pO1xuICAgICAgICAgIHJlbW92ZUNsYXNzKHNsaWRlc1tuZXh0XSxzbGlkZURpcmVjdGlvbik7XG4gICAgICAgICAgcmVtb3ZlQ2xhc3Moc2xpZGVzW2FjdGl2ZUl0ZW1dLHNsaWRlRGlyZWN0aW9uKTtcbiAgXG4gICAgICAgICAgaWYgKCBzZWxmW2ludGVydmFsXSAmJiAhaGFzQ2xhc3MoZWxlbWVudCxwYXVzZWQpICkge1xuICAgICAgICAgICAgc2VsZi5jeWNsZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBib290c3RyYXBDdXN0b21FdmVudC5jYWxsKGVsZW1lbnQsIHNsaWRFdmVudCwgY29tcG9uZW50LCBzbGlkZXNbbmV4dF0pOyAvLyBoZXJlIHdlIGdvIHdpdGggdGhlIHNsaWQgZXZlbnRcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWRkQ2xhc3Moc2xpZGVzW25leHRdLGFjdGl2ZSk7XG4gICAgICAgIHNsaWRlc1tuZXh0XVtvZmZzZXRXaWR0aF07XG4gICAgICAgIHJlbW92ZUNsYXNzKHNsaWRlc1thY3RpdmVJdGVtXSxhY3RpdmUpO1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlzU2xpZGluZyA9IGZhbHNlO1xuICAgICAgICAgIGlmICggc2VsZltpbnRlcnZhbF0gJiYgIWhhc0NsYXNzKGVsZW1lbnQscGF1c2VkKSApIHtcbiAgICAgICAgICAgIHNlbGYuY3ljbGUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYm9vdHN0cmFwQ3VzdG9tRXZlbnQuY2FsbChlbGVtZW50LCBzbGlkRXZlbnQsIGNvbXBvbmVudCwgc2xpZGVzW25leHRdKTsgLy8gaGVyZSB3ZSBnbyB3aXRoIHRoZSBzbGlkIGV2ZW50XG4gICAgICAgIH0sIDEwMCApO1xuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5nZXRBY3RpdmVJbmRleCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBzbGlkZXNbaW5kZXhPZl0oZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShlbGVtZW50LCdpdGVtIGFjdGl2ZScpWzBdKSB8fCAwO1xuICAgIH07XG4gIFxuICAgIC8vIGluaXRcbiAgICBpZiAoICEoc3RyaW5nQ2Fyb3VzZWwgaW4gZWxlbWVudCApICkgeyAvLyBwcmV2ZW50IGFkZGluZyBldmVudCBoYW5kbGVycyB0d2ljZVxuICBcbiAgICAgIGlmICggdGhpc1twYXVzZV0gJiYgdGhpc1tpbnRlcnZhbF0gKSB7XG4gICAgICAgIG9uKCBlbGVtZW50LCBtb3VzZUhvdmVyWzBdLCBwYXVzZUhhbmRsZXIgKTtcbiAgICAgICAgb24oIGVsZW1lbnQsIG1vdXNlSG92ZXJbMV0sIHJlc3VtZUhhbmRsZXIgKTtcbiAgICAgICAgb24oIGVsZW1lbnQsICd0b3VjaHN0YXJ0JywgcGF1c2VIYW5kbGVyICk7XG4gICAgICAgIG9uKCBlbGVtZW50LCAndG91Y2hlbmQnLCByZXN1bWVIYW5kbGVyICk7XG4gICAgICB9XG4gICAgXG4gICAgICByaWdodEFycm93ICYmIG9uKCByaWdodEFycm93LCBjbGlja0V2ZW50LCBjb250cm9sc0hhbmRsZXIgKTtcbiAgICAgIGxlZnRBcnJvdyAmJiBvbiggbGVmdEFycm93LCBjbGlja0V2ZW50LCBjb250cm9sc0hhbmRsZXIgKTtcbiAgICBcbiAgICAgIGluZGljYXRvciAmJiBvbiggaW5kaWNhdG9yLCBjbGlja0V2ZW50LCBpbmRpY2F0b3JIYW5kbGVyLCBmYWxzZSk7XG4gICAgICB0aGlzW2tleWJvYXJkXSA9PT0gdHJ1ZSAmJiBvbiggZ2xvYmFsT2JqZWN0LCBrZXlkb3duRXZlbnQsIGtleUhhbmRsZXIsIGZhbHNlKTtcbiAgXG4gICAgfVxuICAgIGlmICh0aGlzLmdldEFjdGl2ZUluZGV4KCk8MCkge1xuICAgICAgc2xpZGVzW2xlbmd0aF0gJiYgYWRkQ2xhc3Moc2xpZGVzWzBdLGFjdGl2ZSk7XG4gICAgICBpbmRpY2F0b3JzW2xlbmd0aF0gJiYgc2V0QWN0aXZlUGFnZSgwKTtcbiAgICB9XG4gIFxuICAgIGlmICggdGhpc1tpbnRlcnZhbF0gKXsgdGhpcy5jeWNsZSgpOyB9XG4gICAgZWxlbWVudFtzdHJpbmdDYXJvdXNlbF0gPSB0aGlzO1xuICB9O1xuICBcbiAgLy8gQ0FST1VTRUwgREFUQSBBUElcbiAgLy8gPT09PT09PT09PT09PT09PT1cbiAgaW5pdGlhbGl6ZURhdGFBUEkoIHN0cmluZ0Nhcm91c2VsLCBDYXJvdXNlbCwgZGF0YVJpZGUgKTtcbiAgXG4gIFxuICAvKiBOYXRpdmUgSmF2YXNjcmlwdCBmb3IgQm9vdHN0cmFwIDMgfCBDb2xsYXBzZVxuICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4gIFxuICAvLyBDT0xMQVBTRSBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT1cbiAgdmFyIENvbGxhcHNlID0gZnVuY3Rpb24oIGVsZW1lbnQsIG9wdGlvbnMgKSB7XG4gIFxuICAgIC8vIGluaXRpYWxpemF0aW9uIGVsZW1lbnRcbiAgICBlbGVtZW50ID0gcXVlcnlFbGVtZW50KGVsZW1lbnQpO1xuICBcbiAgICAvLyBzZXQgb3B0aW9uc1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBcbiAgXG4gICAgLy8gZXZlbnQgdGFyZ2V0cyBhbmQgY29uc3RhbnRzXG4gICAgdmFyIGFjY29yZGlvbiA9IG51bGwsIGNvbGxhcHNlID0gbnVsbCwgc2VsZiA9IHRoaXMsIFxuICAgICAgaXNBbmltYXRpbmcgPSBmYWxzZSwgLy8gd2hlbiB0cnVlIGl0IHdpbGwgcHJldmVudCBjbGljayBoYW5kbGVyc1xuICAgICAgYWNjb3JkaW9uRGF0YSA9IGVsZW1lbnRbZ2V0QXR0cmlidXRlXSgnZGF0YS1wYXJlbnQnKSxcbiAgXG4gICAgICAvLyBjb21wb25lbnQgc3RyaW5nc1xuICAgICAgY29tcG9uZW50ID0gJ2NvbGxhcHNlJyxcbiAgICAgIGNvbGxhcHNlZCA9ICdjb2xsYXBzZWQnLFxuICBcbiAgICAgIC8vIHByaXZhdGUgbWV0aG9kc1xuICAgICAgb3BlbkFjdGlvbiA9IGZ1bmN0aW9uKGNvbGxhcHNlRWxlbWVudCkge1xuICAgICAgICBib290c3RyYXBDdXN0b21FdmVudC5jYWxsKGNvbGxhcHNlRWxlbWVudCwgc2hvd0V2ZW50LCBjb21wb25lbnQpO1xuICAgICAgICBpc0FuaW1hdGluZyA9IHRydWU7XG4gICAgICAgIGFkZENsYXNzKGNvbGxhcHNlRWxlbWVudCxjb2xsYXBzaW5nKTtcbiAgICAgICAgYWRkQ2xhc3MoY29sbGFwc2VFbGVtZW50LGluQ2xhc3MpO1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGNvbGxhcHNlRWxlbWVudFtzdHlsZV1baGVpZ2h0XSA9IGdldE1heEhlaWdodChjb2xsYXBzZUVsZW1lbnQpICsgJ3B4JztcbiAgICAgICAgfSwgMCk7XG4gIFxuICAgICAgICBlbXVsYXRlVHJhbnNpdGlvbkVuZChjb2xsYXBzZUVsZW1lbnQsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJlbW92ZUNsYXNzKGNvbGxhcHNlRWxlbWVudCxjb2xsYXBzaW5nKTtcbiAgICAgICAgICBjb2xsYXBzZUVsZW1lbnRbc3R5bGVdW2hlaWdodF0gPSAnJztcbiAgICAgICAgICBpc0FuaW1hdGluZyA9IGZhbHNlO1xuICAgICAgICAgIGNvbGxhcHNlRWxlbWVudFtzZXRBdHRyaWJ1dGVdKGFyaWFFeHBhbmRlZCwndHJ1ZScpO1xuICAgICAgICAgIGJvb3RzdHJhcEN1c3RvbUV2ZW50LmNhbGwoY29sbGFwc2VFbGVtZW50LCBzaG93bkV2ZW50LCBjb21wb25lbnQpO1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBjbG9zZUFjdGlvbiA9IGZ1bmN0aW9uKGNvbGxhcHNlRWxlbWVudCkge1xuICAgICAgICBib290c3RyYXBDdXN0b21FdmVudC5jYWxsKGNvbGxhcHNlRWxlbWVudCwgaGlkZUV2ZW50LCBjb21wb25lbnQpO1xuICAgICAgICBpc0FuaW1hdGluZyA9IHRydWU7XG4gICAgICAgIGNvbGxhcHNlRWxlbWVudFtzdHlsZV1baGVpZ2h0XSA9IGdldE1heEhlaWdodChjb2xsYXBzZUVsZW1lbnQpICsgJ3B4JztcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICBhZGRDbGFzcyhjb2xsYXBzZUVsZW1lbnQsY29sbGFwc2luZyk7XG4gICAgICAgICAgY29sbGFwc2VFbGVtZW50W3N0eWxlXVtoZWlnaHRdID0gJzBweCc7XG4gICAgICAgIH0sIDApO1xuICBcbiAgICAgICAgZW11bGF0ZVRyYW5zaXRpb25FbmQoY29sbGFwc2VFbGVtZW50LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZW1vdmVDbGFzcyhjb2xsYXBzZUVsZW1lbnQsY29sbGFwc2luZyk7XG4gICAgICAgICAgcmVtb3ZlQ2xhc3MoY29sbGFwc2VFbGVtZW50LGluQ2xhc3MpO1xuICAgICAgICAgIGNvbGxhcHNlRWxlbWVudFtzdHlsZV1baGVpZ2h0XSA9ICcnO1xuICAgICAgICAgIGlzQW5pbWF0aW5nID0gZmFsc2U7XG4gICAgICAgICAgY29sbGFwc2VFbGVtZW50W3NldEF0dHJpYnV0ZV0oYXJpYUV4cGFuZGVkLCdmYWxzZScpO1xuICAgICAgICAgIGJvb3RzdHJhcEN1c3RvbUV2ZW50LmNhbGwoY29sbGFwc2VFbGVtZW50LCBoaWRkZW5FdmVudCwgY29tcG9uZW50KTtcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgZ2V0VGFyZ2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBocmVmID0gZWxlbWVudC5ocmVmICYmIGVsZW1lbnRbZ2V0QXR0cmlidXRlXSgnaHJlZicpLFxuICAgICAgICAgIHBhcmVudCA9IGVsZW1lbnRbZ2V0QXR0cmlidXRlXShkYXRhVGFyZ2V0KSxcbiAgICAgICAgICBpZCA9IGhyZWYgfHwgKCBwYXJlbnQgJiYgLyMvLnRlc3QocGFyZW50KSApICYmIHBhcmVudDtcbiAgICAgICAgcmV0dXJuIGlkICYmIHF1ZXJ5RWxlbWVudChpZCk7XG4gICAgICB9O1xuICAgIFxuICAgIC8vIHB1YmxpYyBtZXRob2RzXG4gICAgdGhpcy50b2dnbGUgPSBmdW5jdGlvbihlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBpZiAoaXNBbmltYXRpbmcpIHJldHVybjtcbiAgICAgIGlmICghaGFzQ2xhc3MoY29sbGFwc2UsaW5DbGFzcykpIHsgc2VsZi5zaG93KCk7IH0gXG4gICAgICBlbHNlIHsgc2VsZi5oaWRlKCk7IH1cbiAgICB9O1xuICAgIHRoaXMuaGlkZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgY2xvc2VBY3Rpb24oY29sbGFwc2UpO1xuICAgICAgYWRkQ2xhc3MoZWxlbWVudCxjb2xsYXBzZWQpO1xuICAgIH07XG4gICAgdGhpcy5zaG93ID0gZnVuY3Rpb24oKSB7XG4gICAgICBvcGVuQWN0aW9uKGNvbGxhcHNlKTtcbiAgICAgIHJlbW92ZUNsYXNzKGVsZW1lbnQsY29sbGFwc2VkKTtcbiAgXG4gICAgICBpZiAoIGFjY29yZGlvbiAhPT0gbnVsbCApIHtcbiAgICAgICAgdmFyIGFjdGl2ZUNvbGxhcHNlcyA9IGdldEVsZW1lbnRzQnlDbGFzc05hbWUoYWNjb3JkaW9uLGNvbXBvbmVudCsnICcraW5DbGFzcyk7XG4gICAgICAgIGZvciAodmFyIGk9MCwgYWw9YWN0aXZlQ29sbGFwc2VzW2xlbmd0aF07IGk8YWw7IGkrKykge1xuICAgICAgICAgIGlmICggYWN0aXZlQ29sbGFwc2VzW2ldICE9PSBjb2xsYXBzZSkgY2xvc2VBY3Rpb24oYWN0aXZlQ29sbGFwc2VzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIFxuICAgIC8vIGluaXRcbiAgICBpZiAoICEoc3RyaW5nQ29sbGFwc2UgaW4gZWxlbWVudCApICkgeyAvLyBwcmV2ZW50IGFkZGluZyBldmVudCBoYW5kbGVycyB0d2ljZVxuICAgICAgb24oZWxlbWVudCwgY2xpY2tFdmVudCwgdGhpcy50b2dnbGUpO1xuICAgIH1cbiAgICBjb2xsYXBzZSA9IGdldFRhcmdldCgpO1xuICAgIGFjY29yZGlvbiA9IHF1ZXJ5RWxlbWVudChvcHRpb25zLnBhcmVudCkgfHwgYWNjb3JkaW9uRGF0YSAmJiBnZXRDbG9zZXN0KGVsZW1lbnQsIGFjY29yZGlvbkRhdGEpO1xuICAgIGVsZW1lbnRbc3RyaW5nQ29sbGFwc2VdID0gdGhpcztcbiAgfTtcbiAgXG4gIC8vIENPTExBUFNFIERBVEEgQVBJXG4gIC8vID09PT09PT09PT09PT09PT09XG4gIGluaXRpYWxpemVEYXRhQVBJKHN0cmluZ0NvbGxhcHNlLCBDb2xsYXBzZSwgZGF0YVRvZ2dsZSk7XG4gIFxuICBcbiAgLyogTmF0aXZlIEphdmFzY3JpcHQgZm9yIEJvb3RzdHJhcCAzIHwgRHJvcGRvd25cbiAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4gIFxuICAvLyBEUk9QRE9XTiBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT1cbiAgdmFyIERyb3Bkb3duID0gZnVuY3Rpb24oIGVsZW1lbnQsIG9wdGlvbiApIHtcbiAgICAgIFxuICAgIC8vIGluaXRpYWxpemF0aW9uIGVsZW1lbnRcbiAgICBlbGVtZW50ID0gcXVlcnlFbGVtZW50KGVsZW1lbnQpO1xuICBcbiAgICAvLyBzZXQgb3B0aW9uXG4gICAgdGhpcy5wZXJzaXN0ID0gb3B0aW9uID09PSB0cnVlIHx8IGVsZW1lbnRbZ2V0QXR0cmlidXRlXSgnZGF0YS1wZXJzaXN0JykgPT09ICd0cnVlJyB8fCBmYWxzZTtcbiAgXG4gICAgLy8gY29uc3RhbnRzLCBldmVudCB0YXJnZXRzLCBzdHJpbmdzXG4gICAgdmFyIHNlbGYgPSB0aGlzLCBpc09wZW4gPSBmYWxzZSxcbiAgICAgIHBhcmVudCA9IGVsZW1lbnRbcGFyZW50Tm9kZV0sXG4gICAgICBjb21wb25lbnQgPSAnZHJvcGRvd24nLCBvcGVuID0gJ29wZW4nLFxuICAgICAgcmVsYXRlZFRhcmdldCA9IG51bGwsXG4gICAgICBtZW51ID0gcXVlcnlFbGVtZW50KCcuZHJvcGRvd24tbWVudScsIHBhcmVudCksXG4gICAgICBjaGlsZHJlbiA9IG5vZGVMaXN0VG9BcnJheSggbWVudVtnZXRFbGVtZW50c0J5VGFnTmFtZV0oJyonKSksXG4gIFxuICAgICAgLy8gaGFuZGxlcnNcbiAgICAgIGtleUhhbmRsZXIgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIGlmIChpc09wZW4gJiYgKGUud2hpY2ggPT0gMjcgfHwgZS5rZXlDb2RlID09IDI3KSkgeyByZWxhdGVkVGFyZ2V0ID0gbnVsbDsgaGlkZSgpOyB9IC8vIGUua2V5Q29kZSBmb3IgSUU4XG4gICAgICB9LFxuICAgICAgY2xpY2tIYW5kbGVyID0gZnVuY3Rpb24oZSkge1xuICAgICAgICB2YXIgZXZlbnRUYXJnZXQgPSBlW3RhcmdldF0sIGhhc0RhdGE7XG4gICAgICAgIGhhc0RhdGEgPSAoIGV2ZW50VGFyZ2V0Lm5vZGVUeXBlICE9PSAxICYmIChldmVudFRhcmdldFtnZXRBdHRyaWJ1dGVdKGRhdGFUb2dnbGUpIHx8IGV2ZW50VGFyZ2V0W3BhcmVudE5vZGVdW2dldEF0dHJpYnV0ZV0oZGF0YVRvZ2dsZSkpICk7XG4gICAgICAgIGlmICggZXZlbnRUYXJnZXQgPT09IGVsZW1lbnQgfHwgZXZlbnRUYXJnZXQgPT09IHBhcmVudCB8fCBldmVudFRhcmdldFtwYXJlbnROb2RlXSA9PT0gZWxlbWVudCApIHtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7IC8vIGNvbW1lbnQgdGhpcyBsaW5lIHRvIHN0b3AgcHJldmVudGluZyBuYXZpZ2F0aW9uIHdoZW4gY2xpY2sgdGFyZ2V0IGlzIGEgbGluayBcbiAgICAgICAgICByZWxhdGVkVGFyZ2V0ID0gZWxlbWVudDtcbiAgICAgICAgICBzZWxmLnRvZ2dsZSgpO1xuICAgICAgICB9IGVsc2UgaWYgKCBpc09wZW4gKSB7XG4gICAgICAgICAgaWYgKCAoZXZlbnRUYXJnZXQgPT09IG1lbnUgfHwgY2hpbGRyZW4gJiYgY2hpbGRyZW5baW5kZXhPZl0oZXZlbnRUYXJnZXQpID4gLTEpICYmICggc2VsZi5wZXJzaXN0IHx8IGhhc0RhdGEgKSApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9IGVsc2UgeyByZWxhdGVkVGFyZ2V0ID0gbnVsbDsgaGlkZSgpOyB9XG4gICAgICAgIH1cbiAgICAgICAgKC9cXCMkLy50ZXN0KGV2ZW50VGFyZ2V0LmhyZWYpIHx8IGV2ZW50VGFyZ2V0W3BhcmVudE5vZGVdICYmIC9cXCMkLy50ZXN0KGV2ZW50VGFyZ2V0W3BhcmVudE5vZGVdLmhyZWYpKSAmJiBlLnByZXZlbnREZWZhdWx0KCk7IC8vIHNob3VsZCBiZSBoZXJlIHRvIHByZXZlbnQganVtcHNcbiAgICAgIH0sXG4gICAgICAvLyBwcml2YXRlIG1ldGhvZHNcbiAgICAgIHNob3cgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgYm9vdHN0cmFwQ3VzdG9tRXZlbnQuY2FsbChwYXJlbnQsIHNob3dFdmVudCwgY29tcG9uZW50LCByZWxhdGVkVGFyZ2V0KTtcbiAgICAgICAgYWRkQ2xhc3MocGFyZW50LG9wZW4pO1xuICAgICAgICBtZW51W3NldEF0dHJpYnV0ZV0oYXJpYUV4cGFuZGVkLHRydWUpO1xuICAgICAgICBib290c3RyYXBDdXN0b21FdmVudC5jYWxsKHBhcmVudCwgc2hvd25FdmVudCwgY29tcG9uZW50LCByZWxhdGVkVGFyZ2V0KTtcbiAgICAgICAgb24oZG9jdW1lbnQsIGtleWRvd25FdmVudCwga2V5SGFuZGxlcik7XG4gICAgICAgIGlzT3BlbiA9IHRydWU7XG4gICAgICB9LFxuICAgICAgaGlkZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBib290c3RyYXBDdXN0b21FdmVudC5jYWxsKHBhcmVudCwgaGlkZUV2ZW50LCBjb21wb25lbnQsIHJlbGF0ZWRUYXJnZXQpO1xuICAgICAgICByZW1vdmVDbGFzcyhwYXJlbnQsb3Blbik7XG4gICAgICAgIG1lbnVbc2V0QXR0cmlidXRlXShhcmlhRXhwYW5kZWQsZmFsc2UpO1xuICAgICAgICBib290c3RyYXBDdXN0b21FdmVudC5jYWxsKHBhcmVudCwgaGlkZGVuRXZlbnQsIGNvbXBvbmVudCwgcmVsYXRlZFRhcmdldCk7XG4gICAgICAgIG9mZihkb2N1bWVudCwga2V5ZG93bkV2ZW50LCBrZXlIYW5kbGVyKTtcbiAgICAgICAgaXNPcGVuID0gZmFsc2U7XG4gICAgICB9O1xuICBcbiAgICAvLyBwdWJsaWMgbWV0aG9kc1xuICAgIHRoaXMudG9nZ2xlID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoaGFzQ2xhc3MocGFyZW50LG9wZW4pICYmIGlzT3BlbikgeyBoaWRlKCk7IH0gXG4gICAgICBlbHNlIHsgc2hvdygpOyB9XG4gICAgfTtcbiAgXG4gICAgLy8gaW5pdFxuICAgIGlmICggIShzdHJpbmdEcm9wZG93biBpbiBlbGVtZW50KSApIHsgLy8gcHJldmVudCBhZGRpbmcgZXZlbnQgaGFuZGxlcnMgdHdpY2VcbiAgICAgIG1lbnVbc2V0QXR0cmlidXRlXSgndGFiaW5kZXgnLCAnMCcpOyAvLyBGaXggb25ibHVyIG9uIENocm9tZSB8IFNhZmFyaVxuICAgICAgb24oZG9jdW1lbnQsIGNsaWNrRXZlbnQsIGNsaWNrSGFuZGxlcik7XG4gICAgfVxuICAgIGVsZW1lbnRbc3RyaW5nRHJvcGRvd25dID0gdGhpcztcbiAgfTtcbiAgXG4gIC8vIERST1BET1dOIERBVEEgQVBJXG4gIC8vID09PT09PT09PT09PT09PT09XG4gIGluaXRpYWxpemVEYXRhQVBJKCBzdHJpbmdEcm9wZG93biwgRHJvcGRvd24sIGRhdGFUb2dnbGUgKTtcbiAgXG4gIFxuICAvKiBOYXRpdmUgSmF2YXNjcmlwdCBmb3IgQm9vdHN0cmFwIDMgfCBNb2RhbFxuICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbiAgICBcbiAgLy8gTU9EQUwgREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT1cbiAgdmFyIE1vZGFsID0gZnVuY3Rpb24oZWxlbWVudCwgb3B0aW9ucykgeyAvLyBlbGVtZW50IGNhbiBiZSB0aGUgbW9kYWwvdHJpZ2dlcmluZyBidXR0b25cbiAgXG4gICAgLy8gdGhlIG1vZGFsIChib3RoIEphdmFTY3JpcHQgLyBEQVRBIEFQSSBpbml0KSAvIHRyaWdnZXJpbmcgYnV0dG9uIGVsZW1lbnQgKERBVEEgQVBJKVxuICAgIGVsZW1lbnQgPSBxdWVyeUVsZW1lbnQoZWxlbWVudCk7XG4gIFxuICAgIC8vIGRldGVybWluZSBtb2RhbCwgdHJpZ2dlcmluZyBlbGVtZW50IFxuICAgIHZhciBidG5DaGVjayA9IGVsZW1lbnRbZ2V0QXR0cmlidXRlXShkYXRhVGFyZ2V0KXx8ZWxlbWVudFtnZXRBdHRyaWJ1dGVdKCdocmVmJyksXG4gICAgICBjaGVja01vZGFsID0gcXVlcnlFbGVtZW50KCBidG5DaGVjayApLFxuICAgICAgbW9kYWwgPSBoYXNDbGFzcyhlbGVtZW50LCdtb2RhbCcpID8gZWxlbWVudCA6IGNoZWNrTW9kYWwsXG4gIFxuICAgICAgLy8gc3RyaW5nc1xuICAgICAgY29tcG9uZW50ID0gJ21vZGFsJyxcbiAgICAgIHN0YXRpY1N0cmluZyA9ICdzdGF0aWMnLFxuICAgICAgcGFkZGluZ0xlZnQgPSAncGFkZGluZ0xlZnQnLFxuICAgICAgcGFkZGluZ1JpZ2h0ID0gJ3BhZGRpbmdSaWdodCcsXG4gICAgICBtb2RhbEJhY2tkcm9wU3RyaW5nID0gJ21vZGFsLWJhY2tkcm9wJztcbiAgXG4gICAgaWYgKCBoYXNDbGFzcyhlbGVtZW50LCdtb2RhbCcpICkgeyBlbGVtZW50ID0gbnVsbDsgfSAvLyBtb2RhbCBpcyBub3cgaW5kZXBlbmRlbnQgb2YgaXQncyB0cmlnZ2VyaW5nIGVsZW1lbnRcbiAgXG4gICAgaWYgKCAhbW9kYWwgKSB7IHJldHVybjsgfSAvLyBpbnZhbGlkYXRlXG4gIFxuICAgIC8vIHNldCBvcHRpb25zXG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIFxuICAgIHRoaXNba2V5Ym9hcmRdID0gb3B0aW9uc1trZXlib2FyZF0gPT09IGZhbHNlIHx8IG1vZGFsW2dldEF0dHJpYnV0ZV0oZGF0YUtleWJvYXJkKSA9PT0gJ2ZhbHNlJyA/IGZhbHNlIDogdHJ1ZTtcbiAgICB0aGlzW2JhY2tkcm9wXSA9IG9wdGlvbnNbYmFja2Ryb3BdID09PSBzdGF0aWNTdHJpbmcgfHwgbW9kYWxbZ2V0QXR0cmlidXRlXShkYXRhYmFja2Ryb3ApID09PSBzdGF0aWNTdHJpbmcgPyBzdGF0aWNTdHJpbmcgOiB0cnVlO1xuICAgIHRoaXNbYmFja2Ryb3BdID0gb3B0aW9uc1tiYWNrZHJvcF0gPT09IGZhbHNlIHx8IG1vZGFsW2dldEF0dHJpYnV0ZV0oZGF0YWJhY2tkcm9wKSA9PT0gJ2ZhbHNlJyA/IGZhbHNlIDogdGhpc1tiYWNrZHJvcF07XG4gICAgdGhpc1tjb250ZW50XSAgPSBvcHRpb25zW2NvbnRlbnRdOyAvLyBKYXZhU2NyaXB0IG9ubHlcbiAgXG4gICAgLy8gYmluZCwgY29uc3RhbnRzLCBldmVudCB0YXJnZXRzIGFuZCBvdGhlciB2YXJzXG4gICAgdmFyIHNlbGYgPSB0aGlzLCBvcGVuID0gdGhpcy5vcGVuID0gZmFsc2UsIHJlbGF0ZWRUYXJnZXQgPSBudWxsLFxuICAgICAgYm9keUlzT3ZlcmZsb3dpbmcsIG1vZGFsSXNPdmVyZmxvd2luZywgc2Nyb2xsYmFyV2lkdGgsIG92ZXJsYXksXG4gIFxuICAgICAgLy8gcHJpdmF0ZSBtZXRob2RzXG4gICAgICBnZXRXaW5kb3dXaWR0aCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgaHRtbFJlY3QgPSBkb2NbZ2V0Qm91bmRpbmdDbGllbnRSZWN0XSgpO1xuICAgICAgICByZXR1cm4gZ2xvYmFsT2JqZWN0W2lubmVyV2lkdGhdIHx8IChodG1sUmVjdFtyaWdodF0gLSBNYXRoLmFicyhodG1sUmVjdFtsZWZ0XSkpO1xuICAgICAgfSxcbiAgICAgIHNldFNjcm9sbGJhciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGJvZHlTdHlsZSA9IGJvZHkuY3VycmVudFN0eWxlIHx8IGdsb2JhbE9iamVjdC5nZXRDb21wdXRlZFN0eWxlKGJvZHkpLCBib2R5UGFkID0gcGFyc2VJbnQoKGJvZHlTdHlsZVtwYWRkaW5nUmlnaHRdKSwgMTApO1xuICAgICAgICBpZiAoYm9keUlzT3ZlcmZsb3dpbmcpIHsgYm9keVtzdHlsZV1bcGFkZGluZ1JpZ2h0XSA9IChib2R5UGFkICsgc2Nyb2xsYmFyV2lkdGgpICsgJ3B4JzsgfVxuICAgICAgfSxcbiAgICAgIHJlc2V0U2Nyb2xsYmFyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBib2R5W3N0eWxlXVtwYWRkaW5nUmlnaHRdID0gJyc7XG4gICAgICB9LFxuICAgICAgbWVhc3VyZVNjcm9sbGJhciA9IGZ1bmN0aW9uICgpIHsgLy8gdGh4IHdhbHNoXG4gICAgICAgIHZhciBzY3JvbGxEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSwgc2Nyb2xsQmFyV2lkdGg7XG4gICAgICAgIHNjcm9sbERpdi5jbGFzc05hbWUgPSBjb21wb25lbnQrJy1zY3JvbGxiYXItbWVhc3VyZSc7IC8vIHRoaXMgaXMgaGVyZSB0byBzdGF5XG4gICAgICAgIGJvZHkuYXBwZW5kQ2hpbGQoc2Nyb2xsRGl2KTtcbiAgICAgICAgc2Nyb2xsQmFyV2lkdGggPSBzY3JvbGxEaXZbb2Zmc2V0V2lkdGhdIC0gc2Nyb2xsRGl2W2NsaWVudFdpZHRoXTtcbiAgICAgICAgYm9keS5yZW1vdmVDaGlsZChzY3JvbGxEaXYpO1xuICAgICAgICByZXR1cm4gc2Nyb2xsQmFyV2lkdGg7XG4gICAgICB9LFxuICAgICAgY2hlY2tTY3JvbGxiYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGJvZHlJc092ZXJmbG93aW5nID0gYm9keVtjbGllbnRXaWR0aF0gPCBnZXRXaW5kb3dXaWR0aCgpO1xuICAgICAgICBtb2RhbElzT3ZlcmZsb3dpbmcgPSBtb2RhbFtzY3JvbGxIZWlnaHRdID4gZG9jW2NsaWVudEhlaWdodF07XG4gICAgICAgIHNjcm9sbGJhcldpZHRoID0gbWVhc3VyZVNjcm9sbGJhcigpO1xuICAgICAgfSxcbiAgICAgIGFkanVzdERpYWxvZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbW9kYWxbc3R5bGVdW3BhZGRpbmdMZWZ0XSA9ICFib2R5SXNPdmVyZmxvd2luZyAmJiBtb2RhbElzT3ZlcmZsb3dpbmcgPyBzY3JvbGxiYXJXaWR0aCArICdweCcgOiAnJztcbiAgICAgICAgbW9kYWxbc3R5bGVdW3BhZGRpbmdSaWdodF0gPSBib2R5SXNPdmVyZmxvd2luZyAmJiAhbW9kYWxJc092ZXJmbG93aW5nID8gc2Nyb2xsYmFyV2lkdGggKyAncHgnIDogJyc7XG4gICAgICB9LFxuICAgICAgcmVzZXRBZGp1c3RtZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbW9kYWxbc3R5bGVdW3BhZGRpbmdMZWZ0XSA9ICcnO1xuICAgICAgICBtb2RhbFtzdHlsZV1bcGFkZGluZ1JpZ2h0XSA9ICcnO1xuICAgICAgfSxcbiAgICAgIGNyZWF0ZU92ZXJsYXkgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG5ld092ZXJsYXkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgb3ZlcmxheSA9IHF1ZXJ5RWxlbWVudCgnLicrbW9kYWxCYWNrZHJvcFN0cmluZyk7XG4gIFxuICAgICAgICBpZiAoIG92ZXJsYXkgPT09IG51bGwgKSB7XG4gICAgICAgICAgbmV3T3ZlcmxheVtzZXRBdHRyaWJ1dGVdKCdjbGFzcycsbW9kYWxCYWNrZHJvcFN0cmluZysnIGZhZGUnKTtcbiAgICAgICAgICBvdmVybGF5ID0gbmV3T3ZlcmxheTtcbiAgICAgICAgICBib2R5LmFwcGVuZENoaWxkKG92ZXJsYXkpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcmVtb3ZlT3ZlcmxheSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBvdmVybGF5ID0gcXVlcnlFbGVtZW50KCcuJyttb2RhbEJhY2tkcm9wU3RyaW5nKTsgXG4gICAgICAgIGlmICggb3ZlcmxheSAmJiBvdmVybGF5ICE9PSBudWxsICYmIHR5cGVvZiBvdmVybGF5ID09PSAnb2JqZWN0JyApIHtcbiAgICAgICAgICBib2R5LnJlbW92ZUNoaWxkKG92ZXJsYXkpOyBvdmVybGF5ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGtleWRvd25IYW5kbGVyVG9nZ2xlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICghaGFzQ2xhc3MobW9kYWwsaW5DbGFzcykpIHtcbiAgICAgICAgICBvbihkb2N1bWVudCwga2V5ZG93bkV2ZW50LCBrZXlIYW5kbGVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvZmYoZG9jdW1lbnQsIGtleWRvd25FdmVudCwga2V5SGFuZGxlcik7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICByZXNpemVIYW5kbGVyVG9nZ2xlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICghaGFzQ2xhc3MobW9kYWwsaW5DbGFzcykpIHtcbiAgICAgICAgICBvbihnbG9iYWxPYmplY3QsIHJlc2l6ZUV2ZW50LCBzZWxmLnVwZGF0ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb2ZmKGdsb2JhbE9iamVjdCwgcmVzaXplRXZlbnQsIHNlbGYudXBkYXRlKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGRpc21pc3NIYW5kbGVyVG9nZ2xlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICghaGFzQ2xhc3MobW9kYWwsaW5DbGFzcykpIHtcbiAgICAgICAgICBvbihtb2RhbCwgY2xpY2tFdmVudCwgZGlzbWlzc0hhbmRsZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9mZihtb2RhbCwgY2xpY2tFdmVudCwgZGlzbWlzc0hhbmRsZXIpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gaGFuZGxlcnNcbiAgICAgIGNsaWNrSGFuZGxlciA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgdmFyIGNsaWNrVGFyZ2V0ID0gZVt0YXJnZXRdOyBcbiAgICAgICAgY2xpY2tUYXJnZXQgPSBjbGlja1RhcmdldFtoYXNBdHRyaWJ1dGVdKGRhdGFUYXJnZXQpIHx8IGNsaWNrVGFyZ2V0W2hhc0F0dHJpYnV0ZV0oJ2hyZWYnKSA/IGNsaWNrVGFyZ2V0IDogY2xpY2tUYXJnZXRbcGFyZW50Tm9kZV07XG4gICAgICAgIGlmICggIW9wZW4gJiYgY2xpY2tUYXJnZXQgPT09IGVsZW1lbnQgJiYgIWhhc0NsYXNzKG1vZGFsLGluQ2xhc3MpICkge1xuICAgICAgICAgIG1vZGFsLm1vZGFsVHJpZ2dlciA9IGVsZW1lbnQ7XG4gICAgICAgICAgcmVsYXRlZFRhcmdldCA9IGVsZW1lbnQ7XG4gICAgICAgICAgc2VsZi5zaG93KCk7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAga2V5SGFuZGxlciA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgdmFyIGtleSA9IGUud2hpY2ggfHwgZS5rZXlDb2RlOyAvLyBrZXlDb2RlIGZvciBJRThcbiAgICAgICAgaWYgKHNlbGZba2V5Ym9hcmRdICYmIGtleSA9PSAyNyAmJiBvcGVuKSB7XG4gICAgICAgICAgc2VsZi5oaWRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBkaXNtaXNzSGFuZGxlciA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgdmFyIGNsaWNrVGFyZ2V0ID0gZVt0YXJnZXRdO1xuICAgICAgICBpZiAoIG9wZW4gJiYgKGNsaWNrVGFyZ2V0W3BhcmVudE5vZGVdW2dldEF0dHJpYnV0ZV0oZGF0YURpc21pc3MpID09PSBjb21wb25lbnQgXG4gICAgICAgICAgICB8fCBjbGlja1RhcmdldFtnZXRBdHRyaWJ1dGVdKGRhdGFEaXNtaXNzKSA9PT0gY29tcG9uZW50XG4gICAgICAgICAgICB8fCAoY2xpY2tUYXJnZXQgPT09IG1vZGFsICYmIHNlbGZbYmFja2Ryb3BdICE9PSBzdGF0aWNTdHJpbmcpICkgKSB7XG4gICAgICAgICAgc2VsZi5oaWRlKCk7IHJlbGF0ZWRUYXJnZXQgPSBudWxsO1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgXG4gICAgLy8gcHVibGljIG1ldGhvZHNcbiAgICB0aGlzLnRvZ2dsZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKG9wZW4gJiYgaGFzQ2xhc3MobW9kYWwsaW5DbGFzcykpIHt0aGlzLmhpZGUoKTt9IGVsc2Uge3RoaXMuc2hvdygpO31cbiAgICB9O1xuICAgIHRoaXMuc2hvdyA9IGZ1bmN0aW9uKCkge1xuICAgICAgYm9vdHN0cmFwQ3VzdG9tRXZlbnQuY2FsbChtb2RhbCwgc2hvd0V2ZW50LCBjb21wb25lbnQsIHJlbGF0ZWRUYXJnZXQpO1xuICBcbiAgICAgIC8vIHdlIGVsZWdhbnRseSBoaWRlIGFueSBvcGVuZWQgbW9kYWxcbiAgICAgIHZhciBjdXJyZW50T3BlbiA9IGdldEVsZW1lbnRzQnlDbGFzc05hbWUoZG9jdW1lbnQsY29tcG9uZW50KycgaW4nKVswXTtcbiAgICAgIGN1cnJlbnRPcGVuICYmIGN1cnJlbnRPcGVuICE9PSBtb2RhbCAmJiBjdXJyZW50T3Blbi5tb2RhbFRyaWdnZXJbc3RyaW5nTW9kYWxdLmhpZGUoKTsgXG4gIFxuICAgICAgaWYgKCB0aGlzW2JhY2tkcm9wXSApIHtcbiAgICAgICAgY3JlYXRlT3ZlcmxheSgpO1xuICAgICAgfVxuICBcbiAgICAgIGlmICggb3ZlcmxheSAmJiAhaGFzQ2xhc3Mob3ZlcmxheSxpbkNsYXNzKSkge1xuICAgICAgICBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHsgYWRkQ2xhc3Mob3ZlcmxheSxpbkNsYXNzKTsgfSwgMCk7XG4gICAgICB9XG4gIFxuICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG4gICAgICAgIG1vZGFsW3N0eWxlXS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgXG4gICAgICAgIGNoZWNrU2Nyb2xsYmFyKCk7XG4gICAgICAgIHNldFNjcm9sbGJhcigpO1xuICAgICAgICBhZGp1c3REaWFsb2coKTtcbiAgXG4gICAgICAgIHJlc2l6ZUhhbmRsZXJUb2dnbGUoKTtcbiAgICAgICAgZGlzbWlzc0hhbmRsZXJUb2dnbGUoKTtcbiAgICAgICAga2V5ZG93bkhhbmRsZXJUb2dnbGUoKTtcbiAgXG4gICAgICAgIGFkZENsYXNzKGJvZHksY29tcG9uZW50Kyctb3BlbicpO1xuICAgICAgICBhZGRDbGFzcyhtb2RhbCxpbkNsYXNzKTtcbiAgICAgICAgbW9kYWxbc2V0QXR0cmlidXRlXShhcmlhSGlkZGVuLCBmYWxzZSk7XG4gICAgICB9LCAwKTtcbiAgXG4gICAgICBlbXVsYXRlVHJhbnNpdGlvbkVuZChtb2RhbCwgZnVuY3Rpb24oKSB7XG4gICAgICAgIG9wZW4gPSBzZWxmLm9wZW4gPSB0cnVlO1xuICAgICAgICBzZXRGb2N1cyhtb2RhbCk7XG4gICAgICAgIGJvb3RzdHJhcEN1c3RvbUV2ZW50LmNhbGwobW9kYWwsIHNob3duRXZlbnQsIGNvbXBvbmVudCwgcmVsYXRlZFRhcmdldCk7XG4gICAgICB9KTtcbiAgICB9O1xuICAgIHRoaXMuaGlkZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgYm9vdHN0cmFwQ3VzdG9tRXZlbnQuY2FsbChtb2RhbCwgaGlkZUV2ZW50LCBjb21wb25lbnQpO1xuICAgICAgb3ZlcmxheSA9IHF1ZXJ5RWxlbWVudCgnLicrbW9kYWxCYWNrZHJvcFN0cmluZyk7XG4gIFxuICAgICAgaWYgKCBvdmVybGF5ICE9PSBudWxsICkge1xuICAgICAgICByZW1vdmVDbGFzcyhvdmVybGF5LGluQ2xhc3MpO1xuICAgICAgfVxuICAgICAgcmVtb3ZlQ2xhc3MobW9kYWwsaW5DbGFzcyk7XG4gICAgICBtb2RhbFtzZXRBdHRyaWJ1dGVdKGFyaWFIaWRkZW4sIHRydWUpO1xuICBcbiAgICAgIGVtdWxhdGVUcmFuc2l0aW9uRW5kKG1vZGFsLCBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVtb3ZlQ2xhc3MoYm9keSxjb21wb25lbnQrJy1vcGVuJyk7XG4gICAgICAgIHJlc2l6ZUhhbmRsZXJUb2dnbGUoKTtcbiAgICAgICAgZGlzbWlzc0hhbmRsZXJUb2dnbGUoKTtcbiAgICAgICAga2V5ZG93bkhhbmRsZXJUb2dnbGUoKTtcbiAgXG4gICAgICAgIHJlc2V0QWRqdXN0bWVudHMoKTtcbiAgICAgICAgcmVzZXRTY3JvbGxiYXIoKTtcbiAgICAgICAgbW9kYWxbc3R5bGVdLmRpc3BsYXkgPSAnJztcbiAgXG4gICAgICAgIGlmICghZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShkb2N1bWVudCxjb21wb25lbnQrJyAnK2luQ2xhc3MpWzBdKSB7IHJlbW92ZU92ZXJsYXkoKTsgfVxuICAgICAgICBvcGVuID0gc2VsZi5vcGVuID0gZmFsc2U7XG4gICAgICAgIGVsZW1lbnQgJiYgKHNldEZvY3VzKGVsZW1lbnQpKTtcbiAgICAgICAgYm9vdHN0cmFwQ3VzdG9tRXZlbnQuY2FsbChtb2RhbCwgaGlkZGVuRXZlbnQsIGNvbXBvbmVudCk7XG4gICAgICB9KTtcbiAgICB9O1xuICAgIHRoaXMuc2V0Q29udGVudCA9IGZ1bmN0aW9uKCBjb250ZW50ICkge1xuICAgICAgcXVlcnlFbGVtZW50KCcuJytjb21wb25lbnQrJy1jb250ZW50Jyxtb2RhbCkuaW5uZXJIVE1MID0gY29udGVudDtcbiAgICB9O1xuICAgIHRoaXMudXBkYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAob3Blbikge1xuICAgICAgICBjaGVja1Njcm9sbGJhcigpO1xuICAgICAgICBzZXRTY3JvbGxiYXIoKTtcbiAgICAgICAgYWRqdXN0RGlhbG9nKCk7XG4gICAgICB9XG4gICAgfTtcbiAgXG4gICAgLy8gaW5pdFxuICAgIC8vIHByZXZlbnQgYWRkaW5nIGV2ZW50IGhhbmRsZXJzIG92ZXIgYW5kIG92ZXJcbiAgICAvLyBtb2RhbCBpcyBpbmRlcGVuZGVudCBvZiBhIHRyaWdnZXJpbmcgZWxlbWVudCBcbiAgICBpZiAoICEhZWxlbWVudCAmJiAhKHN0cmluZ01vZGFsIGluIGVsZW1lbnQpICkge1xuICAgICAgb24oZWxlbWVudCwgY2xpY2tFdmVudCwgY2xpY2tIYW5kbGVyKTtcbiAgICB9XG4gICAgaWYgKCAhIXRoaXNbY29udGVudF0gKSB7IHRoaXMuc2V0Q29udGVudCggdGhpc1tjb250ZW50XSApOyB9XG4gICAgISFlbGVtZW50ICYmIChlbGVtZW50W3N0cmluZ01vZGFsXSA9IHRoaXMpO1xuICB9O1xuICBcbiAgLy8gREFUQSBBUElcbiAgaW5pdGlhbGl6ZURhdGFBUEkoc3RyaW5nTW9kYWwsIE1vZGFsLCBkYXRhVG9nZ2xlKTtcbiAgXG4gIFxuICAvKiBOYXRpdmUgSmF2YXNjcmlwdCBmb3IgQm9vdHN0cmFwIDMgfCBQb3BvdmVyXG4gIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuICBcbiAgLy8gUE9QT1ZFUiBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PVxuICB2YXIgUG9wb3ZlciA9IGZ1bmN0aW9uKCBlbGVtZW50LCBvcHRpb25zICkge1xuICBcbiAgICAvLyBpbml0aWFsaXphdGlvbiBlbGVtZW50XG4gICAgZWxlbWVudCA9IHF1ZXJ5RWxlbWVudChlbGVtZW50KTtcbiAgXG4gICAgLy8gREFUQSBBUElcbiAgICB2YXIgdHJpZ2dlckRhdGEgPSBlbGVtZW50W2dldEF0dHJpYnV0ZV0oZGF0YVRyaWdnZXIpLCAvLyBjbGljayAvIGhvdmVyIC8gZm9jdXNcbiAgICAgICAgYW5pbWF0aW9uRGF0YSA9IGVsZW1lbnRbZ2V0QXR0cmlidXRlXShkYXRhQW5pbWF0aW9uKSwgLy8gdHJ1ZSAvIGZhbHNlXG4gICAgICAgIHBsYWNlbWVudERhdGEgPSBlbGVtZW50W2dldEF0dHJpYnV0ZV0oZGF0YVBsYWNlbWVudCksXG4gICAgICAgIGRpc21pc3NpYmxlRGF0YSA9IGVsZW1lbnRbZ2V0QXR0cmlidXRlXShkYXRhRGlzbWlzc2libGUpLFxuICAgICAgICBkZWxheURhdGEgPSBlbGVtZW50W2dldEF0dHJpYnV0ZV0oZGF0YURlbGF5KSxcbiAgICAgICAgY29udGFpbmVyRGF0YSA9IGVsZW1lbnRbZ2V0QXR0cmlidXRlXShkYXRhQ29udGFpbmVyKSxcbiAgXG4gICAgICAgIC8vIGludGVybmFsIHN0cmluZ3NcbiAgICAgICAgY29tcG9uZW50ID0gJ3BvcG92ZXInLFxuICAgICAgICB0ZW1wbGF0ZSA9ICd0ZW1wbGF0ZScsXG4gICAgICAgIHRyaWdnZXIgPSAndHJpZ2dlcicsXG4gICAgICAgIGNsYXNzU3RyaW5nID0gJ2NsYXNzJyxcbiAgICAgICAgZGl2ID0gJ2RpdicsXG4gICAgICAgIGZhZGUgPSAnZmFkZScsXG4gICAgICAgIHRpdGxlID0gJ3RpdGxlJyxcbiAgICAgICAgY29udGVudCA9ICdjb250ZW50JyxcbiAgICAgICAgZGF0YVRpdGxlID0gJ2RhdGEtdGl0bGUnLFxuICAgICAgICBkYXRhQ29udGVudCA9ICdkYXRhLWNvbnRlbnQnLFxuICAgICAgICBkaXNtaXNzaWJsZSA9ICdkaXNtaXNzaWJsZScsXG4gICAgICAgIGNsb3NlQnRuID0gJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiY2xvc2VcIj7DlzwvYnV0dG9uPic7XG4gIFxuICAgIC8vIHNldCBvcHRpb25zXG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgdGhpc1t0ZW1wbGF0ZV0gPSBvcHRpb25zW3RlbXBsYXRlXSA/IG9wdGlvbnNbdGVtcGxhdGVdIDogbnVsbDsgLy8gSmF2YVNjcmlwdCBvbmx5XG4gICAgdGhpc1t0cmlnZ2VyXSA9IG9wdGlvbnNbdHJpZ2dlcl0gPyBvcHRpb25zW3RyaWdnZXJdIDogdHJpZ2dlckRhdGEgfHwgaG92ZXJFdmVudDtcbiAgICB0aGlzW2FuaW1hdGlvbl0gPSBvcHRpb25zW2FuaW1hdGlvbl0gJiYgb3B0aW9uc1thbmltYXRpb25dICE9PSBmYWRlID8gb3B0aW9uc1thbmltYXRpb25dIDogYW5pbWF0aW9uRGF0YSB8fCBmYWRlO1xuICAgIHRoaXNbcGxhY2VtZW50XSA9IG9wdGlvbnNbcGxhY2VtZW50XSA/IG9wdGlvbnNbcGxhY2VtZW50XSA6IHBsYWNlbWVudERhdGEgfHwgdG9wO1xuICAgIHRoaXNbZGVsYXldID0gcGFyc2VJbnQob3B0aW9uc1tkZWxheV0gfHwgZGVsYXlEYXRhKSB8fCAyMDA7XG4gICAgdGhpc1tkaXNtaXNzaWJsZV0gPSBvcHRpb25zW2Rpc21pc3NpYmxlXSB8fCBkaXNtaXNzaWJsZURhdGEgPT09ICd0cnVlJyA/IHRydWUgOiBmYWxzZTtcbiAgICB0aGlzW2NvbnRhaW5lcl0gPSBxdWVyeUVsZW1lbnQob3B0aW9uc1tjb250YWluZXJdKSB8fCBxdWVyeUVsZW1lbnQoY29udGFpbmVyRGF0YSkgfHwgYm9keTtcbiAgICBcbiAgICAvLyBiaW5kLCBjb250ZW50XG4gICAgdmFyIHNlbGYgPSB0aGlzLCBcbiAgICAgIHRpdGxlU3RyaW5nID0gZWxlbWVudFtnZXRBdHRyaWJ1dGVdKGRhdGFUaXRsZSkgfHwgbnVsbCxcbiAgICAgIGNvbnRlbnRTdHJpbmcgPSBlbGVtZW50W2dldEF0dHJpYnV0ZV0oZGF0YUNvbnRlbnQpIHx8IG51bGw7XG4gIFxuICAgIGlmICggIWNvbnRlbnRTdHJpbmcgJiYgIXRoaXNbdGVtcGxhdGVdICkgcmV0dXJuOyAvLyBpbnZhbGlkYXRlXG4gIFxuICAgIC8vIGNvbnN0YW50cywgdmFyc1xuICAgIHZhciBwb3BvdmVyID0gbnVsbCwgdGltZXIgPSAwLCBwbGFjZW1lbnRTZXR0aW5nID0gdGhpc1twbGFjZW1lbnRdLFxuICAgICAgXG4gICAgICAvLyBoYW5kbGVyc1xuICAgICAgZGlzbWlzc2libGVIYW5kbGVyID0gZnVuY3Rpb24oZSkge1xuICAgICAgICBpZiAocG9wb3ZlciAhPT0gbnVsbCAmJiBlW3RhcmdldF0gPT09IHF1ZXJ5RWxlbWVudCgnLmNsb3NlJyxwb3BvdmVyKSkge1xuICAgICAgICAgIHNlbGYuaGlkZSgpO1xuICAgICAgICB9XG4gICAgICB9LFxuICBcbiAgICAgIC8vIHByaXZhdGUgbWV0aG9kc1xuICAgICAgcmVtb3ZlUG9wb3ZlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBzZWxmW2NvbnRhaW5lcl0ucmVtb3ZlQ2hpbGQocG9wb3Zlcik7XG4gICAgICAgIHRpbWVyID0gbnVsbDsgcG9wb3ZlciA9IG51bGw7IFxuICAgICAgfSxcbiAgICAgIGNyZWF0ZVBvcG92ZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGl0bGVTdHJpbmcgPSBlbGVtZW50W2dldEF0dHJpYnV0ZV0oZGF0YVRpdGxlKTsgLy8gY2hlY2sgY29udGVudCBhZ2FpblxuICAgICAgICBjb250ZW50U3RyaW5nID0gZWxlbWVudFtnZXRBdHRyaWJ1dGVdKGRhdGFDb250ZW50KTtcbiAgXG4gICAgICAgIHBvcG92ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGRpdik7XG4gIFxuICAgICAgICBpZiAoIGNvbnRlbnRTdHJpbmcgIT09IG51bGwgJiYgc2VsZlt0ZW1wbGF0ZV0gPT09IG51bGwgKSB7IC8vY3JlYXRlIHRoZSBwb3BvdmVyIGZyb20gZGF0YSBhdHRyaWJ1dGVzXG4gIFxuICAgICAgICAgIHBvcG92ZXJbc2V0QXR0cmlidXRlXSgncm9sZScsJ3Rvb2x0aXAnKTtcbiAgXG4gICAgICAgICAgaWYgKHRpdGxlU3RyaW5nICE9PSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgcG9wb3ZlclRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDMnKTtcbiAgICAgICAgICAgIHBvcG92ZXJUaXRsZVtzZXRBdHRyaWJ1dGVdKGNsYXNzU3RyaW5nLGNvbXBvbmVudCsnLXRpdGxlJyk7XG4gIFxuICAgICAgICAgICAgcG9wb3ZlclRpdGxlLmlubmVySFRNTCA9IHNlbGZbZGlzbWlzc2libGVdID8gdGl0bGVTdHJpbmcgKyBjbG9zZUJ0biA6IHRpdGxlU3RyaW5nO1xuICAgICAgICAgICAgcG9wb3Zlci5hcHBlbmRDaGlsZChwb3BvdmVyVGl0bGUpO1xuICAgICAgICAgIH1cbiAgXG4gICAgICAgICAgdmFyIHBvcG92ZXJBcnJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoZGl2KSwgcG9wb3ZlckNvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGRpdik7XG4gICAgICAgICAgcG9wb3ZlckFycm93W3NldEF0dHJpYnV0ZV0oY2xhc3NTdHJpbmcsJ2Fycm93Jyk7IHBvcG92ZXJDb250ZW50W3NldEF0dHJpYnV0ZV0oY2xhc3NTdHJpbmcsY29tcG9uZW50KyctY29udGVudCcpO1xuICAgICAgICAgIHBvcG92ZXIuYXBwZW5kQ2hpbGQocG9wb3ZlckFycm93KTsgcG9wb3Zlci5hcHBlbmRDaGlsZChwb3BvdmVyQ29udGVudCk7XG4gIFxuICAgICAgICAgIC8vc2V0IHBvcG92ZXIgY29udGVudFxuICAgICAgICAgIHBvcG92ZXJDb250ZW50LmlubmVySFRNTCA9IHNlbGZbZGlzbWlzc2libGVdICYmIHRpdGxlU3RyaW5nID09PSBudWxsID8gY29udGVudFN0cmluZyArIGNsb3NlQnRuIDogY29udGVudFN0cmluZztcbiAgXG4gICAgICAgIH0gZWxzZSB7ICAvLyBvciBjcmVhdGUgdGhlIHBvcG92ZXIgZnJvbSB0ZW1wbGF0ZVxuICAgICAgICAgIHZhciBwb3BvdmVyVGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGRpdik7XG4gICAgICAgICAgcG9wb3ZlclRlbXBsYXRlLmlubmVySFRNTCA9IHNlbGZbdGVtcGxhdGVdO1xuICAgICAgICAgIHBvcG92ZXIuaW5uZXJIVE1MID0gcG9wb3ZlclRlbXBsYXRlLmZpcnN0Q2hpbGQuaW5uZXJIVE1MO1xuICAgICAgICB9XG4gIFxuICAgICAgICAvL2FwcGVuZCB0byB0aGUgY29udGFpbmVyXG4gICAgICAgIHNlbGZbY29udGFpbmVyXS5hcHBlbmRDaGlsZChwb3BvdmVyKTtcbiAgICAgICAgcG9wb3ZlcltzdHlsZV0uZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgIHBvcG92ZXJbc2V0QXR0cmlidXRlXShjbGFzc1N0cmluZywgY29tcG9uZW50KyAnICcgKyBwbGFjZW1lbnRTZXR0aW5nICsgJyAnICsgc2VsZlthbmltYXRpb25dKTtcbiAgICAgIH0sXG4gICAgICBzaG93UG9wb3ZlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgIWhhc0NsYXNzKHBvcG92ZXIsaW5DbGFzcykgJiYgKCBhZGRDbGFzcyhwb3BvdmVyLGluQ2xhc3MpICk7XG4gICAgICB9LFxuICAgICAgdXBkYXRlUG9wb3ZlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBzdHlsZVRpcChlbGVtZW50LHBvcG92ZXIscGxhY2VtZW50U2V0dGluZyxzZWxmW2NvbnRhaW5lcl0pO1xuICAgICAgICBpZiAoIWlzRWxlbWVudEluVmlld3BvcnQocG9wb3ZlcikgKSB7IFxuICAgICAgICAgIHBsYWNlbWVudFNldHRpbmcgPSB1cGRhdGVQbGFjZW1lbnQocGxhY2VtZW50U2V0dGluZyk7IFxuICAgICAgICAgIHN0eWxlVGlwKGVsZW1lbnQscG9wb3ZlcixwbGFjZW1lbnRTZXR0aW5nLHNlbGZbY29udGFpbmVyXSk7IFxuICAgICAgICB9XG4gICAgICB9O1xuICBcbiAgICAvLyBwdWJsaWMgbWV0aG9kcyAvIGhhbmRsZXJzXG4gICAgdGhpcy50b2dnbGUgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmIChwb3BvdmVyID09PSBudWxsKSB7IHNlbGYuc2hvdygpOyB9IFxuICAgICAgZWxzZSB7IHNlbGYuaGlkZSgpOyB9XG4gICAgfTtcbiAgICB0aGlzLnNob3cgPSBmdW5jdGlvbigpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICB0aW1lciA9IHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAocG9wb3ZlciA9PT0gbnVsbCkge1xuICAgICAgICAgIHBsYWNlbWVudFNldHRpbmcgPSBzZWxmW3BsYWNlbWVudF07IC8vIHdlIHJlc2V0IHBsYWNlbWVudCBpbiBhbGwgY2FzZXNcbiAgICAgICAgICBjcmVhdGVQb3BvdmVyKCk7XG4gICAgICAgICAgdXBkYXRlUG9wb3ZlcigpO1xuICAgICAgICAgIHNob3dQb3BvdmVyKCk7XG4gICAgICAgICAgYm9vdHN0cmFwQ3VzdG9tRXZlbnQuY2FsbChlbGVtZW50LCBzaG93RXZlbnQsIGNvbXBvbmVudCk7XG4gICAgICAgICAgZW11bGF0ZVRyYW5zaXRpb25FbmQocG9wb3ZlciwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBib290c3RyYXBDdXN0b21FdmVudC5jYWxsKGVsZW1lbnQsIHNob3duRXZlbnQsIGNvbXBvbmVudCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0sIDIwICk7XG4gICAgfTtcbiAgICB0aGlzLmhpZGUgPSBmdW5jdGlvbigpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICB0aW1lciA9IHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAocG9wb3ZlciAmJiBwb3BvdmVyICE9PSBudWxsICYmIGhhc0NsYXNzKHBvcG92ZXIsaW5DbGFzcykpIHtcbiAgICAgICAgICBib290c3RyYXBDdXN0b21FdmVudC5jYWxsKGVsZW1lbnQsIGhpZGVFdmVudCwgY29tcG9uZW50KTtcbiAgICAgICAgICByZW1vdmVDbGFzcyhwb3BvdmVyLGluQ2xhc3MpO1xuICAgICAgICAgIGVtdWxhdGVUcmFuc2l0aW9uRW5kKHBvcG92ZXIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmVtb3ZlUG9wb3ZlcigpO1xuICAgICAgICAgICAgYm9vdHN0cmFwQ3VzdG9tRXZlbnQuY2FsbChlbGVtZW50LCBoaWRkZW5FdmVudCwgY29tcG9uZW50KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSwgc2VsZltkZWxheV0gKTtcbiAgICB9O1xuICBcbiAgICAvLyBpbml0XG4gICAgaWYgKCAhKHN0cmluZ1BvcG92ZXIgaW4gZWxlbWVudCkgKSB7IC8vIHByZXZlbnQgYWRkaW5nIGV2ZW50IGhhbmRsZXJzIHR3aWNlXG4gICAgICBpZiAoc2VsZlt0cmlnZ2VyXSA9PT0gaG92ZXJFdmVudCkge1xuICAgICAgICBvbiggZWxlbWVudCwgbW91c2VIb3ZlclswXSwgc2VsZi5zaG93ICk7XG4gICAgICAgIGlmICghc2VsZltkaXNtaXNzaWJsZV0pIHsgb24oIGVsZW1lbnQsIG1vdXNlSG92ZXJbMV0sIHNlbGYuaGlkZSApOyB9XG4gICAgICB9IGVsc2UgaWYgKC9eKGNsaWNrfGZvY3VzKSQvLnRlc3Qoc2VsZlt0cmlnZ2VyXSkpIHtcbiAgICAgICAgb24oIGVsZW1lbnQsIHNlbGZbdHJpZ2dlcl0sIHNlbGYudG9nZ2xlICk7XG4gICAgICAgIGlmICghc2VsZltkaXNtaXNzaWJsZV0pIHsgb24oIGVsZW1lbnQsICdibHVyJywgc2VsZi5oaWRlICk7IH1cbiAgICAgIH1cbiAgICAgIFxuICAgICAgaWYgKHNlbGZbZGlzbWlzc2libGVdKSB7IG9uKCBkb2N1bWVudCwgY2xpY2tFdmVudCwgZGlzbWlzc2libGVIYW5kbGVyICk7IH1cbiAgICBcbiAgICAgIC8vIGRpc21pc3Mgb24gd2luZG93IHJlc2l6ZVxuICAgICAgaWYgKCAhKGlzSUUgJiYgaXNJRSA8IDkpICkgeyBvbiggZ2xvYmFsT2JqZWN0LCByZXNpemVFdmVudCwgc2VsZi5oaWRlICk7IH1cbiAgXG4gICAgfVxuICAgIGVsZW1lbnRbc3RyaW5nUG9wb3Zlcl0gPSBzZWxmO1xuICB9O1xuICBcbiAgLy8gUE9QT1ZFUiBEQVRBIEFQSVxuICAvLyA9PT09PT09PT09PT09PT09XG4gIGluaXRpYWxpemVEYXRhQVBJKHN0cmluZ1BvcG92ZXIsIFBvcG92ZXIsIGRhdGFUb2dnbGUpO1xuICBcbiAgXG4gIC8qIE5hdGl2ZSBKYXZhc2NyaXB0IGZvciBCb290c3RyYXAgMyB8IFNjcm9sbFNweVxuICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4gIFxuICAvLyBTQ1JPTExTUFkgREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PVxuICB2YXIgU2Nyb2xsU3B5ID0gZnVuY3Rpb24oZWxlbWVudCwgb3B0aW9ucykge1xuICBcbiAgICAvLyBpbml0aWFsaXphdGlvbiBlbGVtZW50LCB0aGUgZWxlbWVudCB3ZSBzcHkgb25cbiAgICBlbGVtZW50ID0gcXVlcnlFbGVtZW50KGVsZW1lbnQpOyBcbiAgXG4gICAgLy8gREFUQSBBUElcbiAgICB2YXIgdGFyZ2V0RGF0YSA9IHF1ZXJ5RWxlbWVudChlbGVtZW50W2dldEF0dHJpYnV0ZV0oZGF0YVRhcmdldCkpO1xuICBcbiAgICAvLyBzZXQgb3B0aW9uc1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIGlmICggIW9wdGlvbnNbdGFyZ2V0XSAmJiAhdGFyZ2V0RGF0YSApIHsgcmV0dXJuOyB9IC8vIGludmFsaWRhdGVcbiAgXG4gICAgLy8gZXZlbnQgdGFyZ2V0cywgY29uc3RhbnRzXG4gICAgdmFyIHNweVRhcmdldCA9IG9wdGlvbnNbdGFyZ2V0XSAmJiBxdWVyeUVsZW1lbnQob3B0aW9uc1t0YXJnZXRdKSB8fCB0YXJnZXREYXRhLFxuICAgICAgICBsaW5rcyA9IHNweVRhcmdldCAmJiBzcHlUYXJnZXRbZ2V0RWxlbWVudHNCeVRhZ05hbWVdKCdBJyksIFxuICAgICAgICBpdGVtcyA9IFtdLCB0YXJnZXRJdGVtcyA9IFtdLCBzY3JvbGxPZmZzZXQsXG4gICAgICAgIHNjcm9sbFRhcmdldCA9IGVsZW1lbnRbb2Zmc2V0SGVpZ2h0XSA8IGVsZW1lbnRbc2Nyb2xsSGVpZ2h0XSA/IGVsZW1lbnQgOiBnbG9iYWxPYmplY3QsIC8vIGRldGVybWluZSB3aGljaCBpcyB0aGUgcmVhbCBzY3JvbGxUYXJnZXRcbiAgICAgICAgaXNXaW5kb3cgPSBzY3JvbGxUYXJnZXQgPT09IGdsb2JhbE9iamVjdDsgIFxuICBcbiAgICAvLyBwb3B1bGF0ZSBpdGVtcyBhbmQgdGFyZ2V0c1xuICAgIGZvciAodmFyIGk9MCwgaWw9bGlua3NbbGVuZ3RoXTsgaTxpbDsgaSsrKSB7XG4gICAgICB2YXIgaHJlZiA9IGxpbmtzW2ldW2dldEF0dHJpYnV0ZV0oJ2hyZWYnKSwgXG4gICAgICAgICAgdGFyZ2V0SXRlbSA9IGhyZWYgJiYgLyNbYS16MC05XSskL2kudGVzdChocmVmKSAmJiBxdWVyeUVsZW1lbnQoaHJlZik7XG4gICAgICBpZiAoICEhdGFyZ2V0SXRlbSApIHtcbiAgICAgICAgaXRlbXMucHVzaChsaW5rc1tpXSk7XG4gICAgICAgIHRhcmdldEl0ZW1zLnB1c2godGFyZ2V0SXRlbSk7XG4gICAgICB9XG4gICAgfVxuICBcbiAgICAvLyBwcml2YXRlIG1ldGhvZHNcbiAgICB2YXIgdXBkYXRlSXRlbSA9IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgIHZhciBwYXJlbnQgPSBpdGVtc1tpbmRleF1bcGFyZW50Tm9kZV0sIC8vIGl0ZW0ncyBwYXJlbnQgTEkgZWxlbWVudFxuICAgICAgICAgIHRhcmdldEl0ZW0gPSB0YXJnZXRJdGVtc1tpbmRleF0sIC8vIHRoZSBtZW51IGl0ZW0gdGFyZ2V0cyB0aGlzIGVsZW1lbnRcbiAgICAgICAgICBkcm9wZG93biA9IGdldENsb3Nlc3QocGFyZW50LCcuZHJvcGRvd24nKSxcbiAgICAgICAgICB0YXJnZXRSZWN0ID0gaXNXaW5kb3cgJiYgdGFyZ2V0SXRlbVtnZXRCb3VuZGluZ0NsaWVudFJlY3RdKCksXG4gIFxuICAgICAgICAgIGlzQWN0aXZlID0gaGFzQ2xhc3MocGFyZW50LGFjdGl2ZSkgfHwgZmFsc2UsXG4gIFxuICAgICAgICAgIHRvcEVkZ2UgPSBpc1dpbmRvdyA/IHRhcmdldFJlY3RbdG9wXSArIHNjcm9sbE9mZnNldCA6IHRhcmdldEl0ZW1bb2Zmc2V0VG9wXSAtICh0YXJnZXRJdGVtc1tpbmRleC0xXSA/IDAgOiAxMCksXG4gICAgICAgICAgYm90dG9tRWRnZSA9IGlzV2luZG93ID8gdGFyZ2V0UmVjdFtib3R0b21dICsgc2Nyb2xsT2Zmc2V0IDogdGFyZ2V0SXRlbXNbaW5kZXgrMV0gPyB0YXJnZXRJdGVtc1tpbmRleCsxXVtvZmZzZXRUb3BdIDogZWxlbWVudFtzY3JvbGxIZWlnaHRdLFxuICBcbiAgICAgICAgICBpbnNpZGUgPSBzY3JvbGxPZmZzZXQgPj0gdG9wRWRnZSAmJiBib3R0b21FZGdlID4gc2Nyb2xsT2Zmc2V0O1xuICBcbiAgICAgICAgaWYgKCAhaXNBY3RpdmUgJiYgaW5zaWRlICkge1xuICAgICAgICAgIGlmICggcGFyZW50LnRhZ05hbWUgPT09ICdMSScgJiYgIWhhc0NsYXNzKHBhcmVudCxhY3RpdmUpICkge1xuICAgICAgICAgICAgYWRkQ2xhc3MocGFyZW50LGFjdGl2ZSk7XG4gICAgICAgICAgICBpc0FjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgICBpZiAoZHJvcGRvd24gJiYgIWhhc0NsYXNzKGRyb3Bkb3duLGFjdGl2ZSkgKSB7XG4gICAgICAgICAgICAgIGFkZENsYXNzKGRyb3Bkb3duLGFjdGl2ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBib290c3RyYXBDdXN0b21FdmVudC5jYWxsKGVsZW1lbnQsICdhY3RpdmF0ZScsICdzY3JvbGxzcHknLCBpdGVtc1tpbmRleF0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICggIWluc2lkZSApIHtcbiAgICAgICAgICBpZiAoIHBhcmVudC50YWdOYW1lID09PSAnTEknICYmIGhhc0NsYXNzKHBhcmVudCxhY3RpdmUpICkge1xuICAgICAgICAgICAgcmVtb3ZlQ2xhc3MocGFyZW50LGFjdGl2ZSk7XG4gICAgICAgICAgICBpc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKGRyb3Bkb3duICYmIGhhc0NsYXNzKGRyb3Bkb3duLGFjdGl2ZSkgJiYgIWdldEVsZW1lbnRzQnlDbGFzc05hbWUocGFyZW50W3BhcmVudE5vZGVdLGFjdGl2ZSkubGVuZ3RoICkge1xuICAgICAgICAgICAgICByZW1vdmVDbGFzcyhkcm9wZG93bixhY3RpdmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICggIWluc2lkZSAmJiAhaXNBY3RpdmUgfHwgaXNBY3RpdmUgJiYgaW5zaWRlICkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHVwZGF0ZUl0ZW1zID0gZnVuY3Rpb24oKXtcbiAgICAgICAgc2Nyb2xsT2Zmc2V0ID0gaXNXaW5kb3cgPyBnZXRTY3JvbGwoKS55IDogZWxlbWVudFtzY3JvbGxUb3BdO1xuICAgICAgICBmb3IgKHZhciBpbmRleD0wLCBpdGw9aXRlbXNbbGVuZ3RoXTsgaW5kZXg8aXRsOyBpbmRleCsrKSB7XG4gICAgICAgICAgdXBkYXRlSXRlbShpbmRleClcbiAgICAgICAgfVxuICAgICAgfTtcbiAgXG4gICAgLy8gcHVibGljIG1ldGhvZFxuICAgIHRoaXMucmVmcmVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHVwZGF0ZUl0ZW1zKCk7XG4gICAgfVxuICBcbiAgICAvLyBpbml0XG4gICAgaWYgKCAhKHN0cmluZ1Njcm9sbFNweSBpbiBlbGVtZW50KSApIHsgLy8gcHJldmVudCBhZGRpbmcgZXZlbnQgaGFuZGxlcnMgdHdpY2VcbiAgICAgIG9uKCBzY3JvbGxUYXJnZXQsIHNjcm9sbEV2ZW50LCB0aGlzLnJlZnJlc2ggKTtcbiAgICAgIGlmICggIShpc0lFICYmIGlzSUUgPCA5KSkgeyBcbiAgICAgICAgb24oIGdsb2JhbE9iamVjdCwgcmVzaXplRXZlbnQsIHRoaXMucmVmcmVzaCApOyBcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5yZWZyZXNoKCk7XG4gICAgZWxlbWVudFtzdHJpbmdTY3JvbGxTcHldID0gdGhpcztcbiAgfTtcbiAgXG4gIC8vIFNDUk9MTFNQWSBEQVRBIEFQSVxuICAvLyA9PT09PT09PT09PT09PT09PT1cbiAgaW5pdGlhbGl6ZURhdGFBUEkoc3RyaW5nU2Nyb2xsU3B5LCBTY3JvbGxTcHksIGRhdGFTcHkpO1xuICBcbiAgXG4gIC8qIE5hdGl2ZSBKYXZhc2NyaXB0IGZvciBCb290c3RyYXAgMyB8IFRhYlxuICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4gIFxuICAvLyBUQUIgREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PVxuICB2YXIgVGFiID0gZnVuY3Rpb24oIGVsZW1lbnQsIG9wdGlvbnMgKSB7XG4gIFxuICAgIC8vIGluaXRpYWxpemF0aW9uIGVsZW1lbnRcbiAgICBlbGVtZW50ID0gcXVlcnlFbGVtZW50KGVsZW1lbnQpO1xuICBcbiAgICAvLyBEQVRBIEFQSVxuICAgIHZhciBoZWlnaHREYXRhID0gZWxlbWVudFtnZXRBdHRyaWJ1dGVdKGRhdGFIZWlnaHQpLFxuICAgICAgXG4gICAgICAgIC8vIHN0cmluZ3NcbiAgICAgICAgY29tcG9uZW50ID0gJ3RhYicsIGhlaWdodCA9ICdoZWlnaHQnLCBpc0FuaW1hdGluZyA9ICdpc0FuaW1hdGluZyc7XG4gIFxuICAgIC8vIHNldCBkZWZhdWx0IGFuaW1hdGlvbiBzdGF0ZVxuICAgIGVsZW1lbnRbaXNBbmltYXRpbmddID0gZmFsc2U7XG4gIFxuICAgIC8vIHNldCBvcHRpb25zXG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgdGhpc1toZWlnaHRdID0gc3VwcG9ydFRyYW5zaXRpb25zID8gKG9wdGlvbnNbaGVpZ2h0XSB8fCBoZWlnaHREYXRhID09PSAndHJ1ZScpIDogZmFsc2U7IC8vIGZpbHRlciBsZWdhY3kgYnJvd3NlcnNcbiAgXG4gICAgLy8gYmluZCwgZXZlbnQgdGFyZ2V0c1xuICAgIHZhciBzZWxmID0gdGhpcywgbmV4dCxcbiAgICAgIHRhYnMgPSBnZXRDbG9zZXN0KGVsZW1lbnQsJy5uYXYnKSxcbiAgICAgIHRhYnNDb250ZW50Q29udGFpbmVyLFxuICAgICAgZHJvcGRvd24gPSBxdWVyeUVsZW1lbnQoJy5kcm9wZG93bicsdGFicyk7XG4gIFxuICAgIC8vIHByaXZhdGUgbWV0aG9kc1xuICAgIHZhciBnZXRBY3RpdmVUYWIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFjdGl2ZVRhYnMgPSBnZXRFbGVtZW50c0J5Q2xhc3NOYW1lKHRhYnMsYWN0aXZlKSwgYWN0aXZlVGFiO1xuICAgICAgICBpZiAoIGFjdGl2ZVRhYnNbbGVuZ3RoXSA9PT0gMSAmJiAhaGFzQ2xhc3MoYWN0aXZlVGFic1swXSwnZHJvcGRvd24nKSApIHtcbiAgICAgICAgICBhY3RpdmVUYWIgPSBhY3RpdmVUYWJzWzBdO1xuICAgICAgICB9IGVsc2UgaWYgKCBhY3RpdmVUYWJzW2xlbmd0aF0gPiAxICkge1xuICAgICAgICAgIGFjdGl2ZVRhYiA9IGFjdGl2ZVRhYnNbYWN0aXZlVGFic1tsZW5ndGhdLTFdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhY3RpdmVUYWJbZ2V0RWxlbWVudHNCeVRhZ05hbWVdKCdBJylbMF07XG4gICAgICB9LFxuICAgICAgZ2V0QWN0aXZlQ29udGVudCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gcXVlcnlFbGVtZW50KGdldEFjdGl2ZVRhYigpW2dldEF0dHJpYnV0ZV0oJ2hyZWYnKSk7XG4gICAgICB9LFxuICAgICAgLy8gaGFuZGxlciBcbiAgICAgIGNsaWNrSGFuZGxlciA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBuZXh0ID0gZVt0YXJnZXRdO1xuICAgICAgICBzZWxmLnNob3coKTtcbiAgICAgIH07XG4gIFxuICAgIC8vIHB1YmxpYyBtZXRob2RcbiAgICB0aGlzLnNob3cgPSBmdW5jdGlvbigpIHsgLy8gdGhlIHRhYiB3ZSBjbGlja2VkIGlzIG5vdyB0aGUgbmV4dCB0YWJcbiAgICAgIHZhciBuZXh0Q29udGVudCA9IHF1ZXJ5RWxlbWVudChuZXh0W2dldEF0dHJpYnV0ZV0oJ2hyZWYnKSksIC8vdGhpcyBpcyB0aGUgYWN0dWFsIG9iamVjdCwgdGhlIG5leHQgdGFiIGNvbnRlbnQgdG8gYWN0aXZhdGVcbiAgICAgICAgYWN0aXZlVGFiID0gZ2V0QWN0aXZlVGFiKCksIGFjdGl2ZUNvbnRlbnQgPSBnZXRBY3RpdmVDb250ZW50KCk7XG4gICAgICBcbiAgICAgIGlmICggKCFhY3RpdmVUYWJbaXNBbmltYXRpbmddIHx8ICFuZXh0W2lzQW5pbWF0aW5nXSkgJiYgIWhhc0NsYXNzKG5leHRbcGFyZW50Tm9kZV0sYWN0aXZlKSApIHtcbiAgICAgICAgYWN0aXZlVGFiW2lzQW5pbWF0aW5nXSA9IG5leHRbaXNBbmltYXRpbmddID0gdHJ1ZTtcbiAgICAgICAgcmVtb3ZlQ2xhc3MoYWN0aXZlVGFiW3BhcmVudE5vZGVdLGFjdGl2ZSk7XG4gICAgICAgIGFkZENsYXNzKG5leHRbcGFyZW50Tm9kZV0sYWN0aXZlKTtcbiAgXG4gICAgICAgIGlmICggZHJvcGRvd24gKSB7XG4gICAgICAgICAgaWYgKCAhaGFzQ2xhc3MoZWxlbWVudFtwYXJlbnROb2RlXVtwYXJlbnROb2RlXSwnZHJvcGRvd24tbWVudScpICkge1xuICAgICAgICAgICAgaWYgKGhhc0NsYXNzKGRyb3Bkb3duLGFjdGl2ZSkpIHJlbW92ZUNsYXNzKGRyb3Bkb3duLGFjdGl2ZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghaGFzQ2xhc3MoZHJvcGRvd24sYWN0aXZlKSkgYWRkQ2xhc3MoZHJvcGRvd24sYWN0aXZlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmICh0YWJzQ29udGVudENvbnRhaW5lcikgdGFic0NvbnRlbnRDb250YWluZXJbc3R5bGVdW2hlaWdodF0gPSBnZXRNYXhIZWlnaHQoYWN0aXZlQ29udGVudCkgKyAncHgnOyAvLyBoZWlnaHQgYW5pbWF0aW9uXG4gIFxuICAgICAgICBib290c3RyYXBDdXN0b21FdmVudC5jYWxsKGFjdGl2ZVRhYiwgaGlkZUV2ZW50LCBjb21wb25lbnQsIG5leHQpO1xuICBcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICByZW1vdmVDbGFzcyhhY3RpdmVDb250ZW50LGluQ2xhc3MpO1xuICAgICAgICB9LCAwKTtcbiAgXG4gICAgICAgIGVtdWxhdGVUcmFuc2l0aW9uRW5kKGFjdGl2ZUNvbnRlbnQsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmICh0YWJzQ29udGVudENvbnRhaW5lcikgYWRkQ2xhc3ModGFic0NvbnRlbnRDb250YWluZXIsY29sbGFwc2luZyk7XG4gICAgICAgICAgcmVtb3ZlQ2xhc3MoYWN0aXZlQ29udGVudCxhY3RpdmUpO1xuICAgICAgICAgIGFkZENsYXNzKG5leHRDb250ZW50LGFjdGl2ZSk7XG4gICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGFkZENsYXNzKG5leHRDb250ZW50LGluQ2xhc3MpO1xuICAgICAgICAgICAgaWYodGFic0NvbnRlbnRDb250YWluZXIpIHRhYnNDb250ZW50Q29udGFpbmVyW3N0eWxlXVtoZWlnaHRdID0gZ2V0TWF4SGVpZ2h0KG5leHRDb250ZW50KSArICdweCc7IC8vIGhlaWdodCBhbmltYXRpb25cbiAgICAgICAgICB9LCAwKTtcbiAgXG4gICAgICAgICAgYm9vdHN0cmFwQ3VzdG9tRXZlbnQuY2FsbChuZXh0LCBzaG93RXZlbnQsIGNvbXBvbmVudCwgYWN0aXZlVGFiKTtcbiAgICAgICAgICBib290c3RyYXBDdXN0b21FdmVudC5jYWxsKGFjdGl2ZVRhYiwgaGlkZGVuRXZlbnQsIGNvbXBvbmVudCwgbmV4dCk7XG4gIFxuICAgICAgICB9KTtcbiAgXG4gICAgICAgIGVtdWxhdGVUcmFuc2l0aW9uRW5kKG5leHRDb250ZW50LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBib290c3RyYXBDdXN0b21FdmVudC5jYWxsKG5leHQsIHNob3duRXZlbnQsIGNvbXBvbmVudCwgYWN0aXZlVGFiKTtcbiAgICAgICAgICBpZiAodGFic0NvbnRlbnRDb250YWluZXIpIHsgLy8gaGVpZ2h0IGFuaW1hdGlvblxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICBlbXVsYXRlVHJhbnNpdGlvbkVuZCh0YWJzQ29udGVudENvbnRhaW5lciwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICB0YWJzQ29udGVudENvbnRhaW5lcltzdHlsZV1baGVpZ2h0XSA9ICAnJztcbiAgICAgICAgICAgICAgICByZW1vdmVDbGFzcyh0YWJzQ29udGVudENvbnRhaW5lcixjb2xsYXBzaW5nKTtcbiAgICAgICAgICAgICAgICBhY3RpdmVUYWJbaXNBbmltYXRpbmddID0gbmV4dFtpc0FuaW1hdGluZ10gPSBmYWxzZTtcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0sMCk7XG4gICAgICAgICAgfSBlbHNlIHsgYWN0aXZlVGFiW2lzQW5pbWF0aW5nXSA9IG5leHRbaXNBbmltYXRpbmddID0gZmFsc2U7IH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgXG4gICAgLy8gaW5pdFxuICAgIGlmICggIShzdHJpbmdUYWIgaW4gZWxlbWVudCkgKSB7IC8vIHByZXZlbnQgYWRkaW5nIGV2ZW50IGhhbmRsZXJzIHR3aWNlXG4gICAgICBvbihlbGVtZW50LCBjbGlja0V2ZW50LCBjbGlja0hhbmRsZXIpO1xuICAgIH1cbiAgICBpZiAodGhpc1toZWlnaHRdKSB7IHRhYnNDb250ZW50Q29udGFpbmVyID0gZ2V0QWN0aXZlQ29udGVudCgpW3BhcmVudE5vZGVdOyB9XG4gICAgZWxlbWVudFtzdHJpbmdUYWJdID0gdGhpcztcbiAgfTtcbiAgXG4gIC8vIFRBQiBEQVRBIEFQSVxuICAvLyA9PT09PT09PT09PT1cbiAgaW5pdGlhbGl6ZURhdGFBUEkoc3RyaW5nVGFiLCBUYWIsIGRhdGFUb2dnbGUpO1xuICBcbiAgXG4gIC8qIE5hdGl2ZSBKYXZhc2NyaXB0IGZvciBCb290c3RyYXAgMyB8IFRvb2x0aXBcbiAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbiAgXG4gIC8vIFRPT0xUSVAgREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT1cbiAgdmFyIFRvb2x0aXAgPSBmdW5jdGlvbiggZWxlbWVudCxvcHRpb25zICkge1xuICBcbiAgICAvLyBpbml0aWFsaXphdGlvbiBlbGVtZW50XG4gICAgZWxlbWVudCA9IHF1ZXJ5RWxlbWVudChlbGVtZW50KTtcbiAgXG4gICAgLy8gREFUQSBBUElcbiAgICB2YXIgYW5pbWF0aW9uRGF0YSA9IGVsZW1lbnRbZ2V0QXR0cmlidXRlXShkYXRhQW5pbWF0aW9uKTtcbiAgICAgICAgcGxhY2VtZW50RGF0YSA9IGVsZW1lbnRbZ2V0QXR0cmlidXRlXShkYXRhUGxhY2VtZW50KTtcbiAgICAgICAgZGVsYXlEYXRhID0gZWxlbWVudFtnZXRBdHRyaWJ1dGVdKGRhdGFEZWxheSksXG4gICAgICAgIGNvbnRhaW5lckRhdGEgPSBlbGVtZW50W2dldEF0dHJpYnV0ZV0oZGF0YUNvbnRhaW5lciksXG4gICAgICAgIFxuICAgICAgICAvLyBzdHJpbmdzXG4gICAgICAgIGNvbXBvbmVudCA9ICd0b29sdGlwJyxcbiAgICAgICAgY2xhc3NTdHJpbmcgPSAnY2xhc3MnLFxuICAgICAgICB0aXRsZSA9ICd0aXRsZScsXG4gICAgICAgIGZhZGUgPSAnZmFkZScsXG4gICAgICAgIGRpdiA9ICdkaXYnO1xuICBcbiAgICAvLyBzZXQgb3B0aW9uc1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIHRoaXNbYW5pbWF0aW9uXSA9IG9wdGlvbnNbYW5pbWF0aW9uXSAmJiBvcHRpb25zW2FuaW1hdGlvbl0gIT09IGZhZGUgPyBvcHRpb25zW2FuaW1hdGlvbl0gOiBhbmltYXRpb25EYXRhIHx8IGZhZGU7XG4gICAgdGhpc1twbGFjZW1lbnRdID0gb3B0aW9uc1twbGFjZW1lbnRdID8gb3B0aW9uc1twbGFjZW1lbnRdIDogcGxhY2VtZW50RGF0YSB8fCB0b3A7XG4gICAgdGhpc1tkZWxheV0gPSBwYXJzZUludChvcHRpb25zW2RlbGF5XSB8fCBkZWxheURhdGEpIHx8IDIwMDtcbiAgICB0aGlzW2NvbnRhaW5lcl0gPSBxdWVyeUVsZW1lbnQob3B0aW9uc1tjb250YWluZXJdKSB8fCBxdWVyeUVsZW1lbnQoY29udGFpbmVyRGF0YSkgfHwgYm9keTtcbiAgXG4gICAgLy8gYmluZCwgZXZlbnQgdGFyZ2V0cywgdGl0bGUgYW5kIGNvbnN0YW50c1xuICAgIHZhciBzZWxmID0gdGhpcywgdGltZXIgPSAwLCBwbGFjZW1lbnRTZXR0aW5nID0gdGhpc1twbGFjZW1lbnRdLCB0b29sdGlwID0gbnVsbCxcbiAgICAgIHRpdGxlU3RyaW5nID0gZWxlbWVudFtnZXRBdHRyaWJ1dGVdKHRpdGxlKSB8fCBlbGVtZW50W2dldEF0dHJpYnV0ZV0oZGF0YU9yaWdpbmFsVGl0bGUpO1xuICBcbiAgICBpZiAoICF0aXRsZVN0cmluZyApIHJldHVybjsgLy8gaW52YWxpZGF0ZVxuICBcbiAgICAvLyBwcml2YXRlIG1ldGhvZHNcbiAgICB2YXIgcmVtb3ZlVG9vbFRpcCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBzZWxmW2NvbnRhaW5lcl0ucmVtb3ZlQ2hpbGQodG9vbHRpcCk7XG4gICAgICAgIHRvb2x0aXAgPSBudWxsOyB0aW1lciA9IG51bGw7XG4gICAgICB9LFxuICAgICAgY3JlYXRlVG9vbFRpcCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aXRsZVN0cmluZyA9IGVsZW1lbnRbZ2V0QXR0cmlidXRlXSh0aXRsZSkgfHwgZWxlbWVudFtnZXRBdHRyaWJ1dGVdKGRhdGFPcmlnaW5hbFRpdGxlKTsgLy8gcmVhZCB0aGUgdGl0bGUgYWdhaW5cbiAgICAgICAgdG9vbHRpcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoZGl2KTtcbiAgICAgICAgdG9vbHRpcFtzZXRBdHRyaWJ1dGVdKCdyb2xlJyxjb21wb25lbnQpO1xuICBcbiAgICAgICAgdmFyIHRvb2x0aXBBcnJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoZGl2KSwgdG9vbHRpcElubmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChkaXYpO1xuICAgICAgICB0b29sdGlwQXJyb3dbc2V0QXR0cmlidXRlXShjbGFzc1N0cmluZywgY29tcG9uZW50KyctYXJyb3cnKTsgdG9vbHRpcElubmVyW3NldEF0dHJpYnV0ZV0oY2xhc3NTdHJpbmcsY29tcG9uZW50KyctaW5uZXInKTtcbiAgXG4gICAgICAgIHRvb2x0aXAuYXBwZW5kQ2hpbGQodG9vbHRpcEFycm93KTsgdG9vbHRpcC5hcHBlbmRDaGlsZCh0b29sdGlwSW5uZXIpO1xuICBcbiAgICAgICAgdG9vbHRpcElubmVyLmlubmVySFRNTCA9IHRpdGxlU3RyaW5nO1xuICBcbiAgICAgICAgc2VsZltjb250YWluZXJdLmFwcGVuZENoaWxkKHRvb2x0aXApO1xuICAgICAgICB0b29sdGlwW3NldEF0dHJpYnV0ZV0oY2xhc3NTdHJpbmcsIGNvbXBvbmVudCArICcgJyArIHBsYWNlbWVudFNldHRpbmcgKyAnICcgKyBzZWxmW2FuaW1hdGlvbl0pO1xuICAgICAgfSxcbiAgICAgIHVwZGF0ZVRvb2x0aXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHN0eWxlVGlwKGVsZW1lbnQsdG9vbHRpcCxwbGFjZW1lbnRTZXR0aW5nLHNlbGZbY29udGFpbmVyXSk7XG4gICAgICAgIGlmICghaXNFbGVtZW50SW5WaWV3cG9ydCh0b29sdGlwKSApIHsgXG4gICAgICAgICAgcGxhY2VtZW50U2V0dGluZyA9IHVwZGF0ZVBsYWNlbWVudChwbGFjZW1lbnRTZXR0aW5nKTsgXG4gICAgICAgICAgc3R5bGVUaXAoZWxlbWVudCx0b29sdGlwLHBsYWNlbWVudFNldHRpbmcsc2VsZltjb250YWluZXJdKTsgXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBzaG93VG9vbHRpcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgIWhhc0NsYXNzKHRvb2x0aXAsaW5DbGFzcykgJiYgKCBhZGRDbGFzcyh0b29sdGlwLGluQ2xhc3MpICk7XG4gICAgICB9O1xuICBcbiAgICAvLyBwdWJsaWMgbWV0aG9kc1xuICAgIHRoaXMuc2hvdyA9IGZ1bmN0aW9uKCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICAgIHRpbWVyID0gc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0b29sdGlwID09PSBudWxsKSB7XG4gICAgICAgICAgcGxhY2VtZW50U2V0dGluZyA9IHNlbGZbcGxhY2VtZW50XTsgLy8gd2UgcmVzZXQgcGxhY2VtZW50IGluIGFsbCBjYXNlc1xuICAgICAgICAgIGNyZWF0ZVRvb2xUaXAoKTtcbiAgICAgICAgICB1cGRhdGVUb29sdGlwKCk7XG4gICAgICAgICAgc2hvd1Rvb2x0aXAoKTtcbiAgICAgICAgICBib290c3RyYXBDdXN0b21FdmVudC5jYWxsKGVsZW1lbnQsIHNob3dFdmVudCwgY29tcG9uZW50KTtcbiAgICAgICAgICBlbXVsYXRlVHJhbnNpdGlvbkVuZCh0b29sdGlwLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGJvb3RzdHJhcEN1c3RvbUV2ZW50LmNhbGwoZWxlbWVudCwgc2hvd25FdmVudCwgY29tcG9uZW50KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSwgMjAgKTtcbiAgICB9O1xuICAgIHRoaXMuaGlkZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICAgIHRpbWVyID0gc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0b29sdGlwICYmIHRvb2x0aXAgIT09IG51bGwgJiYgaGFzQ2xhc3ModG9vbHRpcCxpbkNsYXNzKSkge1xuICAgICAgICAgIGJvb3RzdHJhcEN1c3RvbUV2ZW50LmNhbGwoZWxlbWVudCwgaGlkZUV2ZW50LCBjb21wb25lbnQpO1xuICAgICAgICAgIHJlbW92ZUNsYXNzKHRvb2x0aXAsaW5DbGFzcyk7XG4gICAgICAgICAgZW11bGF0ZVRyYW5zaXRpb25FbmQodG9vbHRpcCwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZW1vdmVUb29sVGlwKCk7XG4gICAgICAgICAgICBib290c3RyYXBDdXN0b21FdmVudC5jYWxsKGVsZW1lbnQsIGhpZGRlbkV2ZW50LCBjb21wb25lbnQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9LCBzZWxmW2RlbGF5XSk7XG4gICAgfTtcbiAgICB0aGlzLnRvZ2dsZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCF0b29sdGlwKSB7IHNlbGYuc2hvdygpOyB9IFxuICAgICAgZWxzZSB7IHNlbGYuaGlkZSgpOyB9XG4gICAgfTtcbiAgXG4gICAgLy8gaW5pdFxuICAgIGlmICggIShzdHJpbmdUb29sdGlwIGluIGVsZW1lbnQpICkgeyAvLyBwcmV2ZW50IGFkZGluZyBldmVudCBoYW5kbGVycyB0d2ljZVxuICAgICAgZWxlbWVudFtzZXRBdHRyaWJ1dGVdKGRhdGFPcmlnaW5hbFRpdGxlLHRpdGxlU3RyaW5nKTtcbiAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKHRpdGxlKTtcbiAgICAgIG9uKGVsZW1lbnQsIG1vdXNlSG92ZXJbMF0sIHRoaXMuc2hvdyk7XG4gICAgICBvbihlbGVtZW50LCBtb3VzZUhvdmVyWzFdLCB0aGlzLmhpZGUpO1xuICAgIH1cbiAgICBlbGVtZW50W3N0cmluZ1Rvb2x0aXBdID0gdGhpcztcbiAgfTtcbiAgXG4gIC8vIFRPT0xUSVAgREFUQSBBUElcbiAgLy8gPT09PT09PT09PT09PT09PT1cbiAgaW5pdGlhbGl6ZURhdGFBUEkoc3RyaW5nVG9vbHRpcCwgVG9vbHRpcCwgZGF0YVRvZ2dsZSk7XG4gIFxuICBcbiAgcmV0dXJuIHtcbiAgICBBZmZpeDogQWZmaXgsXG4gICAgQWxlcnQ6IEFsZXJ0LFxuICAgIEJ1dHRvbjogQnV0dG9uLFxuICAgIENhcm91c2VsOiBDYXJvdXNlbCxcbiAgICBDb2xsYXBzZTogQ29sbGFwc2UsXG4gICAgRHJvcGRvd246IERyb3Bkb3duLFxuICAgIE1vZGFsOiBNb2RhbCxcbiAgICBQb3BvdmVyOiBQb3BvdmVyLFxuICAgIFNjcm9sbFNweTogU2Nyb2xsU3B5LFxuICAgIFRhYjogVGFiLFxuICAgIFRvb2x0aXA6IFRvb2x0aXBcbiAgfTtcbn0pKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9ib290c3RyYXAubmF0aXZlL2Rpc3QvYm9vdHN0cmFwLW5hdGl2ZS5qc1xuLy8gbW9kdWxlIGlkID0gMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9